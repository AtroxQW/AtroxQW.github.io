<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常用的十种算法</title>
    <link href="/posts/2021/02/27/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/"/>
    <url>/posts/2021/02/27/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、二分查找算法（非递归）"><a class="header-anchor" href="#一、二分查找算法（非递归）">¶</a>一、二分查找算法（非递归）</h3><h4 id="1-基本介绍"><a class="header-anchor" href="#1-基本介绍">¶</a>1. 基本介绍</h4><ul><li><p>前面我们学习了二分查找算法，使用的是递归的方式，下面我们讲解二分查找算法的非递归方式。</p></li><li><p>二分查找法只适用于从有序的数列中进行查找（比如数组和字母等），将数列排序后再进行查找。</p></li><li><p>二分查找的运行时间为对数时间O(log<sub>2</sub>n)，即查找到需要的目标位置最多只需要log<sub>2</sub>n步。</p></li></ul><h4 id="2-代码实现"><a class="header-anchor" href="#2-代码实现">¶</a>2. 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二分查找非递归实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr 待查找数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> target 需要查找的数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回对应下标 ，-1表示未找到</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-keyword">int</span> mid  = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (arr[mid] == target) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &gt;target) &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="二、分治算法"><a class="header-anchor" href="#二、分治算法">¶</a>二、分治算法</h3><h4 id="1-基本介绍-v2"><a class="header-anchor" href="#1-基本介绍-v2">¶</a>1. 基本介绍</h4><ul><li><p>分治法是一种很重要的算法，字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题…直到最后子问题可以简单的直接求解。原问题的解即子问题的合并。这个技巧是很多高效算法的基础，例如排序算法（快速排序，归并排序），傅里叶变换…</p></li><li><p>分治算法可以求解的一些经典问题：</p><ul><li>二分搜索</li><li>大整数乘法</li><li>棋盘覆盖</li><li>合并排序</li><li>快速排序</li><li>线性时间选择</li><li>最接近点对问题</li><li>循环赛日程表</li><li>汉诺塔</li></ul></li></ul><h4 id="2-基本步骤"><a class="header-anchor" href="#2-基本步骤">¶</a>2.基本步骤</h4><p>分治法在每一层递归上都有三个步骤：</p><ol><li>分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题。</li><li>解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</li><li>合并：将各个子问题的解合并为原问题的解。</li></ol><h4 id="3-汉诺塔实现思路"><a class="header-anchor" href="#3-汉诺塔实现思路">¶</a>3. 汉诺塔实现思路</h4><ol><li><p>如果只有一个盘，A-&gt;C</p></li><li><p>如果我们有n&gt;=2的情况，我们总是可以看做两个盘，最下面的盘，和上面的所有盘。</p><p>2.1 先把最上面的盘A-&gt;B</p><p>2.2 把最下面的盘A-&gt;C</p><p>2.3 把B塔的所有盘B-&gt;C</p></li></ol><h4 id="4-代码"><a class="header-anchor" href="#4-代码">¶</a>4. 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hanoiTower</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">char</span> a, <span class="hljs-keyword">char</span> b, <span class="hljs-keyword">char</span> c)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果只有一个盘</span><br>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;第1个盘从&quot;</span> + a + <span class="hljs-string">&quot;-&gt;&quot;</span> + c);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果 n &gt;= 2，我们总是可以看做两个盘， 最下面的盘和上面的所有盘</span><br>        <span class="hljs-comment">// 先把上面所有的盘从 A-&gt;B</span><br>        hanoiTower(num-<span class="hljs-number">1</span>, a, c, b);<br>        <span class="hljs-comment">// 把最下面的盘 A-&gt;C</span><br>        System.out.println(<span class="hljs-string">&quot;第&quot;</span> + num + <span class="hljs-string">&quot;个盘从&quot;</span> + a + <span class="hljs-string">&quot;-&gt;&quot;</span> + c);<br>        <span class="hljs-comment">// 把B塔所有的盘移动到C</span><br>        hanoiTower(num - <span class="hljs-number">1</span>, b, a, c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-测试"><a class="header-anchor" href="#5-测试">¶</a>5.测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    hanoiTower(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">第<span class="hljs-number">1</span>个盘从A-&gt;C<br>第<span class="hljs-number">2</span>个盘从A-&gt;B<br>第<span class="hljs-number">1</span>个盘从C-&gt;B<br>第<span class="hljs-number">3</span>个盘从A-&gt;C<br>第<span class="hljs-number">1</span>个盘从B-&gt;A<br>第<span class="hljs-number">2</span>个盘从B-&gt;C<br>第<span class="hljs-number">1</span>个盘从A-&gt;C<br></code></pre></td></tr></table></figure><hr><h3 id="三、动态规划算法"><a class="header-anchor" href="#三、动态规划算法">¶</a>三、动态规划算法</h3><h4 id="1-引入-背包问题"><a class="header-anchor" href="#1-引入-背包问题">¶</a>1.引入-背包问题</h4><p>有一个背包，容量为4磅，现有如下物品。</p><table><thead><tr><th style="text-align:center">物品</th><th style="text-align:center">重量（磅）</th><th style="text-align:center">价格</th></tr></thead><tbody><tr><td style="text-align:center">吉他（G）</td><td style="text-align:center">1</td><td style="text-align:center">1500</td></tr><tr><td style="text-align:center">音响（S）</td><td style="text-align:center">4</td><td style="text-align:center">3000</td></tr><tr><td style="text-align:center">电脑（L）</td><td style="text-align:center">3</td><td style="text-align:center">2000</td></tr></tbody></table><p>（1）要求达到的目标为装入的背包的总价值最大，并且重量不超出。</p><p>（2）要求装入的物品不能重复。</p><h4 id="2-算法介绍"><a class="header-anchor" href="#2-算法介绍">¶</a>2. 算法介绍</h4><ul><li>动态规划（Dynamic Programming）算法的核心思想是：将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法。</li><li>动态规划算法和分治算法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</li><li>与分治法不同的事，<strong>适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的</strong>。（即下一子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）</li><li>动态规划可以通过<strong>填表的方式</strong>来逐步推进，得到最优解</li></ul><h4 id="3-思路分析"><a class="header-anchor" href="#3-思路分析">¶</a>3. 思路分析</h4><ul><li><p>背包问题主要是指一个给定容量的背包，若干具有一定价值和重量的物体，如何选择物品放入背包使物品的价值最大。其中又分01背包和完全背包（完全背包指的是：每种物品都有无限件可以用）</p></li><li><p>这里的问题属于01背包，即每个物品最多放一个，而无限背包可以转化成01背包。</p></li><li><p>算法的主要思想，利用动态规划来解决。即对于给定的n个物品，设v[i]，w[i]分别为第i个物品的价值和重量，C为背包的容量。每次遍历到的第i个物品，根据w[i]和v[i]来确定是否需要将物品放入背包中。再令v[i][j]表示在前i个物品中能够装入容量为j(动态变化)的背包的最大价值。则有下面的结果：</p><ol><li><code>v[i][0] = v[0][j] = 0  </code>，表示填入表第一行和第一列是0 。</li><li>当<code>w[i] &gt;　ｊ</code>时，<code>v[i][j] = v[i-1][j]</code>，当准备加入新增商品i时，如果它的重量大于当前背包容量，就直接使用上一个单元格的装入背包策略。</li><li>当<code>j &gt;= w[i]</code>时，<code>v[i][j] = max&#123;v[i-1][j], v[i-1][j-w[i]] + v[i]&#125;</code>，当准备加入新增的商品i的重量大于等于当前背包容量，装入的策略为求**【上一个单元格的价值】<strong>和</strong>【当前商品的价值 + 剩余空间装入物品的策略的价值】**二者的最大值。</li></ol></li></ul><h4 id="4-填表过程"><a class="header-anchor" href="#4-填表过程">¶</a>4. 填表过程</h4><p>解决类似的问题可以分解成一个个小的问题来解决，假设存在背包容量大小分为1、2、3、4的各种容量的背包（分配容量的规则为最小重量的整数倍），观察存放物品后的<strong>价值</strong>。背包容量C = 4</p><table><thead><tr><th style="text-align:center">物品</th><th style="text-align:center">重量（磅）</th><th style="text-align:center">价格</th></tr></thead><tbody><tr><td style="text-align:center">吉他（G）</td><td style="text-align:center">1</td><td style="text-align:center">1500</td></tr><tr><td style="text-align:center">音响（S）</td><td style="text-align:center">4</td><td style="text-align:center">3000</td></tr><tr><td style="text-align:center">电脑（L）</td><td style="text-align:center">3</td><td style="text-align:center">2000</td></tr></tbody></table><p>根据背包填表：</p><table><thead><tr><th>物品</th><th>0磅</th><th>1磅</th><th>2磅</th><th>3磅</th><th>4磅</th></tr></thead><tbody><tr><td>无物品</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>吉他（G）</td><td>0</td><td>1500（G）</td><td>1500（G）</td><td>1500（G）</td><td>1500（G）</td></tr><tr><td>音响（S）</td><td>0</td><td>1500（G）</td><td>1500（G）</td><td>1500（G）</td><td>3000（S）</td></tr><tr><td>电脑（L）</td><td>0</td><td>1500（G）</td><td>1500（G）</td><td>2000（L）</td><td>4500（G、S）</td></tr></tbody></table><ol><li>假设现在只有吉他（G），这时不管背包容量多大，只能放一个吉他1500(G)</li><li>假如现在有吉他和音响，在1、2、3磅的时候都不能放入音响，只能顺着上面复制下来，4磅的时候可以放入一个音响价值3000大于上面的1500</li><li>假如现在有吉他、音响和电脑，在1、2磅时都不能放入电脑，只能顺着上面复制下来，3磅时可以放入电脑价值2000大于上面的1500，在4磅的时候可以放入电脑，此时剩余1磅容量，可以放入吉他加起来价值4500大于上面的3000.</li></ol><h4 id="5-代码"><a class="header-anchor" href="#5-代码">¶</a>5. 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 背包问题</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-28 9:01</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KnapsackProblem</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 物品的重量</span><br>    <span class="hljs-keyword">int</span>[] w = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-comment">// 物品的价值</span><br>    <span class="hljs-keyword">int</span>[] val = &#123;<span class="hljs-number">1500</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">2000</span>&#125;;<br>    <span class="hljs-comment">// 背包的容量</span><br>    <span class="hljs-keyword">int</span> m = <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 物品的个数</span><br>    <span class="hljs-keyword">int</span> n = val.length;<br><br>    <span class="hljs-comment">// 创建二维数组，v[i][j]表示前i个物品中能够装入容量为j的背包的最大价值</span><br>    <span class="hljs-keyword">int</span>[][] v= <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">1</span>][m + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-comment">// 为了记录放入商品的情况，我们定义一个二维数组</span><br>    <span class="hljs-keyword">int</span>[][] path = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">1</span>][m + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-comment">// 初始化第一行和第一列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v.length; i++) &#123;<br>      v[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v[<span class="hljs-number">0</span>].length; i++) &#123;<br>      v[<span class="hljs-number">0</span>][i] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据前面的公式来动态规划</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; v.length; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; v[<span class="hljs-number">0</span>].length; j++) &#123;<br>        <span class="hljs-keyword">if</span> (w[i - <span class="hljs-number">1</span>] &gt; j) &#123;<br>          v[i][j] = v[i-<span class="hljs-number">1</span>][j];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 因为我们的 i 时从1开始的，因此公式需要调整为下面的公式</span><br>          <span class="hljs-comment">// v[i][j] = Math.max(v[i-1][j], val[i-1] + v[i-1][j-w[i-1]]);</span><br>          <span class="hljs-comment">// 为了记录商品存在到背包情况，我们不能直接使用上面的公式</span><br>          <span class="hljs-keyword">if</span> (v[i-<span class="hljs-number">1</span>][j] &lt; val[i-<span class="hljs-number">1</span>] + v[i-<span class="hljs-number">1</span>][j-w[i-<span class="hljs-number">1</span>]]) &#123;<br>            v[i][j] = val[i-<span class="hljs-number">1</span>] + v[i-<span class="hljs-number">1</span>][j-w[i-<span class="hljs-number">1</span>]];<br>            path[i][j] = <span class="hljs-number">1</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            v[i][j] = v[i-<span class="hljs-number">1</span>][j];<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 输出一下v，看看目前情况</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v.length; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v[i].length; j++) &#123;<br>        System.out.print(v[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>      &#125;<br>      System.out.println();<br>    &#125;<br><br>    <span class="hljs-comment">// 输出最后我们放入了哪些物品</span><br>    <span class="hljs-comment">// 行的最大下标、列的最大下表</span><br>    <span class="hljs-keyword">int</span> i = path.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> j = path[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; j &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (path[i][j] == <span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;第&quot;</span> + i + <span class="hljs-string">&quot;个商品放入到背包&quot;</span>);<br>        <span class="hljs-comment">// 背包容量要减去刚才放入的物品质量</span><br>        j -= w[i-<span class="hljs-number">1</span>];<br>      &#125;<br>      i--;<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <br><span class="hljs-number">0</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <br><span class="hljs-number">0</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">3000</span> <br><span class="hljs-number">0</span> <span class="hljs-number">1500</span> <span class="hljs-number">1500</span> <span class="hljs-number">2000</span> <span class="hljs-number">3500</span> <br>第<span class="hljs-number">3</span>个商品放入到背包<br>第<span class="hljs-number">1</span>个商品放入到背包<br></code></pre></td></tr></table></figure><hr><h3 id="四、KMP算法"><a class="header-anchor" href="#四、KMP算法">¶</a>四、KMP算法</h3><h4 id="1-应用场景"><a class="header-anchor" href="#1-应用场景">¶</a>1. 应用场景</h4><p>字符串匹配问题：</p><p>（1）有一个字符串 str1 = “亚托克斯 克斯克斯 从神明沦为囚徒 数千个太阳的光芒”，和另一个字串 str2 = &quot;从神明沦为囚徒 &quot;。</p><p>（2）现在要判断str1是否含有str2，如果存在，就返回第一次出现的位置，如果不存在返回-1</p><h4 id="2-暴力匹配算法"><a class="header-anchor" href="#2-暴力匹配算法">¶</a>2. 暴力匹配算法</h4><p>如果用暴力匹配的思路，并假设现在str1匹配到i位置，字串str2匹配到j位置，则有：</p><ol><li>如果当前字符匹配成功（即str1[i] == str2[j]），则i++，j++，继续匹配下一个字符。</li><li>如果该下一个字符匹配失败（即str1[i] != str2[j]），令 i = i - (j - 1)， j = 0  ，相当于每次匹配失败时，i回溯，j被置为0。</li><li>用暴力方法解决的话就会有大量的回溯，每次只移动一位，若是不匹配，移动到下一位接着判断，浪费了大量的时间。</li></ol><h4 id="3-暴力匹配算法实现"><a class="header-anchor" href="#3-暴力匹配算法实现">¶</a>3. 暴力匹配算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 暴力匹配算法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">violenceMatch</span><span class="hljs-params">(String str1, String str2)</span> </span>&#123;<br>    <span class="hljs-keyword">char</span>[] s1 = str1.toCharArray();<br>    <span class="hljs-keyword">char</span>[] s2 = str2.toCharArray();<br><br>    <span class="hljs-keyword">int</span> s1Len = s1.length;<br>    <span class="hljs-keyword">int</span> s2Len = s2.length;<br><br>    <span class="hljs-comment">// i、j索引指向 s1 和 s2</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (i &lt; s1Len &amp;&amp; j &lt; s2Len) &#123;<br>        <span class="hljs-keyword">if</span> (s1[i] == s2[j]) &#123;<br>            i++;<br>            j++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = i - (j - <span class="hljs-number">1</span>);<br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 判断是否匹配成功</span><br>    <span class="hljs-keyword">if</span> (j == s2Len) &#123;<br>        <span class="hljs-keyword">return</span> i - j;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-KMP算法介绍"><a class="header-anchor" href="#4-KMP算法介绍">¶</a>4. KMP算法介绍</h4><ol><li>KMP时一个解决模式串在文本串是否出现过，如果出现过，得到最早出现位置的经典算法。</li><li>Knuth-Morris-Pratt字符串查找算法，简称”KMP算法“，常用于在一个文本串S内查找一个模式串P的出现位置，这个算法由该3人于1977年联合发表，故取这3人的姓氏命名此算法。</li><li>KMP算法就是利用之前判断过的信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间。</li><li>推荐博客：<a href="https://www.cnblogs.com/zzuuoo666/p/9028287.html">https://www.cnblogs.com/zzuuoo666/p/9028287.html</a></li></ol><h4 id="5-思路分析"><a class="header-anchor" href="#5-思路分析">¶</a>5. 思路分析</h4><p>举例来说，有一个字符串str1 = “BBC ABCDAB ABCDABCDABDE”，判断，里面是否包含另一个字符串str2 = “ABCDABD”？</p><ol><li><p>首先，用str1的第一个字符与str2的第一个字符去比较，不符合，关键词向后移动一位。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/1.jpg" style="zoom:80%;"></li><li><p>重复第一步，还是不符合，再后移。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/2.jpg" style="zoom:80%;"></li><li><p>一直重复，直到 str1 有一个字符与 str2 的第一个字符符合为止。</p></li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/3.jpg" style="zoom:80%;"><ol start="4"><li>接着比较字符串和搜索词的下一个字符，还是符合。</li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/4.jpg" style="zoom:80%;"><ol start="5"><li><p>遇到 str1 有一个字符与 str2 对应的字符不符合。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/5.jpg" style="zoom:80%;"></li><li><p>这时候，想到的是继续遍历 str1 的下一个字符，重复第一步，（其实是很不明智的，因为此时BCD已经比较过了肯定和A不相同，没有必要再做重复的工作）。一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符时“ABCDAB”。KMP算法的思想时，设法利用这个已知信息，不要把“搜索位置”移回已经比较过的位置，继续把它往后移，这样提高效率。</p></li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/6.jpg" style="zoom:80%;"><ol start="7"><li><p>怎么做到把刚刚重复的步骤省略掉？可以对 str2 计算出一张《部分匹配表》，这张表的产生在后面介绍。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/7.jpg" style="zoom:80%;"></li><li><p>已知空格与 D 不匹配时，前面六个字符’ABCDAB’是匹配的。查表可知，最后一个匹配字符 B 对应的“部分匹配值”为2，因此按照下面的公式算出向后移动的位数：</p><p>移动位数 = 已匹配的字符数 - 对应的部分匹配值，因为 6 - 2 = 4，所以将搜索词向后移动 4 位 。</p></li><li><p>因为空格与C不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（“AB”），对应的”部分匹配值“为0。所以，移动位数 = 2  - 0 = 2，于是将搜索词向后移动2位。</p></li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/8.jpg" style="zoom:80%;"><ol start="10"><li>因为空格与 A 不匹配，继续后移一位。</li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/9.jpg" style="zoom:80%;"><ol start="11"><li>逐位比较，直到发现最后一位 C 与 D 不匹配。于是，移动位数 =  6 - 2 = 4，继续将搜索词向后移动4位。</li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/10.jpg" style="zoom:80%;"><ol start="12"><li>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0 = 7，再将搜索词向后移动7位，这里就不再重复了。</li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/11.jpg" style="zoom:80%;"><ol start="13"><li><p>介绍《部分匹配表》是怎么产生的。</p><ul><li>A”的前缀和后缀都为空集，共有元素的长度为0；</li><li>”AB”的前缀为[A]，后缀为[B]，共有元素的长度为0；</li></ul><p>先介绍前缀、后缀是什么：</p></li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/12.jpg" style="zoom:80%;"><p>​<strong>“部分匹配值”就是“前缀”和“后缀”的最长的共有元素的长度</strong>。以“ABCDABD”为例：</p><ul><li><p>A”的前缀和后缀都为空集，共有元素的长度为0；</p></li><li><p>”AB”的前缀为[A]，后缀为[B]，共有元素的长度为0；</p></li><li><p>”AB”的前缀为[A]，后缀为[B]，共有元素的长度为0；</p></li><li><p>”ABC”的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</p></li><li><p>”ABCD”的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</p></li><li><p>”ABCDA”的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为”A”，长度为1；</p></li><li><p>”ABCDAB”的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为”AB”，长度为2；</p></li><li><p>”ABCDABD”的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</p></li></ul><p>​</p><h4 id="6-代码实现"><a class="header-anchor" href="#6-代码实现">¶</a>6.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> KMP算法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-28 15:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KMPAlgorithm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str1 = <span class="hljs-string">&quot;BBC ABCDAB ABCDABCDABDE&quot;</span>;<br>        String str2 = <span class="hljs-string">&quot;ABCDABD&quot;</span>;<br>        <span class="hljs-keyword">int</span>[] next = kmpNext(str2);<br>        System.out.println(Arrays.toString(next));<br>        System.out.println(kmpSearch(str1, str2, next));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * KMP搜索算法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str1 源字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str2 字串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> next 字串对应的部分匹配值表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 匹配到第一次出现位置，没匹配到返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kmpSearch</span><span class="hljs-params">(String str1, String str2, <span class="hljs-keyword">int</span>[] next)</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; str1.length(); i++) &#123;<br><br>            <span class="hljs-comment">// 处理不匹配的情况，调整 j 的大小</span><br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; str1.charAt(i) != str2.charAt(j)) &#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (str1.charAt(i) == str2.charAt(j)) &#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j == str2.length()) &#123;<br>                <span class="hljs-keyword">return</span> i - j + <span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取字串的部分匹配值表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] kmpNext(String dest) &#123;<br><br>        <span class="hljs-comment">// 创建一个 next 数组保存部分匹配值</span><br>        <span class="hljs-keyword">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[dest.length()];<br>        <span class="hljs-comment">// 如果字符串长度为 1，其部分匹配值为 0</span><br>        next[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt; dest.length(); i++) &#123;<br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; dest.charAt(i) != dest.charAt(j)) &#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dest.charAt(i) == dest.charAt(j)) &#123;<br>                j++;<br>            &#125;<br>            next[i] = j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> next;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>]<br><span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><hr><h3 id="五、贪心算法"><a class="header-anchor" href="#五、贪心算法">¶</a>五、贪心算法</h3><h4 id="1-应用场景-v2"><a class="header-anchor" href="#1-应用场景-v2">¶</a>1.应用场景</h4><p>假设存在下面需要付费的广播台，以及广播台信号可以覆盖的地区。<strong>如何选择最少的广播台，让所有的地区都可以接收到信号。</strong></p><table><thead><tr><th style="text-align:center">广播台</th><th style="text-align:center">覆盖地区</th></tr></thead><tbody><tr><td style="text-align:center">k1</td><td style="text-align:center">北京、上海、天津</td></tr><tr><td style="text-align:center">k2</td><td style="text-align:center">广州、北京、深圳</td></tr><tr><td style="text-align:center">k3</td><td style="text-align:center">成都、上海、杭州</td></tr><tr><td style="text-align:center">k4</td><td style="text-align:center">上海、天津</td></tr><tr><td style="text-align:center">k5</td><td style="text-align:center">杭州、大连</td></tr></tbody></table><h4 id="2-算法介绍-v2"><a class="header-anchor" href="#2-算法介绍-v2">¶</a>2.算法介绍</h4><ol><li>贪心算法是指在对问题进行求解的时候，在每一步选择中都采取最好或者最优的选择，从而希望能够导致结果时最好或最优的算法。</li><li>贪心算法得到的结果<strong>不一定是最优的结果（有时候是最优解）</strong>，但是都是相对近似最优解的结果。</li></ol><h4 id="3-思路分析-v2"><a class="header-anchor" href="#3-思路分析-v2">¶</a>3.思路分析</h4><p>如何找出覆盖所有地区的广播台的集合呢？首先考虑用穷举法实现，列出每个可能的广播台的集合，这被称为幂集。假设总的有 n 个 广播台，则广播台的组合总共有 2<sup>n</sup> - 1个，假设每秒可以计算10个子集，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/13.jpg" alt></p><p>使用贪心算法，效率较高。</p><p>目前并没有算法可以快速计算得到准备的值，使用贪心算法，则可以得到非常接近的解，并且效率高。选择策略上，因为需要覆盖全部地区的最小集合：</p><ol><li>遍历所有的广播电台，找到一个覆盖了最多未覆盖的地区的电台（此电台可能包含一些已覆盖的地区，但没有关系）</li><li>将这个电台加入到一个集合中，想办法把该电台覆盖的地区在下次比较时去掉。</li><li>重复第 1 步直到覆盖了全部地区。</li></ol><h4 id="4-代码实现"><a class="header-anchor" href="#4-代码实现">¶</a>4.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 贪心算法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-28 16:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreedyAlgorithm</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 创建广播电台，放入 Map</span><br>    HashMap&lt;String, HashSet&lt;String&gt;&gt; broadcasts = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// 将各个电台放入到 broadcasts</span><br>    HashSet&lt;String&gt; hashSet1 = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>    hashSet1.add(<span class="hljs-string">&quot;北京&quot;</span>);<br>    hashSet1.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>    hashSet1.add(<span class="hljs-string">&quot;天津&quot;</span>);<br>    HashSet&lt;String&gt; hashSet2 = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>    hashSet2.add(<span class="hljs-string">&quot;广州&quot;</span>);<br>    hashSet2.add(<span class="hljs-string">&quot;北京&quot;</span>);<br>    hashSet2.add(<span class="hljs-string">&quot;深圳&quot;</span>);<br>    HashSet&lt;String&gt; hashSet3 = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>    hashSet3.add(<span class="hljs-string">&quot;成都&quot;</span>);<br>    hashSet3.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>    hashSet3.add(<span class="hljs-string">&quot;杭州&quot;</span>);<br>    HashSet&lt;String&gt; hashSet4 = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>    hashSet4.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>    hashSet4.add(<span class="hljs-string">&quot;天津&quot;</span>);<br>    HashSet&lt;String&gt; hashSet5 = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>    hashSet5.add(<span class="hljs-string">&quot;杭州&quot;</span>);<br>    hashSet5.add(<span class="hljs-string">&quot;大连&quot;</span>);<br><br>    <span class="hljs-comment">// 加入到map</span><br>    broadcasts.put(<span class="hljs-string">&quot;k1&quot;</span>, hashSet1);<br>    broadcasts.put(<span class="hljs-string">&quot;k2&quot;</span>, hashSet2);<br>    broadcasts.put(<span class="hljs-string">&quot;k3&quot;</span>, hashSet3);<br>    broadcasts.put(<span class="hljs-string">&quot;k4&quot;</span>, hashSet4);<br>    broadcasts.put(<span class="hljs-string">&quot;k5&quot;</span>, hashSet5);<br><br>    <span class="hljs-comment">// allAreas 存放需要覆盖的所有地区</span><br>    HashSet&lt;String&gt; allAreas = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>    allAreas.add(<span class="hljs-string">&quot;北京&quot;</span>);<br>    allAreas.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>    allAreas.add(<span class="hljs-string">&quot;天津&quot;</span>);<br>    allAreas.add(<span class="hljs-string">&quot;广州&quot;</span>);<br>    allAreas.add(<span class="hljs-string">&quot;深圳&quot;</span>);<br>    allAreas.add(<span class="hljs-string">&quot;成都&quot;</span>);<br>    allAreas.add(<span class="hljs-string">&quot;杭州&quot;</span>);<br>    allAreas.add(<span class="hljs-string">&quot;大连&quot;</span>);<br><br>    <span class="hljs-comment">// 创建 ArrayList 存放选择的电台集合</span><br>    ArrayList&lt;String&gt; selects = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br><br>    <span class="hljs-comment">// 定义一个临时的集合，在遍历的过程中，存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集</span><br>    HashSet&lt;String&gt; tempSet = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br><br>    <span class="hljs-comment">// 定义 maxKey，保存在一次遍历过程中能够覆盖最多未覆盖的地区对应的电台的key，如果 maxkey 不为空，加入 selects</span><br>    String maxKey = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">while</span> (allAreas.size() != <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 每次循环清空 maxKey 和 tempSet</span><br>      maxKey = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-comment">// 遍历 broadcasts，取出对应的 key</span><br>      <span class="hljs-keyword">for</span> (String key : broadcasts.keySet()) &#123;<br>        tempSet.clear();<br>        <span class="hljs-comment">// 当前 key 覆盖地区集合</span><br>        HashSet&lt;String&gt; areas = broadcasts.get(key);<br>        tempSet.addAll(areas);<br>        <span class="hljs-comment">// 求出 tempSet 和 allAreas 集合的交集，赋给 tempSet</span><br>        tempSet.retainAll(allAreas);<br>        <span class="hljs-comment">// 如果当前 maxKey 为空或这个集合包含的未覆盖的地区比 maxKey 指向的集合的未覆盖地区还多，将 maxKey 指向它</span><br>        <span class="hljs-keyword">if</span> (tempSet.size() &gt; <span class="hljs-number">0</span> &amp;&amp; (maxKey == <span class="hljs-keyword">null</span> || tempSet.size() &gt; intersection(broadcasts.get(maxKey), allAreas).size())) &#123;<br>          maxKey = key;<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// maxKey 不为空，就将 maxKey 加入 selects</span><br>      <span class="hljs-keyword">if</span> (maxKey != <span class="hljs-keyword">null</span>) &#123;<br>        selects.add(maxKey);<br>        <span class="hljs-comment">// 将 maxKey 指向的广播电台覆盖的地区，从 allAreas 中移除</span><br>        allAreas.removeAll(intersection(broadcasts.get(maxKey), allAreas));<br>      &#125;<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;得到的选择结果：&quot;</span> + selects);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 两个集合求交集的方法</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashSet&lt;String&gt; <span class="hljs-title">intersection</span><span class="hljs-params">(HashSet&lt;String&gt; hashSet1, HashSet&lt;String&gt; hashSet2)</span> </span>&#123;<br>    hashSet1.retainAll(hashSet2);<br>    <span class="hljs-keyword">return</span> hashSet1;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">得到的选择结果：[k1, k2, k3, k5]<br></code></pre></td></tr></table></figure><hr><h3 id="六、普里姆-Prime-算法"><a class="header-anchor" href="#六、普里姆-Prime-算法">¶</a>六、普里姆(Prime)算法</h3><h4 id="1-应用场景-v3"><a class="header-anchor" href="#1-应用场景-v3">¶</a>1.应用场景</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/14.jpg" style="zoom:80%;"><ul><li><p>若某个地区有7个城市（A， B，C，D，E，F，G），现在需要修路把这 7  个城市连通。</p></li><li><p>各个城市的距离用边线表示（权），比如 A-B 距离 5 公里。</p></li><li><p>问：如何修路保证各个城市都能连通，并且修建公路的总里程最短？（求上图的最小生成树）</p></li></ul><h4 id="2-最小生成树"><a class="header-anchor" href="#2-最小生成树">¶</a>2.最小生成树</h4><p>修路问题本质上就是最小生成树问题，先介绍一下最小生成树（Minimum Cost Spanning Tree），简称MST。</p><ol><li>给定一个带权的无向连通图，如何选取一棵生成树，使树上所有边权值总和最小，这叫最小生成树。</li><li>N 个定点，一定由 N-1 条边。</li><li>包含全部顶点。</li><li>N-1 条边都在图中。</li><li>去最小生成树的算法主要是 <strong>普里姆算法</strong> 和 <strong>克里斯卡尔算法</strong> 。</li></ol><h4 id="3-算法介绍"><a class="header-anchor" href="#3-算法介绍">¶</a>3.算法介绍</h4><ol><li><p>普利姆算法求最小生成树，也就是在包含 n 个顶点的连通图中，找出只有 n-1 条边包含所有 n 个顶点的连通子图，也就是所谓的<strong>极小连通子图</strong>。</p></li><li><p>算法过程如下：</p><p>1️⃣ 设G = (V，E)是连通网，V 是 连通网的顶点集合， E 是连通网的边的集合。</p><p>2️⃣ 设T = (U，D)为要得到的最小生成树，U 是 最小生成树顶点的集合，D最小生成树的边的集合。</p><p>3️⃣ 算法从 U = {u<sub>0</sub>}，D = {}，算法从 U 一个顶点 u<sub>0</sub>开始，这时候边集 D 为空。</p><p>4️⃣ 若从顶点 u 开始构造最小生成树，则从集合 V-U 中取出顶点 u 放入集合U中，并标记顶点 v 的 visited[u] = 1 ，表示已经访问过放入到了集合 U 中。</p><p>5️⃣ 紧接着，若集合 U 中的顶点 u<sub>i</sub> 与集合 V-U 中顶点 v<sub>j</sub> 之间存在边，则寻找这些边中权值最小的边(u<sub>i</sub> ,v<sub>j</sub> )，但是要求不能够构成回路。找到符合要求这条权值最小的边后，将这条边放入到集合 D 中，标记visited[v<sub>j</sub>] = 1，表示 v<sub>j</sub> 这个顶点已经访问过放入到了集合 U 中。</p><p>6️⃣ 重复步骤 5 ，直到不断往 U中 添加顶点使得 U = V，即所有的顶点都被标记并访问过，此时 D 有 n - 1条边。</p></li></ol><h4 id="4-算法图解"><a class="header-anchor" href="#4-算法图解">¶</a>4. 算法图解</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/1.png" alt="图解"></p><h4 id="5-代码实现"><a class="header-anchor" href="#5-代码实现">¶</a>5. 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 普里姆算法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-28 19:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrimeAlgorithm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">int</span> verxs = data.length;<br>        <span class="hljs-keyword">int</span>[][] weight = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>            &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">2</span>&#125;,<br>            &#123;<span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">3</span>&#125;,<br>            &#123;<span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>&#125;,<br>            &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10000</span>&#125;,<br>            &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;,<br>            &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10000</span>&#125;&#125;;<br><br>        <span class="hljs-comment">// 创建 MGraph 对象</span><br>        MGraph graph = <span class="hljs-keyword">new</span> MGraph(verxs);<br>        <span class="hljs-comment">// 创建一个 MinTree 对象</span><br>        MinTree minTree = <span class="hljs-keyword">new</span> MinTree();<br>        minTree.createGraph(graph, verxs, data, weight);<br>        minTree.showGraph(graph);<br>        minTree.prime(graph, <span class="hljs-number">0</span>);<br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最小生成树类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinTree</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建图的邻接矩阵</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> graph 图对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> verxs 图对应的顶点个数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 图的各个顶点的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> weight 图的邻接矩阵</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createGraph</span><span class="hljs-params">(MGraph graph, <span class="hljs-keyword">int</span> verxs, <span class="hljs-keyword">char</span>[] data, <span class="hljs-keyword">int</span>[][] weight)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i, j;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; verxs; i++) &#123;<br>            graph.data[i] = data[i];<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; verxs; j++) &#123;<br>                graph.weight[i][j] = weight[i][j];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示图</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showGraph</span><span class="hljs-params">(MGraph graph)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] link: graph.weight) &#123;<br>            System.out.println(Arrays.toString(link));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * prime 算法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> graph 图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v 表示从图的第几个顶点开始生成</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prime</span><span class="hljs-params">(MGraph graph, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br><br>        <span class="hljs-comment">// 结点访问标记数组，元素为0默认未被访问</span><br>        <span class="hljs-keyword">int</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[graph.verxs];<br><br>        <span class="hljs-comment">// 把当前结点标记为已访问</span><br>        visited[v] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// h1 h2 记录两个顶点的下标</span><br>        <span class="hljs-keyword">int</span> h1 = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> h2 = -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 将 minWeight 初始为一个大数，后面遍历过程中会被替换</span><br>        <span class="hljs-keyword">int</span> minWeight = <span class="hljs-number">10000</span>;<br>        <span class="hljs-comment">// 获得 k - 1 条边，所以 k - 1 此循环找最小边</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt; graph.verxs; k++) &#123;<br>            <span class="hljs-comment">//  确定每一次生成的子图和哪个结点的距离最近</span><br>            <span class="hljs-comment">// visited[i] 表示被访问的结点  visited[j] 表示未被访问的结点  graph.weight[i][j]为该边的权值</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.verxs; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; graph.verxs; j++) &#123;<br>                    <span class="hljs-comment">// 寻找权值最小的边</span><br>                    <span class="hljs-keyword">if</span> (visited[i] == <span class="hljs-number">1</span> &amp;&amp; visited[j] == <span class="hljs-number">0</span> &amp;&amp; graph.weight[i][j] &lt; minWeight) &#123;<br>                        minWeight = graph.weight[i][j];<br>                        <span class="hljs-comment">// 保存边的两个结点信息</span><br>                        h1 = i;<br>                        h2 = j;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;边&lt;&quot;</span>+graph.data[h1] + <span class="hljs-string">&quot;,&quot;</span> + graph.data[h2] + <span class="hljs-string">&quot;&gt; 权值：&quot;</span> + minWeight);<br>            <span class="hljs-comment">// 将这个结点标记为已访问</span><br>            visited[h2] = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// minWeight 重新设置</span><br>            minWeight = <span class="hljs-number">10000</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 图的邻接矩阵存储</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MGraph</span> </span>&#123;<br><br>    <span class="hljs-comment">// 节点个数</span><br>    <span class="hljs-keyword">int</span> verxs;<br>    <span class="hljs-comment">// 存放顶点数据</span><br>    <span class="hljs-keyword">char</span>[] data;<br>    <span class="hljs-comment">// 存放边，邻接矩阵</span><br>    <span class="hljs-keyword">int</span>[][] weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MGraph</span><span class="hljs-params">(<span class="hljs-keyword">int</span> verxs)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.verxs = verxs;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[verxs];<br>        weight = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[verxs][verxs];<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">2</span>]<br>[<span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">3</span>]<br>[<span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>]<br>[<span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10000</span>]<br>[<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>]<br>[<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">6</span>]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10000</span>]<br>边&lt;A,G&gt; 权值：<span class="hljs-number">2</span><br>边&lt;G,B&gt; 权值：<span class="hljs-number">3</span><br>边&lt;G,E&gt; 权值：<span class="hljs-number">4</span><br>边&lt;E,F&gt; 权值：<span class="hljs-number">5</span><br>边&lt;F,D&gt; 权值：<span class="hljs-number">4</span><br>边&lt;A,C&gt; 权值：<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><hr><h3 id="七、克鲁斯卡尔-Kruskal-算法"><a class="header-anchor" href="#七、克鲁斯卡尔-Kruskal-算法">¶</a>七、克鲁斯卡尔(Kruskal)算法</h3><h4 id="1-应用场景-v4"><a class="header-anchor" href="#1-应用场景-v4">¶</a>1.应用场景</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/16.jpg" alt="场景"></p><ol><li><p>某城市新增 7 个站点（A，B，C，D，E，F，G），现在需要修路将7个站点连通。</p></li><li><p>各个站点之间的距离用边线表示（权），比如 A-B 距离12公里。</p></li><li><p>如何修路保证各个站点都能连通，且总的公路里程数最短？</p></li></ol><h4 id="2-算法介绍-v3"><a class="header-anchor" href="#2-算法介绍-v3">¶</a>2.算法介绍</h4><ol><li><p>克鲁斯卡尔算法，是用来求加权连通图的最小生成树的算法。</p></li><li><p>基本思想：按照权值从大到小的顺序选择 n - 1 条边，并保证这 n - 1 条边不构成回路。</p></li><li><p>具体做法：首先构造一个只含 n 个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直到森林变成一棵树为止。</p></li><li><p>算法过程如下：</p><p>1️⃣ 假设联通网 N = {V, E}最小生成树的初始状态为<strong>只有 n 个顶点而无边</strong>的非连通图 T = (V, {})。</p><p>2️⃣ 在 E 中选择代价最小的边，如果加入这条边不会构成回路，则将此边加入 T 中；如果加入这条边会构成回路，则舍弃这条边而选择下一条代价最小的边。</p><p>3️⃣以此类推，直到 T 的所有顶点都在同一个连通分量上为止。</p></li><li><p><strong>克鲁斯卡尔算法需要解决的问题</strong>：</p><ul><li>对图的所有边按照权值大小排序</li><li>将边添加到最小生成树中时，怎样判断是否形成了回路？</li></ul></li><li><p><strong>解决问题思路</strong>：</p><ul><li>采用排序算法进行排序即可。</li><li>判断是否构成回路：记录顶点在“最小生成树”中的终点，顶点的终点时“在最小生成树”中与它连通的编号最大的顶点“。然后每次需要将一条边添加到最小生成树时，判断该边的两个顶点的终点是否重合，重合的话就构成回路。</li></ul></li></ol><h4 id="3-算法图解"><a class="header-anchor" href="#3-算法图解">¶</a>3. 算法图解</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/17.jpg" alt="图解" style="zoom: 56%;"><p><strong>是否构成回路举例说明</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/18.jpg" alt="举例"></p><p>在将&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt;加入到最小生成树R 中之后，这几条边的顶点就都有了终点：</p><ul><li>C 的终点是F</li><li>D 的终点是F</li><li>E 的终点是F</li><li>F 的终点是F</li></ul><p>关于终点的说明：</p><ul><li>就是将所有顶点按照从小到大的顺序排列好之后；某个顶点的终点就是”与它连通的最大顶点“。</li><li>因此，接下来，虽然&lt;C, E&gt;是权值最小的边。但是 C 和 E 两个顶点的终点都是 F，即他们的终点相同。因此，将&lt;C, E&gt;加入最小生成树的话，会形成回路。这就是判断回路的方式。也就是说，<strong>我们加入的边的两个顶点不能都指向同一个终点，否则将构成回路。</strong></li></ul><h4 id="4-代码实现-v2"><a class="header-anchor" href="#4-代码实现-v2">¶</a>4. 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 克鲁斯卡尔算法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-03-01 12:41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KruskalCase</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] vertexs = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">int</span>[][] matrix = &#123;<br>            <span class="hljs-comment">/*A*/</span><span class="hljs-comment">/*B*/</span><span class="hljs-comment">/*C*/</span><span class="hljs-comment">/*D*/</span><span class="hljs-comment">/*E*/</span><span class="hljs-comment">/*F*/</span><span class="hljs-comment">/*G*/</span><br>            <span class="hljs-comment">/*A*/</span> &#123;   <span class="hljs-number">0</span>,  <span class="hljs-number">12</span>, INF, INF, INF,  <span class="hljs-number">16</span>,  <span class="hljs-number">14</span>&#125;,<br>            <span class="hljs-comment">/*B*/</span> &#123;  <span class="hljs-number">12</span>,   <span class="hljs-number">0</span>,  <span class="hljs-number">10</span>, INF, INF,   <span class="hljs-number">7</span>, INF&#125;,<br>            <span class="hljs-comment">/*C*/</span> &#123; INF,  <span class="hljs-number">10</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">3</span>,   <span class="hljs-number">5</span>,   <span class="hljs-number">6</span>, INF&#125;,<br>            <span class="hljs-comment">/*D*/</span> &#123; INF, INF,   <span class="hljs-number">3</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">4</span>, INF, INF&#125;,<br>            <span class="hljs-comment">/*E*/</span> &#123; INF, INF,   <span class="hljs-number">5</span>,   <span class="hljs-number">4</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">2</span>,   <span class="hljs-number">8</span>&#125;,<br>            <span class="hljs-comment">/*F*/</span> &#123;  <span class="hljs-number">16</span>,   <span class="hljs-number">7</span>,   <span class="hljs-number">6</span>, INF,   <span class="hljs-number">2</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">9</span>&#125;,<br>            <span class="hljs-comment">/*G*/</span> &#123;  <span class="hljs-number">14</span>, INF, INF, INF,   <span class="hljs-number">8</span>,   <span class="hljs-number">9</span>,   <span class="hljs-number">0</span>&#125;<br>        &#125;;<br>        KruskalCase kruskalCase = <span class="hljs-keyword">new</span> KruskalCase(vertexs, matrix);<br>        kruskalCase.print();<br>        EData[] edges = kruskalCase.getEdges();<br>        kruskalCase.sortEdge(edges);<br>        System.out.println(<span class="hljs-string">&quot;图的边的集合=&quot;</span> + Arrays.toString(edges));<br>        kruskalCase.kruskal();<br><br>    &#125;<br><br>    <span class="hljs-comment">// 边的个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> edgeNum;<br>    <span class="hljs-comment">// 顶点数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span>[] vertexs;<br>    <span class="hljs-comment">// 邻接矩阵</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] matrix;<br>    <span class="hljs-comment">// 使用 INF 表示两个顶点不能连通</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INF = Integer.MAX_VALUE;<br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KruskalCase</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] vertexs, <span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 初始化顶点数和边的个数</span><br>        <span class="hljs-keyword">int</span> vlen = vertexs.length;<br><br>        <span class="hljs-comment">// 初始化顶点</span><br>        <span class="hljs-keyword">this</span>.vertexs = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[vlen];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexs.length; i++) &#123;<br>            <span class="hljs-keyword">this</span>.vertexs[i] = vertexs[i];<br>        &#125;<br><br>        <span class="hljs-comment">// 初始化边</span><br>        <span class="hljs-keyword">this</span>.matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[vlen][vlen];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vlen; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; vlen; j++) &#123;<br>                <span class="hljs-keyword">this</span>.matrix[i][j] = matrix[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 统计边</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vlen; i++) &#123;<br>            <span class="hljs-comment">// 自己和自己不构成边</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; vlen; j++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.matrix[i][j] != INF) &#123;<br>                    <span class="hljs-keyword">this</span>.edgeNum++;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 打印邻接矩阵</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;邻接矩阵为：\n&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexs.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; vertexs.length; j++) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%14d\t&quot;</span>, matrix[i][j]);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对边进行排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortEdge</span><span class="hljs-params">(EData[] edges)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; edges.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; edges.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (edges[j].weight &gt; edges[j+<span class="hljs-number">1</span>].weight) &#123;<br>                    EData tmp = edges[j];<br>                    edges[j] = edges[j+<span class="hljs-number">1</span>];<br>                    edges[j+<span class="hljs-number">1</span>] = tmp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 传入顶点值，返回对应下标</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPosition</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexs.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (vertexs[i] == ch) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 通过邻接矩阵获取图中的边，放到 EData[] 数组中，后面用来遍历</span><br>    <span class="hljs-keyword">public</span> EData[] getEdges() &#123;<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        EData[] edges = <span class="hljs-keyword">new</span> EData[edgeNum];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexs.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; vertexs.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (matrix[i][j] != INF) &#123;<br>                    edges[index++] = <span class="hljs-keyword">new</span> EData(vertexs[i], vertexs[j], matrix[i][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> edges;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取下标为 i 的顶点的终点,用于后面判断两个顶点的终点是否相同</span><br>    <span class="hljs-comment">// ends 数组记录了各个顶点对应的终点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getEnd</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] ends, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (ends[i] != <span class="hljs-number">0</span>) &#123;<br>            i = ends[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br>    <span class="hljs-comment">// 克鲁斯卡尔算法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 最后结果数组的索引</span><br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 用于保存已有最小生成树中的每个顶点在最小生成树中的终点</span><br>        <span class="hljs-keyword">int</span>[] ends = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[edgeNum];<br>        <span class="hljs-comment">// 创建结果数组，保存最后的生成树</span><br>        EData[] rets = <span class="hljs-keyword">new</span> EData[edgeNum];<br><br>        <span class="hljs-comment">// 获取图中所有边的集合</span><br>        EData[] edges = getEdges();<br>        <span class="hljs-comment">// 按照边的权值大小进行排序</span><br>        sortEdge(edges);<br><br>        <span class="hljs-comment">// 遍历 edges 数组，将边添加到最小生成树，同时判断是否构成回路</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; edgeNum; i++) &#123;<br>            <span class="hljs-comment">// 获取到第 i 条边的顶点</span><br>            <span class="hljs-keyword">int</span> p1 = getPosition(edges[i].start);<br>            <span class="hljs-keyword">int</span> p2 = getPosition(edges[i].end);<br><br>            <span class="hljs-comment">// 获取 p1 p2 在已有最小生成树的终点</span><br>            <span class="hljs-keyword">int</span> m = getEnd(ends, p1);<br>            <span class="hljs-keyword">int</span> n = getEnd(ends, p2);<br>            <span class="hljs-comment">// 判断是否形成回路</span><br>            <span class="hljs-keyword">if</span> (m != n) &#123;<br>                <span class="hljs-comment">// 设置 m 在已有最小生成树中的终点</span><br>                ends[m] = n;<br>                rets[index++] = edges[i];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 打印最小生成树</span><br>        System.out.println(<span class="hljs-string">&quot;最小生成树为：&quot;</span>);;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            System.out.println(rets[i]);<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">// 边类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EData</span> </span>&#123;<br><br>    <span class="hljs-comment">// 边的一个点</span><br>    <span class="hljs-keyword">char</span> start;<br>    <span class="hljs-comment">// 边的另外一个点</span><br>    <span class="hljs-keyword">char</span> end;<br>    <span class="hljs-comment">// 边的权值</span><br>    <span class="hljs-keyword">int</span> weight;<br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EData</span><span class="hljs-params">(<span class="hljs-keyword">char</span> start, <span class="hljs-keyword">char</span> end, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.start = start;<br>        <span class="hljs-keyword">this</span>.end = end;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;EData&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;start=&quot;</span> + start +<br>            <span class="hljs-string">&quot;, end=&quot;</span> + end +<br>            <span class="hljs-string">&quot;, weight=&quot;</span> + weight +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">邻接矩阵为：<br><br>             <span class="hljs-number">0</span>            <span class="hljs-number">12</span>    <span class="hljs-number">2147483647</span>    <span class="hljs-number">2147483647</span>    <span class="hljs-number">2147483647</span>            <span class="hljs-number">16</span>            <span class="hljs-number">14</span><br>            <span class="hljs-number">12</span>             <span class="hljs-number">0</span>            <span class="hljs-number">10</span>    <span class="hljs-number">2147483647</span>    <span class="hljs-number">2147483647</span>             <span class="hljs-number">7</span>    <span class="hljs-number">2147483647</span><br>    <span class="hljs-number">2147483647</span>            <span class="hljs-number">10</span>             <span class="hljs-number">0</span>             <span class="hljs-number">3</span>             <span class="hljs-number">5</span>             <span class="hljs-number">6</span>    <span class="hljs-number">2147483647</span><br>    <span class="hljs-number">2147483647</span>    <span class="hljs-number">2147483647</span>             <span class="hljs-number">3</span>             <span class="hljs-number">0</span>             <span class="hljs-number">4</span>    <span class="hljs-number">2147483647</span>    <span class="hljs-number">2147483647</span><br>    <span class="hljs-number">2147483647</span>    <span class="hljs-number">2147483647</span>             <span class="hljs-number">5</span>             <span class="hljs-number">4</span>             <span class="hljs-number">0</span>             <span class="hljs-number">2</span>             <span class="hljs-number">8</span><br>            <span class="hljs-number">16</span>             <span class="hljs-number">7</span>             <span class="hljs-number">6</span>    <span class="hljs-number">2147483647</span>             <span class="hljs-number">2</span>             <span class="hljs-number">0</span>             <span class="hljs-number">9</span><br>            <span class="hljs-number">14</span>    <span class="hljs-number">2147483647</span>    <span class="hljs-number">2147483647</span>    <span class="hljs-number">2147483647</span>             <span class="hljs-number">8</span>             <span class="hljs-number">9</span>             <span class="hljs-number">0</span><br>图的边的集合=[EData&#123;start=E, end=F, weight=<span class="hljs-number">2</span>&#125;, EData&#123;start=C, end=D, weight=<span class="hljs-number">3</span>&#125;, EData&#123;start=D, end=E, weight=<span class="hljs-number">4</span>&#125;, EData&#123;start=C, end=E, weight=<span class="hljs-number">5</span>&#125;, EData&#123;start=C, end=F, weight=<span class="hljs-number">6</span>&#125;, EData&#123;start=B, end=F, weight=<span class="hljs-number">7</span>&#125;, EData&#123;start=E, end=G, weight=<span class="hljs-number">8</span>&#125;, EData&#123;start=F, end=G, weight=<span class="hljs-number">9</span>&#125;, EData&#123;start=B, end=C, weight=<span class="hljs-number">10</span>&#125;, EData&#123;start=A, end=B, weight=<span class="hljs-number">12</span>&#125;, EData&#123;start=A, end=G, weight=<span class="hljs-number">14</span>&#125;, EData&#123;start=A, end=F, weight=<span class="hljs-number">16</span>&#125;]<br>最小生成树为：<br>EData&#123;start=E, end=F, weight=<span class="hljs-number">2</span>&#125;<br>EData&#123;start=C, end=D, weight=<span class="hljs-number">3</span>&#125;<br>EData&#123;start=D, end=E, weight=<span class="hljs-number">4</span>&#125;<br>EData&#123;start=B, end=F, weight=<span class="hljs-number">7</span>&#125;<br>EData&#123;start=E, end=G, weight=<span class="hljs-number">8</span>&#125;<br>EData&#123;start=A, end=B, weight=<span class="hljs-number">12</span>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="八、迪杰斯特拉-Dijkstra-算法"><a class="header-anchor" href="#八、迪杰斯特拉-Dijkstra-算法">¶</a>八、迪杰斯特拉(Dijkstra)算法</h3><h4 id="1-应用场景-v5"><a class="header-anchor" href="#1-应用场景-v5">¶</a>1. 应用场景</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/常用的十种算法/14.jpg" style="zoom:80%;"><ol><li>战争时期，胜利乡有7个村庄（A，B，C，D，E，F），现在有 6 个邮差，从 G 点出发，需要分别把邮件送到A、B、C、D、E、F 6个村庄。</li><li>各个村庄的举例用边线来表示（权），比如 A-B 距离 5 公里。</li><li>问：如何计算出 G 村庄到其他村庄的最短距离？</li><li>如果从其他点出发到各个点的最短距离又是多少？</li></ol><h4 id="2-算法介绍-v4"><a class="header-anchor" href="#2-算法介绍-v4">¶</a>2. 算法介绍</h4><p>迪杰斯特拉算法是<strong>典型最短路径算法</strong>，用于计算一个结点到其他结点的最短路径。它的主要特点是以起始点为中心向外层层扩展（广度优先搜索思想），直到扩展到终点为止。</p><p><strong>具体算法过程如下：</strong></p><p>设置出发顶点 v ，顶点集合 V{v1, v2, vi …}，v 到 V 中各顶点之间的距离构成集合 Dis，Dis{d1,d2,di,…}，Dis集合记录着 v 到图中各个顶点之间的距离（到自身的距离可看作0，v 到 vi 距离对应为 di ）</p><ol><li>从 Dis 中选择值最小的 di 并移出 Dis 集合，同时移出 V 集合中对应的顶点 vi，此时的 v 到 vi即为最短路径。</li><li>更新 Dis 集合，更新规则为：比较 v 到 V 集合中顶点的距离值，与 v 通过 上面所有移除的 vi 到 V集合中顶点的距离值，保留值最小的一个（同时也应该更新顶点的前驱节点 vi，表明是通过vi达到的）</li><li>重复执行两步骤，直到最短路径顶点为目标顶点即可结束。</li></ol><h4 id="3-算法图解-v2"><a class="header-anchor" href="#3-算法图解-v2">¶</a>3. 算法图解</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/19.jpg" alt="图解"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/20.jpg" alt="图解"></p><h4 id="4-代码实现-v3"><a class="header-anchor" href="#4-代码实现-v3">¶</a>4. 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 迪杰斯特拉算法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-03-01 18:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DijkstraAlgorithm</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] vertex = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">int</span>[][] matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[vertex.length][vertex.length];<br>        <span class="hljs-comment">// 表示两顶点之间不通</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">65535</span>;<br>        matrix[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,N,N,N,<span class="hljs-number">2</span>&#125;;<br>        matrix[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">5</span>,N,N,<span class="hljs-number">9</span>,N,N,<span class="hljs-number">3</span>&#125;;<br>        matrix[<span class="hljs-number">2</span>]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">7</span>,N,N,N,<span class="hljs-number">8</span>,N,N&#125;;<br>        matrix[<span class="hljs-number">3</span>]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N,<span class="hljs-number">9</span>,N,N,N,<span class="hljs-number">4</span>,N&#125;;<br>        matrix[<span class="hljs-number">4</span>]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N,N,<span class="hljs-number">8</span>,N,N,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>&#125;;<br>        matrix[<span class="hljs-number">5</span>]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N,N,N,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,N,<span class="hljs-number">6</span>&#125;;<br>        matrix[<span class="hljs-number">6</span>]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,N,N,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,N&#125;;<br>        <span class="hljs-comment">// 创建 Graph 对象</span><br>        Graph graph = <span class="hljs-keyword">new</span> Graph(vertex, matrix);<br>        graph.showGraph();<br>        <span class="hljs-comment">// 测试迪杰斯特拉算法</span><br>        graph.dsj(<span class="hljs-number">6</span>);<br>        graph.showDijkstra();<br>    &#125;<br><br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span> </span>&#123;<br><br>    <span class="hljs-comment">// 顶点数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span>[] vertex;<br>    <span class="hljs-comment">// 邻接矩阵</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] matrix;<br>    <span class="hljs-comment">// 已经访问的顶点集合</span><br>    <span class="hljs-keyword">private</span> VisitedVertex vv;<br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graph</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] vertex, <span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.vertex = vertex;<br>        <span class="hljs-keyword">this</span>.matrix = matrix;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示结果</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDijkstra</span><span class="hljs-params">()</span> </span>&#123;<br>        vv.show();<br>    &#125;<br><br>    <span class="hljs-comment">// 显示图</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showGraph</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] link: matrix) &#123;<br>            System.out.println(Arrays.toString(link));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 迪杰斯特拉算法实现</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 出发顶点对应的下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dsj</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        vv = <span class="hljs-keyword">new</span> VisitedVertex(vertex.length, index);<br>        update(index);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; vertex.length; j++) &#123;<br>            <span class="hljs-comment">// 选择并返回新的访问结点</span><br>            index = vv.updateArr();<br>            update(index);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新index下标顶点和周围顶点的距离和周围顶点的前驱顶点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 出发顶点下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 遍历邻接矩阵的 matrix[index] 行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; matrix[index].length; j++) &#123;<br>            <span class="hljs-comment">// 出发顶点到index距离 + 从 index 顶点到 j 顶点的距离</span><br>            len = vv.getDis(index) + matrix[index][j];<br>            <span class="hljs-comment">// 如果 j 顶点没有被访问，并且 len 小于出发顶点到 j 顶点的距离，就需要更新</span><br>            <span class="hljs-keyword">if</span> (!vv.in(j) &amp;&amp; len &lt; vv.getDis(j)) &#123;<br>                vv.updatePre(j, index);<br>                vv.updateDis(j, len);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 已访问顶点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VisitedVertex</span> </span>&#123;<br><br>    <span class="hljs-comment">// 记录各个顶点是否访问过 1表示已访问 0表示未访问</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] already_arr;<br>    <span class="hljs-comment">// 每个下标对应的值为前一个顶点下标，会动态更新</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] pre_visited;<br>    <span class="hljs-comment">// 记录出发顶点到其他所有顶点的距离</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] dis;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length 顶点的个数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 出发顶点的下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VisitedVertex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.already_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-keyword">this</span>.pre_visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-keyword">this</span>.dis = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-comment">// 初始化 dis数组，出发顶点到自己的距离设为0，到其他顶点设为65535</span><br>        Arrays.fill(dis, <span class="hljs-number">65535</span>);<br>        <span class="hljs-comment">// 设置出发顶点被访问过</span><br>        <span class="hljs-keyword">this</span>.already_arr[index] = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 设置出发顶点的访问距离为0</span><br>        <span class="hljs-keyword">this</span>.dis[index] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断下标为 index 的顶点是否被访问过</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 访问过返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">in</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> already_arr[index] == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新出发顶点到 index 顶点的距离</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len 要更新的距离</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateDis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>        dis[index] = len;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 更新pre这个顶点的前驱顶点为index顶点</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> pre 要更新的顶点下标</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> index 前驱</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updatePre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        pre_visited[pre] = index;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回出发顶点到 index 顶点的距离</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 顶点下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 距离</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dis[index];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 继续选择并返回新的访问顶点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 新的顶点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateArr</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> min = <span class="hljs-number">65535</span>, index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; already_arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (already_arr[i] == <span class="hljs-number">0</span> &amp;&amp; dis[i] &lt; min) &#123;<br>                min = dis[i];<br>                index = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 更新 index 顶点被访问过</span><br>        already_arr[index] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示最后的结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br>        <span class="hljs-comment">// 输出already_arr</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i: already_arr) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-comment">// 输出pre_visited</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i: pre_visited) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-comment">// 输出dis</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i: dis) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-keyword">char</span>[] vertex = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i: dis) &#123;<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">65535</span>) &#123;<br>                System.out.print(vertex[count] + <span class="hljs-string">&quot;(&quot;</span> + i + <span class="hljs-string">&quot;)&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;N&quot;</span>);<br>            &#125;<br>            count++;<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">65535</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">2</span>]<br>[<span class="hljs-number">5</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">9</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">3</span>]<br>[<span class="hljs-number">7</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">8</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>]<br>[<span class="hljs-number">65535</span>, <span class="hljs-number">9</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">4</span>, <span class="hljs-number">65535</span>]<br>[<span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">8</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>]<br>[<span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">6</span>]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">65535</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">65535</span>]<br>=================<br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <br>A(<span class="hljs-number">2</span>)B(<span class="hljs-number">3</span>)C(<span class="hljs-number">9</span>)D(<span class="hljs-number">10</span>)E(<span class="hljs-number">4</span>)F(<span class="hljs-number">6</span>)G(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="九、弗洛伊德-Floyd-算法"><a class="header-anchor" href="#九、弗洛伊德-Floyd-算法">¶</a>九、弗洛伊德(Floyd)算法</h3><h4 id="1-算法介绍"><a class="header-anchor" href="#1-算法介绍">¶</a>1.算法介绍</h4><ol><li><p>和 Dijkstra 算法一样，弗洛伊德（Floyd）算法也是一种用于寻找给定的加权图中顶点间最短路径的算法。</p></li><li><p><strong>迪杰斯特拉算法计算图中某一个顶点到其他顶点的最短路径；弗洛伊德算法计算图中各个顶点之间的最短路径</strong>。</p></li><li><p><strong>弗洛伊德算法 VS 迪杰斯特拉算法：<strong>迪杰斯特拉算法通过选定的被访问顶点，求</strong>出从出发访问顶点到其他顶点的最短路径</strong>；弗洛伊德算法中每一个顶点都是出发访问点，所以需要<strong>将每一个顶点看作被访问顶点，求出从每一个顶点到其他顶点的最短路径。</strong></p></li><li><p><strong>具体过程如下</strong>：</p><ol><li>设置顶点 vi 到顶点 vk 的最短路径已知为 Lik，顶点 vk 到 vj 的最短路径为类 Lkj，顶点 vi 到 vj 的路径为 Lij，则 vi 到 vj 的最短路径为：min｛(Lik+Lkj)，Lij｝，vk的取值为图中所有顶点，则可获得 vi 到 vj 的最短路径。</li><li>至于 vi 到 vk 的最短路径 Lik 或者 vk 到 vj 的最短路径 Lkj，是以同样方式获得。</li></ol></li></ol><h4 id="2-算法图解"><a class="header-anchor" href="#2-算法图解">¶</a>2. 算法图解</h4><p><strong>初始各结点之间距离表</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/21.jpg" alt="初始距离表"></p><p><strong>初始结点间的距离关系</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/22.jpg" alt="初始"></p><p><strong>第一轮循环，以 A 作为中间结点【即把A 作为中间顶点的所有情况都进行遍历, 就会得到更新距离表和前驱关系】，距离表和前驱关系更新为：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/23.jpg" alt="初始"></p><p><strong>更换中间顶点，循环执行操作，直到所有顶点都作为中间顶点更新后，计算结束</strong>。</p><h4 id="3-代码实现"><a class="header-anchor" href="#3-代码实现">¶</a>3. 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 弗洛伊德算法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-03-02 18:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FloydAlgorithm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试图是否创建成功</span><br>        <span class="hljs-keyword">char</span>[] vertex = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-comment">// 创建邻接矩阵</span><br>        <span class="hljs-keyword">int</span>[][] matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[vertex.length][vertex.length];<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">65535</span>;<br>        matrix[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, N, N, N, <span class="hljs-number">2</span> &#125;;<br>        matrix[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, N, <span class="hljs-number">9</span>, N, N, <span class="hljs-number">3</span> &#125;;<br>        matrix[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">7</span>, N, <span class="hljs-number">0</span>, N, <span class="hljs-number">8</span>, N, N &#125;;<br>        matrix[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; N, <span class="hljs-number">9</span>, N, <span class="hljs-number">0</span>, N, <span class="hljs-number">4</span>, N &#125;;<br>        matrix[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; N, N, <span class="hljs-number">8</span>, N, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span> &#125;;<br>        matrix[<span class="hljs-number">5</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; N, N, N, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span> &#125;;<br>        matrix[<span class="hljs-number">6</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, N, N, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span> &#125;;<br><br>        <span class="hljs-comment">// 创建 Graph 对象</span><br>        Graph graph = <span class="hljs-keyword">new</span> Graph(vertex.length, matrix, vertex);<br>        graph.floyd();<br>        graph.show();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建图</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span> </span>&#123;<br><br>    <span class="hljs-comment">// 存放顶点的数组</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">char</span>[] vertex;<br>    <span class="hljs-comment">// 保存从各个顶点出发到其他顶点的距离</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] dis;<br>    <span class="hljs-comment">// 保存到达目标顶点的前驱顶点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] pre;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length 大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> matrix 邻接矩阵</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> vertex 顶点数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graph</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length, <span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">char</span>[] vertex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.vertex = vertex;<br>        <span class="hljs-keyword">this</span>.dis = matrix;<br>        <span class="hljs-keyword">this</span>.pre = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length][length];<br>        <span class="hljs-comment">// 对pre数组初始化</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            Arrays.fill(pre[i], i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示pre数组和dis数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; dis.length; k++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dis.length; i++) &#123;<br>                System.out.print(pre[k][i] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dis.length; i++) &#123;<br>                System.out.print(dis[k][i] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 弗洛伊德算法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 保存距离</span><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 对中间结点遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; dis.length; k++) &#123;<br>            <span class="hljs-comment">// 从 i 结点开始出发</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dis.length; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; dis.length; j++) &#123;<br>                    len = dis[i][k] + dis[k][j];<br>                    <span class="hljs-keyword">if</span> (len &lt; dis[i][j]) &#123;<br>                        <span class="hljs-comment">// 更新距离</span><br>                        dis[i][j] = len;<br>                        <span class="hljs-comment">// 更新前驱结点</span><br>                        pre[i][j] = pre[k][j];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <br><span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">65535</span> <span class="hljs-number">65535</span> <span class="hljs-number">65535</span> <span class="hljs-number">2</span> <br><br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">65535</span> <span class="hljs-number">9</span> <span class="hljs-number">65535</span> <span class="hljs-number">65535</span> <span class="hljs-number">3</span> <br><br><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <br><span class="hljs-number">7</span> <span class="hljs-number">65535</span> <span class="hljs-number">0</span> <span class="hljs-number">65535</span> <span class="hljs-number">8</span> <span class="hljs-number">65535</span> <span class="hljs-number">65535</span> <br><br><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <br><span class="hljs-number">65535</span> <span class="hljs-number">9</span> <span class="hljs-number">65535</span> <span class="hljs-number">0</span> <span class="hljs-number">65535</span> <span class="hljs-number">4</span> <span class="hljs-number">65535</span> <br><br><span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <br><span class="hljs-number">65535</span> <span class="hljs-number">65535</span> <span class="hljs-number">8</span> <span class="hljs-number">65535</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <br><br><span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <br><span class="hljs-number">65535</span> <span class="hljs-number">65535</span> <span class="hljs-number">65535</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <br><br><span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">65535</span> <span class="hljs-number">65535</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构：图</title>
    <link href="/posts/2021/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%9B%BE/"/>
    <url>/posts/2021/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、图的基本介绍"><a href="#一、图的基本介绍" class="headerlink" title="一、图的基本介绍"></a>一、图的基本介绍</h2><h3 id="1-为什么要有图"><a href="#1-为什么要有图" class="headerlink" title="1. 为什么要有图"></a>1. 为什么要有图</h3><ul><li>前面我们学了线性表和树</li><li>线性表局限于一个直接前驱和直接后继的关系</li><li>树也只能有一个直接前驱也就是父节点</li><li>当我们需要表示多对多的关系时，就需要用到图</li></ul><h3 id="2-举例说明"><a href="#2-举例说明" class="headerlink" title="2. 举例说明"></a>2. 举例说明</h3><p>图是一种数据结构，其中结点可以具有另个或多个相邻元素。两个结点之间的连接称为边。结点可也可以称为顶点。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：图/1.png" alt="图" style="zoom: 44%;"><h3 id="3-图的常用概念"><a href="#3-图的常用概念" class="headerlink" title="3. 图的常用概念"></a>3. 图的常用概念</h3><ol><li><p>顶点（vertex）</p></li><li><p>边（edge）</p></li><li><p>路径</p></li><li><p>无向图</p></li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：图/2.png" alt="常用概念" style="zoom: 80%;"><ol start="5"><li><p>有向图</p></li><li><p>带权图</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：图/3.png" alt="常用概念" style="zoom:80%;"></li></ol><hr><h2 id="二、图的表示方式"><a href="#二、图的表示方式" class="headerlink" title="二、图的表示方式"></a>二、图的表示方式</h2><h3 id="1-邻接矩阵"><a href="#1-邻接矩阵" class="headerlink" title="1. 邻接矩阵"></a>1. 邻接矩阵</h3><p>邻接矩阵是表示图形中顶点之间相邻关系的矩阵，对于n个顶点的图而言，矩阵的row和col表示的是1…n个点。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：图/4.png" alt="邻接矩阵" style="zoom: 60%;"><h3 id="2-邻接表"><a href="#2-邻接表" class="headerlink" title="2.邻接表"></a>2.邻接表</h3><ul><li><p>邻接矩阵需要为每个顶点都分配n个边的空间，其中有很多边都是不存在的，会造成空间的一定浪费。</p></li><li><p>邻接表的实现只关心存在的边，不关心不存在的边。因此没有空间浪费，邻接表由数组+链表组成。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：图/5.png" alt="邻接表" style="zoom: 60%;"></li></ul><h3 id="3-无向图创建-邻接矩阵实现"><a href="#3-无向图创建-邻接矩阵实现" class="headerlink" title="3. 无向图创建(邻接矩阵实现)"></a>3. 无向图创建(邻接矩阵实现)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 图</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-26 12:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br>    String VertexValue[] = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>&#125;;<br>    Graph graph = <span class="hljs-keyword">new</span> Graph(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">for</span> (String value: VertexValue) &#123;<br>      graph.insertVertex(value);<br>    &#125;<br>    <span class="hljs-comment">// A-B A-C B-C B-D B-E</span><br>    graph.insertEdge(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">1</span>, <span class="hljs-number">2</span> ,<span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">1</span>, <span class="hljs-number">3</span> ,<span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">1</span>, <span class="hljs-number">4</span> ,<span class="hljs-number">1</span>);<br><br>    graph.showGraph();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 存储顶点集合</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> ArrayList&lt;String&gt; vertexList;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 存储图对应的邻接矩阵</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] edges;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 边的数量</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> numOfEdges;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 构造器</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> n 顶点个数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graph</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化矩阵和顶点集合</span><br>    edges = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<br>    vertexList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(n);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 插入结点</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> vertex 结点的值</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertVertex</span><span class="hljs-params">(String vertex)</span> </span>&#123;<br>    vertexList.add(vertex);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 插入边</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> v1 结点1</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> v2 结点2</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> weight 边的权值</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>    edges[v1][v2] = weight;<br>    edges[v2][v1] = weight;<br>    numOfEdges++;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取结点个数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 结点个数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumOfVertex</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> vertexList.size();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取边个数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 边的数目</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumOfEdges</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> numOfEdges;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取结点数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> i 结点下标</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 结点数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getValueByIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> vertexList.get(i);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取两结点之间权值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> v1 结点1下标</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> v2 结点2下标</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 权值</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> edges[v1][v2];<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 显示矩阵</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showGraph</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] link: edges) &#123;<br>      System.out.println(Arrays.toString(link));<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><hr><h2 id="三、图的遍历"><a href="#三、图的遍历" class="headerlink" title="三、图的遍历"></a>三、图的遍历</h2><h3 id="1-深度优先遍历"><a href="#1-深度优先遍历" class="headerlink" title="1. 深度优先遍历"></a>1. 深度优先遍历</h3><h4 id="1-1-基本思想"><a href="#1-1-基本思想" class="headerlink" title="1.1 基本思想"></a>1.1 基本思想</h4><ol><li><p>深度优先遍历，从初始访问结点出发，初始访问结点可能有多个邻接结点，深度优先遍历的策略就是首先访问第一个邻接结点，然后再以这个被访问的邻接点作为初始结点，访问它的第一个邻接结点，可以这样理解：<strong>每次都在访问完当前结点后首先访问当前结点的第一个邻接结点</strong>。</p></li><li><p>我们可以看到，这样的访问策略是优先往纵向挖掘深入，而不是对一个结点的所有邻接结点进行横向访问。</p></li><li><p>显然，深度优先搜索是一个递归的过程。</p></li></ol><h4 id="1-2-算法步骤"><a href="#1-2-算法步骤" class="headerlink" title="1.2 算法步骤"></a>1.2 算法步骤</h4><ol><li>访问初始结点v，并标记为结点v已访问。</li><li>查找结点v的第一个邻接结点w。</li><li>若w存在，则继续执行4，如果w不存在，则回到第1步，将从v的下一个结点继续。</li><li>若w未被访问，对w进行深度优先遍历递归（即把w当做另一个v，然后重复步骤1/2/3）；如果w已被访问，查找v的邻接点的下一个邻接结点w，转到步骤3</li></ol><h4 id="1-3-代码"><a href="#1-3-代码" class="headerlink" title="1.3 代码"></a>1.3 代码</h4><p><strong>在邻接矩阵表示法中，给图增加一个访问标志数组<code>isVisted[]</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结点访问标志数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span>[] isVisited;<br></code></pre></td></tr></table></figure><p><strong>构造器初始化该访问标志数组的大小</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构造器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n 顶点个数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graph</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化矩阵和顶点集合</span><br>    edges = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<br>    vertexList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(n);<br>    isVisited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写方法：得到某个结点第一个邻接结点的下标</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 得到某个结点第一个邻接结点的下标</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> index 结点下标</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 存在返回第一个邻接结点下标，不存在返回-1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getFirstNeighbor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; vertexList.size(); j++) &#123;<br>        <span class="hljs-keyword">if</span> (edges[index][j] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写方法：根据某个结点的前一个邻接结点的下标来获取其下一个邻接结点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据某个结点的前一个邻接结点的下标来获取其下一个邻接结点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> v1 某个结点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> v2 某个结点的前一个邻接结点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 存在返回下标，不存在返回-1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNextNeighbor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v2 + <span class="hljs-number">1</span>; j &lt; vertexList.size(); j++) &#123;<br>        <span class="hljs-keyword">if</span> (edges[v1][j] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>深度优先遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 深度优先遍历</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> isVisited 访问标志数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> i 结点下标</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>[] isVisited, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-comment">// 访问该结点,将该结点设置已访问标志</span><br>    System.out.print(getValueByIndex(i) +<span class="hljs-string">&quot; &quot;</span> );<br>    isVisited[i] = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-comment">// 查找结点 i 的第一个邻接结点 w</span><br>    <span class="hljs-keyword">int</span> w = getFirstNeighbor(i);<br>    <span class="hljs-comment">// 如果 w 存在</span><br>    <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 若 w 未被访问，对 w 进行深度优先遍历</span><br>        <span class="hljs-keyword">if</span> (!isVisited[w]) &#123;<br>            DFS(isVisited, w);<br>        &#125;<br>        <span class="hljs-comment">// 如果 w 已被访问，访问 i 的下一个邻接结点</span><br>        w = getNextNeighbor(i, w);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * DFS遍历所有的节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; getNumOfVertex(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (!isVisited[i]) &#123;<br>            DFS(isVisited, i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-测试"><a href="#1-4-测试" class="headerlink" title="1.4 测试"></a>1.4 测试</h4><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br>    String VertexValue[] = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>&#125;;<br>    Graph graph = <span class="hljs-keyword">new</span> Graph(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">for</span> (String value: VertexValue) &#123;<br>        graph.insertVertex(value);<br>    &#125;<br>    <span class="hljs-comment">// A-B A-C B-C B-D B-E</span><br>    graph.insertEdge(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">1</span>, <span class="hljs-number">2</span> ,<span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">1</span>, <span class="hljs-number">3</span> ,<span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">1</span>, <span class="hljs-number">4</span> ,<span class="hljs-number">1</span>);<br><br>    graph.showGraph();<br><br>    <span class="hljs-comment">// 测试DFS</span><br>    System.out.println(<span class="hljs-string">&quot;深度优先遍历&quot;</span>);<br>    graph.DFSTraverse();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>深度优先遍历<br>A B C D E <br></code></pre></td></tr></table></figure><h3 id="2-广度优先遍历"><a href="#2-广度优先遍历" class="headerlink" title="2. 广度优先遍历"></a>2. 广度优先遍历</h3><h4 id="2-1-基本思想"><a href="#2-1-基本思想" class="headerlink" title="2.1 基本思想"></a>2.1 基本思想</h4><p>广度优先搜索类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点。</p><h4 id="2-2-算法步骤"><a href="#2-2-算法步骤" class="headerlink" title="2.2 算法步骤"></a>2.2 算法步骤</h4><ol><li><p>访问初始节点v并标记结点v为已访问。</p></li><li><p>结点v入队列。</p></li><li><p>当队列非空时，继续执行4，否则算法结束。</p></li><li><p>出队列，取得队头结点u。</p></li><li><p>查找结点u的邻接结点w不。</p></li><li><p>若结点u的邻接结点w不存在，则转到步骤3；否则循环执行以下三个步骤：</p><p>6.1 若结点w尚未被访问，访问w并标记为已访问。</p><p>6.2 结点w入队列</p><p>6.3 查找结点u的继w邻接结点后的下一个邻接结点w，跳转到步骤6.</p></li></ol><h4 id="2-3-代码"><a href="#2-3-代码" class="headerlink" title="2.3 代码"></a>2.3 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对某结点进行广度优先遍历</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> isVisited 访问标志数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> i 结点下标</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>[] isVisited, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-comment">// 队头结点下标 u</span><br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-comment">// 邻接结点w</span><br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-comment">// 队列，记录结点访问顺序</span><br>    LinkedList queue = <span class="hljs-keyword">new</span> LinkedList();<br>    <span class="hljs-comment">// 访问结点，输出结点信息，标记为已访问</span><br>    System.out.print(getValueByIndex(i) + <span class="hljs-string">&quot; &quot;</span>);<br>    isVisited[i] = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-comment">// 将结点加入队列</span><br>    queue.addLast(i);<br><br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        <span class="hljs-comment">// 取出队列的头结点下标u</span><br>        u = (Integer) queue.removeFirst();<br>        <span class="hljs-comment">// 得到u的第一个邻接结点下标w</span><br>        w = getFirstNeighbor(u);<br>        <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 未访问过</span><br>            <span class="hljs-keyword">if</span> (!isVisited[w]) &#123;<br>                System.out.print(getValueByIndex(w) + <span class="hljs-string">&quot; &quot;</span>);<br>                isVisited[w] = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-comment">// 入队</span><br>                queue.addLast(w);<br>            &#125;<br>            <span class="hljs-comment">// 如果访问过，找u的下一个邻接结点w</span><br>            w = getNextNeighbor(u, w);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对整个图进行广度优先遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BFSTraverse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; getNumOfVertex(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (!isVisited[i]) &#123;<br>            BFS(isVisited, i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br>    String VertexValue[] = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>&#125;;<br>    Graph graph = <span class="hljs-keyword">new</span> Graph(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">for</span> (String value: VertexValue) &#123;<br>        graph.insertVertex(value);<br>    &#125;<br>    <span class="hljs-comment">// A-B A-C B-C B-D B-E</span><br>    graph.insertEdge(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">1</span>, <span class="hljs-number">2</span> ,<span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">1</span>, <span class="hljs-number">3</span> ,<span class="hljs-number">1</span>);<br>    graph.insertEdge(<span class="hljs-number">1</span>, <span class="hljs-number">4</span> ,<span class="hljs-number">1</span>);<br><br>    graph.showGraph();<br><br>    <span class="hljs-comment">// 测试BFS</span><br>    System.out.println(<span class="hljs-string">&quot;广度优先遍历&quot;</span>);<br>    graph.BFSTraverse();<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>广度优先遍历<br>A B C D E <br></code></pre></td></tr></table></figure><h3 id="3-DFS与BFS的比较"><a href="#3-DFS与BFS的比较" class="headerlink" title="3. DFS与BFS的比较"></a>3. DFS与BFS的比较</h3><p>遍历图的过程实质上是通过边或弧找邻接点的过程，因此深度优先搜索的时间复杂度和广度优先搜索相同，两者不同之处仅仅在于对顶点访问的顺序不同。</p>]]></content>
    
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构：树</title>
    <link href="/posts/2021/02/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/"/>
    <url>/posts/2021/02/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="一、树"><a href="#一、树" class="headerlink" title="一、树"></a>一、树</h2><h3 id="1-为什么需要树"><a href="#1-为什么需要树" class="headerlink" title="1.为什么需要树"></a>1.为什么需要树</h3><p><strong>数组存储方式分析</strong>：</p><p><strong>优点</strong>：通过下标方式访问元素，速度快。对于有序数组，还可使用二分查找提高检索速度。</p><p><strong>缺点</strong>：如果要检索具体某个值，或者插入值(按一定顺序)会整体移动，效率较低</p><p><strong>链式存储方式分析</strong>：</p><p><strong>优点</strong>：：在一定程度上对数组存储方式有优化(比如：插入一个数值节点，只需要将插入节点，链接到链表中即可，删除效率也很好)。</p><p><strong>缺点</strong>：在进行检索时，效率仍然较低，比如(检索某个值，需要从头节点开始遍历)</p><p><strong>树存储方式分析</strong>：</p><p>能提高数据存储，读取的效率, 比如利用二叉排序树(Binary Sort Tree)，既可以保证数据的检索速度，同时也可以保证数据的插入，删除，修改的速度。</p><h3 id="2-树的常用术语"><a href="#2-树的常用术语" class="headerlink" title="2.树的常用术语"></a>2.树的常用术语</h3><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/1.png" alt="术语" style="zoom:80%;"><p><strong>树的术语</strong>（结合示意图理解）</p><ul><li>节点</li><li>根节点</li><li>父节点</li><li>子节点</li><li>叶子节点（没有子节点的节点）</li><li>节点的权（节点的值）</li><li>路径（从根节点到该节点的路线）</li><li>度（节点的子节点数量）</li><li>层</li><li>子树</li><li>树的深度（最大层数）</li><li>森林（多棵子树组成森林）</li></ul><hr><h2 id="二、二叉树基本内容"><a href="#二、二叉树基本内容" class="headerlink" title="二、二叉树基本内容"></a>二、二叉树基本内容</h2><h3 id="1-二叉树的定义"><a href="#1-二叉树的定义" class="headerlink" title="1.二叉树的定义"></a>1.二叉树的定义</h3><p><strong>二叉树</strong>的特点是每个节点至多只能有两棵子树（即二叉树中不存在度大于2的节点），并且，<strong>二叉树的子树有左右之分，其次序不能任意颠倒</strong>。</p><h3 id="2-二叉树的性质"><a href="#2-二叉树的性质" class="headerlink" title="2.二叉树的性质"></a>2.二叉树的性质</h3><ol><li><p>性质1：<strong>在二叉树的第 i 层上，至多有2^i-1^个节点。</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/2.png" alt="性质1" style="zoom:80%;"></li><li><p>性质2：<strong>深度为 k 的二叉树的最大节点数为 2^k^-1</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/3.png" alt="性质2" style="zoom:80%;"></li><li><p>性质3：<strong>对任何一个二叉树 T，如果其叶子节点数为 n<del>0</del>，度数为2的节点为n<del>2</del>，则n<del>0</del> = n<del>2</del>+1 。即：叶子节点比度数为2的节点多一个。</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/4.png" alt="性质3" style="zoom:80%;"></li><li><p>性质4：<strong>如果二叉树的深度为 k，节点数为 2^k^ - 1 ，即该二叉树的所有叶子节点都在最后一层，该二叉树为满二叉树</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/5.png" alt="性质4" style="zoom:80%;"></li><li><p>性质5：<strong>如果该二叉树的的所有叶子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为完全二叉树</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/6.png" alt="性质5" style="zoom:80%;"></li><li><p>性质6：<strong>具有 n 个节点的完全二叉树的深度为【log<del>2</del>n】(向下取整)+1</strong> 。 </p></li><li><p>性质7：<strong>如果父节点编号（根节点编号为1）为 i，则其左孩子节点编号为2i，右孩子节点编号为2i+1</strong></p></li></ol><h3 id="3-二叉树存储结构"><a href="#3-二叉树存储结构" class="headerlink" title="3. 二叉树存储结构"></a>3. 二叉树存储结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二叉树类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> BiNode root;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoot</span><span class="hljs-params">(BiNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二叉树节点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BiNode</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> data;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 左右孩子指针</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> BiNode leftChild,rightChild;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BiNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.data = data;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-二叉树遍历"><a href="#4-二叉树遍历" class="headerlink" title="4.二叉树遍历"></a>4.二叉树遍历</h3><h4 id="3-1-先序遍历"><a href="#3-1-先序遍历" class="headerlink" title="3.1 先序遍历"></a>3.1 先序遍历</h4><p>先序遍历：先输出父节点，再遍历做左子树，再遍历右子树。</p><p><strong>思路：</strong></p><ul><li>输出当前节点（初始时为root节点）</li><li>如果左子节点不为空，则递归继续先序遍历</li><li>如果右子节点不为空，则递归继续先序遍历。</li></ul><h4 id="3-2-中序遍历"><a href="#3-2-中序遍历" class="headerlink" title="3.2 中序遍历"></a>3.2 中序遍历</h4><p>中序遍历：先遍历左子树，再输出当前节点，再遍历右子树。</p><p><strong>思路：</strong></p><ul><li><p>如果左子节点不为空，则递归继续先序遍历</p></li><li><p>输出当前节点（初始时为root节点）</p></li><li><p>如果右子节点不为空，则递归继续先序遍历。</p></li></ul><h4 id="3-3-后序遍历"><a href="#3-3-后序遍历" class="headerlink" title="3.3 后序遍历"></a>3.3 后序遍历</h4><p>后序遍历：先遍历左子树，再遍历右子树，再输出当前节点。</p><p><strong>思路：</strong></p><ul><li><p>如果左子节点不为空，则递归继续先序遍历</p></li><li><p>如果右子节点不为空，则递归继续先序遍历。</p></li><li><p>输出当前节点（初始时为root节点）</p></li></ul><h4 id="3-4-代码实现"><a href="#3-4-代码实现" class="headerlink" title="3.4 代码实现"></a>3.4 代码实现</h4><p>创建如下所示的二叉树，并进行先序、中序、后序遍历。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/7.png" alt="图片" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 二叉树类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-20 11:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> BiNode root;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BinaryTree</span><span class="hljs-params">(BiNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.root = root;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 先序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrderTraverse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.root.preOrderTraverse();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;当前二叉树为空&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 中序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrderTraverse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.root.inOrderTraverse();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;当前二叉树为空&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 后序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrderTraverse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.root.postOrderTraverse();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;当前二叉树为空&quot;</span>);<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二叉树节点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BiNode</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> data;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 左右孩子指针</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> BiNode leftChild,rightChild;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BiNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.data = data;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> data;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.data = data;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> BiNode <span class="hljs-title">getLeftChild</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> leftChild;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeftChild</span><span class="hljs-params">(BiNode leftChild)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.leftChild = leftChild;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> BiNode <span class="hljs-title">getRightChild</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> rightChild;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRightChild</span><span class="hljs-params">(BiNode rightChild)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.rightChild = rightChild;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;BiNode&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;data=&quot;</span> + data +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 先序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrderTraverse</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-keyword">this</span>.toString());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.leftChild != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.leftChild.preOrderTraverse();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.rightChild != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.rightChild.preOrderTraverse();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 中序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrderTraverse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.leftChild != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.leftChild.inOrderTraverse();<br>    &#125;<br>    System.out.println(<span class="hljs-keyword">this</span>.toString());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.rightChild != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.rightChild.inOrderTraverse();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 后序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrderTraverse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.leftChild != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.leftChild.postOrderTraverse();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.rightChild != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.rightChild.postOrderTraverse();<br>    &#125;<br>    System.out.println(<span class="hljs-keyword">this</span>.toString());<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-测试类"><a href="#3-5-测试类" class="headerlink" title="3.5 测试类"></a>3.5 测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTreeTest</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建二叉树</span><br>    BinaryTree binaryTree = <span class="hljs-keyword">new</span> BinaryTree();<br><br>    <span class="hljs-comment">// 创建结点</span><br>    BiNode root = <span class="hljs-keyword">new</span> BiNode(<span class="hljs-number">1</span>);<br>    BiNode node2 = <span class="hljs-keyword">new</span> BiNode(<span class="hljs-number">2</span>);<br>    BiNode node3 = <span class="hljs-keyword">new</span> BiNode(<span class="hljs-number">3</span>);<br>    BiNode node4 = <span class="hljs-keyword">new</span> BiNode(<span class="hljs-number">4</span>);<br><br>    <span class="hljs-comment">// 手动创建二叉树</span><br>    binaryTree.setRoot(root);<br>    root.setLeftChild(node2);<br>    root.setRightChild(node3);<br>    node3.setRightChild(node4);<br><br>    System.out.println(<span class="hljs-string">&quot;先序遍历&quot;</span>);<br>    binaryTree.preOrderTraverse();<br>    System.out.println(<span class="hljs-string">&quot;中序遍历&quot;</span>);<br>    binaryTree.inOrderTraverse();<br>    System.out.println(<span class="hljs-string">&quot;后序遍历&quot;</span>);<br>    binaryTree.postOrderTraverse();<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">先序遍历<br>BiNode&#123;data=1&#125;<br>BiNode&#123;data=2&#125;<br>BiNode&#123;data=3&#125;<br>BiNode&#123;data=4&#125;<br>中序遍历<br>BiNode&#123;data=2&#125;<br>BiNode&#123;data=1&#125;<br>BiNode&#123;data=3&#125;<br>BiNode&#123;data=4&#125;<br>后序遍历<br>BiNode&#123;data=2&#125;<br>BiNode&#123;data=4&#125;<br>BiNode&#123;data=3&#125;<br></code></pre></td></tr></table></figure><h3 id="5-二叉树查找节点"><a href="#5-二叉树查找节点" class="headerlink" title="5. 二叉树查找节点"></a>5. 二叉树查找节点</h3><h4 id="5-1-要求"><a href="#5-1-要求" class="headerlink" title="5.1 要求"></a>5.1 要求</h4><p>编写先序查找，中序查找和后序查找的方法。并使用三种查找方式，查找结点值为data的结点。</p><h4 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title="5.2 思路"></a>5.2 思路</h4><p><strong>先序查找思路</strong></p><ul><li>先判断当前节点的data是否等于要查找结点的值</li><li>如果相等，则返回当前结点</li><li>如果不等，则判断当前结点的左子节点是否为空，如果不为空，则递归先序查找</li><li>如果左递归先序查找找到了结点，则返回该节点。否则判断当前结点的右子节点是否为空，如果不为空，则继续向右的递归先序查找</li></ul><p><strong>中序查找和后序查找思路相似</strong></p><h4 id="5-3-代码"><a href="#5-3-代码" class="headerlink" title="5.3 代码"></a>5.3 代码</h4><p><strong>二叉树节点类方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BiNode</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> data;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 左右孩子指针</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> BiNode leftChild,rightChild;<br><br>  ...........................<br>    <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 先序遍历查找节点</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> targetValue 节点值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 返回该节点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> BiNode <span class="hljs-title">preOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> targetValue)</span> </span>&#123;<br>    <span class="hljs-comment">// 承接查找到的节点</span><br>    BiNode resNode = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.data == targetValue) &#123;<br>      resNode = <span class="hljs-keyword">this</span>;<br>      <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.leftChild != <span class="hljs-keyword">null</span>) &#123;<br>      resNode = <span class="hljs-keyword">this</span>.leftChild.preOrderSearch(targetValue);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.rightChild != <span class="hljs-keyword">null</span>) &#123;<br>      resNode = <span class="hljs-keyword">this</span>.rightChild.preOrderSearch(targetValue);<br>    &#125;<br>    <span class="hljs-keyword">return</span> resNode;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二叉树类方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> BiNode root;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoot</span><span class="hljs-params">(BiNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.root = root;<br>  &#125;<br>    <br>  ...................................<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 先序查找节点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> BiNode <span class="hljs-title">preOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> targetValue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> root.preOrderSearch(targetValue);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;当前二叉树为空&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-二叉树删除节点"><a href="#6-二叉树删除节点" class="headerlink" title="6. 二叉树删除节点"></a>6. 二叉树删除节点</h3><h4 id="6-1-要求"><a href="#6-1-要求" class="headerlink" title="6.1 要求"></a>6.1 要求</h4><ul><li>如果删除的节点是叶子节点，则删除该节点。</li><li>如果删除的节点是非叶子节点，则删除该子树</li></ul><h4 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title="6.2 思路"></a>6.2 思路</h4><ul><li><p>因为我们的二叉树是单向的，所以我们判断当前节点的子节点是否需要删除，二不是去判断当前节点是否需要删除。</p></li><li><p>首先考虑如果树本身是空树，如果该树只有一个root节点并且为应该被删除节点，则等价于将二叉树置空。</p></li><li><p>如果当前节点的左子节点不为空，并且左子节点就是要删除的节点，就<code>this.leftChild == null</code>，并且返回。</p></li><li><p>如果当前节点的右子节点不为空，并且右子节点就是要删除的节点，就<code>this.rightChild == null</code>，并且返回。</p></li><li><p>如果上面两步都没有完成删除节点，那么我们就需要先向左子树进行递归删除。</p></li><li><p>如果像左子树递归删除没有完成删除节点，我们需要向右子树进行递归删除。</p></li></ul><h4 id="6-3-代码"><a href="#6-3-代码" class="headerlink" title="6.3 代码"></a>6.3 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二叉树类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> BiNode root;<br><br>    .............<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> targetValue)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (root.getData() == targetValue) &#123;<br>                root = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                root.delNode(targetValue);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该二叉树为空，无法删除！&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二叉树节点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BiNode</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> data;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 左右孩子指针</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> BiNode leftChild,rightChild;<br>    <br>  ..........<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除节点</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> targetValue 待删除节点值</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> targetValue)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.leftChild != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.leftChild.data == targetValue) &#123;<br>      <span class="hljs-keyword">this</span>.leftChild = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.rightChild != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.rightChild.data == targetValue) &#123;<br>      <span class="hljs-keyword">this</span>.rightChild = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.leftChild != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.leftChild.delNode(targetValue);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.rightChild != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.rightChild.delNode(targetValue);<br>    &#125;<br><br>  &#125;<br>      <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6-4-测试"><a href="#6-4-测试" class="headerlink" title="6.4 测试"></a>6.4 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建二叉树</span><br>    BinaryTree binaryTree = <span class="hljs-keyword">new</span> BinaryTree();<br><br>    <span class="hljs-comment">// 创建结点</span><br>    BiNode root = <span class="hljs-keyword">new</span> BiNode(<span class="hljs-number">1</span>);<br>    BiNode node2 = <span class="hljs-keyword">new</span> BiNode(<span class="hljs-number">2</span>);<br>    BiNode node3 = <span class="hljs-keyword">new</span> BiNode(<span class="hljs-number">3</span>);<br>    BiNode node4 = <span class="hljs-keyword">new</span> BiNode(<span class="hljs-number">4</span>);<br><br>    <span class="hljs-comment">// 手动创建二叉树</span><br>    binaryTree.setRoot(root);<br>    root.setLeftChild(node2);<br>    root.setRightChild(node3);<br>    node3.setRightChild(node4);<br>    <br>    System.out.println(<span class="hljs-string">&quot;删除前&quot;</span>);<br>    binaryTree.preOrderTraverse();<br>    binaryTree.delNode(<span class="hljs-number">4</span>);<br>    System.out.println(<span class="hljs-string">&quot;删除后&quot;</span>);<br>    binaryTree.preOrderTraverse();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">删除前<br>BiNode&#123;data=1&#125;<br>BiNode&#123;data=2&#125;<br>BiNode&#123;data=3&#125;<br>BiNode&#123;data=4&#125;<br>删除后<br>BiNode&#123;data=1&#125;<br>BiNode&#123;data=2&#125;<br>BiNode&#123;data=3&#125;<br></code></pre></td></tr></table></figure><h3 id="7-创建二叉树"><a href="#7-创建二叉树" class="headerlink" title="7. 创建二叉树"></a>7. 创建二叉树</h3><h4 id="7-1-要求"><a href="#7-1-要求" class="headerlink" title="7.1 要求"></a>7.1 要求</h4><p>按照一维数组构建二叉树，构造下面的二叉树，需要传入数组[1, 2, 3, 4, 5, 6, 7]</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/9.png" alt="tree" style="zoom:75%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一维数组构建二叉树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> BiNode <span class="hljs-title">createBiTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br><br>    BiNode root = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">if</span> (index &gt;= arr.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    root = <span class="hljs-keyword">new</span> BiNode(arr[index]);<br>    root.setLeftChild(createBiTree(arr, <span class="hljs-number">2</span>*index+<span class="hljs-number">1</span>));<br>    root.setRightChild(createBiTree(arr, <span class="hljs-number">2</span>*index+<span class="hljs-number">2</span>));<br><br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-3-测试"><a href="#7-3-测试" class="headerlink" title="7.3 测试"></a>7.3 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建二叉树</span><br>    BinaryTree binaryTree = <span class="hljs-keyword">new</span> BinaryTree();<br><br>    <span class="hljs-comment">// 方法建立二叉树</span><br>    <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>    binaryTree.setRoot(binaryTree.createBiTree(arr, <span class="hljs-number">0</span>));<br>    <span class="hljs-comment">// 先序遍历</span><br>    binaryTree.preOrderTraverse();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">BiNode&#123;data=<span class="hljs-number">1</span>&#125;<br>BiNode&#123;data=<span class="hljs-number">2</span>&#125;<br>BiNode&#123;data=<span class="hljs-number">4</span>&#125;<br>BiNode&#123;data=<span class="hljs-number">5</span>&#125;<br>BiNode&#123;data=<span class="hljs-number">3</span>&#125;<br>BiNode&#123;data=<span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="三、线索化二叉树"><a href="#三、线索化二叉树" class="headerlink" title="三、线索化二叉树"></a>三、线索化二叉树</h2><h4 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h4><p>我们知道遍历二叉树可以得到二叉树结点中的某种序列。在这个线性序列中，每个结点有且仅有一个直接前驱和直接后继。</p><p>但是，当以二叉链表作为存储结构时，只能找到结点的左、右孩子信息，而不能直接得到结点在任一序列中的前驱和后继信息</p><p>我们试着做如下规定，若结点有左子树，则其leftChild域指示其左孩子，否则令leftChild指示前驱；若结点有右子树，则其rightChild指示其右孩子，否则令rightChild指示后继。为了避免混淆，增加两个标志域leftTag和rightTag，其中：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/11.png" alt="线索链表"><p><code>leftTag = 0</code>代表leftchild指向左孩子，<code>leftTag = 1</code>代表leftchild指向前驱。<br>        <code>rightTag = 0</code>代表rightchild指向右孩子，<code>rightTag = 1</code>代表rightchild指向后继。</p><p>以这种结点结构构成的二叉链表作为二叉树的存储结构，<strong>叫做线索链表</strong>，其中指向结点前驱和结点后继的指针，叫做<strong>线索</strong>。加上线索的二叉树被称为<strong>线索二叉树</strong>。</p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h4><p><strong>存储结构</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BiThrNode</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> data;<br>  <span class="hljs-keyword">private</span> BiThrNode left;<br>  <span class="hljs-keyword">private</span> BiThrNode right;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 1.leftType：默认为0，指向左子树；为1，指向前驱</span><br><span class="hljs-comment">   * 2.rightType:默认为0，指向右子树；为1，指向后继</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> leftType;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rightType;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> data;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.data = data;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> BiThrNode <span class="hljs-title">getLeft</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> left;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeft</span><span class="hljs-params">(BiThrNode left)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.left = left;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> BiThrNode <span class="hljs-title">getRight</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> right;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRight</span><span class="hljs-params">(BiThrNode right)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.right = right;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLeftType</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> leftType;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeftType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> leftType)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.leftType = leftType;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRightType</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> rightType;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRightType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rightType)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.rightType = rightType;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>中序线索二叉树方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中序线索二叉树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrderThreading</span><span class="hljs-params">(BiThrNode node)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 线索化左子树</span><br>    inOrderThreading(node.getLeft());<br><br>    <span class="hljs-comment">// 处理前驱结点</span><br>    <span class="hljs-keyword">if</span> (node.getLeft() == <span class="hljs-keyword">null</span>) &#123;<br>        node.setLeft(pre);<br>        node.setLeftType(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">// 在下一轮处理后继结点</span><br>    <span class="hljs-keyword">if</span> (pre != <span class="hljs-keyword">null</span> &amp;&amp; pre.getRight() == <span class="hljs-keyword">null</span>) &#123;<br>        pre.setRight(node);<br>        pre.setRightType(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 每处理一个结点后，让当前结点是下一个结点的前驱节点</span><br>    pre = node;<br><br>    <span class="hljs-comment">// 线索化右子树</span><br>    inOrderThreading(node.getRight());<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="四、树和森林"><a href="#四、树和森林" class="headerlink" title="四、树和森林"></a>四、树和森林</h2><h3 id="1-树的存储结构"><a href="#1-树的存储结构" class="headerlink" title="1.树的存储结构"></a>1.树的存储结构</h3><h4 id="1-1-双亲表示法"><a href="#1-1-双亲表示法" class="headerlink" title="1.1 双亲表示法"></a>1.1 双亲表示法</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/12.png" alt="双亲表示法"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 树的结点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PTreeNode</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> data;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 双亲位置域</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> parentLoc;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PTree</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> PTreeNode[] nodes;<br>    <span class="hljs-keyword">public</span> PTreeNode root;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> nodeNum;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-孩子表示法"><a href="#1-2-孩子表示法" class="headerlink" title="1.2 孩子表示法"></a>1.2 孩子表示法</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/13.png" alt="孩子表示法"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 孩子节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTreeNode</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">public</span> CTreeNode next;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 孩子链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTreeBox</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> data;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 孩子链表头指针</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> CTreeNode head<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTree</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> CTreeBox[] childNodes;<br>    <span class="hljs-keyword">public</span> CTreeNode root;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> nodeNum;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-孩子兄弟表示法"><a href="#1-3-孩子兄弟表示法" class="headerlink" title="1.3 孩子兄弟表示法"></a>1.3 孩子兄弟表示法</h4><p>孩子兄弟表示法又称二叉树表示法，或二叉链表表示法。即以二叉链表作为树的存储结构。链表中结点的两个链域分别指向该结点的第一个孩子结点和下一个兄弟节点。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/14.png" alt="二叉链表表示法" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CSNode</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">public</span> CSNode firstchild;<br>    <span class="hljs-keyword">public</span> CSNode nextsibling;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CSTree</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> CSNode root;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-森林和二叉树的转换"><a href="#2-森林和二叉树的转换" class="headerlink" title="2. 森林和二叉树的转换"></a>2. 森林和二叉树的转换</h3><p>具体参考知乎文章：<a href="https://zhuanlan.zhihu.com/p/134251528">https://zhuanlan.zhihu.com/p/134251528</a></p><p>具体参考博客园文章：<a href="https://www.cnblogs.com/zhuyf87/archive/2012/11/04/2753950.html">https://www.cnblogs.com/zhuyf87/archive/2012/11/04/2753950.html</a></p><h4 id="2-1-多叉树向二叉树的转换方法"><a href="#2-1-多叉树向二叉树的转换方法" class="headerlink" title="2.1 多叉树向二叉树的转换方法"></a>2.1 多叉树向二叉树的转换方法</h4><p>（1）加虚线：同一个父节点的相邻兄弟节点之间加虚线。</p><p>（2）抹实线：每个节点只保留它与最左子节点的连线，与其他子节点的连线全都抹掉。</p><p>（3）虚改实：虚线改为实线。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/15.png" alt="多叉树-&gt;二叉树"></p><h4 id="2-2-森林向二叉树的转换方法"><a href="#2-2-森林向二叉树的转换方法" class="headerlink" title="2.2 森林向二叉树的转换方法"></a>2.2 森林向二叉树的转换方法</h4><p>（1）把每一棵树转换为二叉树。</p><p>（2）保留第一棵二叉树，自第二棵二叉树始，依次将后一棵二叉树的根结点作为前一棵二叉树根结点的右孩子，当所有的二叉树依此相连后，所得到的二叉树就是由森林转化成的二叉树。</p><p>（3）以树根为轴心，将整棵树按顺时钟方向旋转约45° 。</p><p>&lt;img src=”<a href="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/16.png&quot;">https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/16.png&quot;</a> alt=”森林- style=”zoom: 25%;” &gt;二叉树” /&gt;</p><h4 id="2-3-二叉树恢复为森林的方法"><a href="#2-3-二叉树恢复为森林的方法" class="headerlink" title="2.3 二叉树恢复为森林的方法"></a>2.3 二叉树恢复为森林的方法</h4><p>将当前根结点和其左子树作为森林的一棵树，并将其右子树作为 森林的其他子树；重复上面直到某结点的右子树为空。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/17.png" alt="二叉树-  >森林"><h4 id="2-4-二叉树恢复为多叉树的方法"><a href="#2-4-二叉树恢复为多叉树的方法" class="headerlink" title="2.4 二叉树恢复为多叉树的方法"></a>2.4 二叉树恢复为多叉树的方法</h4><p>（1）加线。若某结点X的左孩子结点存在，则将这个左孩子的右孩子结点、右孩子的右孩子结点、右孩子的右孩子的右孩子结点…，都作为结点X的孩子。将结点X与这些右孩子结点用线连接起来。</p><p>（2）去线。删除原二叉树中所有结点与其右孩子结点的连线。</p><p>（3）层次调整。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/18.png" alt="二叉树-&gt;多叉树"></p><h3 id="3-树和森林的遍历"><a href="#3-树和森林的遍历" class="headerlink" title="3.树和森林的遍历"></a>3.树和森林的遍历</h3><h4 id="3-1-树的遍历"><a href="#3-1-树的遍历" class="headerlink" title="3.1 树的遍历"></a>3.1 树的遍历</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/19.png" alt="树的遍历" style="zoom:80%;"><h4 id="3-2-森林的遍历"><a href="#3-2-森林的遍历" class="headerlink" title="3.2 森林的遍历"></a>3.2 森林的遍历</h4><p>1.<strong>先序遍历森林</strong></p><ul><li>访问森林中第一棵树的根节点。</li><li>先序遍历第一棵树的根节点的子树。</li><li>先序遍历去掉第一棵树后的子森林。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/20.png" alt="先序遍历森林"></p><p>2.<strong>中序遍历森林</strong></p><ul><li>中序遍历第一棵树的根节点的子树。</li><li>访问森林中第一棵树的根节点。</li><li>中序遍历去掉第一棵树后的子森林。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/21.png" alt="中序遍历"></p><h3 id="4-树、二叉树、森林遍历方式的对应关系"><a href="#4-树、二叉树、森林遍历方式的对应关系" class="headerlink" title="4. 树、二叉树、森林遍历方式的对应关系"></a>4. 树、二叉树、森林遍历方式的对应关系</h3><table><thead><tr><th align="center">树</th><th align="center">二叉树</th><th align="center">森林</th></tr></thead><tbody><tr><td align="center">先序遍历</td><td align="center">先序遍历</td><td align="center">先序遍历</td></tr><tr><td align="center">后序遍历</td><td align="center">中序遍历</td><td align="center">后序遍历</td></tr></tbody></table><hr><h2 id="五、赫夫曼树及其应用"><a href="#五、赫夫曼树及其应用" class="headerlink" title="五、赫夫曼树及其应用"></a>五、赫夫曼树及其应用</h2><h3 id="1-重要概念"><a href="#1-重要概念" class="headerlink" title="1. 重要概念"></a>1. 重要概念</h3><h4 id="1-1-路径与路径长度"><a href="#1-1-路径与路径长度" class="headerlink" title="1.1 路径与路径长度"></a>1.1 路径与路径长度</h4><p>在一棵数中，从一个结点往下可以达到的孩子或孙子结点之间的通路，称为路径。通路中分支的数目成为路径长度，若规定根节点的层数为1，则从根节点到第L层节点的路径长度为L-1。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/22.png" alt="路径" style="zoom:80%;"><h4 id="1-2-结点的权与带权路径长度"><a href="#1-2-结点的权与带权路径长度" class="headerlink" title="1.2 结点的权与带权路径长度"></a>1.2 结点的权与带权路径长度</h4><p>若给树中结点赋予一个有着某种含义的数值，则这个数值成为该结点的权。<strong>结点的带权路径长度</strong>为：从根结点到该结点之间的路径长度与该结点的权的乘积。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/23.png" alt="结点的带权路径长度" style="zoom:80%;"><h4 id="1-3-树的带权路径长度"><a href="#1-3-树的带权路径长度" class="headerlink" title="1.3 树的带权路径长度"></a>1.3 树的带权路径长度</h4><p><strong>树的带权路径长度为</strong>：树中所有叶子节点的带权路径长度之和，一般称为WPL，权值越大的结点离根结点越近的二叉树才是最优二叉树。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/24.png" alt="树的带权路径长度" style="zoom:80%;"><h4 id="1-4-赫夫曼树"><a href="#1-4-赫夫曼树" class="headerlink" title="1.4 赫夫曼树"></a>1.4 赫夫曼树</h4><p>假设有n个权值{w1,w2,…,wn}，试构造一棵<strong>有n个叶子结点的二叉树</strong>，其中带权路径长度WPL最小的二叉树称为<strong>最优二叉树</strong>或<strong>赫夫曼树</strong>。</p><h3 id="2-构造赫夫曼树"><a href="#2-构造赫夫曼树" class="headerlink" title="2. 构造赫夫曼树"></a>2. 构造赫夫曼树</h3><h4 id="2-1-要求"><a href="#2-1-要求" class="headerlink" title="2.1 要求"></a>2.1 要求</h4><p>给定权值数列：{6, 3, 8, 2, 9}，要求构造赫夫曼树。</p><h4 id="2-2-赫夫曼算法"><a href="#2-2-赫夫曼算法" class="headerlink" title="2.2 赫夫曼算法"></a>2.2 赫夫曼算法</h4><ol><li>从小到大排序，每个数据都是一个结点，每一个结点可以看成一棵最简单的二叉树</li><li>取出根节点权值最小的两棵二叉树</li><li>组成一棵新的二叉树，该新的二叉树的根结点的权值是前面两棵二叉树根结点权值的和</li><li>再将这颗新的二叉树，以根结点的权值大小再次排序，不断重复1-2-3-4的步骤</li><li>直到权值数列中所有的数据都被处理，就得到了一棵赫夫曼树</li></ol><h4 id="2-3-图解"><a href="#2-3-图解" class="headerlink" title="2.3 图解"></a>2.3 图解</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/25.png" alt="赫夫曼树构建"></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/26.png" alt="赫夫曼树构建"><p>在计算<code>带权路径长度</code>的时候，需要<code>重新计算树的高度</code>(从下往上)，因为哈夫曼树是从下往上构造的，所以对于高度不太好维护，可以构造好然后计算高度。</p><p>比如上述的<code>WPL</code>为：<code>2*3+3*3+6*2+8*2+9*2=(2+3)*3+(6+8+9)*2=61</code>.</p><h4 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h4><p><strong>结点类Node</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Node</span>&gt;</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">public</span> Node left;<br>    <span class="hljs-keyword">public</span> Node right;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *记录结点深度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> depth;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前序遍历</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;value=&quot;</span> + value +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Node o)</span> </span>&#123;<br>        <span class="hljs-comment">// 表示从小到大排序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value - o.value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建赫夫曼树</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建赫夫曼树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">createHuffmanTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><br>    List&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;Node&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> value: arr) &#123;<br>        nodes.add(<span class="hljs-keyword">new</span> Node(value));<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (nodes.size() &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 从小到大排序</span><br>        Collections.sort(nodes);<br><br>        <span class="hljs-comment">// 取出根节点最小的两课二叉树</span><br>        Node leftNode = nodes.get(<span class="hljs-number">0</span>);<br>        Node rightNode = nodes.get(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 构建一棵新的二叉树</span><br>        Node parent = <span class="hljs-keyword">new</span> Node(leftNode.value + rightNode.value);<br>        parent.left = leftNode;<br>        parent.right = rightNode;<br><br>        <span class="hljs-comment">// 删除处理过的二叉树</span><br>        nodes.remove(leftNode);<br>        nodes.remove(rightNode);<br><br>        <span class="hljs-comment">// 将parent二叉树加入</span><br>        nodes.add(parent);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> nodes.get(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>求赫夫曼树带权路径长度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取赫夫曼树的带权路径长度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWPL</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>    ArrayDeque&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br>    nodes.add(root);<br>    <span class="hljs-keyword">int</span> WPL = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!nodes.isEmpty()) &#123;<br>        Node node = nodes.poll();<br>        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span> &amp;&amp; node.right != <span class="hljs-keyword">null</span>) &#123;<br>            node.left.depth = node.depth + <span class="hljs-number">1</span>;<br>            node.right.depth = node.depth + <span class="hljs-number">1</span>;<br>            nodes.add(node.left);<br>            nodes.add(node.right);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            WPL += node.depth * node.value;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> WPL;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>整合代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 赫夫曼树</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-21 19:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HuffmanTree</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>&#125;;<br>    Node root = createHuffmanTree(arr);<br>    preOrder(root);<br>    <span class="hljs-keyword">int</span> wpl = getWPL(root);<br>    System.out.println(<span class="hljs-string">&quot;赫夫曼树带权路径长度为：&quot;</span>+ wpl);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 先序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>      root.preOrder();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;空树，无法遍历&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建赫夫曼树</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">createHuffmanTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><br>    List&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;Node&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> value: arr) &#123;<br>      nodes.add(<span class="hljs-keyword">new</span> Node(value));<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (nodes.size() &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 从小到大排序</span><br>      Collections.sort(nodes);<br><br>      <span class="hljs-comment">// 取出根节点最小的两课二叉树</span><br>      Node leftNode = nodes.get(<span class="hljs-number">0</span>);<br>      Node rightNode = nodes.get(<span class="hljs-number">1</span>);<br><br>      <span class="hljs-comment">// 构建一棵新的二叉树</span><br>      Node parent = <span class="hljs-keyword">new</span> Node(leftNode.value + rightNode.value);<br>      parent.left = leftNode;<br>      parent.right = rightNode;<br><br>      <span class="hljs-comment">// 删除处理过的二叉树</span><br>      nodes.remove(leftNode);<br>      nodes.remove(rightNode);<br><br>      <span class="hljs-comment">// 将parent二叉树加入</span><br>      nodes.add(parent);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> nodes.get(<span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取赫夫曼树的带权路径长度</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWPL</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>    ArrayDeque&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br>    nodes.add(root);<br>    <span class="hljs-keyword">int</span> WPL = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!nodes.isEmpty()) &#123;<br>      Node node = nodes.poll();<br>      <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span> &amp;&amp; node.right != <span class="hljs-keyword">null</span>) &#123;<br>        node.left.depth = node.depth + <span class="hljs-number">1</span>;<br>        node.right.depth = node.depth + <span class="hljs-number">1</span>;<br>        nodes.add(node.left);<br>        nodes.add(node.right);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        WPL += node.depth * node.value;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> WPL;<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Node</span>&gt;</span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>  <span class="hljs-keyword">public</span> Node left;<br>  <span class="hljs-keyword">public</span> Node right;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *记录结点深度</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> depth;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.value = value;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 前序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.left.preOrder();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.right.preOrder();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;value=&quot;</span> + value +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>  &#125;<br><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Node o)</span> </span>&#123;<br>    <span class="hljs-comment">// 表示从小到大排序</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value - o.value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Node&#123;value=<span class="hljs-number">28</span>&#125;<br>Node&#123;value=<span class="hljs-number">11</span>&#125;<br>Node&#123;value=<span class="hljs-number">5</span>&#125;<br>Node&#123;value=<span class="hljs-number">2</span>&#125;<br>Node&#123;value=<span class="hljs-number">3</span>&#125;<br>Node&#123;value=<span class="hljs-number">6</span>&#125;<br>Node&#123;value=<span class="hljs-number">17</span>&#125;<br>Node&#123;value=<span class="hljs-number">8</span>&#125;<br>Node&#123;value=<span class="hljs-number">9</span>&#125;<br>赫夫曼树带权路径长度为：<span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><h3 id="3-赫夫曼编码"><a href="#3-赫夫曼编码" class="headerlink" title="3.赫夫曼编码"></a>3.赫夫曼编码</h3><h4 id="3-1-基本介绍"><a href="#3-1-基本介绍" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h4><ol><li>赫夫曼编码是一种编码方式，属于一种程序算法</li><li>赫夫曼编码是赫夫曼树在电讯通信中的经典的应用之一</li><li>赫夫曼编码广泛地用于数据文件压缩，其压缩率通常在20%~90%之间</li><li>赫夫曼编码是可变字长编码的一种，也称为最佳编码</li></ol><h4 id="3-2-原理剖析"><a href="#3-2-原理剖析" class="headerlink" title="3.2 原理剖析"></a>3.2 原理剖析</h4><p>在数据通信中，需要将传送的文字转换成二进制的字符串，用0，1码的不同排列来表示字符。例如，需传送的报文为“AFTER DATA EAR ARE ART AREA”，这里用到的字符集为“A，E，R，T，F，D”，各字母出现的次数为{8，4，5，3，1，1}。</p><p>现要求为这些字母设计编码。要区别6个字母，最简单的二进制编码方式是等长编码，固定采用3位二进制，可分别用000、001、010、011、100、101对“A，E，R，T，F，D”进行编码发送，当对方接收报文时再按照三位一分进行译码。显然编码的长度取决报文中不同字符的个数。若报文中可能出现26个不同字符，则固定编码长度为5</p><p>然而，传送报文时总是希望总长度尽可能短。在实际应用中，各个字符的出现频度或使用次数是不相同的，如A、B、C的使用频率远远高于X、Y、Z，自然会想到设计编码时，让<strong>使用频率高的用短码，使用频率低的用长码</strong>，以优化整个报文编码</p><p>为使不等长编码为<strong>前缀编码</strong>(即要求一个字符的编码不能是另一个字符编码的前缀)，可用字符集中的每个字符作为叶子结点生成一棵编码二叉树，为了获得传送报文的最短长度，可将每个字符的出现频率作为字符结点的权值赋予该结点上，显然字使用频率越小权值越小，权值越小叶子就越靠下，于是频率小编码长，频率高编码短，这样就保证了此树的最小带权路径长度效果上就是传送报文的最短长度。</p><p>因此，求传送报文的最短长度问题转化为求由字符集中的所有字符作为叶子结点，由字符出现频率作为其权值所产生的哈夫曼树的问题。利用哈夫曼树来设计二进制的前缀编码，既满足前缀编码的条件，又保证报文编码总长最短，该前缀编码称为<strong>赫夫曼编码</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/27.png" alt="赫夫曼编码" style="zoom: 67%;"><p>如上图所示，对于一个字符串“AAAAABCCCCCCDDD” 来说，很容易知道每个字符出现的频次{5，1，6，3}。根据频次，每次选出频次最小的两个结点进行组合，频次相加得到父结点。不断重复此过程，直到产生一颗哈夫曼树。</p><p>通过该哈夫曼树，我们可以得到每个字符的哈夫曼编码 A=11，B=100,C=0,D=101</p><h4 id="3-3-题目案例"><a href="#3-3-题目案例" class="headerlink" title="3.3 题目案例"></a>3.3 题目案例</h4><p>将给出的一段文本，比如：“I like like like java do u like java”，根据赫夫曼编码原理，对其进行数据压缩处理，压缩后能够进行解压。</p><h4 id="3-4-代码实现-1"><a href="#3-4-代码实现-1" class="headerlink" title="3.4 代码实现"></a>3.4 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 赫夫曼编码压缩</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-21 22:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HuffmanCode</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    String str = <span class="hljs-string">&quot;i like like like java do u like java&quot;</span>;<br>    <span class="hljs-keyword">byte</span>[] contentBytes = str.getBytes();<br>    System.out.println(<span class="hljs-string">&quot;压缩前的结果：&quot;</span> + Arrays.toString(contentBytes) + <span class="hljs-string">&quot;；长度为：&quot;</span> + contentBytes.length);<br>    <span class="hljs-keyword">byte</span>[] huffmanCodeBytes = huffmanZip(contentBytes);<br>    System.out.println(<span class="hljs-string">&quot;压缩后的结果：&quot;</span> + Arrays.toString(huffmanCodeBytes) + <span class="hljs-string">&quot;；长度为：&quot;</span> + huffmanCodeBytes.length);<br>    <span class="hljs-keyword">byte</span>[] sourceBytes = decode(huffmanCodes, huffmanCodeBytes);<br>    System.out.println(<span class="hljs-string">&quot;解压后的字符串=&quot;</span>+ <span class="hljs-keyword">new</span> String(sourceBytes));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取字符出现次数列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bytes 接收字符数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 返回</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Node&gt; <span class="hljs-title">getNodes</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes)</span> </span>&#123;<br>    ArrayList&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">// 统计每一个byte出现次数</span><br>    HashMap&lt;Byte, Integer&gt; counts = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b: bytes) &#123;<br>      Integer count = counts.get(b);<br>      <span class="hljs-comment">// 第一次出现</span><br>      <span class="hljs-keyword">if</span> (count == <span class="hljs-keyword">null</span>) &#123;<br>        counts.put(b, <span class="hljs-number">1</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        counts.put(b, count + <span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 把每一个键值对转成 Node 对象，并加入nodes集合</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Byte, Integer&gt; entry: counts.entrySet()) &#123;<br>      nodes.add(<span class="hljs-keyword">new</span> Node(entry.getKey(), entry.getValue()));<br>    &#125;<br>    <span class="hljs-keyword">return</span> nodes;<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通过List创建赫夫曼树</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">createHuffmanTree</span><span class="hljs-params">(List&lt;Node&gt; nodes)</span> </span>&#123;<br><br>    <span class="hljs-keyword">while</span> (nodes.size() &gt;<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 从小到大排序</span><br>      Collections.sort(nodes);<br>      <span class="hljs-comment">// 取出前两棵最小二叉树</span><br>      Node leftNode = nodes.get(<span class="hljs-number">0</span>);<br>      Node rightNode = nodes.get(<span class="hljs-number">1</span>);<br>      <span class="hljs-comment">// 创建一棵新的二叉树,合并的新结点没有数据，只有权值</span><br>      Node parentNode = <span class="hljs-keyword">new</span> Node(<span class="hljs-keyword">null</span>, leftNode.weight + rightNode.weight);<br>      parentNode.left = leftNode;<br>      parentNode.right = rightNode;<br>      <span class="hljs-comment">// 将已经处理的两棵二叉树从nodes移除</span><br>      nodes.remove(leftNode);<br>      nodes.remove(rightNode);<br>      <span class="hljs-comment">//加入新的二叉树</span><br>      nodes.add(parentNode);<br>    &#125;<br>    <span class="hljs-keyword">return</span> nodes.get(<span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 先序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>      root.preOrder();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;赫夫曼树为空&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生成赫夫曼树对应的赫夫曼编码：Map&lt;Byte, String&gt;，如&lt;97, &quot;100&quot;&gt;，即a字符对应的编码为100</span><br><span class="hljs-comment">   * StringBuilder 用于根据路径拼接赫夫曼编码</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> Map&lt;Byte, String&gt; huffmanCodes = <span class="hljs-keyword">new</span> HashMap&lt;Byte, String&gt;();<br>  <span class="hljs-keyword">static</span> StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 得到赫夫曼编码</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> node 传入结点</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code 路径码：左子结点是0，右子节点为1</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> stringBuilder 拼接路径</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getHuffmanCodes</span><span class="hljs-params">(Node node, String code, StringBuilder stringBuilder)</span> </span>&#123;<br><br>    StringBuilder stringBuilder2 = <span class="hljs-keyword">new</span> StringBuilder(stringBuilder);<br>    <span class="hljs-comment">// 将 code 路径码加入stringBuilder2</span><br>    stringBuilder2.append(code);<br>    <span class="hljs-keyword">if</span> (node != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-comment">// 判断 node 是叶子结点还是非叶子节点</span><br>      <span class="hljs-keyword">if</span> (node.data == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 向左递归</span><br>        getHuffmanCodes(node.left, <span class="hljs-string">&quot;0&quot;</span>, stringBuilder2);<br>        <span class="hljs-comment">// 向右递归</span><br>        getHuffmanCodes(node.right, <span class="hljs-string">&quot;1&quot;</span>, stringBuilder2);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        huffmanCodes.put(node.data, stringBuilder2.toString());<br>      &#125;<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 重载getCodes</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;Byte, String&gt; <span class="hljs-title">getHuffmanCodes</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      getHuffmanCodes(root.left, <span class="hljs-string">&quot;0&quot;</span>, stringBuilder);<br>      getHuffmanCodes(root.right, <span class="hljs-string">&quot;1&quot;</span>, stringBuilder);<br>      <span class="hljs-keyword">return</span> huffmanCodes;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 将字符串对应的byte[]数组，通过赫夫曼编码Map，返回赫夫曼编码压缩后的 byte[]数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bytes 原始字符串对应的byte数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> huffmanCodes 生成的赫夫曼编码</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 返回赫夫曼编码压缩后的byte数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] zip(<span class="hljs-keyword">byte</span>[] bytes, Map&lt;Byte, String&gt; huffmanCodes) &#123;<br><br>    StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b: bytes) &#123;<br>      stringBuilder.append(huffmanCodes.get(b));<br>    &#125;<br><br>    <span class="hljs-comment">// 统计需要返回的byte数组长度</span><br>    <span class="hljs-keyword">int</span> len;<br>    <span class="hljs-keyword">if</span> (stringBuilder.length() % <span class="hljs-number">8</span> == <span class="hljs-number">0</span>) &#123;<br>      len = stringBuilder.length() / <span class="hljs-number">8</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      len = stringBuilder.length() / <span class="hljs-number">8</span> + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建存储压缩后的byte数组</span><br>    <span class="hljs-keyword">byte</span>[] huffmanCodeBytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[len];<br>    <span class="hljs-comment">// huffmanCodeBytes数组索引</span><br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 每8位对应一个byte</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stringBuilder.length(); i += <span class="hljs-number">8</span>, index++) &#123;<br>      String strByte;<br>      <span class="hljs-comment">// 如果最后不够8位,取到最后即可</span><br>      <span class="hljs-keyword">if</span> (i + <span class="hljs-number">8</span> &gt; stringBuilder.length()) &#123;<br>        strByte = stringBuilder.substring(i);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        strByte = stringBuilder.substring(i, i + <span class="hljs-number">8</span>);<br>      &#125;<br>      <span class="hljs-comment">// 将strByte转成byte数组</span><br>      huffmanCodeBytes[index] = (<span class="hljs-keyword">byte</span>) Integer.parseInt(strByte, <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> huffmanCodeBytes;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 封装前面的方法</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bytes 原始的字符串对应的字节数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 经过赫夫曼编码压缩后的字节数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] huffmanZip(<span class="hljs-keyword">byte</span>[] bytes) &#123;<br>    List&lt;Node&gt; nodes = getNodes(bytes);<br>    <span class="hljs-comment">// 根据nodes创建赫夫曼树</span><br>    Node huffmanTreeRoot = createHuffmanTree(nodes);<br>    <span class="hljs-comment">// 根据赫夫曼树生成赫夫曼编码</span><br>    Map&lt;Byte, String&gt; huffmanCodes = getHuffmanCodes(huffmanTreeRoot);<br>    <span class="hljs-comment">// 根据赫夫曼编码得到压缩后的字节数组</span><br>    <span class="hljs-keyword">return</span> zip(bytes, huffmanCodes);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 将一个byte转化为一个二进制的字符串</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">byteToBitString</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag, <span class="hljs-keyword">byte</span> b)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 返回 b 对应的二进制的补码</span><br>    <span class="hljs-keyword">int</span> temp = b;<br>    <span class="hljs-comment">// 标志是否需要取高位</span><br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>      temp |= <span class="hljs-number">256</span>;<br>    &#125;<br>    String str = Integer.toBinaryString(temp);<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>      <span class="hljs-keyword">return</span> str.substring(str.length() - <span class="hljs-number">8</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *  对压缩数据解码</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> huffmanCodes 赫夫曼编码表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> huffmanBytes 赫夫曼得到的字节数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 原来的字符串对应的byte数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decode(Map&lt;Byte, String&gt; huffmanCodes, <span class="hljs-keyword">byte</span>[] huffmanBytes) &#123;<br><br>    <span class="hljs-comment">// 先得到 huffmanBytes 对应的二进制的字符串</span><br>    StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-comment">// 将 byte 数组转成二进制字符串</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; huffmanBytes.length; i++) &#123;<br>      <span class="hljs-keyword">byte</span> b = huffmanBytes[i];<br>      <span class="hljs-keyword">boolean</span> flag = (i == huffmanBytes.length - <span class="hljs-number">1</span>);<br>      stringBuilder.append(byteToBitString(!flag, b));<br>    &#125;<br><br>    <span class="hljs-comment">// 把字符串按照指定的赫夫曼编码进行解码</span><br>    Map&lt;String, Byte&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Byte&gt;();<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Byte, String&gt; entry: huffmanCodes.entrySet()) &#123;<br>      map.put(entry.getValue(), entry.getKey());<br>    &#125;<br><br>    <span class="hljs-comment">// 创建要给集合，存放byte</span><br>    List&lt;Byte&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stringBuilder.length();) &#123;<br>      <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>      Byte b = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">while</span> (flag) &#123;<br>        <span class="hljs-comment">// 取字符直到能取出Map中存在的编码</span><br>        String key = stringBuilder.substring(i, i + count);<br>        b = map.get(key);<br>        <span class="hljs-comment">// 尚未匹配到</span><br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-keyword">null</span>) &#123;<br>          count++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          flag = <span class="hljs-keyword">false</span>;<br>        &#125;<br>      &#125;<br>      list.add(b);<br>      i += count;<br>    &#125;<br><br>    <span class="hljs-comment">// 把list中的数据放入byte[] 并返回</span><br>    <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[list.size()];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>      b[i] = list.get(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结点类，存放数据和权值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Node</span>&gt;</span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 存放数据（字符）本身，比如&#x27;a&#x27; =&gt; 97</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> Byte data;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 权值，表示字符出现的次数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> weight;<br><br>  <span class="hljs-keyword">public</span> Node left, right;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Byte data, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.data = data;<br>    <span class="hljs-keyword">this</span>.weight = weight;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Node o)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.weight - o.weight;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;data=&quot;</span> + data +<br>            <span class="hljs-string">&quot;, weight=&quot;</span> + weight +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 前序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.left.preOrder();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.right.preOrder();<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-测试结果"><a href="#3-5-测试结果" class="headerlink" title="3.5 测试结果"></a>3.5 测试结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">压缩前的结果：[105, 32, 108, 105, 107, 101, 32, 108, 105, 107, 101, 32, 108, 105, 107, 101, 32, 106, 97, 118, 97, 32, 100, 111, 32, 117, 32, 108, 105, 107, 101, 32, 106, 97, 118, 97]；长度为：36<br>压缩后的结果：[-60, -51, 19, 52, 76, -47, 95, -33, 45, -62, -28, -51, 21, -3, 15]；长度为：15<br>解压后的字符串=i like like like java <span class="hljs-keyword">do</span> u like java<br></code></pre></td></tr></table></figure><hr><h2 id="六、二叉排序树（BST）"><a href="#六、二叉排序树（BST）" class="headerlink" title="六、二叉排序树（BST）"></a>六、二叉排序树（BST）</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>二叉排序树：BST：(Binary Sort(Search) Tree)，对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。</p><p>说明：如果有相同的值，可以将该节点放在左子节点或右子节点。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/28.png" alt="二叉排序树" style="zoom:;"><h3 id="2-创建二叉排序树"><a href="#2-创建二叉排序树" class="headerlink" title="2.创建二叉排序树"></a>2.创建二叉排序树</h3><h4 id="2-1-要求-1"><a href="#2-1-要求-1" class="headerlink" title="2.1 要求"></a>2.1 要求</h4><p>一个数组创建成对应的二叉排序树，并使用中序遍历二叉排序树，比如：数组为Array{7, 3, 10, 12, 5, 1, 9}，创建成对应的二叉排序树为：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/29.png" alt="二叉排序树"></p><p>中序遍历应为：1、3、5、7、9、10、12</p><h4 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 二叉排序树</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-23 11:28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySortTree</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> Node root;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加结点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>      root = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      root.add(node);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 中序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>      root.inOrder();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;二叉排序树为空，不能遍历&quot;</span>);<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>  <span class="hljs-keyword">public</span> Node left;<br>  <span class="hljs-keyword">public</span> Node right;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.value = value;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;value=&quot;</span> + value +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加结点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 判断传入的值与当前子树根节点的关系</span><br>    <span class="hljs-keyword">if</span> (node.value &lt; <span class="hljs-keyword">this</span>.value) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.left = node;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.left.add(node);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.right = node;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.right.add(node);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 中序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.left.inOrder();<br>    &#125;<br>    System.out.println(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.right.inOrder();<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>&#125;;<br>    BinarySortTree binarySortTree = <span class="hljs-keyword">new</span> BinarySortTree();<br>    <span class="hljs-comment">// 循环添加结点到二叉排序树</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>      binarySortTree.add(<span class="hljs-keyword">new</span> Node(arr[i]));<br>    &#125;<br>    <span class="hljs-comment">// 中序遍历二叉排序树</span><br>    binarySortTree.inOrder();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试结果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Node&#123;value=1&#125;<br>Node&#123;value=3&#125;<br>Node&#123;value=5&#125;<br>Node&#123;value=7&#125;<br>Node&#123;value=9&#125;<br>Node&#123;value=10&#125;<br>Node&#123;value=12&#125;<br></code></pre></td></tr></table></figure><h3 id="3-二叉排序树的删除"><a href="#3-二叉排序树的删除" class="headerlink" title="3. 二叉排序树的删除"></a>3. 二叉排序树的删除</h3><h4 id="3-1-分析情况"><a href="#3-1-分析情况" class="headerlink" title="3.1 分析情况"></a>3.1 分析情况</h4><p>二叉排序树的删除情况比较复杂，有下面三种情况需要考虑:</p><p><strong>情况1</strong>：删除叶子结点</p><p><strong>情况2</strong>：删除只有一棵子树的结点</p><p><strong>情况3</strong>：删除有两棵子树的结点</p><h4 id="3-2思路分析"><a href="#3-2思路分析" class="headerlink" title="3.2思路分析"></a>3.2思路分析</h4><p><strong>删除叶子结点</strong>：</p><ul><li><p>需要先去找到要删除的结点 targetNode</p></li><li><p>找到 targetValue 的父结点 parent</p></li><li><p>确定 targetNode 是 parent 的左子结点还是右子结点</p></li><li><p>根据前面的情况来对应删除</p><p>左子结点：parent.left = null;</p><p>右子结点：parent.right = null;</p></li></ul><p><strong>删除只有一棵子树的结点</strong>：</p><ul><li><p>需要先去找到要删除的结点 targetNode</p></li><li><p>找到 targetValue 的父结点 parent</p></li><li><p>确定 targetNode 的唯一一个子结点是左子结点还是右子结点</p></li><li><p>确定 targetNode 是 parent 的左子结点还是右子结点</p></li><li><p>如果 targetNode 有左子结点，且 targetNode 是 parent 左子结点：parent.left = targetNode.left;</p><p>如果 targetNode 有左子结点，且 targetNode 是 parent 右子结点：parent.right = targetNode.left;</p><p>如果 targetNode 有右子结点，且 targetNode 是 parent 左子结点：parent.left= targetNode.right;</p><p>如果 targetNode 有右子结点，且 targetNode 是 parent 右子结点：parent.right = targetNode.right</p></li></ul><p><strong>删除有两棵子树的结点</strong></p><ul><li>需要先去找到要删除的结点 targetNode</li><li>找到 targetValue 的父结点 parent</li><li>从 targetNode 的右子树（左子树）找到最小（最大）的结点</li><li>用一个临时变量，将最小（最大）结点的值保存 temp</li><li>删除该最小（最大）结点</li><li>令 targetNode.value = temp</li></ul><h4 id="3-3-代码"><a href="#3-3-代码" class="headerlink" title="3.3 代码"></a>3.3 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 二叉排序树</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-23 11:28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySortTree</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> Node root;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加结点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>      root = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      root.add(node);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查找要删除的结点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">searchBST</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> root.searchBST(value);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查找要删除结点的父结点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">searchParent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> root.searchParent(value);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 中序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>      root.inOrder();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;二叉排序树为空，不能遍历&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除某结点右子树最小的结点值，并返回该最小值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> node 传入的结点（当作二叉排序树的根结点）</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 以node为根节点的二叉排序树的最小结点的值</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delRightTreeMin</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-comment">// target保存右子树最小结点</span><br>    Node target = node;<br>    <span class="hljs-keyword">while</span> (target.left != <span class="hljs-keyword">null</span>) &#123;<br>      target = target.left;<br>    &#125;<br>    <span class="hljs-comment">//删除最小结点</span><br>    delNode(target.value);<br>    <span class="hljs-keyword">return</span> target.value;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除结点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 1.找到要删除的结点</span><br>      Node targetNode = searchBST(value);<br>      <span class="hljs-keyword">if</span> (targetNode == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-comment">// 如果我们发现当前二叉排序树只有一个结点</span><br>      <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span>) &#123;<br>        root = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-comment">// 2.找到 targetNode 的父结点</span><br>      Node parent = searchParent(value);<br>      <span class="hljs-comment">// 如果要删除的结点是叶子结点</span><br>      <span class="hljs-keyword">if</span> (targetNode.left == <span class="hljs-keyword">null</span> &amp;&amp; targetNode.right == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 判断targetNode 是父节点的左子结点还是右子结点</span><br>        <span class="hljs-keyword">if</span> (parent.left != <span class="hljs-keyword">null</span> &amp;&amp; parent.left.value == value) &#123;<br>          parent.left = <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent.right != <span class="hljs-keyword">null</span> &amp;&amp; parent.right.value == value) &#123;<br>          parent.right = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果要删除的结点为只有一棵子树的结点</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetNode.left != <span class="hljs-keyword">null</span> &amp;&amp; targetNode.right != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">int</span> minVal = delRightTreeMin(targetNode.right);<br>        targetNode.value = minVal;<br>        <span class="hljs-comment">// 如果要删除的结点为有两棵子树的结点</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (targetNode.left != <span class="hljs-keyword">null</span>) &#123;<br>          <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (parent.left != <span class="hljs-keyword">null</span> &amp;&amp; parent.left.value == value) &#123;<br>              parent.left = targetNode.left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              parent.right = targetNode.left;<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            root = targetNode.left;<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (parent.left != <span class="hljs-keyword">null</span> &amp;&amp; parent.left.value == value) &#123;<br>              parent.left = targetNode.right;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              parent.right = targetNode.right;<br>            &#125;<br>          &#125;<span class="hljs-keyword">else</span> &#123;<br>            root = targetNode.right;<br>          &#125;<br>        &#125;<br>      &#125;<br><br>    &#125;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结点类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>  <span class="hljs-keyword">public</span> Node left;<br>  <span class="hljs-keyword">public</span> Node right;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.value = value;<br>  &#125;<br><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查找要删除的结点</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value 希望删除的结点值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 找到返回该节点，没找到返回null</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">searchBST</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value == value) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>      <span class="hljs-comment">// 小于此节点值，向左子树查找</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-keyword">this</span>.value) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.left.searchBST(value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.right.searchBST(value);<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查找要删除结点的父结点</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value 希望删除的结点值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 返回要删除结点的父结点，没有就返回null</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">searchParent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果当前结点就是要删除结点的父结点</span><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.value == value) || (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.value == value)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 向左子树递归查找</span><br>      <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-keyword">this</span>.value &amp;&amp; <span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.left.searchParent(value);<br>        <span class="hljs-comment">// 向右子树递归查找</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt;= <span class="hljs-keyword">this</span>.value &amp;&amp; <span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.right.searchParent(value);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;value=&quot;</span> + value +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加结点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 判断传入的值与当前子树根节点的关系</span><br>    <span class="hljs-keyword">if</span> (node.value &lt; <span class="hljs-keyword">this</span>.value) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.left = node;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.left.add(node);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.right = node;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.right.add(node);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 中序遍历</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.left.inOrder();<br>    &#125;<br>    System.out.println(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">this</span>.right.inOrder();<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>&#125;;<br>    BinarySortTree binarySortTree = <span class="hljs-keyword">new</span> BinarySortTree();<br>    <span class="hljs-comment">// 循环添加结点到二叉排序树</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>      binarySortTree.add(<span class="hljs-keyword">new</span> Node(arr[i]));<br>    &#125;<br>    <span class="hljs-comment">// 中序遍历二叉排序树</span><br>    binarySortTree.inOrder();<br><span class="hljs-comment">//    binarySortTree.delNode(1);</span><br><span class="hljs-comment">//    binarySortTree.delNode(5);</span><br><span class="hljs-comment">//    binarySortTree.delNode(9);</span><br><span class="hljs-comment">//    binarySortTree.delNode(7);</span><br>    System.out.println(<span class="hljs-string">&quot;删除节点后&quot;</span>);<br>    binarySortTree.inOrder();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="七、平衡二叉树（AVL）"><a href="#七、平衡二叉树（AVL）" class="headerlink" title="七、平衡二叉树（AVL）"></a>七、平衡二叉树（AVL）</h2><h3 id="1-为什么需要AVL"><a href="#1-为什么需要AVL" class="headerlink" title="1.为什么需要AVL"></a>1.为什么需要AVL</h3><p>给一个数列{1, 2, 3, 4, 5, 6,}，要求创建一棵二叉排序树，分析问题所在。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/30.png" alt="BST" style="zoom: 50%;"><p><strong>建立的BST存在的问题分析</strong>：</p><ol><li>左子树全为空，从形式上看，更像一个单链表。</li><li>插入速度没有影响</li><li>查询速度明显降低（因为需要依次比较），不能发挥BST的优势，因为每次还需要比较左子树，其查询速度比单链表还慢。</li><li>解决方案：<strong>平衡二叉树（AVL）</strong></li></ol><h3 id="2-基本介绍"><a href="#2-基本介绍" class="headerlink" title="2.基本介绍"></a>2.基本介绍</h3><ul><li>平衡二叉树也叫平衡二叉搜索树（self-balancing binary search tree），又被称为AVL树，可以保证查询效率较高。</li><li>AVL树有以下特点：它是一棵空树或它的<strong>左右两个子树的高度差的绝对值不超过1</strong>，并且<strong>左右两个子树都是一棵平衡二叉树</strong>。平衡二叉树的常用实现方法：<strong>红黑树</strong>、<strong>AVL</strong>、<strong>替罪羊树</strong>、<strong>Treap</strong>、<strong>伸展树</strong>等。</li><li>AVL树必定是二叉排序树。</li></ul><h3 id="3-左旋转-LL型"><a href="#3-左旋转-LL型" class="headerlink" title="3. 左旋转(LL型)"></a>3. 左旋转(LL型)</h3><h4 id="3-1-思路"><a href="#3-1-思路" class="headerlink" title="3.1 思路"></a>3.1 思路</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/31.png" alt="3"></p><h4 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2 代码"></a>3.2 代码</h4><p><strong>在Node结点类增加获取获取左右子树高度的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回当前结点的高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 高度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">height</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> Math.max(left == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> :left.height(), right == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : right.height()) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回左子树高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 高度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">leftHeight</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (left == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left.height();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回右子树高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 高度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rightHeight</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (right == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> right.height();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>左旋转方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 左旋转方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建新的结点，值为根节点值</span><br>    Node newNode = <span class="hljs-keyword">new</span> Node(<span class="hljs-keyword">this</span>.value);<br>    <span class="hljs-comment">// 把新的结点的左子树设为当前结点的左子树</span><br>    newNode.left = <span class="hljs-keyword">this</span>.left;<br>    <span class="hljs-comment">// 把新的结点的右子树设为当前结点的右子树的左子树</span><br>    newNode.right = <span class="hljs-keyword">this</span>.right.left;<br>    <span class="hljs-comment">// 把当前结点的值替换成右子结点的值</span><br>    <span class="hljs-keyword">this</span>.value = <span class="hljs-keyword">this</span>.right.value;<br>    <span class="hljs-comment">// 把当前结点的右子树设为右子树的右子树</span><br>    <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">this</span>.right.right;<br>    <span class="hljs-comment">// 把当前结点的左子树设置为新的结点</span><br>    <span class="hljs-keyword">this</span>.left = newNode;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-右旋转-RR型"><a href="#4-右旋转-RR型" class="headerlink" title="4. 右旋转(RR型)"></a>4. 右旋转(RR型)</h3><h4 id="4-1-思路"><a href="#4-1-思路" class="headerlink" title="4.1 思路"></a>4.1 思路</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/32.png" alt="右旋转思路"></p><h4 id="4-2-代码"><a href="#4-2-代码" class="headerlink" title="4.2 代码"></a>4.2 代码</h4><p><strong>右旋转方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 右旋转方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rightRotate</span><span class="hljs-params">()</span> </span>&#123;<br><br>    Node newNode = <span class="hljs-keyword">new</span> Node(value);<br>    newNode.right = right;<br>    newNode.left = left.right;<br>    value = left.value;<br>    left = left.left;<br>    right = newNode;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-双旋转-LR-RL型"><a href="#5-双旋转-LR-RL型" class="headerlink" title="5.双旋转(LR/RL型)"></a>5.双旋转(LR/RL型)</h3><h4 id="5-1-问题分析"><a href="#5-1-问题分析" class="headerlink" title="5.1 问题分析"></a>5.1 问题分析</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/33.png" alt="问题"></p><ol><li><p>当符合右旋转的条件时</p></li><li><p>如果它的左子树的右子树高度大于它的右子树的高度</p></li><li><p>先对当前这个结点的左结点进行左旋转</p></li><li><p>再对当前结点进行右旋转的操作即可</p></li></ol><p>反之，</p><ol><li>当符合左旋转的条件</li><li>如果它的右子树的左子树高度大于它的左子树的高度、</li><li>先对当前这个结点的右结点进行右旋转</li><li>再对当前结点进行左旋转的操作即可</li></ol><h4 id="5-2-思路图解"><a href="#5-2-思路图解" class="headerlink" title="5.2  思路图解"></a>5.2  思路图解</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/34.png" alt="图解"></p><h3 id="6-添加结点时结合情况旋转"><a href="#6-添加结点时结合情况旋转" class="headerlink" title="6. 添加结点时结合情况旋转"></a>6. 添加结点时结合情况旋转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加结点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 判断传入的值与当前子树根节点的关系</span><br>    <span class="hljs-keyword">if</span> (node.value &lt; <span class="hljs-keyword">this</span>.value) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.left = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.left.add(node);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.right = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.right.add(node);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 当添加完一个节点后，如果右子树高度比左子树高度大于1，左旋转</span><br>    <span class="hljs-keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (right != <span class="hljs-keyword">null</span> &amp;&amp; right.leftHeight() &gt; right.rightHeight()) &#123;<br>            right.rightRotate();<br>            leftRotate();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            leftRotate();<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 当添加完一个节点后，如果左子树高度比右子树高度大于1，右旋转</span><br>    <span class="hljs-keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">// 如果它的左子树的右子树高度大于它的左子树高度</span><br>        <span class="hljs-keyword">if</span>(left != <span class="hljs-keyword">null</span> &amp;&amp; left.rightHeight() &gt; left.leftHeight()) &#123;<br>            <span class="hljs-comment">// 先对当前结点的左结点进行左旋转</span><br>            left.leftRotate();<br>            <span class="hljs-comment">// 在对当前结点进行右旋转</span><br>            rightRotate();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            rightRotate();<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="八、多路查找树"><a href="#八、多路查找树" class="headerlink" title="八、多路查找树"></a>八、多路查找树</h2><h3 id="1-二叉树与B树"><a href="#1-二叉树与B树" class="headerlink" title="1.二叉树与B树"></a>1.二叉树与B树</h3><h4 id="1-1-二叉树"><a href="#1-1-二叉树" class="headerlink" title="1.1 二叉树"></a>1.1 二叉树</h4><p>二叉树的操作效率较高，但是也存在问题</p><ul><li>二叉树需要加载到内存，如果二叉树的结点少，没有什么问题，但是如果二叉树的结点很多，就存在以下问题</li><li>问题1：在构建二叉树时，需要多次进行IO操作（海量数据存储在数据库或文件中），结点海量，构建二叉树时，速度有影响。</li><li>问题2：结点海量，也会造成二叉树的高度很大，会降低操作速度。</li></ul><h4 id="1-2-多叉树"><a href="#1-2-多叉树" class="headerlink" title="1.2 多叉树"></a>1.2 多叉树</h4><ol><li><p>在二叉树中，每个结点有数据项，最多有两个子节点。如果允许每个结点可以有更多的数据项和更多的子结点，就是多叉树。</p></li><li><p>后面我们讲解的2-3树，2-3-4树就是多叉树，多叉树通过重新组织结点，减少树的高度，能对二叉树进行优化。</p></li><li><p>举例说明（下面2-3就是一棵多叉树）</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/35.png" alt="2-3树" style="zoom:80%;"></li></ol><h4 id="1-3-B树"><a href="#1-3-B树" class="headerlink" title="1.3 B树"></a>1.3 B树</h4><p>B树通过重新组织结点，降低树的高度，并且减少IO读写次数来提升效率</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/13.jpg" alt="B树" style="zoom:67%;"><ol><li>如图B 树通过重新组织节点， 降低了树的高度。</li><li>文件系统及数据库系统的设计者利用了磁盘预读原理，将一个节点的大小设为等于一个页(页得大小通常为4k)，这样所有节点只需要一次I/O 就可以完全载入。</li><li>将树的度M 设置为1024，在600 亿个元素中最多只需要4 次I/O 操作就可以读取到想要的元素, B 树(B+)广泛应用于文件存储系统以及数据库系统中。</li></ol><h3 id="2-2-3树"><a href="#2-2-3树" class="headerlink" title="2. 2-3树"></a>2. 2-3树</h3><h4 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h4><p>2-3树是最简单的B-树，具有如下特点：</p><ol><li>2-3树的所有叶子结点都在同一层。（只要是B树都满足这个条件）</li><li>有两个子结点的结点叫做二结点，二结点要么没有子结点，要么有两个子结点。</li><li>有三个子结点的结点叫做三结点，三结点要么没有子结点，要么有三个子结点。</li><li>2-3树是由二结点和三结点构成的树。</li></ol><h4 id="2-2-应用案例"><a href="#2-2-应用案例" class="headerlink" title="2.2 应用案例"></a>2.2 应用案例</h4><p>将数列{16,24,12,32,14,26,34,10,8,28,38,20}构建成2-3树，并保证数据插入的大小顺序。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/14.jpg" alt="构建2-3树" style="zoom: 67%;"><p>插入规则：</p><ol><li>2-3树的所有叶子结点都在同一层（只要是B树都满足这个条件）</li><li>有两个子结点的结点叫做二结点，二结点要么没有子结点，要么有两个子结点。</li><li>有三个子结点的结点叫做三结点，三结点要么没有子结点，要么有三个子结点。</li><li>当按照规则插入一个数到某个节点时，不能满足上面三个要求，如果上层满，则拆本层，然后仍然需要满足上面3个条件。</li><li>对于三结点的子树的值大小仍然遵守二叉排序树的规则。</li></ol><h4 id="3-2-3-4树"><a href="#3-2-3-4树" class="headerlink" title="3. 2-3-4树"></a>3. 2-3-4树</h4><p>概念和2-3树类似。</p><h3 id="3-B树、B-树和B-树"><a href="#3-B树、B-树和B-树" class="headerlink" title="3. B树、B+树和B*树"></a>3. B树、B+树和B*树</h3><h4 id="3-1-基本介绍-1"><a href="#3-1-基本介绍-1" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h4><p><strong>①B树</strong>：</p><p>B-tree树即为B树，B即为Balance，平衡的意思。有人把B-tree翻译成B-tree，容易让人产生误解。实际上B-tree就是指的B树。</p><p>前面介绍2-3树时，它们就是B树。这里我们做一个说明，我们在学习MySQL的时候，经常听到某种类型的索引时基于B树或B+树的，如图：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/15.jpg" alt="B树" style="zoom:50%;"><p>B树的说明：</p><ol><li>B树的阶：节点的最多子节点个数。比如2-3树的阶是3，2-3-4树的阶是4.</li><li>B树的搜索：从根节点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字的所属范围的儿子结点；重复，直到所对应的儿子指针为空，或者已经是叶子结点。</li><li>关键字集合分布在整棵树中，即叶子结点和非叶子结点都存放数据。</li><li>搜索有可能在非叶子结点结束。</li><li>其搜索性能等价于在关键字全集内做一次二分查找。</li></ol><p><strong>②B+树</strong></p><p>B+树是B树的变体，也是一种多路搜索树。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：树/16.jpg" alt="B+树" style="zoom: 80%;"><p>B+树的说明：</p><ol><li>B+树的搜索与B树也基本相同，区别只是B+树只有达到叶子结点才命中，其性能也等价于在关键字全集做一次二分查找。</li><li>所有关键字都出现在叶子结点的链表中（即数据只能在叶子节点【也叫稠密索引】），且链表中的关键字恰好是有序的。</li><li>不可能在非叶子结点命中</li><li>非叶子结点相当于叶子结点的索引（稀疏索引），叶子结点相当于是存储关键字的数据层</li><li>更适合文件索引系统</li><li>B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然。</li></ol><p>*<em>③B</em>树**</p><p>B*树是B+树的变体，在B+树的非根和非叶子结点增加指向兄弟的指针。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%91/36.png" alt="B*树"></p><p>B*树的说明：</p><ol><li>B*树定义了非叶子结点关键字个数至少为(2/3)M，即块的最低使用率为2/3，而B+树的块的最低使用率为的1/2。</li><li>从第1 个特点我们可以看出，B*树分配新结点的概率比B+树要低，空间使用率更高。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构：查找算法</title>
    <link href="/posts/2021/02/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <url>/posts/2021/02/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、顺序查找"><a href="#一、顺序查找" class="headerlink" title="一、顺序查找"></a>一、顺序查找</h3><h4 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h4><ul><li>顺序查找适合于存储结构为顺序存储或链接存储的线性表。</li><li>顺序查找也称为线形查找，属于无序查找算法。</li><li>从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值value相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于value的结点，表示查找失败。</li></ul><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 顺序查找</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">seqSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] == value) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-复杂度分析"><a href="#3-复杂度分析" class="headerlink" title="3.复杂度分析"></a>3.复杂度分析</h4><p><strong>查找成功时的平均查找长度</strong>：ASL = (1 + 2 + 3+ … + n) * (1 / n) = (n + 1) / 2;</p><p><strong>查找不成功时的查找长度</strong>：n +1</p><p><strong>顺序查找的时间复杂度</strong>：O(n)</p><hr><h3 id="二、二分查找"><a href="#二、二分查找" class="headerlink" title="二、二分查找"></a>二、二分查找</h3><h4 id="1-算法描述-1"><a href="#1-算法描述-1" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><ul><li>元素必须是有序的，如果是无序的则要先进行排序操作</li><li>二分查找也称为是折半查找，属于有序查找算法</li><li>用给定值value先与中间结点的关键字比较，中间结点把线形表分成两个子表，若相等则查找成功；若不相等，再根据value与该中间结点关键字的比较结果确定下一步查找哪个子表，这样递归进行，直到查找到或查找结束发现表中没有这样的结点。</li></ul><p><strong>tips</strong>：<strong>折半查找的前提条件是需要有序表顺序存储，对于静态查找表，一次排序后不再变化，折半查找能得到不错的效率。但对于需要频繁执行插入或删除操作的数据集来说，维护有序的排序会带来不小的工作量，那就不建议使用。——《大话<a href="http://lib.csdn.net/base/datastructure">数据结构</a>》</strong></p><h4 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a>2.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二分查找</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr 查找表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 待查找的值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 目标值的下标</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>, high = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>        <span class="hljs-keyword">int</span> mid = (low + high) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (value == arr[mid]) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; arr[mid]) &#123;<br>            high = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            low = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-复杂度分析-1"><a href="#3-复杂度分析-1" class="headerlink" title="3.复杂度分析"></a>3.复杂度分析</h4><p><strong>查找成功时的平均查找长度</strong>：ASL = log<del>2</del>(n+1) - 1</p><p><strong>时间复杂度</strong>：O(log<del>2</del>n)</p><hr><h3 id="三、插值查找"><a href="#三、插值查找" class="headerlink" title="三、插值查找"></a>三、插值查找</h3><h4 id="1-算法描述-2"><a href="#1-算法描述-2" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><p>在介绍插值查找之前，首先考虑一个新问题，问什么上述算法一定是要折半，而不是折1/4呢？</p><p>打个比方，在英文字典里面查“apple”，你下意识翻开字典是翻前面的书页还是后面的书页呢？如果再让你查“zoo”，你又怎么查？很显然，这里你绝对不会是从中间开始查起，而是有一定目的的往前或往后翻。</p><p>经过以上分析，折半查找这种查找方式，不是自适应的（也就是说是傻瓜式的）。二分查找中查找点计算如下：</p><p>　　mid=(low+high)/2, 即mid=low+1/2*(high-low);</p><p>通过类比，我们可以将查找的点改进为如下：</p><p>　　mid=low+(key-a[low])/(a[high]-a[low])*(high-low)，</p><p>　也就是将上述的比例参数1/2改进为自适应的，根据关键字在整个有序表中所处的位置，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</p><h4 id="2-代码实现-2"><a href="#2-代码实现-2" class="headerlink" title="2.代码实现"></a>2.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插值查找</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertionSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>, high = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>        <span class="hljs-comment">// 自适应mid</span><br>        <span class="hljs-keyword">int</span> mid = low+(value-arr[low])/(arr[high]-arr[low])*(high-low);<br>        <span class="hljs-keyword">if</span> (value == arr[mid]) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; arr[mid]) &#123;<br>            high = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            low = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-复杂度分析-2"><a href="#3-复杂度分析-2" class="headerlink" title="3.复杂度分析"></a>3.复杂度分析</h4><p><strong>查找成功或者失败的时间复杂度均为O(log2(log2n))。</strong></p><hr><h3 id="四、斐波那契查找"><a href="#四、斐波那契查找" class="headerlink" title="四、斐波那契查找"></a>四、斐波那契查找</h3><h4 id="1-算法描述-3"><a href="#1-算法描述-3" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><p>　黄金比例又称黄金分割，是指事物各部分间一定的数学比例关系，即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1。</p><p>斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89…….（从第三个数开始，后边每一个数都是前两个数的和）。然后我们会发现，随着斐波那契数列的递增<strong>，前后两个数的比值会越来越接近0.618</strong>，利用这个特性，我们就可以将黄金比例运用到查找技术中。</p><p>斐波那契查找原理，仅仅是改变了中间结点(mid)的位置，mid不再是中间或插值得到，而是位于黄金分割点附近，即mid = low + F(k-1) - 1。</p><p>由斐波那契数列 F(k) = F(k-1) + F(k-2)的性质，可以得到 (F(k-1)-1) =(f(k-1) - 1) + (f(k-2) - 1) + 1。该式说明，只要顺序表的长度为 F(k) - 1，则可以将该表分成长度为 F(k-1)-1 和 F(k-2)-1 的两端，从而中间位置为mid = low + F(k-1) - 1。</p><p>类似地，每一字段也可以用相同方式分割。</p><p>但是顺序表的长度n不一定刚好等于F(k)-1，所以需要将原来的顺序表长度n增加至F(k)-1。这里的k值只要能使得F(k)-1恰好大于或等于n即可，由<code>while(n &gt; fib(k) - 1)&#123;k++;&#125;</code>代码得到，顺序表长度增加后，新增的位置（从n+1到F(k)-1位置），都分为n位置的值即可。</p><h4 id="2-代码实现-3"><a href="#2-代码实现-3" class="headerlink" title="2.代码实现"></a>2.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> maxSize = <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构造斐波那契数列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] fibonacci() &#123;<br>    <span class="hljs-keyword">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxSize; i++) &#123;<br>        f[i] = f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 斐波那查找</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibonacciSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>, high = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 表示斐波那契分割数值的下标 mid = low + F(k-1) - 1</span><br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> mid = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 获取斐波那契数列</span><br>    <span class="hljs-keyword">int</span>[] fib = fibonacci();<br>    <span class="hljs-comment">// 获取k值</span><br>    <span class="hljs-keyword">while</span> (high &gt; fib[k] - <span class="hljs-number">1</span>) &#123;<br>        k++;<br>    &#125;<br>    <span class="hljs-comment">// fib[k]可能大于arr数组的长度，我们需要重新构造一个数组,长度为fib[k]</span><br>    <span class="hljs-comment">// 新增的位置会用0填充，需要把这些位置替换为原来arr数组最后一个元素</span><br>    <span class="hljs-keyword">int</span>[] temp = Arrays.copyOf(arr, fib[k]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = high + <span class="hljs-number">1</span>; i &lt; temp.length; i++) &#123;<br>        temp[i] = arr[high];<br>    &#125;<br><br>    <span class="hljs-comment">// 查找value</span><br>    <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>        mid = low + fib[k - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// f[k] = f[k-1] + f[k-2]</span><br>        <span class="hljs-keyword">if</span> (value &lt; temp[mid]) &#123;<br>            high = mid - <span class="hljs-number">1</span>;<br>            k--;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt; temp[mid]) &#123;<br>            low = mid + <span class="hljs-number">1</span>;<br>            k -= <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (mid &lt;= high) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> high;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-复杂度分析-3"><a href="#3-复杂度分析-3" class="headerlink" title="3.复杂度分析"></a>3.复杂度分析</h4><p><strong>最坏情况下</strong>，时间复杂度为O(log<del>2</del>n)，且其期望复杂度也为O(log<del>2</del>n)。</p><hr><h3 id="五、哈希查找"><a href="#五、哈希查找" class="headerlink" title="五、哈希查找"></a>五、哈希查找</h3><h4 id="1-算法描述-4"><a href="#1-算法描述-4" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><p><strong>哈希表</strong>：哈希表（散列表）是根据关键码值而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<strong>散列函数</strong>，存放记录的数组叫做<strong>散列表</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：查找算法/1.png" alt="哈希表"><h4 id="2-代码实现-4"><a href="#2-代码实现-4" class="headerlink" title="2.代码实现"></a>2.代码实现</h4><p><strong>题目</strong>：有一个公司，当有新的员工来报道时，要求将该员工的信息加入(id, 姓名，年龄，名字，住址)，当输入该员工的id时，要求查找到该员工的所有信息。</p><p><strong>思路</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：查找算法/2.png" alt="思路" style="zoom:80%;"><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 哈希查找</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-19 16:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSearch</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建哈希表</span><br>    HashTable hashTable = <span class="hljs-keyword">new</span> HashTable(<span class="hljs-number">7</span>);<br>    <span class="hljs-comment">// 菜单</span><br>    String menuOption = <span class="hljs-string">&quot;&quot;</span>;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>      System.out.println(<span class="hljs-string">&quot;------菜单-------&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;add：添加员工&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;list：显示员工&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;find：查找员工&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;exit：退出系统&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;----------------&quot;</span>);<br><br>      menuOption = scanner.next();<br>      <span class="hljs-keyword">switch</span> (menuOption) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<br>          System.out.println(<span class="hljs-string">&quot;请输入id&quot;</span>);<br>          <span class="hljs-keyword">int</span> id = scanner.nextInt();<br>          System.out.println(<span class="hljs-string">&quot;请输入名字&quot;</span>);<br>          String name = scanner.next();<br>          Employee employee = <span class="hljs-keyword">new</span> Employee(id, name);<br>          hashTable.addEmp(employee);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;list&quot;</span>:<br>          hashTable.printHashTable();<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;find&quot;</span>:<br>          System.out.println(<span class="hljs-string">&quot;请输入要查找的员工id&quot;</span>);<br>          <span class="hljs-keyword">int</span> empId = scanner.nextInt();<br>          hashTable.hashSearch(empId);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>          scanner.close();<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          System.out.println(<span class="hljs-string">&quot;输入选项非法&quot;</span>);<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<br>  <span class="hljs-keyword">public</span> String name;<br>  <span class="hljs-keyword">public</span> Employee nextEmp;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>();<br>    <span class="hljs-keyword">this</span>.id = id;<br>    <span class="hljs-keyword">this</span>.name = name;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;id=&quot;</span> + id +<br>            <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpLinkedList</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> Employee head;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加员工，假设加入员工时，id自增</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> emp 员工</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEmp</span><span class="hljs-params">(Employee emp)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果是第一个员工</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>      head = emp;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//如果不是第一个员工</span><br>    Employee curEmp = head;<br>    <span class="hljs-keyword">while</span> (curEmp.nextEmp != <span class="hljs-keyword">null</span>) &#123;<br>      curEmp = curEmp.nextEmp;<br>    &#125;<br>    <span class="hljs-comment">// 将员工加到链表最后</span><br>    curEmp.nextEmp = emp;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 遍历员工链表信息</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printEmpList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>      System.out.println(<span class="hljs-string">&quot;第&quot;</span>+(no+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;条员工链表为空&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;第&quot;</span>+(no+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;条员工链表信息为：&quot;</span>);<br>    Employee curEmp = head;<br>    <span class="hljs-keyword">while</span> (curEmp != <span class="hljs-keyword">null</span>) &#123;<br>      System.out.print(curEmp.toString());<br>      curEmp = curEmp.nextEmp;<br>    &#125;<br>    System.out.println();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据id查找员工</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">empSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> empId)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>      System.out.println(<span class="hljs-string">&quot;员工链表为空&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    Employee curEmp = head;<br>    <span class="hljs-keyword">while</span> (curEmp.id != empId) &#123;<br>      <span class="hljs-keyword">if</span> (curEmp.nextEmp == <span class="hljs-keyword">null</span>) &#123;<br>        curEmp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      curEmp = curEmp.nextEmp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> curEmp;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 哈希表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashTable</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> EmpLinkedList[] empLinkedListArray;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> hashSize;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 哈希表构造器</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> size 哈希表容量</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashTable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>    empLinkedListArray = <span class="hljs-keyword">new</span> EmpLinkedList[size];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; empLinkedListArray.length; i++) &#123;<br>      empLinkedListArray[i] = <span class="hljs-keyword">new</span> EmpLinkedList();<br>    &#125;<br>    <span class="hljs-keyword">this</span>.hashSize = size;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 遍历哈希表</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printHashTable</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; hashSize; i++) &#123;<br>      empLinkedListArray[i].printEmpList(i);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加员工</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> emp 员工</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEmp</span><span class="hljs-params">(Employee emp)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> empLinkedListNo = hashFun(emp.id);<br>    empLinkedListArray[empLinkedListNo].addEmp(emp);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 哈希函数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> empId 员工id</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 哈希函数的值</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashFun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> empId)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> empId % hashSize;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据id查找员工</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hashSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> empId)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> empLinkedListNo = hashFun(empId);<br>    Employee emp = empLinkedListArray[empLinkedListNo].empSearch(empId);<br>    <span class="hljs-keyword">if</span> (emp != <span class="hljs-keyword">null</span>) &#123;<br>      System.out.println(<span class="hljs-string">&quot;在第&quot;</span>+(empLinkedListNo+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;条链表中找到员工,其信息为&quot;</span>+emp.toString());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;没有找到该员工&quot;</span>);<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java">------菜单-------<br>add：添加员工<br>list：显示员工<br>find：查找员工<br>exit：退出系统<br>----------------<br>add<br>请输入id<br><span class="hljs-number">1</span><br>请输入名字<br>tom<br>------菜单-------<br>add：添加员工<br>list：显示员工<br>find：查找员工<br>exit：退出系统<br>----------------<br>add<br>请输入id<br><span class="hljs-number">2</span><br>请输入名字<br>jack<br>------菜单-------<br>add：添加员工<br>list：显示员工<br>find：查找员工<br>exit：退出系统<br>----------------<br>add<br>请输入id<br><span class="hljs-number">8</span><br>请输入名字<br>wench<br>------菜单-------<br>add：添加员工<br>list：显示员工<br>find：查找员工<br>exit：退出系统<br>----------------<br>list<br>第<span class="hljs-number">1</span>条员工链表为空<br>第<span class="hljs-number">2</span>条员工链表信息为：Employee&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;tom&#x27;</span>&#125;Employee&#123;id=<span class="hljs-number">8</span>, name=<span class="hljs-string">&#x27;wench&#x27;</span>&#125;<br>第<span class="hljs-number">3</span>条员工链表信息为：Employee&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;jack&#x27;</span>&#125;<br>第<span class="hljs-number">4</span>条员工链表为空<br>第<span class="hljs-number">5</span>条员工链表为空<br>第<span class="hljs-number">6</span>条员工链表为空<br>第<span class="hljs-number">7</span>条员工链表为空<br>------菜单-------<br>add：添加员工<br>list：显示员工<br>find：查找员工<br>exit：退出系统<br>----------------<br>find<br>请输入要查找的员工id<br><span class="hljs-number">8</span><br>在第<span class="hljs-number">2</span>条链表中找到员工,其信息为Employee&#123;id=<span class="hljs-number">8</span>, name=<span class="hljs-string">&#x27;wench&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-复杂度分析-4"><a href="#3-复杂度分析-4" class="headerlink" title="3.复杂度分析"></a>3.复杂度分析</h4><p><strong>链地址法处理冲突的哈希表查找成功时的平均查找长度</strong>：S<del>nc</del>≈1+α/2</p><p>其中，α为装填因子定义为：α = 哈希表中填入的记录数 / 哈希表的长度</p>]]></content>
    
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/posts/2021/02/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/posts/2021/02/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="一、排序算法介绍"><a href="#一、排序算法介绍" class="headerlink" title="一、排序算法介绍"></a>一、排序算法介绍</h3><p>排序算法（Sort Algorithm），排序是将一组数据，依照指定的顺序进行排列的过程。</p><p><strong>排序的分类</strong>：</p><ol><li><p>内部排序</p><p>内部排序指将需要处理的所有数据都加载到<strong>内部存储器</strong>中进行排序。</p></li><li><p>外部排序</p><p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。</p></li></ol><p>常见的排序算法分类如下图：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/1.png" alt="排序分类" style="zoom:80%;"><hr><h3 id="二、算法的时间复杂度"><a href="#二、算法的时间复杂度" class="headerlink" title="二、算法的时间复杂度"></a>二、算法的时间复杂度</h3><h4 id="1-度量一个程序（算法）执行时间的两种方法"><a href="#1-度量一个程序（算法）执行时间的两种方法" class="headerlink" title="1. 度量一个程序（算法）执行时间的两种方法"></a>1. 度量一个程序（算法）执行时间的两种方法</h4><ol><li><p><strong>事后统计的方法</strong></p><p>这种方法可行，但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；二是所得时间的统计量依赖于计算机的硬件、软件等环境因素。这种方式，要在同一台计算机的相同状态下运行，才能比较哪种算法速度更快。</p></li><li><p><strong>事前估算的方法</strong></p><p>通过分析某个算法的时间复杂度来判断哪个算法更优。</p></li></ol><h4 id="2-时间频度"><a href="#2-时间频度" class="headerlink" title="2. 时间频度"></a>2. 时间频度</h4><p><strong>时间频度</strong>：一个算法花费的时间与算法中语句的执行次数成正比例。哪个算法中语句执行次数多，它花费的时间就多。**一个算法中的语句执行次数成为语句频度或时间频度，即为T(n)**。</p><h4 id="3-时间复杂度"><a href="#3-时间复杂度" class="headerlink" title="3. 时间复杂度"></a>3. 时间复杂度</h4><ol><li>一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于0的常数，则称f(n)是T(n)的同数量级函数。计作T(n) = O(f(n))，则称O(f(n))为算法的渐进时间复杂度，简称时间复杂度。</li><li>T(n)不同，但时间复杂度可能相同。如T(n) = n^2^+7n+6 与 T(n) = 3n^3^+2n+2，它们的T(n)不同，但时间复杂度相同，都为O(n^2^)</li><li>计算时间复杂度的方法：<ul><li>用常数1代替运行时间中的所有加法常数</li><li>修改后的运行次数函数中，只保留最高阶项。</li><li>去除最高阶项的系数</li></ul></li></ol><h4 id="4-常见的时间复杂度"><a href="#4-常见的时间复杂度" class="headerlink" title="4. 常见的时间复杂度"></a>4. 常见的时间复杂度</h4><ol><li><p>常数阶O(1)</p></li><li><p>对数阶O(log<del>2</del>^n^)</p></li><li><p>线性阶O(n)</p></li><li><p>线性对数阶O(nlog<del>2</del>n)</p></li><li><p>平方阶O(n^2^)</p></li><li><p>立方阶O(n^3^)</p></li><li><p>k次方阶O(n^k^)</p></li><li><p>指数阶O(2^n^)</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/2.png" alt="时间复杂度" style="zoom:80%;"></li></ol><p><strong>说明</strong>：</p><ul><li>常见的算法时间复杂度由小到大依次为：O(1)&lt;O(log<del>2</del>^n^)&lt;O(n)&lt;O(nlog<del>2</del>n)&lt;O(n^2^)&lt;O(n^3^)&lt;O(n^k^)&lt;O(2^n^)</li><li>随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</li><li>从图中可见，我们应该尽可能避免使用指数阶的算法。</li></ul><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h4><ol><li><p><strong>常数阶O(1)</strong></p><p>无论代码执行了多少行，只要是没有循环等复杂的结构，那么代码的时间复杂度就是O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>;<br>++i;<br>j++;<br><span class="hljs-keyword">int</span> m = i + j;<br></code></pre></td></tr></table></figure><p>上述代码在执行的时候，它消耗的时间并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万条代码，都可以用O(1)表示其时间复杂度。</p></li><li><p><strong>对数阶O(log<del>2</del>^n^)</strong></p><p>如果<code>N = a^x(a &gt; 0, a ≠ 1)</code>，即a的x次方等于N，那么数x叫做以a为底的N的对数，记作<code>x = log~a~N</code>。其中，a叫做对数的底数，N叫做真数，x叫做以a为底 N的对数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i &lt; n) &#123;<br>    i = i * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码当循环log<del>2</del>n次后，循环体就结束了。因此这个代码的时间复杂度为O(log<del>2</del>n)。</p></li><li><p><strong>线性阶O(n)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    j = i;<br>    j++;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)表示它的时间复杂度。</p></li><li><p><strong>线性对数阶O(nlogN)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> m = <span class="hljs-number">1</span>; m &lt; n; m++) &#123;<br>    i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; n) &#123;<br>        i = i * <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线性对数阶其实非常容易理解，将时间复杂度O(log<del>n</del>)的代码循环n遍的话，那么它的时间复杂度就是n*O(log<del>n</del>)，也就是O(nlogN)。</p></li><li><p><strong>平方阶O(n^2)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>        sout(i+j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>把O(n)的代码再嵌套循环一遍，它的时间复杂度就是O(n^2)。</p></li><li><p>后面的立方阶更简单。</p></li></ol><h4 id="6-平均时间复杂度和最坏时间复杂度"><a href="#6-平均时间复杂度和最坏时间复杂度" class="headerlink" title="6. 平均时间复杂度和最坏时间复杂度"></a>6. 平均时间复杂度和最坏时间复杂度</h4><p>​    <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/2.jpg" alt="排序算法复杂度" style="zoom: 33%;"></p><ol><li>平均时间复杂度是指所有可能的输入实例实例都以等概率出现的情况下，该算法的运行时间。</li><li>最坏时间复杂度，一般讨论的时间复杂度是最坏情况下的时间复杂度。这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</li><li>平均时间复杂度和最坏时间复杂度是否一致，和算法有关。</li></ol><hr><h3 id="三、算法的空间复杂度"><a href="#三、算法的空间复杂度" class="headerlink" title="三、算法的空间复杂度"></a>三、算法的空间复杂度</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>类似于时间复杂度的讨论，一个算法的空间复杂度定义为该算法所耗费的存储空间，它也是问题规模n的函数。</li><li>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的度量。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况。</li><li>在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重程序执行的速度。一些缓存产品和算法本质就是用空间换时间。</li></ul><hr><h3 id="四、冒泡排序"><a href="#四、冒泡排序" class="headerlink" title="四、冒泡排序"></a>四、冒泡排序</h3><h4 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h4><ol><li>从头到尾比较相邻两个元素，如果第一个比第二个大，则交换位置。</li><li>从头依次往后，知道最后一对，这样执行一遍，数组末尾为当前最大值，就像冒泡一样。</li><li>除去已经冒出去的泡（元素），从头到尾再次重复上述步骤，直到排序结束。</li></ol><h4 id="2-动图演示"><a href="#2-动图演示" class="headerlink" title="2.动图演示"></a>2.动图演示</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/1.gif" alt="动图" style="zoom:80%;"><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><p><strong>初始代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 待排序数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] array;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 冒泡排序算法</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>        <span class="hljs-keyword">if</span> (array[j] &gt; array[j+<span class="hljs-number">1</span>]) &#123;<br>          temp = array[j];<br>          array[j] = array[j + <span class="hljs-number">1</span>];<br>          array[j + <span class="hljs-number">1</span>] = temp;<br>        &#125;<br>      &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;冒泡排序后的数组为：&quot;</span>);<br>    System.out.println(Arrays.toString(array));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 初始化待排序数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br><br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>      System.out.println(<span class="hljs-string">&quot;数组大小不合法&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>    System.out.println(<span class="hljs-string">&quot;请输入&quot;</span>+ size +<span class="hljs-string">&quot;个数字，用空格分离&quot;</span>);<br>    String str = scanner.nextLine();<br>    String[] strList = str.split(<span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++) &#123;<br>      array[j] = Integer.parseInt(strList[j]);<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码优化</strong>：增加一个<code>swap</code>标志，若一次循环中没有任何值交换位置，则说明排序已经完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 优化冒泡排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">boolean</span> swap = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (array[j] &gt; array[j+<span class="hljs-number">1</span>]) &#123;<br>                swap = <span class="hljs-keyword">true</span>;<br>                temp = array[j];<br>                array[j] = array[j + <span class="hljs-number">1</span>];<br>                array[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!swap) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 重置swap</span><br>            swap = <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;优化冒泡排序后的数组为：&quot;</span>);<br>    System.out.println(Arrays.toString(array));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-特点"><a href="#4-特点" class="headerlink" title="4. 特点"></a>4. 特点</h4><p>比较适合小数据的排序。但是，由于算法复杂度较高，在数据量大的时候不适合使用。</p><p>在数据完全有序的时候展现出最优时间复杂度，为O(n)，其他情况，几乎总是O(n^2^)。</p><hr><h3 id="五、选择排序"><a href="#五、选择排序" class="headerlink" title="五、选择排序"></a>五、选择排序</h3><h4 id="1-算法描述-1"><a href="#1-算法描述-1" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><ul><li>在未排序的序列中找出最小的元素与最前面的元素交换，存到数组的<strong>开始位置</strong>。</li><li>重复上述操作，直到排序结束。</li></ul><h4 id="2-动图演示-1"><a href="#2-动图演示-1" class="headerlink" title="2.动图演示"></a>2.动图演示</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/2.gif" alt="动图" style="zoom:80%;"><h4 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 选择排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-comment">// minIndex 最小元素的下标</span><br>        <span class="hljs-keyword">int</span> minIndex = i;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;<br>                minIndex = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 将最小值移到未排序的序列最前面</span><br>        temp = arr[minIndex];<br>        arr[minIndex] = arr[i];<br>        arr[i] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-特点-1"><a href="#4-特点-1" class="headerlink" title="4.特点"></a>4.特点</h4><p>在各种情况下复杂度波动小，因此一般是优于冒泡排序的。在所有的完全交换排序中，选择排序也是不错的算法。但是，由于固有的O(n^2^)复杂度，选择排序在海量数据面前显得力不从心。因此，它适用于简单数据排序。</p><hr><h3 id="六、插入排序"><a href="#六、插入排序" class="headerlink" title="六、插入排序"></a>六、插入排序</h3><h4 id="1-算法描述-2"><a href="#1-算法描述-2" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><ul><li>将n个待排序元素看成是<strong>一个有序表</strong>和<strong>一个无序表</strong>。</li><li>开始时有序表只包含一个元素，无序表中包含n-1个元素。</li><li>排序过程中每次从无序表取出第一个元素，把它的排序码一次与有序表元素的排序码进行比较，将它插入到有序表的适当位置，使之成为新的有序表。</li></ul><p><strong>图解</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/3.png" alt="图解" style="zoom: 80%;"><h4 id="2-动图演示-2"><a href="#2-动图演示-2" class="headerlink" title="2.动图演示"></a>2.动图演示</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/3.gif" alt="动图" style="zoom:80%;"><h4 id="3-代码实现-2"><a href="#3-代码实现-2" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入排序</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-comment">// 第一个元素就算作有序列表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">int</span> insertVal = arr[i];<br>        <span class="hljs-comment">// 假定插入位置为前面有序列表的末尾</span><br>        <span class="hljs-keyword">int</span> insertIndex = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;<br>            <span class="hljs-comment">// 元素后移</span><br>            arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<br>            insertIndex--;<br>        &#125;<br>        <span class="hljs-comment">// 找到插入位置</span><br>        arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-特点-2"><a href="#4-特点-2" class="headerlink" title="4.特点"></a>4.特点</h4><p>插入排序由于O(n^2^)的复杂度，在数组较大的时候不适用。但是，在数据比较少的时候，是一个不错的选择，一般作为快速排序的扩充。</p><p>当需要插入的数是比较小的数时，后移的次数明显增多，对效率影响较大。</p><hr><h3 id="七、希尔排序"><a href="#七、希尔排序" class="headerlink" title="七、希尔排序"></a>七、希尔排序</h3><h4 id="1-算法描述-3"><a href="#1-算法描述-3" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><ul><li>希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序。</li><li>设置一个增量序列，最后一个为1。希</li><li>分别将数组元素按照第一个增量分为若干序子序列，对每个子序列进行插入排序。</li><li>对下一个增量做同样的插入排序，直到增量为1时排序结束。</li></ul><h4 id="2-图片演示"><a href="#2-图片演示" class="headerlink" title="2.图片演示"></a>2.图片演示</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/4.png" alt="希尔排序" style="zoom:80%;"><h4 id="3-代码实现-3"><a href="#3-代码实现-3" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 希尔排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> gap = arr.length / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span> (gap &gt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 按</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">// 遍历各子序列元素，步长为gap</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">5</span>; j &gt;= <span class="hljs-number">0</span>; j -= gap) &#123;<br>                <span class="hljs-comment">// 如果当前元素大于加上步长后的那个元素，需要交换</span><br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + gap]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = arr[j];<br>                    arr[j] = arr[j + gap];<br>                    arr[j + gap] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        gap -= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-特点-3"><a href="#4-特点-3" class="headerlink" title="4.特点"></a>4.特点</h4><p>希尔排序虽然快，但是毕竟是插入排序，其数量级并没有后起之秀—快速排序快，在大量数据面前，希尔排序不是一个好的算法。但是，中小型规模的数据完全可以使用它。</p><hr><h3 id="八、归并排序"><a href="#八、归并排序" class="headerlink" title="八、归并排序"></a>八、归并排序</h3><h4 id="1-算法描述-4"><a href="#1-算法描述-4" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><p>归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略。</p><p>当我们要排序这样一个数组的时候，归并排序法首先将这个数组分成一半。然后想办法把左边的数组给排序，右边的数组给排序，之后呢再将它们归并起来。</p><p>当然了当我们对左边的数组和右边的素组进行排序的时候，再分别将左边的数组和右边的数组分成一半，然后对每一个部分先排序，再归并。分到一定细度的时候，每一个部分就只有一个元素了，那么我们此时不用排序，对他们进行一次简单的归并就好了。</p><h4 id="2-图片描述"><a href="#2-图片描述" class="headerlink" title="2.图片描述"></a>2.图片描述</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/5.png" alt="图片" style="zoom: 50%;"><h4 id="3-代码实现-4"><a href="#3-代码实现-4" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 归并</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr 需要排序的原始数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> left 左边有序序列初始索引</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mid 中间索引</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> right 右边有序序列索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 左右两边有序序列的索引</span><br>    <span class="hljs-keyword">int</span> leftIndex = left;<br>    <span class="hljs-keyword">int</span> rightIndex = mid + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 归并两个序列</span><br>    <span class="hljs-keyword">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[right - left + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> tempIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (leftIndex &lt;= mid &amp;&amp; rightIndex &lt;= right) &#123;<br>        <span class="hljs-keyword">if</span> (arr[leftIndex] &lt;= arr[rightIndex]) &#123;<br>            temp[tempIndex++] = arr[leftIndex++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp[tempIndex++] = arr[rightIndex++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 将剩余数据添加到尾部</span><br>    <span class="hljs-keyword">while</span> (leftIndex &lt;= mid) &#123;<br>        temp[tempIndex++] = arr[leftIndex++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (rightIndex &lt;= right) &#123;<br>        temp[tempIndex++] = arr[rightIndex++];<br>    &#125;<br><br>    <span class="hljs-comment">// 将temp数组元素拷贝到arr</span><br>    tempIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> arrIndex = left;<br>    <span class="hljs-keyword">while</span> (arrIndex &lt;= right) &#123;<br>        arr[arrIndex++] = temp[tempIndex++];<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 归并排序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr 待排序数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> left 数组头下标</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> right 数组尾下标</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 左递归、右递归</span><br>        mergeSort(arr, left, mid);<br>        mergeSort(arr, mid +<span class="hljs-number">1</span>, right);<br>        <span class="hljs-comment">// 将两个序列归并为一个有序序列</span><br>        merge(arr, left, mid, right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-特点-4"><a href="#4-特点-4" class="headerlink" title="4.特点"></a>4.特点</h4><p>归并排序在数据量比较大的时候也有较为出色的表现，但是，其空间复杂度O(n)使得在数据量特别大的时候几乎不可接受。考虑到有的机器内存本身就比较小，因此，采用归并排序一定要注意。</p><hr><h3 id="九、快速排序"><a href="#九、快速排序" class="headerlink" title="九、快速排序"></a>九、快速排序</h3><h4 id="1-算法描述-5"><a href="#1-算法描述-5" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><ul><li>对于当前的区间[left, right]进行快排：<ol><li>将当前区间第一个元素视为<code>pivot</code>，称为“枢轴”。</li><li>使用双指针比较剩余的元素，小于枢轴的放在左边，大于枢轴的放在右边。</li></ol></li><li>对各自放在左右的两部分再进行快排保持有序。</li></ul><h4 id="2-图片演示-1"><a href="#2-图片演示-1" class="headerlink" title="2.图片演示"></a>2.图片演示</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/6.png" alt="图片" style="zoom:80%;"><h4 id="3-代码实现-5"><a href="#3-代码实现-5" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据枢轴整理序列</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr 待排序数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> left 数组头下标</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> right 数组尾下标</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 枢轴元素所在下标</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 将序列第一个元素作为枢轴</span><br>    <span class="hljs-keyword">int</span> pivot = arr[left];<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-comment">// 左右双指针</span><br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-comment">// 当右侧元素正常大于枢轴元素，右侧指针左移</span><br>        <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= pivot) &#123;<br>            right--;<br>        &#125;<br>        <span class="hljs-comment">// 将右侧小于枢轴的元素移动到左侧</span><br>        temp = arr[left];<br>        arr[left] = arr[right];<br>        arr[right] = temp;<br><br>        <span class="hljs-comment">// 当左侧元素正常小于枢轴元素，左侧指针右移</span><br>        <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= pivot) &#123;<br>            left++;<br>        &#125;<br>        <span class="hljs-comment">// 将左侧大于枢轴的元素移动到右侧</span><br>        temp = arr[left];<br>        arr[left] = arr[right];<br>        arr[right] = temp;<br>    &#125;<br><br>    <span class="hljs-comment">// 枢轴元素最后落位，此时 left = right</span><br>    arr[left] = pivot;<br><br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 快速排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>        <span class="hljs-comment">// 枢轴下标</span><br>        <span class="hljs-keyword">int</span> pivotLoc = partition(arr, left, right);<br>        <span class="hljs-comment">// 递归进行快速排序</span><br>        quickSort(arr, left, pivotLoc - <span class="hljs-number">1</span>);<br>        quickSort(arr, pivotLoc + <span class="hljs-number">1</span>, right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-特点-5"><a href="#4-特点-5" class="headerlink" title="4.特点"></a>4.特点</h4><p>快速排序是原地排序，不占用额外空间。快速排序尤其在数据量大的时候性能优越性更加明显。但是在必要的时候，需要考虑优化以提高其在最坏情况下的性能。</p><hr><h3 id="十、堆排序"><a href="#十、堆排序" class="headerlink" title="十、堆排序"></a>十、堆排序</h3><h4 id="1-算法描述-6"><a href="#1-算法描述-6" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><p>堆是一种特殊的完全二叉树，二叉堆一般分为两种：</p><p><strong>最大堆</strong>：每个父节点的值都大于或等于其子节点的值。</p><p><strong>最小堆</strong>：每个父节点的值都小于或等于其子节点的值</p><p>堆排序的原理就是把最大堆堆顶的最大数取出，将剩余的堆继续调整为最大堆，再将堆顶的最大数取出，这个过程持续到剩余数只有一个时结束。</p><p><strong>调整最大堆</strong>：对于一个指定不满足最大堆条件的节点进行“下沉”（该节点与其两个子节点中最大值交换位置）使其满足最大堆条件。</p><p><strong>建立最大堆</strong>：从一个堆的最后一个非叶子节点进行调整，往前再调整前一个非叶子节点。</p><p><strong>堆排序</strong>：创建最大堆—取出最大堆堆顶元素与堆尾元素互换位置—对堆顶元素进行调整最大堆—取出堆顶元素…</p><h4 id="2-图片演示-2"><a href="#2-图片演示-2" class="headerlink" title="2.图片演示"></a>2.图片演示</h4><p>详细过程参考B站视频：<a href="https://www.bilibili.com/video/BV1Eb41147dK">https://www.bilibili.com/video/BV1Eb41147dK</a></p><p>详细过程参考博客：<a href="https://www.cnblogs.com/mengdd/archive/2012/11/30/2796845.html">https://www.cnblogs.com/mengdd/archive/2012/11/30/2796845.html</a></p><h4 id="3-代码实现-6"><a href="#3-代码实现-6" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调整为最大堆</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr 二叉树</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nodeId 节点下标</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> length 数组长度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapAdjust</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> nodeId, <span class="hljs-keyword">int</span> length)</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> temp = arr[nodeId];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span> * nodeId + <span class="hljs-number">1</span>; i &lt;= length; i *= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; length &amp;&amp; arr[i] &lt; arr[i + <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-comment">// i为左右子节点较大值的下标</span><br>            ++i;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp &gt;= arr[i]) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果子节点较大值比父节点大，父节点下沉，以孩子节点位置进行下一轮调整</span><br>        arr[nodeId] = arr[i];<br>        nodeId = i;<br>    &#125;<br><br>    arr[nodeId] = temp;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 堆排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 建立最大堆</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        heapAdjust(arr, i, arr.length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 堆排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span> ; --i) &#123;<br>        <span class="hljs-comment">// 堆顶记录和最后一个记录交换</span><br>        <span class="hljs-keyword">int</span> temp = arr[i];<br>        arr[i] = arr[<span class="hljs-number">0</span>];<br>        arr[<span class="hljs-number">0</span>] = temp;<br><br>        <span class="hljs-comment">// 将剩余无序二叉树调整为最大堆</span><br>        heapAdjust(arr, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-特点-6"><a href="#4-特点-6" class="headerlink" title="4.特点"></a>4.特点</h4><p>堆排序在建立堆和调整堆的过程中会产生比较大的开销，在元素少的时候并不适用。但是，在元素比较多的情况下，还是不错的一个选择。尤其是在解决诸如“前n大的数”一类问题时，几乎是首选算法。</p><hr><h3 id="十一、基数排序"><a href="#十一、基数排序" class="headerlink" title="十一、基数排序"></a>十一、基数排序</h3><h4 id="1-算法描述-7"><a href="#1-算法描述-7" class="headerlink" title="1.算法描述"></a>1.算法描述</h4><ul><li>基数排序属于“分配式排序”，又称”桶子法“，顾名思义，它是通过键值的各个位的值，将要排序的元素分配到某些”桶“中去，达到排序的作用</li><li>基数排序将所有待比较数值统一为同样的数位长度，数位较短的前面补0。然后，从最低位开始，依次根据该位上的值进行一次排序，位上值相同的形成一个序列。这样从最低位到最高位分配并收集完成后，数列就变成有序序列。</li></ul><h4 id="2-图片演示-3"><a href="#2-图片演示-3" class="headerlink" title="2.图片演示"></a>2.图片演示</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/4.gif" alt="图片" style="zoom:80%;"><h4 id="3-代码实现-7"><a href="#3-代码实现-7" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 容纳分配元素的桶</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bucket</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] bucketItems;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 桶内当前元素数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> bucketItemCount = <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基数排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 得到数组中数据最大位数</span><br>    <span class="hljs-keyword">int</span> maxLength = (Arrays.stream(arr).max().getAsInt()+<span class="hljs-string">&quot;&quot;</span>).length();<br><br>    <span class="hljs-comment">// 定义一组10个桶，代表位上 0~9 的值</span><br>    Bucket[] buckets = <span class="hljs-keyword">new</span> Bucket[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">// 定义每个桶的容量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; buckets.length; i++) &#123;<br>        buckets[i] = <span class="hljs-keyword">new</span> Bucket();<br>        buckets[i].bucketItems = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br>    &#125;<br><br>    <span class="hljs-comment">// 从各位到最高位进行循环</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxLength; i++) &#123;<br>        <span class="hljs-comment">// 根据某位进行分配</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>            <span class="hljs-comment">// 取出各元素某位值</span><br>            <span class="hljs-keyword">int</span> digit = arr[j] /((<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">10</span>, i)) % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 放入对应桶中，并修改元素个数记录</span><br>            buckets[digit].bucketItems[buckets[digit].bucketItemCount] = arr[j];<br>            buckets[digit].bucketItemCount++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> arrIndex = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 收集数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">10</span>; k++) &#123;<br>            <span class="hljs-comment">// 如果桶中有数据，收集</span><br>            <span class="hljs-keyword">if</span> (buckets[k].bucketItemCount != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>; l &lt; buckets[k].bucketItemCount; l++) &#123;<br>                    arr[arrIndex++] = buckets[k].bucketItems[l];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 每次按位分配并收集后重置桶数据</span><br>        <span class="hljs-keyword">for</span> (Bucket bucket: buckets) &#123;<br>            bucket.bucketItems = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br>            bucket.bucketItemCount = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-特点-7"><a href="#4-特点-7" class="headerlink" title="4.特点"></a>4.特点</h4><p>基数排序要求较高，排序元素必须是非负整数。</p><hr><h3 id="十二、复杂度及稳定性"><a href="#十二、复杂度及稳定性" class="headerlink" title="十二、复杂度及稳定性"></a>十二、复杂度及稳定性</h3><h4 id="1-常见排序算法对比"><a href="#1-常见排序算法对比" class="headerlink" title="1. 常见排序算法对比"></a>1. 常见排序算法对比</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：排序算法/3.jpg" alt="对比" style="zoom:80%;"><h4 id="2-相关术语解释"><a href="#2-相关术语解释" class="headerlink" title="2.相关术语解释"></a>2.相关术语解释</h4><ul><li><p><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p></li><li><p><strong>不稳定</strong>：如果a原本在b前面，而a=b，排序之后a可能出现在在b的后面。</p></li><li><p><strong>内排序</strong>：所有排序操作都在内存中完成。</p></li><li><p><strong>外排序</strong>：数据放在磁盘中。</p></li><li><p><strong>n</strong>：数据规模</p></li><li><p><strong>k</strong>：桶的个数</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构：递归</title>
    <link href="/posts/2021/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%80%92%E5%BD%92/"/>
    <url>/posts/2021/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><hr><h3 id="sun-with-face-递归的概念"><a href="#sun-with-face-递归的概念" class="headerlink" title=":sun_with_face: 递归的概念"></a>:sun_with_face: 递归的概念</h3><p>简单的说，递归就是<strong>方法自己调用自己</strong>，每次调用时传入不同的变量。递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。</p><hr><h3 id="sun-with-face-递归机制演示"><a href="#sun-with-face-递归机制演示" class="headerlink" title=":sun_with_face: 递归机制演示"></a>:sun_with_face: 递归机制演示</h3><h4 id="ledger-案例"><a href="#ledger-案例" class="headerlink" title=":ledger: 案例"></a>:ledger: 案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>  test(<span class="hljs-number">4</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">2</span>) &#123;<br>    test(n - <span class="hljs-number">1</span>);<br>  &#125;<br>  System.out.println(<span class="hljs-string">&quot;n = &quot;</span> + n);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ledger-结果"><a href="#ledger-结果" class="headerlink" title=":ledger: 结果"></a>:ledger: 结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">n = <span class="hljs-number">2</span><br>n = <span class="hljs-number">3</span><br>n = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="ledger-递归调用机制"><a href="#ledger-递归调用机制" class="headerlink" title=":ledger: 递归调用机制"></a>:ledger: 递归调用机制</h4><p>:one: 当程序执行到一个方法时，就会在栈中开辟一个独立的空间。</p><p>:two: ​每个空间的数据（局部变量），是独立的。</p><p>:three: 递归调用图解：</p><p>​    <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：递归/1.png" alt="递归机制" style="zoom:80%;"></p><hr><h3 id="sun-with-face-递归解决的问题"><a href="#sun-with-face-递归解决的问题" class="headerlink" title=":sun_with_face: 递归解决的问题"></a>:sun_with_face: 递归解决的问题</h3><p>:one: 各种数学问题：8皇后问题、汉诺塔问题、阶乘问题、迷宫问题、球和篮子的问题。</p><p>:two: 各种算法中也会使用到递归，比如快排、归并排序、二分查找、分治算法等。</p><p>:three: 将用栈解决的问题，用递归解决比较简洁。</p><hr><h3 id="sun-with-face-递归的重要规则"><a href="#sun-with-face-递归的重要规则" class="headerlink" title=":sun_with_face: 递归的重要规则"></a>:sun_with_face: 递归的重要规则</h3><p>:one: 执行一个方法时，就创建一个新的受保护的独立空间（栈空间）。</p><p>:two: 方法的局部变量，不会相互影响。</p><p>:three: 递归必须向退出递归的条件逼近，否则就是无限递归了。</p><p>:four: 如果方法中使用的是引用类型变量（如数组），就会共享该引用类型的数据。</p><p>:five: 当一个方法执行完毕，或者遇到return，就会返回。</p><hr><h3 id="sun-with-face-递归-迷宫问题"><a href="#sun-with-face-递归-迷宫问题" class="headerlink" title=":sun_with_face: 递归-迷宫问题"></a>:sun_with_face: 递归-迷宫问题</h3><h4 id="ledger-问题介绍"><a href="#ledger-问题介绍" class="headerlink" title=":ledger: 问题介绍"></a>:ledger: 问题介绍</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：递归/1.jpg" alt="迷宫问题" style="zoom:80%;"><p>:one: 小球得到的路径，和程序员设置的寻路策略有关即寻路的上下左右的顺序相关。</p><p>:two: 在得到小球路径时，可以先使用（下右上左），再改成（上右下左），看看路径是否有变化。</p><p>:three: 测试回溯现象。</p><p>:four: 思考：<strong>如何求出最短路径？</strong></p><h4 id="ledger-迷宫初始化"><a href="#ledger-迷宫初始化" class="headerlink" title=":ledger: 迷宫初始化"></a>:ledger: 迷宫初始化</h4><p>构建迷宫类<code>Maze</code>，其中有属性为<code>map</code>地图，使用构造器初始化迷宫（规定迷宫大小和建立边界墙）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Maze</span> </span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 二维数组模拟迷宫，使用1代表墙。</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">int</span>[][] map;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 构造器初始化迷宫</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Maze</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化迷宫大小</span><br>    <span class="hljs-keyword">int</span> row = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">int</span> col = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">this</span>.map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[row][col];<br>    <span class="hljs-comment">// 构建上下边界墙</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; col;i++) &#123;<br>      map[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;<br>      map[row - <span class="hljs-number">1</span>][i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; row;i++) &#123;<br>      map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>      map[i][col - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 设置挡板</span><br>    map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 打印迷宫</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMaze</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; map.length;i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; map[<span class="hljs-number">0</span>].length; j++) &#123;<br>        System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>      &#125;<br>      System.out.println();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试迷宫初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试地图初始化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>    Maze maze = <span class="hljs-keyword">new</span> Maze();<br>    maze.printMaze();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如题目的迷宫图一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><h4 id="ledger-递归回溯寻路"><a href="#ledger-递归回溯寻路" class="headerlink" title=":ledger: 递归回溯寻路"></a>:ledger: 递归回溯寻路</h4><p>写这个方法，我们需要做一些约定：</p><ul><li><p><code>map</code> 表示需要寻路的所在地图。</p></li><li><p><code>i， j</code>表示地图起始位置的横纵坐标，默认终点为<code>[row-2][col-2]</code>，也就是前面的<code>[6][5]</code></p></li><li><p><code>map[i][j]=0</code>代表该点还没有走过；<code>map[i][j]=1</code>表示该点是墙；<code>map[i][j]=2</code>表示是通路可以走；<code>map[i][j]=3</code>表示该点已经走过，但是走不通。</p></li><li><p>在走迷宫时，需要确定一个行走策略：<strong>下-&gt;右-&gt;上-&gt;左</strong>，如果走不通再回溯。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递归回溯寻路</span><br><span class="hljs-comment"> * 约定：</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> map 迷宫地图</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> i 出发位置横坐标</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> j 出发位置纵坐标</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 是否找到路径</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">setWay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] map, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果当前这个点还没有走过，按照策略寻路，不通再回溯</span><br>        <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 假定该点可以走通</span><br>            map[i][j] = <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// 向下寻路</span><br>            <span class="hljs-keyword">if</span> (setWay(map, i + <span class="hljs-number">1</span>, j)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                <span class="hljs-comment">// 向右寻路</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                <span class="hljs-comment">// 向下寻路</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i - <span class="hljs-number">1</span>, j)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                <span class="hljs-comment">// 向左寻路</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i , j - <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                <span class="hljs-comment">// 该点不通</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map[i][j] = <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            <span class="hljs-comment">// 如果map[i][j] != 0，可能为 1/2/3</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试寻路，并打印寻路后并标识过的迷宫数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试迷宫寻路</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    Maze maze = <span class="hljs-keyword">new</span> Maze();<br>    maze.setWay(maze.map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    maze.printMaze();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>我们设计的这个策略非常幸运，没有碰到回溯的情况，下面我们改变策略</p><h4 id="ledger-改变策略体现回溯"><a href="#ledger-改变策略体现回溯" class="headerlink" title=":ledger: 改变策略体现回溯"></a>:ledger: 改变策略体现回溯</h4><p>我们将策略改变为<strong>上-&gt;左-&gt;下-&gt;右</strong>，并且将挡板部分堵一部分，观察寻路后标识过的结果。</p><p>改变策略代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果当前这个点还没有走过，按照策略寻路，不通再回溯</span><br><span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 假定该点可以走通</span><br>    map[i][j] = <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 向上寻路</span><br>    <span class="hljs-keyword">if</span> (setWay(map, i - <span class="hljs-number">1</span>, j)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 向左寻路</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j - <span class="hljs-number">1</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 向下寻路</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i + <span class="hljs-number">1</span>, j)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 向右寻路</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i , j + <span class="hljs-number">1</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 该点不通</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        map[i][j] = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果map[i][j] != 0，可能为 1/2/3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改挡板部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置挡板</span><br>    map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    map[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>测试结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>这里就出现了回溯的情况。</p><h4 id="ledger-寻路的最短路径"><a href="#ledger-寻路的最短路径" class="headerlink" title=":ledger: 寻路的最短路径"></a>:ledger: 寻路的最短路径</h4><p>当前，我们没有学习相关的算法，和迷宫寻路的路径长短直接相关的为<strong>寻路的策略</strong>。</p><p>我们可以将各种策略进行测试，得到结果获得路径最短的即可。</p><hr><h3 id="sun-with-face-八皇后问题"><a href="#sun-with-face-八皇后问题" class="headerlink" title=":sun_with_face: 八皇后问题"></a>:sun_with_face: 八皇后问题</h3><h4 id="ledger-问题介绍-1"><a href="#ledger-问题介绍-1" class="headerlink" title=":ledger: 问题介绍"></a>:ledger: 问题介绍</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：递归/2.jpg" alt="八皇后问题" style="zoom:80%;"><p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋手马克思·贝瑟尔于1848年提出：<strong>在8×8格的国际象棋上任意摆放8个皇后</strong>，使其不能互相攻击，即：<strong>任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法？</strong></p><h4 id="ledger-思路分析"><a href="#ledger-思路分析" class="headerlink" title=":ledger: 思路分析"></a>:ledger: 思路分析</h4><ol><li><p>第一个皇后先放在第一行第一列。</p></li><li><p>第二个皇后放在第二行第一列，然后判断是否相互攻击，如果相互攻击，继续放在第二列、第三列…直到找到一个合适的。</p></li><li><p>继续第三个皇后，还是第一列、第二列…直到第8个皇后也能放在一个不冲突的位置，得到一个正确解。<strong>期间如果出现一个皇后在哪一列都会冲突，就回溯到上一个皇后，调整其位置</strong>。</p></li><li><p>当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即调整上一个皇后的位置看能否成功，到最后会将第一个皇后放到第一列的所有正确解，全部得到。</p></li><li><p>然后回头继续第一个皇后放在第二列，后面继续循环执行1、2 、3、4的步骤。</p></li></ol><p><strong>说明</strong>：理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题。<code>array[8] = &#123;0, 4, 7, 5, 2, 6, 1, 3&#125;</code>，对应的<code>array</code>数组下标表示第几个皇后，<code>array[i] = val</code>表示第 <code>i+1</code>个皇后放在第<code>i+1</code>行的第<code>val+1</code>列。</p><h4 id="ledger-基本属性和打印方法"><a href="#ledger-基本属性和打印方法" class="headerlink" title=":ledger: 基本属性和打印方法"></a>:ledger: 基本属性和打印方法</h4><p>我们在八皇后类中定义<code>max</code>表示共有多少个皇后，定义数组<code>array[]</code>存放皇后放置的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue8</span> </span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 定义一个max表示共有多少个皇后</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">int</span> max = <span class="hljs-number">8</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 定义数组array，保存皇后放置位置的结果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[max];<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们编写打印皇后位置的方法<code>print()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将皇后摆放的位置打印</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>        System.out.print(array[i] + <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ledger-检测冲突方法"><a href="#ledger-检测冲突方法" class="headerlink" title=":ledger: 检测冲突方法"></a>:ledger: 检测冲突方法</h4><p>当我们放置第n个皇后时，需要检测是否与之前摆放皇后有冲突。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当我们放置第n个皇后，检测是否与之前摆放的皇后冲突</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n 第n个皇后  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 是否冲突</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// Math.abs(n - i) == Math.abs(array[n] - array[i]) 判断第n个皇后是否和第i个皇后在同一斜线</span><br>        <span class="hljs-keyword">if</span> (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ledger-放置皇后方法"><a href="#ledger-放置皇后方法" class="headerlink" title=":ledger: 放置皇后方法"></a>:ledger: 放置皇后方法</h4><p>我们需要放置第n个皇后，在这个方法中我们要做到将第n个皇后放到第n行，并从第一列开始尝试摆放，直到找到不冲突的地方，如果所有地方都冲突，能做到回溯到上一个皇后让其更换摆放的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 放置第n个皇后,从0开始</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 8个皇后已经放置好了</span><br>    <span class="hljs-keyword">if</span> (n &gt;= max) &#123;<br>        print();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 依次放入皇后，并判断是否冲突</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;<br>        <span class="hljs-comment">// 先把当前的皇后放到该行的第1列</span><br>        array[n] = i;<br>        <span class="hljs-comment">// 判断是否冲突</span><br>        <span class="hljs-keyword">if</span> (judge(n)) &#123;<br>            check(n + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 如果冲突，将皇后向后移动</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ledger-测试"><a href="#ledger-测试" class="headerlink" title=":ledger: 测试"></a>:ledger: 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Queue8 queue8 = <span class="hljs-keyword">new</span> Queue8();<br>    queue8.check(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ledger-结果-1"><a href="#ledger-结果-1" class="headerlink" title=":ledger: 结果"></a>:ledger: 结果</h4><p>测试结果八皇后问题共92种摆法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">04752613</span><br><span class="hljs-number">05726314</span><br><span class="hljs-number">06357142</span><br><span class="hljs-number">06471352</span><br><span class="hljs-number">13572064</span><br><span class="hljs-number">14602753</span><br><span class="hljs-number">14630752</span><br><span class="hljs-number">15063724</span><br><span class="hljs-number">15720364</span><br><span class="hljs-number">16257403</span><br><span class="hljs-number">16470352</span><br><span class="hljs-number">17502463</span><br><span class="hljs-number">20647135</span><br><span class="hljs-number">24170635</span><br><span class="hljs-number">24175360</span><br><span class="hljs-number">24603175</span><br><span class="hljs-number">24730615</span><br><span class="hljs-number">25147063</span><br><span class="hljs-number">25160374</span><br><span class="hljs-number">25164073</span><br><span class="hljs-number">25307461</span><br><span class="hljs-number">25317460</span><br><span class="hljs-number">25703641</span><br><span class="hljs-number">25704613</span><br><span class="hljs-number">25713064</span><br><span class="hljs-number">26174035</span><br><span class="hljs-number">26175304</span><br><span class="hljs-number">27360514</span><br><span class="hljs-number">30471625</span><br><span class="hljs-number">30475261</span><br><span class="hljs-number">31475026</span><br><span class="hljs-number">31625704</span><br><span class="hljs-number">31625740</span><br><span class="hljs-number">31640752</span><br><span class="hljs-number">31746025</span><br><span class="hljs-number">31750246</span><br><span class="hljs-number">35041726</span><br><span class="hljs-number">35716024</span><br><span class="hljs-number">35720641</span><br><span class="hljs-number">36074152</span><br><span class="hljs-number">36271405</span><br><span class="hljs-number">36415027</span><br><span class="hljs-number">36420571</span><br><span class="hljs-number">37025164</span><br><span class="hljs-number">37046152</span><br><span class="hljs-number">37420615</span><br><span class="hljs-number">40357162</span><br><span class="hljs-number">40731625</span><br><span class="hljs-number">40752613</span><br><span class="hljs-number">41357206</span><br><span class="hljs-number">41362750</span><br><span class="hljs-number">41506372</span><br><span class="hljs-number">41703625</span><br><span class="hljs-number">42057136</span><br><span class="hljs-number">42061753</span><br><span class="hljs-number">42736051</span><br><span class="hljs-number">46027531</span><br><span class="hljs-number">46031752</span><br><span class="hljs-number">46137025</span><br><span class="hljs-number">46152037</span><br><span class="hljs-number">46152073</span><br><span class="hljs-number">46302751</span><br><span class="hljs-number">47302516</span><br><span class="hljs-number">47306152</span><br><span class="hljs-number">50417263</span><br><span class="hljs-number">51602473</span><br><span class="hljs-number">51603742</span><br><span class="hljs-number">52064713</span><br><span class="hljs-number">52073164</span><br><span class="hljs-number">52074136</span><br><span class="hljs-number">52460317</span><br><span class="hljs-number">52470316</span><br><span class="hljs-number">52613704</span><br><span class="hljs-number">52617403</span><br><span class="hljs-number">52630714</span><br><span class="hljs-number">53047162</span><br><span class="hljs-number">53174602</span><br><span class="hljs-number">53602417</span><br><span class="hljs-number">53607142</span><br><span class="hljs-number">57130642</span><br><span class="hljs-number">60275314</span><br><span class="hljs-number">61307425</span><br><span class="hljs-number">61520374</span><br><span class="hljs-number">62057413</span><br><span class="hljs-number">62714053</span><br><span class="hljs-number">63147025</span><br><span class="hljs-number">63175024</span><br><span class="hljs-number">64205713</span><br><span class="hljs-number">71306425</span><br><span class="hljs-number">71420635</span><br><span class="hljs-number">72051463</span><br><span class="hljs-number">73025164</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构：栈</title>
    <link href="/posts/2021/02/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88/"/>
    <url>/posts/2021/02/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="game-die-栈的介绍"><a href="#game-die-栈的介绍" class="headerlink" title=":game_die:栈的介绍"></a>:game_die:栈的介绍</h3><ul><li><p>栈的英文是 stack。</p></li><li><p>栈是一个先入后出（FILO-First In Last Out）的有序列表。</p></li><li><p>栈是<strong>限制线性表中元素的插入和删除只能在线性表同一端进行</strong>的一种特殊线性表。</p></li><li><p>允许元素插入和删除的一段，为<strong>栈顶</strong>，另一端是固定的，为栈底。</p></li><li><p>根据栈的定义，最先放入栈中的元素在栈底，最后放入栈中的元素在栈顶。</p></li><li><p>最后放入栈中的元素会被最先删除，最先放入栈中的元素会被最后删除。</p></li><li><p>入栈出栈演示图</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88/1.jpg" alt="栈"></p></li></ul><h3 id="game-die-栈的应用场景"><a href="#game-die-栈的应用场景" class="headerlink" title=":game_die:栈的应用场景"></a>:game_die:栈的应用场景</h3><ol><li><strong>子程序的调用</strong>：在跳往子程序前，会先将下个指令的地址存到堆栈，知道子程序执行完后再将地址取出，以回到原来的程序中。</li><li><strong>处理递归调用</strong>：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li><li>表达式的转换与求值。</li><li>二叉树的遍历。</li><li>图形的深度优先搜索。</li></ol><h3 id="game-die-实现栈"><a href="#game-die-实现栈" class="headerlink" title=":game_die:实现栈"></a>:game_die:实现栈</h3><h4 id="zap-思路一：数组模拟栈"><a href="#zap-思路一：数组模拟栈" class="headerlink" title=":zap:思路一：数组模拟栈"></a>:zap:思路一：数组模拟栈</h4><ol><li>使用数组来模拟栈。</li><li>定义一个<code>top</code>表示栈顶，<code>bottom</code>表示栈底，二者都初始化为-1。</li><li>入栈操作：<code>stack[++top] = data</code>。</li><li>出栈操作：<code>int value = stack[top--];</code>。</li></ol><h4 id="zap-代码"><a href="#zap-代码" class="headerlink" title=":zap:代码"></a>:zap:代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组模拟栈</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStack</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> stackSize;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] stack;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top = -<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bottom = -<span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 构造器</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> stackSize 栈的大小</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stackSize)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.stackSize = stackSize;<br>    stack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[stackSize];<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断栈满</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否栈满</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> top == stackSize - <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断栈空</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否栈空</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> top == bottom;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 入栈</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> data 入栈元素</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isFull()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;栈满&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    stack[++top] = data;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 出栈</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 出栈元素</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈空，无数据&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack[top--];<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 打印栈内容，从栈顶到栈底</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printStack</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;栈空，无数据&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = top; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      System.out.printf(<span class="hljs-string">&quot;stack[%d] = %d\n&quot;</span>, i, stack[i]);<br>    &#125;<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="zap-测试"><a href="#zap-测试" class="headerlink" title=":zap:测试"></a><strong>:zap:测试</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStackTest</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ArrayStack stack = <span class="hljs-keyword">new</span> ArrayStack(<span class="hljs-number">4</span>);<br>    String option = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">boolean</span> loop = <span class="hljs-keyword">true</span>;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">while</span> (loop) &#123;<br>      System.out.println(<span class="hljs-string">&quot;-------菜单--------&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;show：显示栈&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;push：数据入栈&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;pop：数据出栈&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;exit：退出程序&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;请作出选项：&quot;</span>);<br>      option = scanner.next();<br>      <span class="hljs-keyword">switch</span> (option) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;show&quot;</span>:<br>          stack.printStack();<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;push&quot;</span>:<br>          System.out.println(<span class="hljs-string">&quot;请输入一个数据&quot;</span>);<br>          <span class="hljs-keyword">int</span> value = scanner.nextInt();<br>          stack.push(value);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span>  <span class="hljs-string">&quot;pop&quot;</span>:<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> res = stack.pop();<br>            System.out.println(<span class="hljs-string">&quot;出栈元素为&quot;</span> + res);<br>          &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>          scanner.close();<br>          loop = <span class="hljs-keyword">false</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          System.out.println(<span class="hljs-string">&quot;无效选项&quot;</span>);<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;程序已退出&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="zap-结果"><a href="#zap-结果" class="headerlink" title=":zap:结果"></a>:zap:结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java">-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>push<br>请输入一个数据<br><span class="hljs-number">1</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>push<br>请输入一个数据<br><span class="hljs-number">2</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>push<br>请输入一个数据<br><span class="hljs-number">3</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>push<br>请输入一个数据<br><span class="hljs-number">4</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>show<br>stack[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span><br>stack[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span><br>stack[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br>stack[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>pop<br>出栈元素为<span class="hljs-number">4</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>exit<br>程序已退出<br></code></pre></td></tr></table></figure><h4 id="zap-思路二：链表模拟栈"><a href="#zap-思路二：链表模拟栈" class="headerlink" title=":zap:思路二：链表模拟栈"></a>:zap:思路二：链表模拟栈</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88/2.jpg" alt="链栈"></p><ol><li><p>使用单链表模拟栈</p></li><li><p>定义链栈节点<code>StackNode</code>，属性为数据域<code>data</code>和指针域<code>next</code>。</p></li><li><p>定义带有头结点<code>head</code>的链栈<code>LinkedStack</code>，带有属性<code>stackSize</code>栈容量。</p></li><li><p><code>head</code>的<code>next</code>永远指向<code>top</code>。</p></li><li><p>判空：<code>head.next == null</code></p></li><li><p>判满：<code>length() == stackSize</code></p></li><li><p>长度：<code>length()</code>方法为从头结点下一个遍历，直到到达栈底</p></li><li><p>入栈：<code>head.next = newNode; newNode.next = top; top = newNode</code>，<code>top</code>永远为最新添加的那个元素，<mark>但是在链表的最后，会留下一开始的<code>data为-1</code>的表示<code>top</code>的节点。</mark></p></li><li><p>出栈：<code>int value = head.next.data; head.next = head.next.next;</code></p></li></ol><h4 id="zap-代码-1"><a href="#zap-代码-1" class="headerlink" title=":zap:代码"></a>:zap:代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 链栈的实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-06 16:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedStack</span> </span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 头结点</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> StackNode head = <span class="hljs-keyword">new</span> StackNode(-<span class="hljs-number">1</span>);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 栈顶</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> StackNode top = <span class="hljs-keyword">new</span> StackNode(-<span class="hljs-number">1</span>);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 栈容量</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> stackSize;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 构造器</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> stackSize 栈容量</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedStack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stackSize)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.stackSize = stackSize;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 入栈</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> data 要入栈的元素</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isFull()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;栈满&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    StackNode newNode = <span class="hljs-keyword">new</span> StackNode(data);<br>    head.next = newNode;<br>    newNode.next = top;<br>    top = newNode;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 出栈</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 出栈元素</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈空，无法出栈&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> value = head.next.data;<br>    head.next = head.next.next;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断栈空</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否栈空</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> head.next == <span class="hljs-keyword">null</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断栈满</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否栈满</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> length() == stackSize;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获得链栈长度</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 链栈长度</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>    StackNode curNode = head.next;<br>    <span class="hljs-keyword">while</span> (curNode.next != <span class="hljs-keyword">null</span>) &#123;<br>      length++;<br>      curNode = curNode.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 打印链栈</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printStack</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;栈空，无数据&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    StackNode curNode = head.next;<br>    <span class="hljs-keyword">int</span> i = length();<br>    <span class="hljs-keyword">while</span> (curNode.next != <span class="hljs-keyword">null</span>) &#123;<br>      System.out.printf(<span class="hljs-string">&quot;stack[%d] = %d\n&quot;</span>, i - <span class="hljs-number">1</span>, curNode.data);<br>      curNode = curNode.next;<br>      i--;<br>    &#125;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 链栈节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackNode</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> data;<br>  <span class="hljs-keyword">public</span> StackNode next;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StackNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.data = data;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;StackNode&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;data=&quot;</span> + data +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="zap-测试-1"><a href="#zap-测试-1" class="headerlink" title=":zap:测试"></a>:zap:测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 链栈测试</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-06 16:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedStackTest</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    LinkedStack stack = <span class="hljs-keyword">new</span> LinkedStack(<span class="hljs-number">4</span>);<br>    String option = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">boolean</span> loop = <span class="hljs-keyword">true</span>;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">while</span> (loop) &#123;<br>      System.out.println(<span class="hljs-string">&quot;-------菜单--------&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;show：显示栈&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;push：数据入栈&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;pop：数据出栈&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;exit：退出程序&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;请作出选项：&quot;</span>);<br>      option = scanner.next();<br>      <span class="hljs-keyword">switch</span> (option) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;show&quot;</span>:<br>          stack.printStack();<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;push&quot;</span>:<br>          System.out.println(<span class="hljs-string">&quot;请输入一个数据&quot;</span>);<br>          <span class="hljs-keyword">int</span> value = scanner.nextInt();<br>          stack.push(value);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span>  <span class="hljs-string">&quot;pop&quot;</span>:<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> res = stack.pop();<br>            System.out.println(<span class="hljs-string">&quot;出栈元素为&quot;</span> + res);<br>          &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>          scanner.close();<br>          loop = <span class="hljs-keyword">false</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          System.out.println(<span class="hljs-string">&quot;无效选项&quot;</span>);<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;程序已退出&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="zap-结果-1"><a href="#zap-结果-1" class="headerlink" title=":zap:结果"></a>:zap:结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java">-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>show<br>栈空，无数据<br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>push<br>请输入一个数据<br><span class="hljs-number">1</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>show<br>stack[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>push<br>请输入一个数据<br><span class="hljs-number">2</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>push<br>请输入一个数据<br><span class="hljs-number">3</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>push<br>请输入一个数据<br><span class="hljs-number">4</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>push<br>请输入一个数据<br><span class="hljs-number">5</span><br>栈满<br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>pop<br>出栈元素为<span class="hljs-number">4</span><br>-------菜单--------<br>show：显示栈<br>push：数据入栈<br>pop：数据出栈<br>exit：退出程序<br>------------------<br>请作出选项：<br>exit<br>程序已退出<br></code></pre></td></tr></table></figure><h3 id="game-die-栈实现简单计算器（不考虑括号）"><a href="#game-die-栈实现简单计算器（不考虑括号）" class="headerlink" title=":game_die:栈实现简单计算器（不考虑括号）"></a>:game_die:栈实现简单计算器（不考虑括号）</h3><h4 id="zap-题意"><a href="#zap-题意" class="headerlink" title=":zap:题意"></a>:zap:题意</h4><p>使用栈完成计算这样一个表达式的结果：2×2×2-5+1-5+4/2 = ?</p><h4 id="zap-思路"><a href="#zap-思路" class="headerlink" title=":zap:思路"></a>:zap:思路</h4><ol><li><p>通过一个 <code>index</code>值（索引）来遍历表达式。</p></li><li><p>如果扫描到一个数字，就直接进入<strong>操作数栈</strong>。</p></li><li><p>如果扫描到一个符号，分如下几种情况解决：</p><ul><li>如果当前运算符栈为空，就直接入栈。</li><li>如果扫描到<strong>当前运算符</strong>优先级<strong>小于或等于栈顶运算符</strong>的优先级，从<strong>操作数栈</strong>中<code>pop</code>出两个操作数，再从<strong>运算符栈</strong><code>pop</code>出一个运算符，将<strong>运算结果</strong>压入<strong>操作数栈</strong>，并将<strong>当前运算符</strong>压入<strong>运算符栈</strong>。</li><li>如果<strong>当前运算符优先级大于栈顶运算符的优先级</strong>，就直接压入<strong>运算符栈</strong>。</li></ul></li><li><p>当表达式扫描完毕，就<strong>顺序的从操作数栈和运算符栈</strong>中<code>pop</code>出相应的操作数和运算符，进行计算。</p></li><li><p>最后<strong>在操作数栈中只有一个数</strong>，就是最终的结果。</p></li></ol><h4 id="zap-代码-2"><a href="#zap-代码-2" class="headerlink" title=":zap:代码"></a>:zap:代码</h4><ol><li><p>关于计算器的栈，扩充了获取优先级、运算、和判断是否为运算符的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 关于计算器的栈</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorStack</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> stackSize;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] stack;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top = -<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bottom = -<span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 构造器</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> stackSize 栈的大小</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CalculatorStack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stackSize)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.stackSize = stackSize;<br>    stack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[stackSize];<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断栈满</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否栈满</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> top == stackSize - <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断栈空</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否栈空</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> top == bottom;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 入栈</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> data 入栈元素</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isFull()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;栈满&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    stack[++top] = data;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 出栈</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 出栈元素</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈空，无数据&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack[top--];<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 打印栈内容，从栈顶到栈底</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printStack</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;栈空，无数据&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = top; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      System.out.printf(<span class="hljs-string">&quot;stack[%d] = %d\n&quot;</span>, i, stack[i]);<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 运算符优先级</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> oper 运算符</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 优先级</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">priority</span><span class="hljs-params">(<span class="hljs-keyword">int</span> oper)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;*&#x27;</span> || oper == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;+&#x27;</span> || oper == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">/* 错误 */</span><br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断是否为运算符</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> val 传入字符</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 是否为运算符</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOper</span><span class="hljs-params">(<span class="hljs-keyword">char</span> val)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> val == <span class="hljs-string">&#x27;+&#x27;</span> || val == <span class="hljs-string">&#x27;-&#x27;</span> || val == <span class="hljs-string">&#x27;*&#x27;</span> || val == <span class="hljs-string">&#x27;/&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 计算方法</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> num1 操作数1 先弹出</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> num2 操作数2 后弹出</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> oper 运算符</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 运算结果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2, <span class="hljs-keyword">int</span> oper)</span> </span>&#123;<br><br>    <span class="hljs-comment">/* 存放运算结果 */</span><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">switch</span> (oper) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>        res = num1 + num2;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>        res = num2 - num1;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>        res = num1 * num2;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>        res = num2 / num1;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br><br>  &#125;<br><br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 实现简易计算器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-06 18:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calculator</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">/* 表达式 */</span><br>    String expression = <span class="hljs-string">&quot;30+2*6-2&quot;</span>;<br><br>    <span class="hljs-comment">/* 创建数栈与符号栈 */</span><br>    CalculatorStack numStack = <span class="hljs-keyword">new</span> CalculatorStack(<span class="hljs-number">10</span>);<br>    CalculatorStack operStack = <span class="hljs-keyword">new</span> CalculatorStack(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">/* 定义辅助变量 */</span><br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> oper = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch = <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-comment">// 多位数拼接</span><br>    String keepNum = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">/* 循环扫描表达式 */</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>      ch = expression.substring(index, index + <span class="hljs-number">1</span>).charAt(<span class="hljs-number">0</span>);<br><br>      <span class="hljs-comment">/* 判断是操作数还是运算符 */</span><br>      <span class="hljs-keyword">if</span> (operStack.isOper(ch)) &#123;<br><br>        <span class="hljs-comment">/* 判断运算符栈是否为空 */</span><br>        <span class="hljs-keyword">if</span> (!operStack.isEmpty()) &#123;<br>          <span class="hljs-comment">/* 如果当前运算符优先级小于或者等于栈中操作符 */</span><br>          <span class="hljs-keyword">if</span> (operStack.priority(ch) &lt;= operStack.priority(operStack.pickTop())) &#123;<br>            num1 = numStack.pop();<br>            num2 = numStack.pop();<br>            oper = operStack.pop();<br>            res = numStack.cal(num1, num2, oper);<br>            numStack.push(res);<br>            operStack.push(ch);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* 如果当前运算符优先级大于栈中操作符 */</span><br>            operStack.push(ch);<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">/* 如果运算符栈为空 */</span><br>          operStack.push(ch);<br>        &#125;<br><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/* 如果是操作数，直接入数栈，在这里进行多位数的处理 */</span><br>        keepNum += ch;<br>        <span class="hljs-comment">/* 如果ch不是表达式的最后一位，向后探视一位是否为操作数 */</span><br>        <span class="hljs-keyword">if</span> (index == expression.length() - <span class="hljs-number">1</span>) &#123;<br>          numStack.push(Integer.parseInt(keepNum));<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">if</span> (operStack.isOper(expression.substring(index+<span class="hljs-number">1</span>, index+<span class="hljs-number">2</span>).charAt(<span class="hljs-number">0</span>))) &#123;<br>            numStack.push(Integer.parseInt(keepNum));<br>            keepNum = <span class="hljs-string">&quot;&quot;</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">/* index + 1，判断是否扫描到结尾 */</span><br>      index++;<br>      <span class="hljs-keyword">if</span> (index &gt;= expression.length()) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* 表达式扫描完毕后,顺序的从数栈和符号栈pop出相应的数和符号并运行 */</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>      <span class="hljs-comment">// 如果符号栈为空，则计算到最后的结果，数栈中只有1个数字</span><br>      <span class="hljs-keyword">if</span> (operStack.isEmpty()) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      num1 = numStack.pop();<br>      num2 = numStack.pop();<br>      oper = operStack.pop();<br>      res = numStack.cal(num1, num2, oper);<br>      numStack.push(res);<br>    &#125;<br><br>    <span class="hljs-comment">/* 计算完毕，最终结果在数栈中 */</span><br>    System.out.printf(<span class="hljs-string">&quot;表达式 %s = %d\n&quot;</span>, expression, numStack.pop());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="zap-结果-2"><a href="#zap-结果-2" class="headerlink" title=":zap:结果"></a>:zap:结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">表达式 <span class="hljs-number">30</span>+<span class="hljs-number">2</span>*<span class="hljs-number">6</span>-<span class="hljs-number">2</span> = <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><h3 id="game-die-前缀表达式（波兰表达式）"><a href="#game-die-前缀表达式（波兰表达式）" class="headerlink" title=":game_die:前缀表达式（波兰表达式）"></a>:game_die:前缀表达式（波兰表达式）</h3><ol><li><p>前缀表达式又称<strong>波兰表达式</strong>，<strong>前缀表达式的运算符位于操作数之前</strong>。</p></li><li><p>举例说明： （3+4）×5-6 对应的前缀表达式为 -×+3456</p></li><li><p>前缀表达式的计算机求值：</p><p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 和 次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果</p><p>例如: (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6 , 针对前缀表达式求值步骤如下:</p><p>1、从右至左扫描，将6、5、4、3压入堆栈<br>2、遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算出3+4的值，得7，再将7入栈<br>3、接下来是×运算符，因此弹出7和5，计算出7×5=35，将35入栈<br>4、最后是-运算符，计算出35-6的值，即29，由此得出最终结果</p></li></ol><h3 id="game-die-中缀表达式"><a href="#game-die-中缀表达式" class="headerlink" title=":game_die:中缀表达式"></a>:game_die:中缀表达式</h3><ol><li>中缀表达式就是常见的运算表达式，如(3+4)×5-6 </li><li>中缀表达式的求值使我们所熟悉的，但是对计算机来说却不好操作。因此，在计算结果时，往往会将中缀表达式转换成其他表达式来操作（一般转换成后缀表达式）。</li></ol><h3 id="game-die-后缀表达式"><a href="#game-die-后缀表达式" class="headerlink" title=":game_die:后缀表达式"></a>:game_die:后缀表达式</h3><ol><li><p>后缀表达式又称为<strong>逆波兰表达式</strong>，<strong>后缀表达式的运算符位于操作数之后</strong>。</p></li><li><p>举例说明： （3+4）×5-6 对应的后缀表达式为 3 4 + 5 × 6</p></li><li><p>再例如：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88/3.jpg" alt="后缀表达式"></p></li><li><p>后缀表达式的计算机求值：</p><p>从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p><p>例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</p><p>1、从左至右扫描，将3和4压入堆栈；<br>2、遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；<br>3、将5入栈；<br>4、接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；<br>5、将6入栈；<br>6、最后是-运算符，计算出35-6的值，即29，由此得出最终结果</p></li></ol><h3 id="game-die-后缀表达式计算求值"><a href="#game-die-后缀表达式计算求值" class="headerlink" title=":game_die:后缀表达式计算求值"></a>:game_die:后缀表达式计算求值</h3><h4 id="zap-思路-1"><a href="#zap-思路-1" class="headerlink" title=":zap:思路"></a>:zap:思路</h4><ol><li>定义逆波兰表达式</li><li>将逆波兰表达式的字符一个个放到<code>ArrayList</code>中</li><li>使用java自带的<code>Stack</code>类。</li><li>匹配多位数使用正则表达式：<code>item.matches(&quot;\\d+&quot;)</code></li></ol><h4 id="zap-代码-3"><a href="#zap-代码-3" class="headerlink" title=":zap:代码"></a>:zap:代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 逆波兰计算</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-06 20:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PolandNotation</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">/* 定义逆波兰表达式 :(3+4)×5-6 =&gt; 3 4 + 5 * 6 - */</span><br>    String suffixExpression = <span class="hljs-string">&quot;3 4 + 5 * 6 -&quot;</span>;<br><br>    <span class="hljs-comment">/* 将逆波兰表达式放到 ArrayList */</span><br>    List&lt;String&gt; rpnList = getListByString(suffixExpression);<br><br>    <span class="hljs-comment">/* 将 ArrayList 传递给一个方法，配合栈完成计算 */</span><br>    <span class="hljs-keyword">int</span> result = calculate(rpnList);<br>    System.out.println(result);<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通过字符换转化为数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> suffixExpression 后缀表达式</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 存放字符元素的数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">getListByString</span><span class="hljs-params">(String suffixExpression)</span> </span>&#123;<br><br>    <span class="hljs-comment">/* 分割后缀表达式 */</span><br>    String[] strings = suffixExpression.split(<span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(strings));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 逆波兰表达式计算</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> list 存放逆波兰表达式的数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 计算结果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br><br>    Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br><br>    <span class="hljs-comment">/* 遍历 list */</span><br>    <span class="hljs-keyword">for</span> (String item: list) &#123;<br><br>      <span class="hljs-comment">/* 正则表达式匹配多位数 */</span><br>      <span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123;<br>        stack.push(item);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/* 弹出两个数，并运算，再入栈 */</span><br>        <span class="hljs-keyword">int</span> num2 = Integer.parseInt(stack.pop());<br>        <span class="hljs-keyword">int</span> num1 = Integer.parseInt(stack.pop());<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;+&quot;</span>.equals(item)) &#123;<br>          res = num1 + num2;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;-&quot;</span>.equals(item)) &#123;<br>          res = num1 - num2;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;*&quot;</span>.equals(item)) &#123;<br>          res = num1 * num2;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/&quot;</span>.equals(item)) &#123;<br>          res = num1 / num2;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;运算符有误&quot;</span>);<br>        &#125;<br>        stack.push(<span class="hljs-string">&quot;&quot;</span> + res);<br>      &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* 最终结果留在栈中 */</span><br>    <span class="hljs-keyword">return</span> Integer.parseInt(stack.pop());<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="zap-结果-3"><a href="#zap-结果-3" class="headerlink" title=":zap:结果"></a>:zap:结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">29</span><br></code></pre></td></tr></table></figure><h3 id="game-die-中缀表达式转换为后缀表达式"><a href="#game-die-中缀表达式转换为后缀表达式" class="headerlink" title=":game_die:中缀表达式转换为后缀表达式"></a>:game_die:中缀表达式转换为后缀表达式</h3><h4 id="zap-思路-2"><a href="#zap-思路-2" class="headerlink" title=":zap:思路"></a>:zap:思路</h4><ol><li>初始化两个栈：运算符栈s1和存储中间结果的栈s2。</li><li>从左至右扫描中缀表达式。</li><li>遇到操作数时，将其压入栈s2。</li><li>遇到运算符时，比较其与栈顶运算符的优先级：<ul><li>如果s1运算符栈为空，或着栈顶运算符为左括号’(‘，直接将其压入s1。</li><li>若该运算符比栈顶运算符优先级高或者栈顶元素为左括号，也将其直接压入s1。</li><li>若该运算符比栈顶运算符优先级低，将运算符栈s1栈顶运算符弹出并压入s2中，再次转到4-1与s1中新的栈顶运算符相比较。</li></ul></li><li>遇到括号时：<ul><li>如果是左括号’(‘，则直接将其压入s1。</li><li>如果是右括号’)’，则一次弹出s1栈顶的运算符并压入s2，直到遇到左括号为止，此时将这一对括号丢弃。</li></ul></li><li>重复步骤2至5，直到表达式的最后边</li></ol><p>将s1中剩余的运算符依次弹出并压入s2。</p><p>依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式。</p><h4 id="zap-举例"><a href="#zap-举例" class="headerlink" title=":zap:举例"></a>:zap:举例</h4><p>中缀表达式 <code>1 + ( ( 2 + 3 ) × 4 ) - 5</code> =》后缀表达式 <code>1 2 3 + 4 × + 5 -</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%A0%88/4.jpg" alt="过程"></p><h4 id="zap-代码-4"><a href="#zap-代码-4" class="headerlink" title=":zap:代码"></a>:zap:代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 逆波兰计算</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-06 20:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PolandNotation</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">/*  定义中缀表达式 */</span><br>    String expression = <span class="hljs-string">&quot;1+((2+3)*4)-5&quot;</span>;<br><br>    <span class="hljs-comment">/* 得到中缀表达式对应的List */</span><br>    List&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);<br><br>    <span class="hljs-comment">/* 将中缀表达式对应List转化为后缀表达式对应List */</span><br>    List&lt;String&gt; suffixExpressionList = parseSuffixExpressionList(infixExpressionList);<br>    System.out.println(suffixExpressionList);<br><br>    <span class="hljs-comment">/* 将 ArrayList 传递给一个方法，配合栈完成计算 */</span><br>    <span class="hljs-keyword">int</span> result = calculate(suffixExpressionList);<br>    System.out.println(result);<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 中缀表达式对应List转化为后缀表达式对应List</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ls 中缀表达式List</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 后缀表达式List</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">parseSuffixExpressionList</span><span class="hljs-params">(List&lt;String&gt; ls)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 符号栈</span><br>    Stack&lt;String&gt; s1 = <span class="hljs-keyword">new</span> Stack&lt;String&gt;();<br>    <span class="hljs-comment">// 存储中间结果的栈，因为s2这个栈，在整个转换过程中没有pop操作，而且最后还需要逆序输出</span><br>    <span class="hljs-comment">// 这样比较麻烦，直接使用 ArrayList&lt;String&gt; s2 来替代</span><br>    ArrayList&lt;String&gt; s2 = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br><br>    <span class="hljs-comment">// 遍历ls</span><br>    <span class="hljs-keyword">for</span> (String item: ls) &#123;<br>      <span class="hljs-comment">// 如果是一个数，加入s2</span><br>      <span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123;<br>        s2.add(item);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;(&quot;</span>.equals(item)) &#123;<br>        s1.push(item);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;)&quot;</span>.equals(item)) &#123;<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-string">&quot;(&quot;</span>.equals(s1.peek())) &#123;<br>          s2.add(s1.pop());<br>        &#125;<br>        <span class="hljs-comment">// 将&quot;(&quot;从s1栈弹出，消除一对小括号</span><br>        s1.pop();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 当item的优先级小于s1栈顶运算符</span><br>        <span class="hljs-keyword">while</span> (s1.size() != <span class="hljs-number">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item)) &#123;<br>          s2.add(s1.pop());<br>        &#125;<br>        s1.push(item);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 将s1中剩余的运算符依次弹出并加入s2</span><br>    <span class="hljs-keyword">while</span> (s1.size() != <span class="hljs-number">0</span>) &#123;<br>      s2.add(s1.pop());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> s2;<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 将中缀表达式转化为对应数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> s 中缀表达式</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 对应的数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">toInfixExpressionList</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    ArrayList&lt;String&gt; ls = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 对多位数的拼接</span><br>    String str;<br>    <span class="hljs-comment">// 遍历字符</span><br>    <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">do</span> &#123;<br>      <span class="hljs-comment">// 如果c非数组，直接加入ls</span><br>      <span class="hljs-keyword">if</span> ((c=s.charAt(i)) &lt; <span class="hljs-number">48</span> || (c=s.charAt(i)) &gt; <span class="hljs-number">57</span>) &#123;<br>        ls.add(<span class="hljs-string">&quot;&quot;</span>+c);<br>        i++;<br>      &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果是一个数字，需要考虑多位数</span><br>        str = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; s.length() &amp;&amp; (c = s.charAt(i)) &gt;= <span class="hljs-number">48</span> &amp;&amp; (c = s.charAt(i)) &lt;= <span class="hljs-number">57</span>) &#123;<br>          str += c;<br>          i++;<br>        &#125;<br>        ls.add(str);<br>      &#125;<br>    &#125;<span class="hljs-keyword">while</span> (i &lt; s.length());<br>    <span class="hljs-keyword">return</span> ls;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通过字符换转化为数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> suffixExpression 后缀表达式</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 存放字符元素的数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">getListByString</span><span class="hljs-params">(String suffixExpression)</span> </span>&#123;<br><br>    <span class="hljs-comment">/* 分割后缀表达式 */</span><br>    String[] strings = suffixExpression.split(<span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(strings));<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 逆波兰表达式计算</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> list 存放逆波兰表达式的数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 计算结果</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br><br>    Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br><br>    <span class="hljs-comment">/* 遍历 list */</span><br>    <span class="hljs-keyword">for</span> (String item: list) &#123;<br><br>      <span class="hljs-comment">/* 正则表达式匹配多位数 */</span><br>      <span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123;<br>        stack.push(item);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/* 弹出两个数，并运算，再入栈 */</span><br>        <span class="hljs-keyword">int</span> num2 = Integer.parseInt(stack.pop());<br>        <span class="hljs-keyword">int</span> num1 = Integer.parseInt(stack.pop());<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;+&quot;</span>.equals(item)) &#123;<br>          res = num1 + num2;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;-&quot;</span>.equals(item)) &#123;<br>          res = num1 - num2;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;*&quot;</span>.equals(item)) &#123;<br>          res = num1 * num2;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/&quot;</span>.equals(item)) &#123;<br>          res = num1 / num2;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;运算符有误&quot;</span>);<br>        &#125;<br>        stack.push(<span class="hljs-string">&quot;&quot;</span> + res);<br>      &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* 最终结果留在栈中 */</span><br>    <span class="hljs-keyword">return</span> Integer.parseInt(stack.pop());<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 运算符优先级</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ADD = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> SUB = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> MUL = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> DIV = <span class="hljs-number">2</span>;<br><br>  <span class="hljs-comment">// 返回运算符对应的优先级</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">(String operation)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">switch</span> (operation) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>        result = ADD;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>        result = SUB;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>        result = MUL;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>        result = DIV;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;不存在该运算符&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="zap-结果-4"><a href="#zap-结果-4" class="headerlink" title=":zap:结果"></a>:zap:结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">不存在该运算符<br>不存在该运算符<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, +, <span class="hljs-number">4</span>, *, +, <span class="hljs-number">5</span>, -]<br><span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h3 id="game-die-逆波兰计算器完整版"><a href="#game-die-逆波兰计算器完整版" class="headerlink" title=":game_die:逆波兰计算器完整版"></a>:game_die:逆波兰计算器完整版</h3><h4 id="zap-功能"><a href="#zap-功能" class="headerlink" title=":zap:功能"></a>:zap:功能</h4><p>完整版的逆波兰计算器，功能包括：</p><p>​    :one: 支持 + - * / ( )</p><p>​    :two: 支持多位数、小数</p><p>​    :three: 兼容处理，过滤任何空白字符，包括空格、制表符、换页符</p><h4 id="zap-代码-5"><a href="#zap-代码-5" class="headerlink" title=":zap:代码"></a>:zap:代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aatrox</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 逆波兰计算器完整版</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-02-07 18:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReversePolishMultiCalc</span> </span>&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 匹配 + - * / ( ) 运算符</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SYMBOL = <span class="hljs-string">&quot;\\+|-|\\*|/|\\(|\\)&quot;</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LEFT = <span class="hljs-string">&quot;(&quot;</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String RIGHT = <span class="hljs-string">&quot;)&quot;</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ADD = <span class="hljs-string">&quot;+&quot;</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MINUS = <span class="hljs-string">&quot;-&quot;</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TIMES = <span class="hljs-string">&quot;*&quot;</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIVISION = <span class="hljs-string">&quot;/&quot;</span>;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 加減 + -</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LEVEL_01 = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 乘除 * /</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LEVEL_02 = <span class="hljs-number">2</span>;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 括号</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LEVEL_HIGH = Integer.MAX_VALUE;<br>  <span class="hljs-keyword">static</span> Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>  <span class="hljs-keyword">static</span> List&lt;String&gt; data = Collections.synchronizedList(<span class="hljs-keyword">new</span> ArrayList&lt;String&gt;());<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 去除所有空白符</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">replaceAllBlank</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-comment">// \\s+ 匹配任何空白字符，包括空格、制表符、换页符等等, 等价于[ \f\n\r\t\v]</span><br>    <span class="hljs-keyword">return</span> s.replaceAll(<span class="hljs-string">&quot;\\s+&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断是不是数字 int double long float</span><br><span class="hljs-comment">   * 尚硅谷 Java 数据结构和算法</span><br><span class="hljs-comment">   * 更多 Java –大数据 –前端 –python 人工智能 -区块链资料下载，可访问百度：尚硅谷官网</span><br><span class="hljs-comment">   * 第 94页</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isNumber</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    Pattern pattern = Pattern.compile(<span class="hljs-string">&quot;^[-\\+]?[.\\d]*$&quot;</span>);<br>    <span class="hljs-keyword">return</span> pattern.matcher(s).matches();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断是不是运算符</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSymbol</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> s.matches(SYMBOL);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 匹配运算等级</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calcLevel</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;+&quot;</span>.equals(s) || <span class="hljs-string">&quot;-&quot;</span>.equals(s)) &#123;<br>      <span class="hljs-keyword">return</span> LEVEL_01;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;*&quot;</span>.equals(s) || <span class="hljs-string">&quot;/&quot;</span>.equals(s)) &#123;<br>      <span class="hljs-keyword">return</span> LEVEL_02;<br>    &#125;<br>    <span class="hljs-keyword">return</span> LEVEL_HIGH;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 匹配</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">doMatch</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(s.trim())) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;data is empty&quot;</span>);&#125;<br>    <span class="hljs-keyword">if</span> (!isNumber(s.charAt(<span class="hljs-number">0</span>) + <span class="hljs-string">&quot;&quot;</span>)) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;data illeagle,start not with a number&quot;</span>);&#125;<br>    s = replaceAllBlank(s);<br>    String each;<br>    <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>      <span class="hljs-keyword">if</span> (isSymbol(s.charAt(i) + <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        each = s.charAt(i) + <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//栈为空，(操作符，或者 操作符优先级大于栈顶优先级 &amp;&amp; 操作符优先级不是( )的优先级 及是 ) 不能直接入栈</span><br>        <span class="hljs-keyword">if</span> (stack.isEmpty() || LEFT.equals(each)<br>                || ((calcLevel(each) &gt; calcLevel(stack.peek())) &amp;&amp; calcLevel(each) &lt; LEVEL_HIGH)) &#123;<br>          stack.push(each);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek())) &#123;<br>          <span class="hljs-comment">//栈非空，操作符优先级小于等于栈顶优先级时出栈入列，直到栈为空，或者遇到了(，最后操作符入栈</span><br>          <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek())) &#123;<br>            <span class="hljs-keyword">if</span> (calcLevel(stack.peek()) == LEVEL_HIGH) &#123;<br>              <span class="hljs-keyword">break</span>;<br>            &#125;<br>            data.add(stack.pop());<br>          &#125;<br>          stack.push(each);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (RIGHT.equals(each)) &#123;<br><span class="hljs-comment">// ) 操作符，依次出栈入列直到空栈或者遇到了第一个)操作符，此时)出栈</span><br>          <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; LEVEL_HIGH &gt;= calcLevel(stack.peek())) &#123;<br>            <span class="hljs-keyword">if</span> (LEVEL_HIGH == calcLevel(stack.peek())) &#123;<br>              stack.pop();<br>              <span class="hljs-keyword">break</span>;<br>            &#125;<br>            data.add(stack.pop());<br>          &#125;<br>        &#125;<br>        start = i; <span class="hljs-comment">//前一个运算符的位置</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == s.length() - <span class="hljs-number">1</span> || isSymbol(s.charAt(i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        each = start == <span class="hljs-number">0</span> ? s.substring(start, i + <span class="hljs-number">1</span>) : s.substring(start + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (isNumber(each)) &#123;<br>          data.add(each);<br>          <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;data not match number&quot;</span>);<br>      &#125;<br>    &#125;<br><span class="hljs-comment">//如果栈里还有元素，此时元素需要依次出栈入列，可以想象栈里剩下栈顶为/，栈底为+，应该依次出栈入列，可以直接翻转整个 stack 添加到队列</span><br>    Collections.reverse(stack);<br>    data.addAll(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;(stack));<br>    System.out.println(data);<br>    <span class="hljs-keyword">return</span> data;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 算出结果</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Double <span class="hljs-title">doCalc</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>    Double d = <span class="hljs-number">0d</span>;<br>    <span class="hljs-keyword">if</span> (list == <span class="hljs-keyword">null</span> || list.isEmpty()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">1</span>) &#123;<br>      System.out.println(list);<br>      d = Double.valueOf(list.get(<span class="hljs-number">0</span>));<br>      <span class="hljs-keyword">return</span> d;<br>    &#125;<br>    ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>      list1.add(list.get(i));<br>      <span class="hljs-keyword">if</span> (isSymbol(list.get(i))) &#123;<br>        Double d1 = doTheMath(list.get(i - <span class="hljs-number">2</span>), list.get(i - <span class="hljs-number">1</span>), list.get(i));<br>        list1.remove(i);<br>        list1.remove(i - <span class="hljs-number">1</span>);<br>        list1.set(i - <span class="hljs-number">2</span>, d1 + <span class="hljs-string">&quot;&quot;</span>);<br>        list1.addAll(list.subList(i + <span class="hljs-number">1</span>, list.size()));<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    doCalc(list1);<br>    <span class="hljs-keyword">return</span> d;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 运算</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> s1</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> s2</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> symbol</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Double <span class="hljs-title">doTheMath</span><span class="hljs-params">(String s1, String s2, String symbol)</span> </span>&#123;<br>    Double result;<br>    <span class="hljs-keyword">switch</span> (symbol) &#123;<br>      <span class="hljs-keyword">case</span> ADD:<br>        result = Double.valueOf(s1) + Double.valueOf(s2);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> MINUS:<br>        result = Double.valueOf(s1) - Double.valueOf(s2);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> TIMES:<br>        result = Double.valueOf(s1) * Double.valueOf(s2);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> DIVISION:<br>        result = Double.valueOf(s1) / Double.valueOf(s2);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        result = <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">//String math = &quot;9+(3-1)*3+10/2&quot;;</span><br>    String math = <span class="hljs-string">&quot;12.8 + (2 - 3.55)*4+10/5.0&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      doCalc(doMatch(math));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="zap-结果-5"><a href="#zap-结果-5" class="headerlink" title=":zap:结果"></a>:zap:结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">12.8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3.55</span>, -, <span class="hljs-number">4</span>, *, +, <span class="hljs-number">10</span>, <span class="hljs-number">5.0</span>, /, +]<br>[<span class="hljs-number">8.600000000000001</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021.01.29-2021.02.04心态复盘</title>
    <link href="/posts/2021/02/04/2021-01-29-2021-02-04%E5%BF%83%E6%80%81%E5%A4%8D%E7%9B%98/"/>
    <url>/posts/2021/02/04/2021-01-29-2021-02-04%E5%BF%83%E6%80%81%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h3 id="这段时间我做了什么？"><a href="#这段时间我做了什么？" class="headerlink" title="这段时间我做了什么？"></a>这段时间我做了什么？</h3><p>这几天，我一直在玩英雄联盟，好像回到了去年那段上瘾的日子。今天是2月4日，我想不能这样下去了，就是有再大的瘾也得慢慢消去。本来只是打打大乱斗，技能乱飞、群魔乱舞，这种战斗模式是我喜欢的。后来，我还没有打定位赛，于是做了让我现在极其后悔的一个决策：打定位赛。这10把定位赛我赢了8把，段位定到了黄金2，其中我操刀剑魔拿下全胜战绩。这时候，我能感觉到我脑子里到处都是兴奋的多巴胺，这种渴望得到认可，喜欢对线细节的心理又在作祟。我控制不住，一口气接连几天都在打排位，晚上就玩大乱斗。我感觉自己的羞愧心理在慢慢减退，我的潜意识在侵蚀自己说，快过年了，每天玩玩游戏又能怎么样？我的父母也察觉出来我的学习劲头在减退，督促我每天要坚持学习，可是我听到这些话，自尊心仿佛被戳破，我是不喜欢别人强迫我的，这种命令要求我的感觉让我非常不爽。就算本来我想要学习，但是这事我可以做，别人不能说，你说出来我就觉得你是在命令我，那我偏偏不随别人的意，可能这就是我这些年来活的这么局促的一大原因：偏执。</p><h3 id="为什么我会上瘾呢？"><a href="#为什么我会上瘾呢？" class="headerlink" title="为什么我会上瘾呢？"></a>为什么我会上瘾呢？</h3><p>我从2014年开始玩LOL这个游戏，也恬着脸称得上一个老玩家了。以现在20岁的我的角度来看，造成这个瘾是由多种因素造成的，一方面是这个游戏本身迷人的趣味性和竞技性，另一方面就是自己的心理问题，还有一份原因应该是环境因素。</p><p>客观来说，英雄联盟是我从小到大玩过的时间最长、精力投入最多，也是我最喜欢的一款游戏。对于我这种豹子头（零充），它是非常友好的，而且领头人Faker也是不用皮肤的，这对我来说有很大的优越感，这个游戏并不是充钱和实力画等号的。其次，排位的紧张刺激，大乱斗有来有回的团战，近两年云顶之弈的养老模式，还有每年轮换的娱乐模式，这些面上我都有很多记忆。游戏本身就是足够成功的。</p><p>其二，是我的性格原因，我的心理上对英雄联盟产生了很大的依赖。我回想一下，当我有重要的事情要处理，或者有十万火急的作业还没完成，这段时间我是对LOL不感兴趣的。我认为很可能是因为自己没有居安思危，对自己的前途不能认真洞悉和思考。而且，还有一部分心里是渴望得到别人对自己实力的赞同和认可，从根本上来说我暂且认为是社交需要，回首看自己空空如也的朋友圈和空间，是不是自己太过自作清高了，不够平易近人呢？</p><p>最后，我认为影响力最小的才是环境因素。我身边打英雄联盟这个游戏的资深玩家也非常多，对我多多少少造成了些潜移默化的影响。当然，这也不是坏事，这种环境也给我带来过特别多欢乐时光，只是说对现在的我是有些负面影响的。我一直认为个人改变不了环境，就让自己学会适应。但我觉得这阶段我应该学会逃离和视而不见，眼不见为净可能是对的吧。</p><h3 id="接下来怎么避免这种瘾？"><a href="#接下来怎么避免这种瘾？" class="headerlink" title="接下来怎么避免这种瘾？"></a>接下来怎么避免这种瘾？</h3><p>1. </p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构：链表</title>
    <link href="/posts/2021/01/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%93%BE%E8%A1%A8/"/>
    <url>/posts/2021/01/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h3 id="链表介绍"><a href="#链表介绍" class="headerlink" title="链表介绍"></a>链表介绍</h3><p>单链表是有序的列表，但是它在内存中的存储是这样的：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/1.png.jpg" alt="链表存储结构" style="zoom:80%;"><p>它的特点如下：</p><ul><li><p>链表是以节点的方式来存储的，为链式存储。</p></li><li><p>链表的每个节点包含<code>data</code>域，<code>next</code>域，指向下一个节点。</p></li><li><p>链表的各个节点不一定是连续存储。</p></li><li><p>链表分带头结点的链表和没有头结点的链表，根据实际的需求来确定。</p></li><li><p>单链表（带头结点）逻辑结构示意图如下</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/2.jpg" alt="带头结点链表" style="zoom:80%;"></li></ul><h3 id="单链表的应用实例"><a href="#单链表的应用实例" class="headerlink" title="单链表的应用实例"></a>单链表的应用实例</h3><p>使用带头结点的单向链表实现——水浒英雄排行榜管理完成对英雄人物的增删改查操作。</p><blockquote><p>第一种方法：添加英雄时，不考虑座次，直接添加到链表尾部</p></blockquote><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/3.jpg" alt="第一种方法" style="zoom:80%;"><blockquote><p>第二种方式在添加英雄时，根据排名将英雄插入到指定位置(如果有这个排名，则添加失败，并给出提示。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/4.jpg" alt="第二种方法" style="zoom:80%;"><blockquote><p>修改节点功能</p></blockquote><p>先找到该节点，通过遍历，(2) temp.name = newHeroNode.name ; temp.nickname= newHeroNode.nickname。</p><blockquote><p>删除节点</p></blockquote><p>​    <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/5.jpg" alt="删除节点思路" style="zoom:80%;"></p><h3 id="单链表应用代码实现"><a href="#单链表应用代码实现" class="headerlink" title="单链表应用代码实现"></a>单链表应用代码实现</h3><ol><li><p>首先我们<strong>定义梁山好汉节点</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 水浒好汉节点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span> </span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no; <span class="hljs-comment">// 座次</span><br>  <span class="hljs-keyword">public</span> String name; <span class="hljs-comment">// 名字</span><br>  <span class="hljs-keyword">public</span> String nickname; <span class="hljs-comment">// 绰号</span><br>  <span class="hljs-keyword">public</span> HeroNode nextHero; <span class="hljs-comment">// 指向下一个好汉节点</span><br><br>  <span class="hljs-comment">// 构造器</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hNo, String hName, String hNickName)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.no = hNo;<br>    <span class="hljs-keyword">this</span>.name = hName;<br>    <span class="hljs-keyword">this</span>.nickname = hNickName;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *  打印好汉信息</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;座次:&quot;</span> + no +<br>            <span class="hljs-string">&quot;, 姓名：&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, 绰号：&#x27;&quot;</span> + nickname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>然后<strong>定义单链表操作</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单链表管理水浒好汉</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span> </span>&#123;<br><br>  <span class="hljs-comment">// 头结点</span><br>  <span class="hljs-keyword">private</span>  HeroNode headNode = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 打印链表</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLinkList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 判空</span><br>    <span class="hljs-keyword">if</span> (isLinkListEmpty()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 辅助变量temp遍历单链表</span><br>    HeroNode temp = headNode.nextHero;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>      System.out.println(temp.toString());<br>      temp = temp.nextHero;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 单链表空</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLinkListEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> headNode.nextHero == <span class="hljs-keyword">null</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>编写第一种思路：直接添加好汉到尾部方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加节点到单链表(不考虑座次)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addIgnoreNo</span><span class="hljs-params">(HeroNode heroNode)</span> </span>&#123;<br>    <span class="hljs-comment">// 辅助变量temp遍历单链表</span><br>    HeroNode temp = headNode;<br>    <span class="hljs-comment">// 到达单链表尾部</span><br>    <span class="hljs-keyword">while</span> (temp.nextHero != <span class="hljs-keyword">null</span>) &#123;<br>        temp = temp.nextHero;<br>    &#125;<br>    temp.nextHero = heroNode;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写<strong>测试类进行测试</strong>，好汉按照乱序插入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单链表应用测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedListTest</span> </span>&#123;<br><br>  <span class="hljs-comment">// 测试好汉直接插入单链表尾部</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    <span class="hljs-comment">// 引入链表</span><br>    SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList.addIgnoreNo(hero1);<br>    singleLinkedList.addIgnoreNo(hero2);<br>    singleLinkedList.addIgnoreNo(hero3);<br>    singleLinkedList.addIgnoreNo(hero4);<br><br>    <span class="hljs-comment">// 打印单链表</span><br>    singleLinkedList.printLinkList();<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：链表英雄排序按照添加顺序，并不是按照座次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>下面实现<strong>单链表插入好汉节点将按照座次来排序</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加节点到链表（按照座次）</span><br><span class="hljs-comment">   */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByNo</span><span class="hljs-params">(HeroNode heroNode)</span> </span>&#123;<br>    <span class="hljs-comment">// 辅助变量temp遍历单链</span><br>    HeroNode temp = headNode;<br>    <span class="hljs-comment">// 标志好汉是否已存在</span><br>    <span class="hljs-keyword">boolean</span> isExist = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (temp.nextHero == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.nextHero.no &gt; heroNode.no) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.nextHero.no == heroNode.no) &#123; <span class="hljs-comment">// 有重复好汉</span><br>            isExist = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.nextHero;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isExist) &#123;<br>        System.out.println(<span class="hljs-string">&quot;第&quot;</span>+ heroNode.no + <span class="hljs-string">&quot;座次好汉已存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 插入英雄节点</span><br>    heroNode.nextHero = temp.nextHero;<br>    temp.nextHero = heroNode;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>编写测试方法测试按座次插入好汉到单链表</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试按座次插入好汉到单链表</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    <span class="hljs-comment">// 引入链表</span><br>    SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList.addByNo(hero1);<br>    singleLinkedList.addByNo(hero2);<br>    singleLinkedList.addByNo(hero3);<br>    singleLinkedList.addByNo(hero4);<br><br>    <span class="hljs-comment">// 打印单链表</span><br>    singleLinkedList.printLinkList();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>完善单链表节点修改操作</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据座次修改好汉信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span> <span class="hljs-params">(HeroNode newHeroNode)</span></span>&#123;<br>    <span class="hljs-comment">// 判空</span><br>    <span class="hljs-keyword">if</span> (headNode.nextHero == <span class="hljs-keyword">null</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;链表空，修改失败&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 找到需要修改的好汉节点</span><br>    <span class="hljs-keyword">boolean</span> isFound = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 是否找到标志</span><br>    HeroNode temp = headNode.nextHero;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (temp.no == newHeroNode.no) &#123;<br>            isFound = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.nextHero;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isFound) &#123;<br>        temp.name = newHeroNode.name;<br>        temp.nickname = newHeroNode.nickname;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;很遗憾，没有找到&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试修改好汉信息</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    <span class="hljs-comment">// 引入链表</span><br>    SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList.addByNo(hero1);<br>    singleLinkedList.addByNo(hero2);<br>    singleLinkedList.addByNo(hero3);<br>    singleLinkedList.addByNo(hero4);<br><br>    <span class="hljs-comment">// 打印单链表</span><br>    System.out.println(<span class="hljs-string">&quot;修改前-------------------&quot;</span>);<br>    singleLinkedList.printLinkList();<br><br>    HeroNode newHeroNode = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;雷欧&quot;</span>, <span class="hljs-string">&quot;大狮子&quot;</span>);<br>    singleLinkedList.update(newHeroNode);<br>    System.out.println(<span class="hljs-string">&quot;修改后--------------------&quot;</span>);<br>    singleLinkedList.printLinkList();<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">修改前-------------------<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br>修改后--------------------<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;雷欧&#x27;</span>, 绰号：<span class="hljs-string">&#x27;大狮子&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>完善单链表节点的删除操作</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除好汉节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sNo)</span> </span>&#123;<br>    HeroNode temp = headNode;<br>    <span class="hljs-comment">// 标志是否找到待删除节点</span><br>    <span class="hljs-keyword">boolean</span> isFound = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">while</span> (temp.nextHero != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (temp.nextHero.no == sNo) &#123;<br>            <span class="hljs-comment">// 找到了待删除节点前一个节点</span><br>            isFound = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.nextHero;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isFound) &#123;<br>        <span class="hljs-comment">// 删除节点</span><br>        temp.nextHero = temp.nextHero.nextHero;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;座次为&quot;</span>+ sNo +<span class="hljs-string">&quot;的好汉不存在&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试删除好汉</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    <span class="hljs-comment">// 引入链表</span><br>    SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList.addByNo(hero1);<br>    singleLinkedList.addByNo(hero2);<br>    singleLinkedList.addByNo(hero3);<br>    singleLinkedList.addByNo(hero4);<br><br>    <span class="hljs-comment">// 打印单链表</span><br>    System.out.println(<span class="hljs-string">&quot;删除前-------------------&quot;</span>);<br>    singleLinkedList.printLinkList();<br><br>    singleLinkedList.delete(<span class="hljs-number">3</span>);<br>    System.out.println(<span class="hljs-string">&quot;删除后-------------------&quot;</span>);<br>    singleLinkedList.printLinkList();<br>&#125;<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">删除前-------------------<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br>删除后-------------------<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="单链表常见题目"><a href="#单链表常见题目" class="headerlink" title="单链表常见题目"></a>单链表常见题目</h3><p>我们继续用上面定义的数据结构来写。</p><h4 id="求单链表有效节点个数"><a href="#求单链表有效节点个数" class="headerlink" title="求单链表有效节点个数"></a>求单链表有效节点个数</h4><p><strong>题意：传入一个单链表头结点，返回有效节点个数。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取单链表有效节点个数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">(HeroNode headNode)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (headNode.nextHero == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>    HeroNode cur = headNode.nextHero;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        length++;<br>        cur = cur.nextHero;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获取单链表头结点</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getHeadNode</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> headNode;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试获取单链表长度</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    <span class="hljs-comment">// 引入链表</span><br>    SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList.addByNo(hero1);<br>    singleLinkedList.addByNo(hero2);<br>    singleLinkedList.addByNo(hero3);<br>    singleLinkedList.addByNo(hero4);<br><br>    <span class="hljs-comment">// 获取长度</span><br>    <span class="hljs-keyword">int</span> length = SingleLinkedList.length(singleLinkedList.getHeadNode());<br>    System.out.println(<span class="hljs-string">&quot;单链表长度为&quot;</span> + length);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">单链表长度为<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="查找单链表倒数第k个节点"><a href="#查找单链表倒数第k个节点" class="headerlink" title="查找单链表倒数第k个节点"></a>查找单链表倒数第k个节点</h4><p><strong>思路：</strong></p><ol><li>编写方法，接受head节点，同时接收一个index</li><li>index 表示倒数第index个节点</li><li>先把链表从头到尾遍历，得到链表长度 length</li><li>得到 length 后，从链表第一个开始向后遍历(size - index)个节点，就可以得到</li><li>如果找到了，返回该节点，否则返回null</li></ol><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获取单链表倒数第index个节点</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeroNode <span class="hljs-title">findLastIndexNode</span><span class="hljs-params">(HeroNode headNode, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (headNode.nextHero == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> length = length(headNode);<br>    <span class="hljs-keyword">if</span> (index &lt;= <span class="hljs-number">0</span> || index &gt; length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 从第一个节点，向后遍历 length-index个节点</span><br>    HeroNode cur = headNode.nextHero;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length - index; i++) &#123;<br>        cur = cur.nextHero;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cur;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取单链表有效节点个数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">(HeroNode headNode)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (headNode.nextHero == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>    HeroNode cur = headNode.nextHero;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        length++;<br>        cur = cur.nextHero;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获取单链表头结点</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getHeadNode</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> headNode;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试获取单链表倒数第3个节点</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    <span class="hljs-comment">// 引入链表</span><br>    SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList.addByNo(hero1);<br>    singleLinkedList.addByNo(hero2);<br>    singleLinkedList.addByNo(hero3);<br>    singleLinkedList.addByNo(hero4);<br><br>    <span class="hljs-comment">// 打印单链表</span><br>    System.out.println(<span class="hljs-string">&quot;单链表内容：&quot;</span>);<br>    singleLinkedList.printLinkList();<br><br>    HeroNode lastIndexNode = singleLinkedList.findLastIndexNode(singleLinkedList.getHeadNode(), <span class="hljs-number">3</span>);<br>    System.out.println(<span class="hljs-string">&quot;结果为：&quot;</span> + lastIndexNode);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">单链表内容：<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br>结果为：HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="单链表的反转"><a href="#单链表的反转" class="headerlink" title="单链表的反转"></a>单链表的反转</h4><p><strong>思路</strong>：</p><ol><li>先定义一个节点 <code>reverseHead = new HeroNode</code> </li><li>从头到尾遍历原来的单链表，每遍历一个节点，将其取出，使用头插法放在新链表的最前端</li><li>原来的链表的<code>head.next = reverseHead.next </code> </li></ol><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 逆转单链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(HeroNode headNode)</span> </span>&#123;<br>    <span class="hljs-comment">// 判 [空 | 仅一个元素]</span><br>    <span class="hljs-keyword">if</span> (headNode.nextHero == <span class="hljs-keyword">null</span> || headNode.nextHero.nextHero == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 当前节点</span><br>    HeroNode cur = headNode.nextHero;<br>    <span class="hljs-comment">// 指向当前节点的下一个节点</span><br>    HeroNode next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">// 逆转链表头结点</span><br>    HeroNode reverseHead = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        next = cur.nextHero;<br>        cur.nextHero = reverseHead.nextHero;<br>        reverseHead.nextHero = cur;<br>        cur = next;<br>    &#125;<br>    headNode.nextHero = reverseHead.nextHero;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试逆转单链表</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    <span class="hljs-comment">// 引入链表</span><br>    SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList.addByNo(hero1);<br>    singleLinkedList.addByNo(hero2);<br>    singleLinkedList.addByNo(hero3);<br>    singleLinkedList.addByNo(hero4);<br><br>    <span class="hljs-comment">// 打印单链表</span><br>    System.out.println(<span class="hljs-string">&quot;逆转前单链表内容：&quot;</span>);<br>    singleLinkedList.printLinkList();<br><br>    <span class="hljs-comment">// 逆转单链表</span><br>    System.out.println(<span class="hljs-string">&quot;逆转后单链表内容：&quot;</span>);<br>    reverseList(singleLinkedList.getHeadNode());<br>    singleLinkedList.printLinkList();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">逆转前单链表内容：<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br>逆转后单链表内容：<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="从尾到头打印单链表"><a href="#从尾到头打印单链表" class="headerlink" title="从尾到头打印单链表"></a>从尾到头打印单链表</h4><p><strong>思路</strong>：</p><ol><li>方式1：先将单链表进行反转操作，然后再遍历，但是破坏了单链表的结构。</li><li>方式2：可以利用栈这个数据结构，将各节点压入栈中，然后利用栈的先进后出特点，实现逆序打印。</li></ol><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 倒序输出链表元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reversePrint</span><span class="hljs-params">(HeroNode headNode)</span> </span>&#123;<br>    <span class="hljs-comment">//判空</span><br>    <span class="hljs-keyword">if</span> (headNode.nextHero == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 创建栈，将各节点压栈</span><br>    Stack&lt;HeroNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    HeroNode cur = headNode.nextHero;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        stack.push(cur);<br>        cur = cur.nextHero;<br>    &#125;<br>    <span class="hljs-comment">// 栈中节点依次出栈</span><br>    <span class="hljs-keyword">while</span> (!stack.empty()) &#123;<br>        System.out.println(stack.pop());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试逆序打印单链表</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList.addByNo(hero1);<br>    singleLinkedList.addByNo(hero2);<br>    singleLinkedList.addByNo(hero3);<br>    singleLinkedList.addByNo(hero4);<br><br>    <span class="hljs-comment">// 打印单链表</span><br>    System.out.println(<span class="hljs-string">&quot;原来单链表内容：&quot;</span>);<br>    singleLinkedList.printLinkList();<br><br>    <span class="hljs-comment">// 逆序打印单链表</span><br>    System.out.println(<span class="hljs-string">&quot;逆序打印单链表内容：&quot;</span>);<br>    reversePrint(singleLinkedList.getHeadNode());<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">原来单链表内容：<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br>逆序打印单链表内容：<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h4><p><strong>思路</strong>：</p><ul><li><p>curA指向第一个链表当前节点，curB指向第二个链表当前节点，curC指向要合并的链表当前节点。</p></li><li><p>遍历第一个链表和第二个链表，如果<code>curA.no &lt;= curB.no</code>就令<code>curC.nextHero = curA; curC = curA; curA = curA.nextHero;</code>，否则相反。</p></li><li><p>最后一定会有一个链表先遍历完，判断curA或curB是否为空确定哪个链表还有节点未合并，直接将这些节点插入到curC的后面即可。</p></li></ul><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 合并两个有序链表为一个有序链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleLinkedList <span class="hljs-title">mergeList</span><span class="hljs-params">(HeroNode laHead, HeroNode lbHead)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (laHead.nextHero == <span class="hljs-keyword">null</span> || lbHead.nextHero == <span class="hljs-keyword">null</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;请传入非空链表&quot;</span>);<br>    &#125;<br>    HeroNode curA = laHead.nextHero;<br>    HeroNode curB = lbHead.nextHero;<br><br>    SingleLinkedList lcList = <span class="hljs-keyword">new</span> SingleLinkedList();<br>    HeroNode curC = lcList.headNode;<br>    <span class="hljs-keyword">while</span> (curA != <span class="hljs-keyword">null</span> &amp;&amp; curB != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (curA.no &lt;= curB.no) &#123;<br>            curC.nextHero = curA;<br>            curC = curA;<br>            curA = curA.nextHero;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curC.nextHero = curB;<br>            curC = curB;<br>            curB = curB.nextHero;<br>        &#125;<br>        <span class="hljs-comment">// 插入剩余链表段</span><br>        curC.nextHero = (curA != <span class="hljs-keyword">null</span> ? curA : curB);<br>    &#125;<br>    <span class="hljs-keyword">return</span> lcList;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试合并有序链表</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test9</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;大娃&quot;</span>, <span class="hljs-string">&quot;大力士&quot;</span>);<br>    HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;三娃&quot;</span>, <span class="hljs-string">&quot;金刚不坏&quot;</span>);<br>    HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;五娃&quot;</span>, <span class="hljs-string">&quot;水源&quot;</span>);<br>    HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;七娃&quot;</span>, <span class="hljs-string">&quot;宝葫芦&quot;</span>);<br><br>    SingleLinkedList singleLinkedList1 = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList1.addByNo(hero1);<br>    singleLinkedList1.addByNo(hero2);<br>    singleLinkedList1.addByNo(hero3);<br>    singleLinkedList1.addByNo(hero4);<br>    <span class="hljs-comment">// 打印链表1</span><br>    System.out.println(<span class="hljs-string">&quot;链表1内容为：&quot;</span>);<br>    singleLinkedList1.printLinkList();<br><br>    <span class="hljs-comment">// 创建节点</span><br>    HeroNode hero5 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;二娃&quot;</span>, <span class="hljs-string">&quot;千里眼顺风耳&quot;</span>);<br>    HeroNode hero6 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;四娃&quot;</span>, <span class="hljs-string">&quot;喷火霹雳&quot;</span>);<br>    HeroNode hero7 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;六娃&quot;</span>, <span class="hljs-string">&quot;隐身虚化&quot;</span>);<br><br>    SingleLinkedList singleLinkedList2 = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到单链表</span><br>    singleLinkedList2.addByNo(hero5);<br>    singleLinkedList2.addByNo(hero6);<br>    singleLinkedList2.addByNo(hero7);<br>    <span class="hljs-comment">// 打印链表2</span><br>    System.out.println(<span class="hljs-string">&quot;链表2内容为：&quot;</span>);<br>    singleLinkedList2.printLinkList();<br><br>    SingleLinkedList singleLinkedList3 = mergeList(singleLinkedList1.getHeadNode(), singleLinkedList2.getHeadNode());<br><br>    <span class="hljs-comment">// 输出合并链表</span><br>    System.out.println(<span class="hljs-string">&quot;合并后链表内容为：&quot;</span>);<br>    singleLinkedList3.printLinkList();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">链表<span class="hljs-number">1</span>内容为：<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;大娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;大力士&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;三娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;金刚不坏&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">5</span>, 姓名：<span class="hljs-string">&#x27;五娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;水源&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">7</span>, 姓名：<span class="hljs-string">&#x27;七娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;宝葫芦&#x27;</span>&#125;<br>链表<span class="hljs-number">2</span>内容为：<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;二娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;千里眼顺风耳&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;四娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;喷火霹雳&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">6</span>, 姓名：<span class="hljs-string">&#x27;六娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;隐身虚化&#x27;</span>&#125;<br>合并后链表内容为：<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;大娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;大力士&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;二娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;千里眼顺风耳&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;三娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;金刚不坏&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;四娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;喷火霹雳&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">5</span>, 姓名：<span class="hljs-string">&#x27;五娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;水源&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">6</span>, 姓名：<span class="hljs-string">&#x27;六娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;隐身虚化&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">7</span>, 姓名：<span class="hljs-string">&#x27;七娃&#x27;</span>, 绰号：<span class="hljs-string">&#x27;宝葫芦&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h3 id="双向链表介绍"><a href="#双向链表介绍" class="headerlink" title="双向链表介绍"></a>双向链表介绍</h3><p>双向链表也叫双链表，是链表的一种，它的每个数据<a href="https://baike.baidu.com/item/%E7%BB%93%E7%82%B9/9794643">结点</a>中都有两个<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304">指针</a>，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向<a href="https://baike.baidu.com/item/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/3228465">循环链表</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%93%BE%E8%A1%A8/6.jpg" alt="双向链表"></p><h3 id="双向链表的应用实例"><a href="#双向链表的应用实例" class="headerlink" title="双向链表的应用实例"></a>双向链表的应用实例</h3><p>使用带head 头的双向链表实现–水浒英雄排行榜</p><p>管理单向链表的缺点分析:：</p><ul><li>单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。</li><li>单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面我们单链表删除时节点，总是找到temp,temp 是待删除节点的前一个节点。</li><li>分析双向链表如何完成遍历，添加，修改和删除的思路</li></ul><p>分析实现思路：</p><ul><li><strong>遍历</strong>：和单链表一样，只是可以向前，也可以向后查找</li><li><strong>修改</strong>：和原来单链表一样</li><li><strong>删除</strong><code>temp.prior.nextHero = temp.nextHero; temp.nextHero.prior = temp.prior</code></li><li><strong>添加</strong>：找到双向链表最后的节点。<code>temp.nextHero = newHero; newHero.prior = temp</code></li></ul><h3 id="双向链表应用代码实现"><a href="#双向链表应用代码实现" class="headerlink" title="双向链表应用代码实现"></a>双向链表应用代码实现</h3><h4 id="双向链表节点类"><a href="#双向链表节点类" class="headerlink" title="双向链表节点类"></a>双向链表节点类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 双向链表节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleHeroNode</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no; <span class="hljs-comment">// 座次</span><br>    <span class="hljs-keyword">public</span> String name; <span class="hljs-comment">// 名字</span><br>    <span class="hljs-keyword">public</span> String nickname; <span class="hljs-comment">// 绰号</span><br>    <span class="hljs-keyword">public</span> DoubleHeroNode nextHero; <span class="hljs-comment">// 指向下一个好汉节点</span><br>    <span class="hljs-keyword">public</span> DoubleHeroNode preHero; <span class="hljs-comment">// 指向上一个好汉节点</span><br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoubleHeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hNo, String hName, String hNickName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.no = hNo;<br>        <span class="hljs-keyword">this</span>.name = hName;<br>        <span class="hljs-keyword">this</span>.nickname = hNickName;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *  打印好汉信息</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;座次:&quot;</span> + no +<br>            <span class="hljs-string">&quot;, 姓名：&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, 绰号：&#x27;&quot;</span> + nickname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双向链表添加节点"><a href="#双向链表添加节点" class="headerlink" title="双向链表添加节点"></a>双向链表添加节点</h4><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加节点到双向链表(不考虑座次)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addIgnoreNo</span><span class="hljs-params">(DoubleHeroNode heroNode)</span> </span>&#123;<br>    <span class="hljs-comment">// 辅助变量temp遍历单链表</span><br>    DoubleHeroNode temp = headNode;<br>    <span class="hljs-comment">// 到达单链表尾部</span><br>    <span class="hljs-keyword">while</span> (temp.nextHero != <span class="hljs-keyword">null</span>) &#123;<br>        temp = temp.nextHero;<br>    &#125;<br>    temp.nextHero = heroNode;<br>    heroNode.preHero = temp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试添加节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建节点</span><br>    DoubleHeroNode hero1 = <span class="hljs-keyword">new</span> DoubleHeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    DoubleHeroNode hero3 = <span class="hljs-keyword">new</span> DoubleHeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    DoubleHeroNode hero2 = <span class="hljs-keyword">new</span> DoubleHeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    DoubleHeroNode hero4 = <span class="hljs-keyword">new</span> DoubleHeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    <span class="hljs-comment">// 引入链表</span><br>    DoubleLinkedList doubleLinkedList = <span class="hljs-keyword">new</span> DoubleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到双向链表</span><br>    doubleLinkedList.addIgnoreNo(hero1);<br>    doubleLinkedList.addIgnoreNo(hero2);<br>    doubleLinkedList.addIgnoreNo(hero3);<br>    doubleLinkedList.addIgnoreNo(hero4);<br><br>    <span class="hljs-comment">// 打印单链表</span><br>    doubleLinkedList.printLinkList();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="双向链表删除节点"><a href="#双向链表删除节点" class="headerlink" title="双向链表删除节点"></a>双向链表删除节点</h4><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除好汉节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sNo)</span> </span>&#123;<br>    <span class="hljs-comment">// 判空</span><br>    <span class="hljs-keyword">if</span> (headNode.nextHero == <span class="hljs-keyword">null</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;链表为空，无法删除&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    DoubleHeroNode temp = headNode.nextHero;<br>    <span class="hljs-comment">// 标志是否找到待删除节点</span><br>    <span class="hljs-keyword">boolean</span> isFound = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (temp.no == sNo) &#123;<br>            <span class="hljs-comment">// 找到了待删除节点</span><br>            isFound = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.nextHero;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isFound) &#123;<br>        <span class="hljs-comment">// 删除节点</span><br>        temp.preHero.nextHero = temp.nextHero;<br>        <span class="hljs-comment">// 如果是最后一个节点，不需要执行下面语句</span><br>        <span class="hljs-keyword">if</span> (temp.nextHero != <span class="hljs-keyword">null</span>) &#123;<br>            temp.nextHero.preHero = temp.preHero;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;座次为&quot;</span>+ sNo +<span class="hljs-string">&quot;的好汉不存在&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试删除节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建节点</span><br>    DoubleHeroNode hero1 = <span class="hljs-keyword">new</span> DoubleHeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>    DoubleHeroNode hero3 = <span class="hljs-keyword">new</span> DoubleHeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>    DoubleHeroNode hero2 = <span class="hljs-keyword">new</span> DoubleHeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>    DoubleHeroNode hero4 = <span class="hljs-keyword">new</span> DoubleHeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br>    <span class="hljs-comment">// 引入链表</span><br>    DoubleLinkedList doubleLinkedList = <span class="hljs-keyword">new</span> DoubleLinkedList();<br><br>    <span class="hljs-comment">// 添加好汉节点到双向链表</span><br>    doubleLinkedList.addIgnoreNo(hero1);<br>    doubleLinkedList.addIgnoreNo(hero2);<br>    doubleLinkedList.addIgnoreNo(hero3);<br>    doubleLinkedList.addIgnoreNo(hero4);<br><br>    System.out.println(<span class="hljs-string">&quot;删除前的链表内容&quot;</span>);<br>    doubleLinkedList.printLinkList();<br><br>    doubleLinkedList.delete(<span class="hljs-number">2</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;删除后的链表内容&quot;</span>);<br>    doubleLinkedList.printLinkList();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">删除前的链表内容<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">2</span>, 姓名：<span class="hljs-string">&#x27;吴用&#x27;</span>, 绰号：<span class="hljs-string">&#x27;智多星&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br>删除后的链表内容<br>HeroNode&#123;座次:<span class="hljs-number">3</span>, 姓名：<span class="hljs-string">&#x27;卢俊义&#x27;</span>, 绰号：<span class="hljs-string">&#x27;玉麒麟&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">1</span>, 姓名：<span class="hljs-string">&#x27;宋江&#x27;</span>, 绰号：<span class="hljs-string">&#x27;及时雨&#x27;</span>&#125;<br>HeroNode&#123;座次:<span class="hljs-number">4</span>, 姓名：<span class="hljs-string">&#x27;林冲&#x27;</span>, 绰号：<span class="hljs-string">&#x27;豹子头&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="单向环形链表"><a href="#单向环形链表" class="headerlink" title="单向环形链表"></a>单向环形链表</h2><h3 id="环形链表介绍"><a href="#环形链表介绍" class="headerlink" title="环形链表介绍"></a>环形链表介绍</h3><p>环形单链表和普通单链表几乎一样，唯一不同的就是普通单链表的最后一个节点的next为空，而我们的环形单链表的最后一个节点的net为头节点，形成一个闭环。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/8.jpg" alt="环形链表" style="zoom:80%;"><p>如上图，第一个节点也就是头结点，第五个节点就是最后一个节点，但是在环形单链表中next会指向第一个节点，而普通单链表中最后一个节点的next是为空。</p><h3 id="约瑟夫问题演示"><a href="#约瑟夫问题演示" class="headerlink" title="约瑟夫问题演示"></a>约瑟夫问题演示</h3><p><strong>题意</strong>：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p><p><strong>演示</strong>：我们假设总共有五个娃，从第二个人开始数，每次数二次，然后最后剩一个人，我们来看看大概是个啥样。</p><p>那么，<code>n = 5; k = 2; m = 2</code></p><ol><li><p>首先刚开始，五个娃：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/9.jpg" alt="第一步" style="zoom:80%;"><p>这就是最开始的样子，first代表链表的头部，end代表链表的尾部。</p></li><li><p>移动到k的位置</p><p>移动到k的位置我们只需要将first和end同时移动k-1次，因为当前first就是在1，如果k为2，那么就是移动2-1次。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/10.jpg" alt="第二步" style="zoom:80%;"></li><li><p>然后进行第一次报数，3出列</p><p>注意，first本身也算一下哦，然后我们移动m下，m为2，那么就代表着数2下，然后移动1次，也就是m-1。</p></li></ol>   <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/11.jpg" alt="第三步" style="zoom:80%;"><p>   移动一次以后，我们就找到了第一个需要出列的娃，也就是将first指向的那个一个节点出列，那么既然它出列了，那么first就要指向出列的那个节点的next了，同时end也就要指向那个节点的next。</p>   <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/12.jpg" alt="第三步" style="zoom:80%;"><p>   出列后就成了这个样子，那么第一个出列的就是<strong>3</strong>。</p><ol start="4"><li><p>继续出列，出列5</p><p>报数2次，如下所示。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/13.jpg" alt="第四步" style="zoom:80%;"><p>把first指向的节点出列。</p></li></ol>   <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/14.jpg" alt="第四步" style="zoom:80%;"><p>   然后第二次出列的就是<strong>5</strong>。</p><ol start="5"><li><p>继续出列，出列2</p><p>报数两次，如下所示。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/15.jpg" alt="第五步" style="zoom:80%;"><p>然后再把first指向的节点出列。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/16.jpg" alt="第五步" style="zoom:80%;"><p>那么这次出列的就是<strong>2</strong>。</p></li><li><p>继续出列，出列1</p><p>报数两次，如下所示。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/17.jpg" alt="第六步" style="zoom:80%;"><p>然后让first指向的节点出列，就变成了这样。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/18.jpg" alt="第六步" style="zoom:80%;"></li><li><p>出列最后一个，4</p></li></ol><p>然后就出列完成，总共的顺序就是3 5 2 1 4。</p><h3 id="约瑟夫问题代码实现"><a href="#约瑟夫问题代码实现" class="headerlink" title="约瑟夫问题代码实现"></a>约瑟夫问题代码实现</h3><h4 id="定义环形链表节点类"><a href="#定义环形链表节点类" class="headerlink" title="定义环形链表节点类"></a>定义环形链表节点类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> no; <span class="hljs-comment">// 编号</span><br>  <span class="hljs-keyword">private</span> Node next; <span class="hljs-comment">// 指向下一个节点</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.no = no;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNo</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> no;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.no = no;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">getNext</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> next;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span><span class="hljs-params">(Node next)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.next = next;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;no=&quot;</span> + no + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="定义单向环形链表类"><a href="#定义单向环形链表类" class="headerlink" title="定义单向环形链表类"></a>定义单向环形链表类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单向环形链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleSingleLinkedList</span> </span>&#123;<br><br>  <span class="hljs-comment">// 创建一个first节点，最初没有编号</span><br>  <span class="hljs-keyword">private</span> Node first;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="编写添加节点，构建环形链表方法"><a href="#编写添加节点，构建环形链表方法" class="headerlink" title="编写添加节点，构建环形链表方法"></a>编写添加节点，构建环形链表方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加小孩节点，构建环形链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nums)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (nums &lt; <span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;nums的值不正确&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">/* 辅助变量，构建循环链表 */</span><br>    Node curNode = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= nums;i++) &#123;<br>        Node node = <span class="hljs-keyword">new</span> Node(i);<br>        <span class="hljs-comment">/* 如果是第一个节点 */</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>            first = node;<br>            first.setNext(first);<br>            <span class="hljs-comment">/* 让curNode指向第一个node */</span><br>            curNode = first;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curNode.setNext(node);<br>            node.setNext(first);<br>            curNode = node;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="编写遍历环形链表方法"><a href="#编写遍历环形链表方法" class="headerlink" title="编写遍历环形链表方法"></a>编写遍历环形链表方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 遍历环形链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLinkedList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;环形链表为空&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">/* 辅助变量curNode，遍历链表 */</span><br>    Node curNode = first;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        System.out.println(curNode);<br>        <span class="hljs-keyword">if</span> (curNode.getNext() == first) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        curNode = curNode.getNext();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="编写约瑟夫问题节点出列的方法"><a href="#编写约瑟夫问题节点出列的方法" class="headerlink" title="编写约瑟夫问题节点出列的方法"></a>编写约瑟夫问题节点出列的方法</h4><p><strong>图示</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：链表/10.jpg" alt="第二步" style="zoom:80%;"><p><strong>思路</strong></p><ul><li><strong>明确变量</strong>， <code>n = 5</code>代表有5个节点，<code>k = 1</code>代表从第一个节点开始报数，<code>m = 2</code>代表报数2次。</li><li><strong>辅助变量</strong>，<code>end</code>变量事先指向环形链表的最后一个节点，也就是<code>end.next = first</code>。</li><li><strong>移动指针</strong>，将<code>first</code>和<code>end</code>变量同时移动<code>k - 1</code>次，使<code>first</code>指向第一个要报数的节点</li><li><strong>报数操作</strong>，<code>first</code>变量和<code>end</code>变量同时移动<code>m - 1</code>次。</li><li><strong>节点出列</strong>，<code>first</code>指向的节点应出列，也就是<code>first = first.next; end.next = first</code>。</li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 约瑟夫问题</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> startNo 表示从第几个节点开始报数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> countNum 表示报数几次</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nums 表示最初有几个节点在环形链表中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">josephu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> startNo, <span class="hljs-keyword">int</span> countNum, <span class="hljs-keyword">int</span> nums)</span> </span>&#123;<br><br>    <span class="hljs-comment">/* 简单的数据校验 */</span><br>    <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span> || startNo &lt; <span class="hljs-number">1</span> || startNo &gt; nums) &#123;<br>        System.out.println(<span class="hljs-string">&quot;参数输入有误，请重新输入&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 辅助变量，实现指向最后一个节点 */</span><br>    Node end = first;<br>    <span class="hljs-keyword">while</span> (end.getNext() != first) &#123;<br>        end = end.getNext();<br>    &#125;<br><br>    <span class="hljs-comment">/* 移动指针，让first指向第一个要报数的节点 */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; startNo - <span class="hljs-number">1</span>; j++) &#123;<br>        first = first.getNext();<br>        end = end.getNext();<br>    &#125;<br><br>    <span class="hljs-comment">/* 节点报数 节点出列 */</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        <span class="hljs-comment">/* 仅剩一人 */</span><br>        <span class="hljs-keyword">if</span> (end == first) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">/* 报数 */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; countNum - <span class="hljs-number">1</span>; k++) &#123;<br>            first = first.getNext();<br>            end = end.getNext();<br>        &#125;<br>        <span class="hljs-comment">/* 出列 */</span><br>        System.out.println(<span class="hljs-string">&quot;节点出列，编号为&quot;</span> + first.getNo());<br>        first = first.getNext();<br>        end.setNext(first);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;节点出列，编号为&quot;</span> + first.getNo());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试约瑟夫问题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    CircleSingleLinkedList circleSingleLinkedList = <span class="hljs-keyword">new</span> CircleSingleLinkedList();<br>    <span class="hljs-comment">/* 构建5个节点的循环链表 */</span><br>    circleSingleLinkedList.addNode(<span class="hljs-number">5</span>);<br>    System.out.println(<span class="hljs-string">&quot;循环链表内容为：&quot;</span>);<br>    circleSingleLinkedList.printLinkedList();<br>    <span class="hljs-comment">/*约瑟夫问题*/</span><br>    circleSingleLinkedList.josephu(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong>：与约瑟夫问题演示结果相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">循环链表内容为：<br>Node&#123;no=<span class="hljs-number">1</span>&#125;<br>Node&#123;no=<span class="hljs-number">2</span>&#125;<br>Node&#123;no=<span class="hljs-number">3</span>&#125;<br>Node&#123;no=<span class="hljs-number">4</span>&#125;<br>Node&#123;no=<span class="hljs-number">5</span>&#125;<br>节点出列，编号为<span class="hljs-number">3</span><br>节点出列，编号为<span class="hljs-number">5</span><br>节点出列，编号为<span class="hljs-number">2</span><br>节点出列，编号为<span class="hljs-number">1</span><br>节点出列，编号为<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构：队列</title>
    <link href="/posts/2021/01/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%98%9F%E5%88%97/"/>
    <url>/posts/2021/01/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="队列介绍"><a href="#队列介绍" class="headerlink" title="队列介绍"></a>队列介绍</h3><ul><li><p>队列是一个有序列表，可以用<strong>数组</strong>或是<strong>链表</strong>来实现。</p></li><li><p>队列遵循<strong>先入先出</strong>的原则，即：先存入队列的数据先取出，后存入队列的数据后取出。</p></li><li><p>使用数组模拟队列示意图：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：队列/1.jpg" alt="队列示意图" style="zoom:80%;"></li></ul><h3 id="数组模拟队列初始思路"><a href="#数组模拟队列初始思路" class="headerlink" title="数组模拟队列初始思路"></a>数组模拟队列初始思路</h3><ul><li><p>队列本身是有序列表，若使用数组结构来存储队列的数据，则队列数组的声明如上图，其中**<code>maxSize</code><strong>为队列元素的最大容量</strong>。**</p></li><li><p>队列的输出、输入时分别从前后两端来处理的，因此需要两个变量 <code>front </code>和 <code>rear</code> 分别记录队列前后端的下标。<code>front</code>会随着元素输出而改变，<code>rear</code>会随着元素输入而改变。</p></li><li><p>当我们将数据存入队列，处理需要几个步骤：</p><ul><li>初始时 <code>rear, front = -1</code>; </li><li>当 <code>front == rear</code>，队列为空；当<code>rear == maxSize - 1</code>，队列为满。</li><li>插入数据，判</li><li>否队满，将尾指针向后移：rear + 1</li></ul></li></ul><h3 id="初始思路代码实现"><a href="#初始思路代码实现" class="headerlink" title="初始思路代码实现"></a>初始思路代码实现</h3><ol><li><p><strong>首先编写数组队列的基本类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueue</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize; <span class="hljs-comment">// 数组容量</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front;   <span class="hljs-comment">// 队头</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear;    <span class="hljs-comment">// 队尾</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] array; <span class="hljs-comment">// 存放数据</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 队列构造器</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arrMaxSize)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.maxSize = arrMaxSize;<br>    <span class="hljs-keyword">this</span>.array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>    <span class="hljs-keyword">this</span>.front = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">this</span>.rear = -<span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断队满</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> rear == maxSize - <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断队空</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> rear == front;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 数据入队</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-comment">// 判断是否队满</span><br>    <span class="hljs-keyword">if</span> (isFull()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;队满，入队失败！&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    rear++;<br>    array[rear] = data;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 数据出队</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 判断是否队空</span><br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队空，出队失败！&quot;</span>);<br>    &#125;<br>    front++;<br>    <span class="hljs-keyword">return</span> array[front];<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 打印队列数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;队空，无数据！&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> item: array) &#123;<br>      System.out.print(item + <span class="hljs-string">&quot;\t&quot;</span>);<br>    &#125;<br>    System.out.println();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查看队头数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHead</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 判断是否队空</span><br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队空，无数据！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> array[front + <span class="hljs-number">1</span>];<br>  &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>编写测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组队列测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueueTest</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 构建队列</span><br>    ArrayQueue queue = <span class="hljs-keyword">new</span> ArrayQueue(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 执行队列操作</span><br>    <span class="hljs-keyword">boolean</span> loop = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">while</span> (loop) &#123;<br>      <span class="hljs-comment">// 显示菜单</span><br>      showMenu();<br>      <span class="hljs-comment">// 接收菜单选项</span><br>      <span class="hljs-keyword">char</span> menuOption = scanner.next().charAt(<span class="hljs-number">0</span>);<br>      <span class="hljs-comment">// 解析菜单选项</span><br>      <span class="hljs-keyword">switch</span> (menuOption) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;p&#x27;</span>:<br>          queue.printQueue();<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>          System.out.println(<span class="hljs-string">&quot;请输入一个int类型数字&quot;</span>);<br>          <span class="hljs-keyword">int</span> data = scanner.nextInt();<br>          queue.enQueue(data);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> res = queue.deQueue();<br>            System.out.println(<span class="hljs-string">&quot;出队数据是=&gt;&quot;</span> + res);<br>          &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> item = queue.getHead();<br>            System.out.println(<span class="hljs-string">&quot;队头数据是=&gt;&quot;</span> + item);<br>          &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;q&#x27;</span>:<br>          scanner.close();<br>          loop = <span class="hljs-keyword">false</span>;<br>          System.out.println(<span class="hljs-string">&quot;程序正常退出！&quot;</span>);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showMenu</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;------------------------------------菜单-----------------------------------------------&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;p(print):打印队列\tq(quit):退出程序\te(enqueue):入队\td(dequeue):出队\tg(getHead):看队头数据&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>测试</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java">------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>p<br>队空，无数据！<br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">10</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>p<br>array[i]=<span class="hljs-number">10</span>array[i]=<span class="hljs-number">0</span>array[i]=<span class="hljs-number">0</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">20</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">20</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>p<br>array[i]=<span class="hljs-number">10</span>array[i]=<span class="hljs-number">20</span>array[i]=<span class="hljs-number">20</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">20</span><br>队满，入队失败！<br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>d<br>出队数据是=&gt;<span class="hljs-number">10</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>d<br>出队数据是=&gt;<span class="hljs-number">20</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>d<br>出队数据是=&gt;<span class="hljs-number">20</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>p<br>队空，无数据！<br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>g<br>队空，无数据！<br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">20</span><br>队满，入队失败！<br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>q<br>程序正常退出！<br></code></pre></td></tr></table></figure></li><li><p><strong>分析问题并优化</strong></p><ul><li>目前数组使用一次就不能用， 没有达到复用的效果</li><li>将这个数组使用算法，改进成一个<strong>环形的队列</strong>取模：%</li></ul></li></ol><h3 id="数组模拟环形队列思路"><a href="#数组模拟环形队列思路" class="headerlink" title="数组模拟环形队列思路"></a>数组模拟环形队列思路</h3><ul><li><code>front</code>指向队头，<code>rear</code>指向队尾。</li><li><strong>队空条件</strong>：<code>rear == front</code></li><li><strong>少用一个队列数组空间</strong>，约定“<strong>队列头指针在队列尾指针的下一位</strong>”为<strong>队满</strong>标志。</li><li><strong>队满条件</strong>：<code>(rear + 1) % maxSize == front</code></li><li><strong>有效数据个数</strong>：<code>(rear + maxSize - front) % maxSize</code></li></ul><blockquote><p>空队</p></blockquote><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：队列/1.png" alt="空队" style="zoom:80%;"><blockquote><p>入队</p></blockquote><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：队列/2.png" alt="入队" style="zoom:80%;"><blockquote><p>出队</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%98%9F%E5%88%97/3.png" alt="出队"></p><h3 id="改进思路代码实现"><a href="#改进思路代码实现" class="headerlink" title="改进思路代码实现"></a>改进思路代码实现</h3><ol><li><p><strong>数组环形队列类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 循环数组队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleArrayQueue</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize; <span class="hljs-comment">// 数组容量</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front;   <span class="hljs-comment">// 队头</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear;    <span class="hljs-comment">// 队尾</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] array; <span class="hljs-comment">// 存放数据</span><br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 队列构造器</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CircleArrayQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arrMaxSize)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.maxSize = arrMaxSize;<br>    <span class="hljs-keyword">this</span>.array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>    <span class="hljs-keyword">this</span>.front = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">this</span>.rear = <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断队满</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % maxSize == front;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 判断队空</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> rear == front;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 数据入队</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>    <span class="hljs-comment">// 判断是否队满</span><br>    <span class="hljs-keyword">if</span> (isFull()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;队满，入队失败！&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    array[rear] = data;<br>    rear = (rear + <span class="hljs-number">1</span>) % maxSize;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 数据出队</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 判断是否队空</span><br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队空，出队失败！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> data = array[front];<br>    front = (front + <span class="hljs-number">1</span>) % maxSize;<br>    <span class="hljs-keyword">return</span> data;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 打印队列数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      System.out.println(<span class="hljs-string">&quot;队空，无数据！&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = front; i &lt; front + sizeQueue(); i++) &#123;<br>      System.out.print(<span class="hljs-string">&quot;array[&quot;</span> + (i % maxSize) + <span class="hljs-string">&quot;]=&quot;</span> + array[i % maxSize] + <span class="hljs-string">&quot;\t&quot;</span>);<br>    &#125;<br>    System.out.println();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当前队列长度</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sizeQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (rear - front + maxSize) % maxSize;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查看队头数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHead</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 判断是否队空</span><br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队空，无数据！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> array[front];<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 循环数组队列测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleArrayQueueTest</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 构建队列</span><br>    CircleArrayQueue queue = <span class="hljs-keyword">new</span> CircleArrayQueue(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">// 执行队列操作</span><br>    <span class="hljs-keyword">boolean</span> loop = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">while</span> (loop) &#123;<br>      <span class="hljs-comment">// 显示菜单</span><br>      showMenu();<br>      <span class="hljs-comment">// 接收菜单选项</span><br>      <span class="hljs-keyword">char</span> menuOption = scanner.next().charAt(<span class="hljs-number">0</span>);<br>      <span class="hljs-comment">// 解析菜单选项</span><br>      <span class="hljs-keyword">switch</span> (menuOption) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;p&#x27;</span>:<br>          queue.printQueue();<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>          System.out.println(<span class="hljs-string">&quot;请输入一个int类型数字&quot;</span>);<br>          <span class="hljs-keyword">int</span> data = scanner.nextInt();<br>          queue.enQueue(data);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> res = queue.deQueue();<br>            System.out.println(<span class="hljs-string">&quot;出队数据是=&gt;&quot;</span> + res);<br>          &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> item = queue.getHead();<br>            System.out.println(<span class="hljs-string">&quot;队头数据是=&gt;&quot;</span> + item);<br>          &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;q&#x27;</span>:<br>          scanner.close();<br>          loop = <span class="hljs-keyword">false</span>;<br>          System.out.println(<span class="hljs-string">&quot;程序正常退出！&quot;</span>);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showMenu</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;------------------------------------菜单-----------------------------------------------&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;p(print):打印队列\tq(quit):退出程序\te(enqueue):入队\td(dequeue):出队\tg(getHead):看队头数据&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试结果(对应思路)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>p<br>队空，无数据！<br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">10</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">11</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">12</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">13</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>e<br>请输入一个<span class="hljs-keyword">int</span>类型数字<br><span class="hljs-number">14</span><br>队满，入队失败！<br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>g<br>队头数据是=&gt;<span class="hljs-number">10</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>d<br>出队数据是=&gt;<span class="hljs-number">10</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>g<br>队头数据是=&gt;<span class="hljs-number">11</span><br>------------------------------------菜单-----------------------------------------------<br>p(print):打印队列q(quit):退出程序e(enqueue):入队d(dequeue):出队g(getHead):看队头数据<br>q<br>程序正常退出！<br></code></pre></td></tr></table></figure></li></ol><h3 id="链表模拟环形队列实现"><a href="#链表模拟环形队列实现" class="headerlink" title="链表模拟环形队列实现"></a>链表模拟环形队列实现</h3>]]></content>
    
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构：二维数组&lt;=&gt;稀疏数组</title>
    <link href="/posts/2021/01/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <url>/posts/2021/01/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="二维数组与稀疏数组的相互转换"><a href="#二维数组与稀疏数组的相互转换" class="headerlink" title="二维数组与稀疏数组的相互转换"></a>二维数组与稀疏数组的相互转换</h2><h3 id="一、实际需求"><a href="#一、实际需求" class="headerlink" title="一、实际需求"></a>一、实际需求</h3><p>编写五子棋程序，五子棋程序是有<strong>存盘退出</strong>和<strong>继续上盘</strong>的功能。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/1.png" alt="实际需求"></p><p><strong>实际问题</strong>：使用二维数组记录棋盘，<strong>没有意义的0数据占大多数空间</strong>。</p><p><strong>解决办法</strong>：我们可以使用<strong>稀疏数组</strong>代替上面的<strong>二维数组</strong>。</p><h3 id="二、稀疏数组"><a href="#二、稀疏数组" class="headerlink" title="二、稀疏数组"></a>二、稀疏数组</h3><blockquote><p>稀疏矩阵的介绍</p></blockquote><p>当一个数组中<strong>大部分元素为0</strong>，<strong>或者为同一个值</strong>时，可以使用稀疏数组来保存该数组。</p><p>稀疏数组的处理方法：</p><ol><li>记录数组的<strong>行数、列数和不为0的值个数</strong>。</li><li>记录不为0的值的元素的<strong>行下标、列下标和值</strong>，从而缩小程序的规模。</li></ol><blockquote><p>稀疏矩阵的实例</p></blockquote><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/数据结构：二维数组-稀疏数组/2.png" alt="实例" style="zoom:80%;"><h3 id="三、二维数组与稀疏数组转换的思路"><a href="#三、二维数组与稀疏数组转换的思路" class="headerlink" title="三、二维数组与稀疏数组转换的思路"></a>三、二维数组与稀疏数组转换的思路</h3><blockquote><p>二维数组转化为稀疏数组</p></blockquote><ol><li><p>遍历原始的二维数组，得到<strong>行数 row</strong>、<strong>列数 col</strong> 和<strong>有效数据的个数 sum</strong>。</p></li><li><p>根据 1 中的 sum 可以创建稀疏数组 <code>sparseArr</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> sparseArr[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum + <span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure></li><li><p>将二维数组的<strong>有效数据信息</strong>存到稀疏数组。</p></li></ol><blockquote><p>稀疏数组转化为二维数组</p></blockquote><ol><li><p>读取稀疏矩阵的第一行数据得到<strong>行数 row</strong>、<strong>列数 col</strong> 。</p></li><li><p>根据 1 中的 row、col 可以创建二维数组 <code>chessArr</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> chessArr[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[row][col];<br></code></pre></td></tr></table></figure></li><li><p>读取稀疏矩阵后面的数据信息，保存到二维数组中。</p></li></ol><h3 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h3><ol><li><p><strong>首先定义相关常量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 稀疏数组常量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SparseArrayVar</span> </span>&#123;<br><br>    <span class="hljs-comment">// 0:没有棋子  1:黑色棋子  2:蓝色棋子</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> NO_CHESS = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> BLACK_CHESS = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> BLUE_CHESS = <span class="hljs-number">2</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>流程：原始数组=&gt;稀疏数组=&gt;存到文件=&gt;读取文件=&gt;恢复为原始数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 稀疏数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SparseArray</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 工作流程</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 二维数组</span><br>        <span class="hljs-keyword">int</span>[][] primary_arr = &#123;&#125;;<br><br>        <span class="hljs-comment">// 初始化原数组为 11*11 二维数组</span><br>        <span class="hljs-keyword">int</span> row = <span class="hljs-number">11</span>, col = <span class="hljs-number">11</span>;<br>        primary_arr = initPrimaryArraySize(row, col);<br><br>        <span class="hljs-comment">// 初始化原始数组落子情况</span><br>        initPrimaryArrayChess(primary_arr);<br><br>        <span class="hljs-comment">// 输出原始数组内容</span><br>        System.out.println(<span class="hljs-string">&quot;-----------------原始数组----------------&quot;</span>);<br>        printArr(primary_arr);<br><br>        <span class="hljs-comment">// 稀疏数组</span><br>        <span class="hljs-keyword">int</span>[][] sparse_arr = &#123;&#125;;<br><br>        <span class="hljs-comment">// 将二维数组转化为稀疏数组</span><br>        sparse_arr = primaryArrayToSparseArray(primary_arr);<br><br>        <span class="hljs-comment">// 输出稀疏数组内容</span><br>        System.out.println(<span class="hljs-string">&quot;-----------------稀疏数组----------------&quot;</span>);<br>        printArr(sparse_arr);<br><br>        <span class="hljs-comment">// 将稀疏数组保存到map.data文件中</span><br>        writeSparseArrayToFile(sparse_arr, <span class="hljs-string">&quot;map.data&quot;</span>);<br><br>        <span class="hljs-comment">// 读取map.data文件，获得稀疏数组</span><br>        <span class="hljs-keyword">int</span>[][] sparse_arr_from_file = readSparseArrayFromFile(<span class="hljs-string">&quot;map.data&quot;</span>);<br><br>        <span class="hljs-comment">// 输出读取的稀疏数组</span><br>        System.out.println(<span class="hljs-string">&quot;-----------------读取数组----------------&quot;</span>);<br>        <span class="hljs-keyword">if</span> (sparse_arr_from_file != <span class="hljs-keyword">null</span>) &#123;<br>            printArr(sparse_arr_from_file);<br>        &#125;<br><br>        <span class="hljs-comment">// 将稀疏数组恢复为二维数组</span><br>        <span class="hljs-keyword">int</span>[][] new_primary_arr = &#123;&#125;;<br><br>        <span class="hljs-comment">//根据稀疏数组后继行数据赋值二维数组</span><br>        <span class="hljs-keyword">if</span> (sparse_arr_from_file != <span class="hljs-keyword">null</span>) &#123;<br>            new_primary_arr = sparseArrayToPrimaryArray(sparse_arr_from_file);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;读取文件失败，使用内存中的稀疏矩阵&quot;</span>);<br>            new_primary_arr = sparseArrayToPrimaryArray(sparse_arr);<br>        &#125;<br><br>        <span class="hljs-comment">// 输出恢复的原始数组内容</span><br>        System.out.println(<span class="hljs-string">&quot;-----------------恢复数组----------------&quot;</span>);<br>        printArr(new_primary_arr);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 从文件中读取稀疏数组</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] readSparseArrayFromFile(String filename) &#123;<br><br>        FileReader reader = <span class="hljs-keyword">null</span>;<br>        FileReader reader2 = <span class="hljs-keyword">null</span>;<br>        BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            reader = <span class="hljs-keyword">new</span> FileReader(filename);<br>            reader2 = <span class="hljs-keyword">new</span> FileReader(filename);<br><br>            <span class="hljs-comment">// 获取文件行数</span><br>            <span class="hljs-keyword">int</span> lineNumber = <span class="hljs-number">0</span>;<br>            LineNumberReader lineNumberReader = <span class="hljs-keyword">new</span> LineNumberReader(reader2);<br>            lineNumberReader.skip(Long.MAX_VALUE);<br>            lineNumber = lineNumberReader.getLineNumber();<br><br>            <span class="hljs-keyword">int</span>[][] sparse_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[lineNumber][<span class="hljs-number">3</span>];<br><br>            <span class="hljs-comment">// 按行读取文件数据</span><br>            bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(reader);<br>            String str;<br>            <span class="hljs-keyword">int</span> row = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((str = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// 将字符串按照\t分割，得到一个string数组</span><br>                String[] strings = str.split(<span class="hljs-string">&quot;\t&quot;</span>);<br>                <span class="hljs-comment">// 将数据写入到稀疏矩阵</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> col = <span class="hljs-number">0</span>; col &lt; strings.length; col++) &#123;<br>                    sparse_arr[row][col] = Integer.parseInt(strings[col]);<br>                &#125;<br>                row++;<br>            &#125;<br>            reader.close();<br>            bufferedReader.close();<br>            lineNumberReader.close();<br>            <span class="hljs-keyword">return</span> sparse_arr;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 将数组存入到文件中</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeSparseArrayToFile</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] array, String filename)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 新建存放数组文件</span><br>        File file = <span class="hljs-keyword">new</span> File(filename);<br><br>        <span class="hljs-comment">// 文件写入流</span><br>        FileWriter out = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            out = <span class="hljs-keyword">new</span> FileWriter(file);<br>            <span class="hljs-comment">// 将数组数据写入文件，各数据之间以Tab间隔</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : array) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array[<span class="hljs-number">0</span>].length; j++) &#123;<br>                    out.write(row[j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>                &#125;<br>                out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭文件流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                out.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 稀疏数组恢复为二维数组</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] sparseArrayToPrimaryArray(<span class="hljs-keyword">int</span>[][] sparse_arr) &#123;<br><br>        <span class="hljs-comment">// 读取稀疏数组第一行数据，创建原始数组</span><br>        <span class="hljs-keyword">int</span>[][] new_primary_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sparse_arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparse_arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br><br>        <span class="hljs-comment">// 读取稀疏数组后几行数据，构建二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; sparse_arr.length; i++) &#123;<br>            new_primary_arr[sparse_arr[i][<span class="hljs-number">0</span>]][sparse_arr[i][<span class="hljs-number">1</span>]] = sparse_arr[i][<span class="hljs-number">2</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> new_primary_arr;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 二维数组转化为稀疏数组方法</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] primaryArrayToSparseArray(<span class="hljs-keyword">int</span>[][] primary_arr) &#123;<br><br>        <span class="hljs-comment">// 遍历二维数组，得到非0数据个数</span><br>        <span class="hljs-keyword">int</span> chess_num = getChessNum(primary_arr);<br><br>        <span class="hljs-comment">// 创建对应稀疏数组</span><br>        <span class="hljs-keyword">int</span>[][] sparse_arr = initPrimaryArraySize(chess_num + <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">// 初始化稀疏数组第一行数据</span><br>        initSparseArrayFirstLine(primary_arr, sparse_arr, chess_num);<br><br>        <span class="hljs-comment">// 将初始数组非0数据存放到稀疏数组</span><br>        initSparseArrayOthersLine(primary_arr, sparse_arr);<br><br>        <span class="hljs-keyword">return</span> sparse_arr;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 将初始数组的非0数据存放到稀疏数组</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initSparseArrayOthersLine</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] primary_arr, <span class="hljs-keyword">int</span>[][] sparse_arr)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; primary_arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; primary_arr[<span class="hljs-number">0</span>].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (primary_arr[i][j] != SparseArrayVar.NO_CHESS) &#123;<br>                    count++;<br>                    sparse_arr[count][<span class="hljs-number">0</span>] = i;<br>                    sparse_arr[count][<span class="hljs-number">1</span>] = j;<br>                    sparse_arr[count][<span class="hljs-number">2</span>] = primary_arr[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 初始化稀疏数组第一行方法</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initSparseArrayFirstLine</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] primary_arr, <span class="hljs-keyword">int</span>[][] sparse_arr, <span class="hljs-keyword">int</span> chess_num)</span> </span>&#123;<br>        sparse_arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = primary_arr.length;<br>        sparse_arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = primary_arr[<span class="hljs-number">0</span>].length;<br>        sparse_arr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = chess_num;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 得到二维数组非空子棋子个数方法</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getChessNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] primary_arr)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : primary_arr) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> item : row) &#123;<br>                <span class="hljs-keyword">if</span> (item != SparseArrayVar.NO_CHESS) &#123;<br>                    num++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 初始化二维数组落子方法</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initPrimaryArrayChess</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] primary_arr)</span> </span>&#123;<br>        primary_arr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = SparseArrayVar.BLACK_CHESS;<br>        primary_arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = SparseArrayVar.BLUE_CHESS;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 初始化二维数组大小方法</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] initPrimaryArraySize(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[row][col];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 输出数组内容方法</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] array)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : array) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> item : row) &#123;<br>                System.out.print(item + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>保存在项目中的map.data文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">11</span><span class="hljs-number">11</span><span class="hljs-number">2</span><br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">1</span><br><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">-----------------原始数组----------------<br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">2</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br>-----------------稀疏数组----------------<br><span class="hljs-number">11</span><span class="hljs-number">11</span><span class="hljs-number">2</span><br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">1</span><br><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">2</span><br>-----------------读取数组----------------<br><span class="hljs-number">11</span><span class="hljs-number">11</span><span class="hljs-number">2</span><br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">1</span><br><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">2</span><br>-----------------恢复数组----------------<br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">2</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatisPlus学习</title>
    <link href="/posts/2021/01/24/MyBatisPlus%E5%AD%A6%E4%B9%A0/"/>
    <url>/posts/2021/01/24/MyBatisPlus%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatisPlus学习"><a href="#MyBatisPlus学习" class="headerlink" title="MyBatisPlus学习"></a>MyBatisPlus学习</h2><blockquote><p>简介</p></blockquote><p>官网：<a href="http://mp.baomidou.com/">http://mp.baomidou.com/</a></p><p>参考教程：<a href="http://mp.baomidou.com/guide/">http://mp.baomidou.com/guide/</a></p><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><blockquote><p>特性</p></blockquote><ul><li><p><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</p></li><li><p><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</p></li><li><p><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分CRUD 操作，更有强大的条件构造器，满足各类使用需求</p></li><li><p><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</p></li><li><p><strong>支持多种数据库</strong>：支持MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer等多种数据库</p></li><li><p><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</p></li><li><p><strong>支持 XML 热加载</strong>：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML启动</p></li><li><p><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</p></li><li><p><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</p></li><li><p><strong>支持关键词自动转义</strong>：支持数据库关键词（order、key……）自动转义，还可自定义关键词</p></li><li><p><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller层代码，支持模板引擎，更有超多自定义配置等您来使用</p></li><li><p><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</p></li><li><p><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</p></li><li><p><strong>内置全局拦截插件：</strong>提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</p></li><li><p><strong>内置 Sql 注入剥离器</strong>：支持 Sql 注入剥离，有效预防 Sql 注入攻击</p></li></ul><blockquote><p>创建并初始化数据库</p></blockquote><ol><li><p>创建数据库</p><p><strong>mybatis_plus</strong>数据库。</p></li><li><p>创建User表。</p><p>其表结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>email</th></tr></thead><tbody><tr><td>1</td><td>Jone</td><td>18</td><td><a href="mailto:&#116;&#101;&#115;&#x74;&#49;&#64;&#x62;&#97;&#111;&#x6d;&#105;&#x64;&#x6f;&#117;&#46;&#99;&#x6f;&#109;">&#116;&#101;&#115;&#x74;&#49;&#64;&#x62;&#97;&#111;&#x6d;&#105;&#x64;&#x6f;&#117;&#46;&#99;&#x6f;&#109;</a></td></tr><tr><td>2</td><td>Jack</td><td>20</td><td><a href="mailto:&#x74;&#x65;&#x73;&#116;&#x32;&#64;&#x62;&#97;&#x6f;&#109;&#x69;&#100;&#111;&#x75;&#46;&#99;&#111;&#x6d;">&#x74;&#x65;&#x73;&#116;&#x32;&#64;&#x62;&#97;&#x6f;&#109;&#x69;&#100;&#111;&#x75;&#46;&#99;&#111;&#x6d;</a></td></tr><tr><td>3</td><td>Tom</td><td>28</td><td><a href="mailto:&#x74;&#101;&#115;&#x74;&#51;&#64;&#x62;&#x61;&#x6f;&#109;&#x69;&#x64;&#111;&#x75;&#46;&#x63;&#111;&#109;">&#x74;&#101;&#115;&#x74;&#51;&#64;&#x62;&#x61;&#x6f;&#109;&#x69;&#x64;&#111;&#x75;&#46;&#x63;&#111;&#109;</a></td></tr><tr><td>4</td><td>Sandy</td><td>21</td><td><a href="mailto:&#x74;&#x65;&#115;&#116;&#x34;&#64;&#x62;&#97;&#x6f;&#109;&#105;&#100;&#x6f;&#117;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#x65;&#115;&#116;&#x34;&#64;&#x62;&#97;&#x6f;&#109;&#105;&#100;&#x6f;&#117;&#x2e;&#99;&#x6f;&#x6d;</a></td></tr><tr><td>5</td><td>Billie</td><td>24</td><td><a href="mailto:&#x74;&#x65;&#x73;&#116;&#x35;&#64;&#98;&#97;&#x6f;&#x6d;&#x69;&#100;&#x6f;&#x75;&#46;&#99;&#x6f;&#109;">&#x74;&#x65;&#x73;&#116;&#x35;&#64;&#98;&#97;&#x6f;&#x6d;&#x69;&#100;&#x6f;&#x75;&#46;&#99;&#x6f;&#109;</a></td></tr></tbody></table><p>其对应的表 脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE IF EXISTS user;<br>CREATE TABLE user<br>(<br>    id BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,<br>    name VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;姓名&#39;,<br>    age INT(11) NULL DEFAULT NULL COMMENT &#39;年龄&#39;,<br>    email VARCHAR(50) NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,<br>    PRIMARY KEY (id)<br>);<br></code></pre></td></tr></table></figure><p>其对应的表数据脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM user;<br>INSERT INTO user (id, name, age, email) VALUES<br>(1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;),<br>(2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;),<br>(3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;),<br>(4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;),<br>(5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>初始化工程</p></blockquote><p>使用Spring Initializr 快速初始化一个SpringBoot工程。</p><p>版本：2.4.2 RELEASE</p><blockquote><p>添加依赖</p></blockquote><p>添加：mybatis-plus-bootstarter、MySQL、lombok、Junit</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- mybaits-plus依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：引入 MyBatis-Plus 依赖后不要再引入 MyBatis 或者 MyBatis-Spring依赖，避免因版本差异导致的问题。</p><blockquote><p>配置</p></blockquote><p>在 application.properties 配置文件中添加 MySQL 数据库的相关配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># MySQL数据库连接配置</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis_plus?userUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">xxxxxxxxxxx</span><br></code></pre></td></tr></table></figure><blockquote><p>编写代码</p></blockquote><ol><li><p><strong>主启动类</strong></p><p>在 SpringBoot 启动类中添加 @Mapper 注解，扫描Mapper文件夹，扫描的包名根据实际情况修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.atrox.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MpdemoApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(MpdemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>实体类</strong></p><p>创建包<code>entity</code>编写实体类<code>User.java</code>（此处使用Lombok简化代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>mapper接口</strong></p><p>创建包<code>mapper</code>编写Mapper接口：<code>UserMapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><p>在测试类中，进行查询所有用户操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MpdemoApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">// 查询 user 表中所有数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selectAll</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; userList = userMapper.selectList(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">User(id=<span class="hljs-number">1</span>, name=Jone, age=<span class="hljs-number">18</span>, email=test1<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">2</span>, name=Jack, age=<span class="hljs-number">20</span>, email=test2<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">3</span>, name=Tom, age=<span class="hljs-number">28</span>, email=test3<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">4</span>, name=Sandy, age=<span class="hljs-number">21</span>, email=test4<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">5</span>, name=Billie, age=<span class="hljs-number">24</span>, email=test5<span class="hljs-meta">@baomidou</span>.com)<br></code></pre></td></tr></table></figure></li><li><p><strong>配置日志</strong>：</p><p>在执行SQL操作时，如果想要看到过程，可以在配置文件配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># MyBatis日志</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>插入操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 向 user 表添加数据</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    <span class="hljs-comment">// 这里我们没有设置 Long 类型的 id ，但是 MP 会帮我们自动随机生成19位 id 值</span><br>    user.setName(<span class="hljs-string">&quot;gailun&quot;</span>).setAge(<span class="hljs-number">300</span>).setEmail(<span class="hljs-string">&quot;dabaojian@qq.com&quot;</span>);<br>    <span class="hljs-keyword">int</span> insert = userMapper.insert(user);<br>    System.out.println(<span class="hljs-string">&quot;insert=&gt;&quot;</span> + insert);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行后，MP自动给我们生成了一个19为的ID值。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatisPlus%E5%AD%A6%E4%B9%A0/1.png" alt="19位ID"></p><blockquote><p>主键策略</p></blockquote><ol><li><p><strong>ID_WORKER</strong></p><p>MyBatis-Plus默认的主键策略是：ID_WORKER (全局唯一ID)</p><p>参考资料：分布式系统唯一ID生成方案汇总：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p></li><li><p><strong>自增策略</strong></p><p>要想主键自增需要配置如下主键策略</p><ul><li><p>需要在创建<code>数据表</code>的时候设置主键自增。</p></li><li><p>实体类字段配置@TableId(type = IdType.AUTO)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p>要想影响所有实体的配置，可以设置全局主键配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#全局设置主键生成策略</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.id-type</span>=<span class="hljs-string">auto</span><br></code></pre></td></tr></table></figure></li><li><p><strong>其他策略</strong></p><p>分析IdType源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">IdType</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 数据库ID自增</span><br><span class="hljs-comment">*/</span><br>    AUTO(<span class="hljs-number">0</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 该类型为未设置主键类型</span><br><span class="hljs-comment">*/</span><br>    NONE(<span class="hljs-number">1</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 用户输入ID</span><br><span class="hljs-comment">* 该类型可以通过自己注册自动填充插件进行填充</span><br><span class="hljs-comment">*/</span><br>    INPUT(<span class="hljs-number">2</span>),<br>    <span class="hljs-comment">/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 全局唯一ID (idWorker)</span><br><span class="hljs-comment">*/</span><br>    ID_WORKER(<span class="hljs-number">3</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 全局唯一ID (UUID)</span><br><span class="hljs-comment">*/</span><br>    UUID(<span class="hljs-number">4</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 字符串全局唯一ID (idWorker 的字符串表示)</span><br><span class="hljs-comment">*/</span><br>    ID_WORKER_STR(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> key;<br>    IdType(<span class="hljs-keyword">int</span> key) &#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>更新操作</p></blockquote><ol><li><p><strong>根据id更新操作</strong></p><p>注意：update时生成的sql自动是动态sql：UPDATE user SET age=? WHERE id=?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改数据</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">()</span> </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    <span class="hljs-comment">// Long类型应该用2L</span><br>    user.setId(<span class="hljs-number">2L</span>).setAge(<span class="hljs-number">120</span>);<br>    <span class="hljs-keyword">int</span> row = userMapper.updateById(user);<br>    System.out.println(row);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>自动填充</strong></p><p>项目中经常会遇到一些数据，每次都使用相同的方式填充，例如记录的<strong>创建时间，更新时间</strong>等。</p><p>我们可以使用MyBatis Plus的自动填充功能，完成这些字段的赋值工作。</p></li></ol><ul><li><strong>数据库表中添加需要自动填充字段</strong></li></ul><p>​        在User表中添加datetime类型的新的字段 <code>create_time</code>、<code>update_time</code></p><ul><li><p><strong>实体类上字段上添加自动填充注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Date createTime;<br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Date updateTime;<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li><p><strong>配置实现元对象处理器接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">// 使用 MP 实现添加操作，会调用此方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;createTime&quot;</span>, <span class="hljs-keyword">new</span> Date(), metaObject);<br>    &#125;<br><br>    <span class="hljs-comment">// 使用 MP 实现修改操作，会调用此方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>, <span class="hljs-keyword">new</span> Date(), metaObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>乐观锁</p></blockquote><p><strong>主要适用场景</strong>：当要更新一条记录的时候，希望这条记录没有被别人更新，也就是说实现线程安全的数据更新</p><p><strong>乐观锁实现方式</strong>：</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><ol><li><p><strong>数据库添加version字段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE &#96;user&#96; ADD COLUMN &#96;version&#96; INT<br></code></pre></td></tr></table></figure></li><li><p><strong>实体类添加version字段并添加注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure></li><li><p><strong>设置乐观锁插件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInnerInterceptor <span class="hljs-title">optimisticLockerInnerInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInnerInterceptor();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>元对象处理器接口添加version的insert默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>    ......<br>    <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-number">1</span>, metaObject);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>测试乐观锁可以修改成功</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 测试 乐观锁插件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testOptimisticLocker</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//查询</span><br>    User user = userMapper.selectById(<span class="hljs-number">1L</span>);<br>    <span class="hljs-comment">//修改数据</span><br>    user.setName(<span class="hljs-string">&quot;Helen Yao&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;helen@qq.com&quot;</span>);<br>    <span class="hljs-comment">//执行更新</span><br>    userMapper.updateById(user);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>实现分页</p></blockquote><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能。</p><ol><li><p><strong>创建配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 分页插件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInnerInterceptor <span class="hljs-title">paginationInnerInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PaginationInnerInterceptor();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>测试分页</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分页查询</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testPage</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 1. 传入当前页和每页显示记录数 创建page对象</span><br>    <span class="hljs-keyword">int</span> currentPage = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> pageSize = <span class="hljs-number">3</span>;<br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(currentPage,pageSize);<br>    <span class="hljs-comment">// 2. 调用mp分页查询方法</span><br>    userMapper.selectPage(page, <span class="hljs-keyword">null</span>);<br>    <span class="hljs-comment">// 3.通过page对象获取分页数据</span><br>    System.out.println(page.getCurrent());  <span class="hljs-comment">// 当前页</span><br>    System.out.println(page.getRecords());  <span class="hljs-comment">// 每页数据list集合</span><br>    System.out.println(page.getSize());     <span class="hljs-comment">// 每页显示记录数</span><br>    System.out.println(page.getTotal());    <span class="hljs-comment">// 总记录数</span><br>    System.out.println(page.getPages());    <span class="hljs-comment">// 总页数</span><br>    System.out.println(page.hasNext());     <span class="hljs-comment">// 是否有下一页</span><br>    System.out.println(page.hasPrevious()); <span class="hljs-comment">// 是否有上一页</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br>[User(id=<span class="hljs-number">1</span>, name=Jone, age=<span class="hljs-number">18</span>, email=test1<span class="hljs-meta">@baomidou</span>.com, createTime=<span class="hljs-keyword">null</span>, updateTime=<span class="hljs-keyword">null</span>, version=<span class="hljs-keyword">null</span>), User(id=<span class="hljs-number">2</span>, name=Jack, age=<span class="hljs-number">120</span>, email=test2<span class="hljs-meta">@baomidou</span>.com, createTime=<span class="hljs-keyword">null</span>, updateTime=<span class="hljs-keyword">null</span>, version=<span class="hljs-keyword">null</span>), User(id=<span class="hljs-number">3</span>, name=Tom, age=<span class="hljs-number">28</span>, email=test3<span class="hljs-meta">@baomidou</span>.com, createTime=<span class="hljs-keyword">null</span>, updateTime=<span class="hljs-keyword">null</span>, version=<span class="hljs-keyword">null</span>)]<br><span class="hljs-number">3</span><br><span class="hljs-number">7</span><br><span class="hljs-number">3</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>逻辑删除</p></blockquote><ul><li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除数据。</li><li>逻辑删除：假删除，将对应数据中代表是否被删除字段状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录。</li></ul><ol><li><p><strong>在数据库中添加deleted字段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table &#96;user&#96; add column &#96;deleted&#96; boolean default 0<br></code></pre></td></tr></table></figure></li><li><p><strong>实体类添加deleted字段和注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span><br><span class="hljs-keyword">private</span> Integer deleted;<br></code></pre></td></tr></table></figure></li><li><p><strong>application.properties 加入配置</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 逻辑删除配置</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="hljs-string">1</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure></li><li><p><strong>测试逻辑删除即可</strong>。</p></li><li><p><strong>测试逻辑删除后的查询</strong></p><p>MyBatis Plus中查询操作也会自动添加逻辑删除字段的判断，测试后分析打印的sql语句，包含 WHERE deleted=0</p></li></ol><blockquote><p>性能分析</p></blockquote><p>参考博文：<a href="https://blog.csdn.net/weixin_38111957/article/details/101054300">https://blog.csdn.net/weixin_38111957/article/details/101054300</a></p><blockquote><p>条件构造器</p></blockquote><ol><li><p><strong>wrapper介绍</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatisPlus%E5%AD%A6%E4%B9%A0/1.png" alt="wrapper"></p><p>Wrapper ： 条件构造抽象类，最顶端父类<br>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<br>QueryWrapper ： Entity 对象封装操作类，不是用lambda语法<br>UpdateWrapper ： Update 条件封装，用于Entity对象更新操作<br>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。<br>LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper<br>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</p></li><li><p><strong>ge、gt、le、lt、isNull、isNotNull</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper<br>        .isNull(<span class="hljs-string">&quot;name&quot;</span>)<br>        .ge(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">12</span>)<br>        .isNotNull(<span class="hljs-string">&quot;email&quot;</span>);<br>    <span class="hljs-keyword">int</span> result = userMapper.delete(queryWrapper);<br>    System.out.println(<span class="hljs-string">&quot;delete return count = &quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><p>SQL：UPDATE user SET deleted=1 WHERE deleted=0 AND name IS NULL AND age &gt;= ? AND email IS NOT NULL</p></li><li><p><strong>eq、ne</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectOne</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Tom&quot;</span>);<br>    User user = userMapper.selectOne(queryWrapper);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0AND name = ?</p></li><li><p><strong>between、notBetween</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectCount</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper.between(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br>    Integer count = userMapper.selectCount(queryWrapper);<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure><p>SELECT COUNT(1) FROM user WHERE deleted=0 AND age BETWEEN ? AND ?</p></li><li><p><strong>allEq</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectList</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">2</span>);<br>    map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>);<br>    queryWrapper.allEq(map);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 AND name = ? AND id = ? AND age = ?</p></li><li><p><strong>like、notLike、likeLeft、likeRight</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectMaps</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper<br>        .notLike(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>)<br>        .likeRight(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>);<br>    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);<span class="hljs-comment">//返回</span><br>    值是Map列表<br>        maps.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 AND name NOT LIKE ? AND email LIKE ?</p></li><li><p><strong>in、notIn、inSql、notinSql、exists、notExists</strong></p><p>in、notIn:</p><ul><li>notIn(“age”,{1,2,3})—&gt;age not in (1,2,3)</li><li>notIn(“age”, 1, 2, 3)—&gt;age not in (1,2,3)</li></ul><p>inSql、notinSql：可以实现子查询</p><ul><li>inSql(“age”, “1,2,3,4,5,6”)—&gt;age in (1,2,3,4,5,6)</li><li>inSql(“id”, “select id from table where id &lt; 3”)—&gt;id in (select id from table where id &lt; 3)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectObjs</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    <span class="hljs-comment">//queryWrapper.in(&quot;id&quot;, 1, 2, 3);</span><br>    queryWrapper.inSql(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;select id from user where id &lt; 3&quot;</span>);<br>    List&lt;Object&gt; objects = userMapper.selectObjs(queryWrapper);<span class="hljs-comment">//返回值</span><br>    是Object列表<br>        objects.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 AND id IN (select id from user where id &lt; 3)</p></li><li><p><strong>or、and</strong></p><p>注意：这里使用的是 <code>UpdateWrapper</code><br>不调用or则默认为使用 and 连</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//修改值</span><br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setAge(<span class="hljs-number">99</span>);<br>    user.setName(<span class="hljs-string">&quot;Andy&quot;</span>);<br>    <span class="hljs-comment">//修改条件</span><br>    UpdateWrapper&lt;User&gt; userUpdateWrapper = <span class="hljs-keyword">new</span> UpdateWrapper&lt;&gt;();<br>    userUpdateWrapper<br>        .like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>)<br>        .or()<br>        .between(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">int</span> result = userMapper.update(user, userUpdateWrapper);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>嵌套or、嵌套and</strong></p><p>这里使用了lambda表达式，or中的表达式最后翻译成sql时会被加上圆括号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//修改值</span><br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setAge(<span class="hljs-number">99</span>);<br>    user.setName(<span class="hljs-string">&quot;Andy&quot;</span>);<br>    <span class="hljs-comment">//修改条件</span><br>    UpdateWrapper&lt;User&gt; userUpdateWrapper = <span class="hljs-keyword">new</span> UpdateWrapper&lt;&gt;();<br>    userUpdateWrapper<br>        .like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>)<br>        .or(i -&gt; i.eq(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李白&quot;</span>).ne(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>));<br>    <span class="hljs-keyword">int</span> result = userMapper.update(user, userUpdateWrapper);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>UPDATE user SET name=?, age=?, update_time=? WHERE deleted=0 AND name LIKE ? OR ( name = ? AND age &lt;&gt; ? )</p></li><li><p><strong>orderBy、orderByDesc、orderByAsc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectListOrderBy</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 ORDER BY id DESC</p></li><li><p><strong>last</strong></p><p>直接拼接到 sql 的最后<br>注意：只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectListLast</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper.last(<span class="hljs-string">&quot;limit 1&quot;</span>);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version<br>FROM user WHERE deleted=0 <strong>limit 1</strong></p></li><li><p><strong>指定要查询的列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectListColumn</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    queryWrapper.select(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>);<br>    List&lt;User&gt; users = userMapper.selectList(queryWrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>SELECT id,name,age FROM user WHERE deleted=0</p></li><li><p><strong>set、setSql</strong></p><p>最终的sql会合并 user.setAge()，以及 userUpdateWrapper.set() 和 setSql() 中 的字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateSet</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//修改值</span><br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setAge(<span class="hljs-number">99</span>);<br>    <span class="hljs-comment">//修改条件</span><br>    UpdateWrapper&lt;User&gt; userUpdateWrapper = <span class="hljs-keyword">new</span> UpdateWrapper&lt;&gt;();<br>    userUpdateWrapper<br>        .like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>)<br>        .set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;老李头&quot;</span>)<span class="hljs-comment">//除了可以查询还可以使用set设置修改的字段</span><br>        .setSql(<span class="hljs-string">&quot; email = &#x27;123@qq.com&#x27;&quot;</span>);<span class="hljs-comment">//可以有子查询</span><br>    <span class="hljs-keyword">int</span> result = userMapper.update(user, userUpdateWrapper);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx笔记07-Nginx配置实例-动静分离</title>
    <link href="/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B007-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    <url>/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B007-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用Nginx 处理静态页面，Tomcat处理动态页面。动静分离从目前实现角度来讲大致分为两种， 一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案； 另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。 通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><blockquote><p>实验代码</p></blockquote><p>nginx配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>...<br>location /www/ &#123;<br>root /data/;<br>index index.html index.htm;<br>&#125;<br><br><span class="hljs-meta">#</span><span class="bash"> location /静态资源路径</span><br>location /image &#123;<br>root /data/;<br>autoindex on;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx笔记06-Nginx配置实例-负载均衡</title>
    <link href="/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B006-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B006-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="Nginx配置实例-负载均衡"><a href="#Nginx配置实例-负载均衡" class="headerlink" title="Nginx配置实例-负载均衡"></a>Nginx配置实例-负载均衡</h2><ol><li><p>首先准备两个启动的Tomcat</p></li><li><p>在nginx.conf中进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123;<br>......<br>upstraem myserver &#123;<br>ip_hash;<br>server 8.131.49.204:8080 weight=1;<br>    server 8.131.49.204:8081 weight=1;<br>&#125;<br>......<br>server&#123;<br>location / &#123;<br>......<br>proxy_pass http://myserver;<br>proxy_connect_timeout 10;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>随着互联网信息的爆炸性增长，负载均衡（load balance ）已经不再是一个很陌生的话题顾名思义，负载均衡即是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快，给用户很好的体验。快速增长的访问量和数据流量催生了各式各样的负载均衡产品，很多专业的负载均衡硬件提供了很好的功能，但却价格不菲，这使得负载均衡软件大受欢迎，nginx 就是其中的一个，在 linux 下有 Nginx 、 LVS 、 Haproxy 等等服务可以提供负载均衡服务，而且 Nginx 提供了几种分配方式 策略。</p><p><strong>轮询</strong>：</p><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><p><strong>weight</strong>：<br>代表权 重默认为 1, 权重越高被分配的客户端越多</p><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况</p><p><strong>ip_hash</strong>:</p><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><p><strong>fair</strong>:</p><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx笔记05-Nginx配置实例-反向代理</title>
    <link href="/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B005-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B005-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="nginx配置实例-反向代理"><a href="#nginx配置实例-反向代理" class="headerlink" title="nginx配置实例-反向代理"></a>nginx配置实例-反向代理</h2><blockquote><p>准备工作</p></blockquote><ol><li><p>下载Tomcat到服务器：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p></li><li><p>解压Tomcat</p></li><li><p>启动Tomcat，进入bin目录，执行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z bin]# ./startup.sh <br>Using CATALINA_BASE:   /home/apache-tomcat-9.0.41<br>Using CATALINA_HOME:   /home/apache-tomcat-9.0.41<br>Using CATALINA_TMPDIR: /home/apache-tomcat-9.0.41/temp<br>Using JRE_HOME:        /usr<br>Using CLASSPATH:       /home/apache-tomcat-9.0.41/bin/bootstrap.jar:/home/apache-tomcat-9.0.41/bin/tomcat-juli.jar<br>Using CATALINA_OPTS:   <br>Tomcat started.<br></code></pre></td></tr></table></figure></li><li><p>对外开放8080端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --add-prot=8080/tcp --permanent<br>firewall-cmd -reload<br></code></pre></td></tr></table></figure></li><li><p>通过网页访问Tomcat：<a href="http://8.131.49.204:8080/">http://8.131.49.204:8080/</a></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx笔记05-Nginx配置实例-反向代理/1.png" alt="访问Tomcat" style="zoom:80%;"></li></ol><blockquote><p>反向代理实例一</p></blockquote><ol><li><p>在 Windows 系统的 host 文件进行域名和 ip 对应关系的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx%E7%AC%94%E8%AE%B005-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/2.png" alt="host文件"></p><p>在文件中添加一句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">8.131.49.204  www.atrox.com<br></code></pre></td></tr></table></figure></li><li><p>在nginx进行请求转发的配置（反向代理配置）</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx%E7%AC%94%E8%AE%B005-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/3.png" alt="配置反向代理"></p><p>这样当在浏览器中访问 8.131.49.204就可以被转发到8.131.49.204:8080</p></li><li><p>进入/usr/local/nginx/sbin 启动nginx。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ./nginx<br></code></pre></td></tr></table></figure></li><li><p>在网页地址栏进行测试</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx%E7%AC%94%E8%AE%B005-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/4.png" alt="测试"></p><p>这是由于不是虚拟机而是阿里云服务器，需要备案才可以访问到。</p></li></ol><blockquote><p>反向代理实例2</p></blockquote><p>实现效果：使用 nginx 反向代理， 根据访问的路径跳转到不同端口的服务中nginx 监听端口为 9001。访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:808 1；访问 <a href="http://0.0.0.1/">http://1</a> 27.0.0.1:9001/vod/ 直接跳转到 127.0.0.1:808 2</p><p><strong>准备工作</strong>：</p><ol><li><p>第一步，准备两个 tomcat ，一个 8001 端口，一个 8002 端口，并准备好测试的页面</p></li><li><p>第二步，修改 nginx 的配置文件在http 块中添加 server{}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>listen  9001;<br>server_name  localhost;<br><br>location  ~  /edu/  &#123;<br>proxy_pass  http://localhost:8001;<br>&#125;<br><br>location  ~  /vod/  &#123;<br>proxy_pass  http://localhost:8002;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>location指令说明</strong></p><p>该指令用于匹配 URL。 语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">location  [ = | ~ | ~* | ^~] uri &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</li><li>~：用于表示 uri 包含正则表达式，并且区分大小写。</li><li>~*：用于表示 uri 包含正则表达式，并且不区分大小写。</li><li>^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location块中的正则 uri 和请求字符串做匹配。</li></ol><p>*<em>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~</em> 标识。**</p>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx笔记04-Nginx配置文件</title>
    <link href="/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B004-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B004-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h2><blockquote><p>nginx配置文件所在位置：/usr/local/nginx/conf/nginx.conf</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZ2zeh7ydg2bbydds175q0Z sbin]<span class="hljs-comment"># cd /usr/local/nginx/conf</span><br>[root@iZ2zeh7ydg2bbydds175q0Z conf]<span class="hljs-comment"># ls</span><br>fastcgi.conf            koi-win             scgi_params<br>fastcgi.conf.default    mime.types          scgi_params.default<br>fastcgi_params          mime.types.default  uwsgi_params<br>fastcgi_params.default  nginx.conf          uwsgi_params.default<br>koi-utf                 nginx.conf.default  win-utf<br></code></pre></td></tr></table></figure><blockquote><p>nginx配置文件的3个组成部分</p></blockquote><p><strong>第一部分</strong>：<strong>全局块</strong></p><p>​    从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括    配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID存放路径、日志存放路径和类型    以及配置文件的引入等。</p><p>​    比如，这一行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">worker_processes  1;<br></code></pre></td></tr></table></figure><p>​    这是 Nginx 服务器并发处理服务的关键配置， work_process 值越大，可以支持的并发处理量也越多，但是会    受到硬件、软件等设备的制约。</p><p><strong>第二部分</strong>：<strong>events块</strong></p><p>​    events 块涉及的指令主要影响 Nginx服务器与用户的网络连接，常用的设置包    括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接受多个网    络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持    的最大连接数。</p><p>​    比如，这一配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">events &#123;<br>worker_connections 1024;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    这个配置表示每个 work process 支持的最大连接数是1024.</p><p><strong>第三部分</strong>：<strong>http块</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br><br>    sendfile        on;<br>    #tcp_nopush     on;<br><br>    #keepalive_timeout  0;<br>    keepalive_timeout  65;<br><br>    #gzip  on;<br><br>        server_name  localhost;<br><br>        #charset koi8-r;<br><br>        location / &#123;<br>            root   html;<br>            index  index.html index.htm;<br>        &#125;<br><br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>这一块是 Nginx 服务器配置最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。需要注意的是：http块也包括 <strong>http全局块、server块</strong>。</p><ul><li><p><strong>http全局块</strong></p><p>http全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p></li><li><p><strong>server块</strong></p><p>这块和虚拟主机有密切的联系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生式为了节省互联网服务器硬件成本。</p><p>每个 http 块可以包括多个 server块，而每个 server 块就相当于一个虚拟主机。</p><p>而每个 server 块也分为<strong>全局 server 块</strong>，以及可以同时包含多个 <strong>location 块</strong>。 </p><ol><li><p><strong>全局 server 块</strong></p><p>最常见的配置是本虚拟主机的监听配置和本虚拟主机的名称或IP配置。</p></li><li><p><strong>location 块</strong></p><p>一个 server 块可以配置多个 location 块。</p><p>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是IP别名）之外的字符串（例如：前面的/uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p></li></ol></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx笔记03-Nginx常用命令</title>
    <link href="/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B003-Nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/posts/2021/01/24/Nginx%E7%AC%94%E8%AE%B003-Nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="nginx操作的常用命令"><a href="#nginx操作的常用命令" class="headerlink" title="nginx操作的常用命令"></a>nginx操作的常用命令</h2><ol><li><p>使用nginx操作命令前提：进入nginx的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z ~]# cd /usr/local/nginx/sbin<br></code></pre></td></tr></table></figure></li><li><p>查看nginx的版本号: ./nginx -v</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ./nginx -v<br>nginx version: nginx/1.18.0<br></code></pre></td></tr></table></figure></li><li><p>启动nginx：./nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ./nginx<br>[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ps -ef|grep nginx<br>root     15248     1  0 12:25 ?        00:00:00 nginx: master process ./nginx<br>nobody   15249 15248  0 12:25 ?        00:00:00 nginx: worker process<br>root     15255 15156  0 12:25 pts/4    00:00:00 grep --color=auto nginx<br></code></pre></td></tr></table></figure></li><li><p>关闭nginx：./nginx -s stop</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ps -ef|grep nginx<br>root     11960     1  0 11:34 ?        00:00:00 nginx: master process ./nginx<br>nobody   11961 11960  0 11:34 ?        00:00:00 nginx: worker process<br>root     15198 15156  0 12:24 pts/4    00:00:00 grep --color=auto nginx<br>[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ./nginx -s stop<br>[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ps -ef|grep nginx<br>root     15211 15156  0 12:24 pts/4    00:00:00 grep --color=auto nginx<br></code></pre></td></tr></table></figure></li><li><p>重新加载nginx：./nginx -s reload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ./nginx -s reload<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx笔记02-Linux系统安装nginx</title>
    <link href="/posts/2021/01/23/Nginx%E7%AC%94%E8%AE%B002-Linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85nginx/"/>
    <url>/posts/2021/01/23/Nginx%E7%AC%94%E8%AE%B002-Linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h2><ol><li><p>使用远程连接工具连接到服务器。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx笔记02-Linux系统安装nginx/1.png" alt="xshell连接服务器" style="zoom:80%;"></li><li><p>去nginx官网：<a href="https://nginx.org/%E4%B8%8B%E8%BD%BD">https://nginx.org/下载</a></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx笔记02-Linux系统安装nginx/2.png" alt="下载nginx" style="zoom:80%;"></li><li><p>先别急着解压，先要下载关于nginx的素材。</p></li><li><p>下载pcre库，下载：<a href="https://ftp.pcre.org/pub/pcre/">https://ftp.pcre.org/pub/pcre/</a></p><ul><li><p>将pcre压缩包发送到服务器，解压。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx笔记02-Linux系统安装nginx/3.png" alt="发送到服务器" style="zoom:80%;"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zxvf pcre2-10.36.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>进入解压后文件目录，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure<br></code></pre></td></tr></table></figure></li><li><p>执行编译安装命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make &amp;&amp; make install<br></code></pre></td></tr></table></figure></li><li><p>安装完成后，检查版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z pcre2-10.36]# pcre-config --version<br>8.42<br></code></pre></td></tr></table></figure></li></ul></li><li><p>安装其他的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel<br></code></pre></td></tr></table></figure></li><li><p>接下来安装Nginx</p><ul><li><p>将nginx安装包发送到服务器</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx笔记02-Linux系统安装nginx/4.png" alt="发送到服务器" style="zoom:80%;"></li><li><p>解压缩nginx包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar zxvf nginx-1.18.0.tar.gz <br></code></pre></td></tr></table></figure></li><li><p>进入解压后文件目录，执行命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure<br></code></pre></td></tr></table></figure></li><li><p>执行编译安装命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make &amp;&amp; make install<br></code></pre></td></tr></table></figure></li></ul></li><li><p>安装成功后，在/usr/local中多出一个文件夹niginx，在nginx目录下有sbin目录其中就有启动脚本。</p></li><li><p>启动测试，进入/usr/local/nginx/sbin文件夹，执行执行命令并查看进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ./nginx<br>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>nginx: [emerg] still could not bind()<br>[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ps -ef|grep nginx<br>root     10482 31417  0 11:13 pts/0    00:00:00 grep --color=auto nginx<br></code></pre></td></tr></table></figure></li><li><p>发现80端口被占用，进入/usr/local/niginx/conf/nginx.conf文件修改端口号为84，同时在阿里云服务器开放84端口。</p></li><li><p>再次测试启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z ~]# cd /usr/local/nginx/sbin<br>[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ./nginx<br>[root@iZ2zeh7ydg2bbydds175q0Z sbin]# ps -ef|grep nginx<br>root     11960     1  0 11:34 ?        00:00:00 nginx: master process ./nginx<br>nobody   11961 11960  0 11:34 ?        00:00:00 nginx: worker process<br>root     12966 12622  0 11:50 pts/2    00:00:00 grep --color=auto nginx<br></code></pre></td></tr></table></figure></li><li><p>防火墙设置</p><ul><li><p>开启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start firewalld<br></code></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop firewalld<br></code></pre></td></tr></table></figure></li><li><p>查看开放的端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --list-all<br></code></pre></td></tr></table></figure></li><li><p>设置开放的端口号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo firewall-cmd --add-port=84/tcp --permanent<br></code></pre></td></tr></table></figure></li><li><p>重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --reload<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx笔记01-nginx简介</title>
    <link href="/posts/2021/01/23/Nginx%E7%AC%94%E8%AE%B001-nginx%E7%AE%80%E4%BB%8B/"/>
    <url>/posts/2021/01/23/Nginx%E7%AC%94%E8%AE%B001-nginx%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><blockquote><p>Nginx概述</p></blockquote><p>Nginx (“engine x”)是一个高性能的 HTTP 和反向代理服务器 特点是占有内存少，并发能力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p><blockquote><p>Nginx作为web服务器</p></blockquote><p>Nginx可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl 、 php等。但是不支持 java 。 Java 程序只能通过与 tomcat 配合完成。 Nginx 专为性能优化而开发，性能是其最重要的考量 实现上非常注重效率 ，能经受高负载的考验 有报告表明能支持高达 50,000 个并发连接数。</p><blockquote><p>正向代理</p></blockquote><p>Nginx不仅可以做反向代理，实现负载均衡，还能用作正向代理来进行上网等功能。</p><p>正向代理：如果把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问Internet，需要通过代理服务器来访问，这种代理服务就称为正向代理。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx%E7%AC%94%E8%AE%B001-nginx%E7%AE%80%E4%BB%8B/1.png" alt="正向代理"></p><blockquote><p>反向代理</p></blockquote><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问。我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端。此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器的IP地址。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx%E7%AC%94%E8%AE%B001-nginx%E7%AE%80%E4%BB%8B/2.png" alt="反向代理"></p><blockquote><p>负载均衡</p></blockquote><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。</p><p>这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易造成服务器直接崩溃。很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？</p><p>我们首先想到的可能是升级服务器的配置，比如提高CPU执行频率，加大内存等提高机器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能够满足需求的。那么怎么办呢？</p><p> 上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题的办法行不通了，那么横向增加服务器的数量呢？这时候集群的概念产生了，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的<strong>负载均</strong>衡。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx%E7%AC%94%E8%AE%B001-nginx%E7%AE%80%E4%BB%8B/3.png" alt="负载均衡"></p><blockquote><p>动静分离</p></blockquote><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Nginx%E7%AC%94%E8%AE%B001-nginx%E7%AE%80%E4%BB%8B/4.png" alt="动静分离"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch笔记09-SpringBoot集成ElasticSearch</title>
    <link href="/posts/2021/01/23/ElasticSearch%E7%AC%94%E8%AE%B009-SpringBoot%E9%9B%86%E6%88%90ElasticSearch/"/>
    <url>/posts/2021/01/23/ElasticSearch%E7%AC%94%E8%AE%B009-SpringBoot%E9%9B%86%E6%88%90ElasticSearch/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot集成ElasticSearch"><a href="#SpringBoot集成ElasticSearch" class="headerlink" title="SpringBoot集成ElasticSearch"></a>SpringBoot集成ElasticSearch</h2><blockquote><p>找文档</p></blockquote><p>在官网的文档中找到<code>ElasticSearch CLients</code>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记09-SpringBoot集成ElasticSearch/1.png" alt="ElasticSearch CLients" style="zoom:67%;"><p>点进去之后，选择第一个 Java REST Client</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记09-SpringBoot集成ElasticSearch/2.png" alt="Java REST Client" style="zoom:67%;"><p>我们选择高级的客户端。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记09-SpringBoot集成ElasticSearch/3.png" alt="高级客户端" style="zoom:67%;"><ol><li><p>找到了原生的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.10.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>找对象</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记09-SpringBoot集成ElasticSearch/4.png" alt="对象" style="zoom:67%;"></li><li><p>分析这个类中的方法即可。</p></li></ol><blockquote><p>配置基本的项目</p></blockquote><ol><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 自定义ES版本依赖,保证和本地一致 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.10.2<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- elasticsearch依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>放到spring中当做bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title">restHighLevelClient</span><span class="hljs-params">()</span> </span>&#123;<br>        RestHighLevelClient client = <span class="hljs-keyword">new</span> RestHighLevelClient(<br>            RestClient.builder(<br>                <span class="hljs-keyword">new</span> HttpHost(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9200</span>, <span class="hljs-string">&quot;http&quot;</span>)));<br>        <span class="hljs-keyword">return</span> client;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtroxEsApiApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>关于索引的API操作</p></blockquote><ol><li><p>创建索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试索引的创建</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCreateIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// 1. 创建索引请求</span><br>    CreateIndexRequest request = <span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;atrox_index&quot;</span>);<br>    <span class="hljs-comment">// 2. 执行创建请求</span><br>    CreateIndexResponse createIndexResponse =<br>        client.indices().create(request, RequestOptions.DEFAULT);<br>    System.out.println(createIndexResponse);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记09-SpringBoot集成ElasticSearch/5.png" alt="结果" style="zoom:67%;"></li><li><p>获取索引，判断是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试获取索引，判断是否存在</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExistIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    GetIndexRequest request = <span class="hljs-keyword">new</span> GetIndexRequest(<span class="hljs-string">&quot;yonghu&quot;</span>);<br>    <span class="hljs-keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);<br>    System.out.println(exists);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试删除索引</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    DeleteIndexRequest request = <span class="hljs-keyword">new</span> DeleteIndexRequest(<span class="hljs-string">&quot;atrox_index&quot;</span>);<br>    AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);<br>    System.out.println(delete.isAcknowledged());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>关于文档的API操作</p></blockquote><ol><li><p>添加文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试添加文档</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// 创建对象</span><br>    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;乔威&quot;</span>, <span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 创建请求</span><br>    IndexRequest request = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;atrox_index&quot;</span>);<br>    <span class="hljs-comment">// 规则 put/atrox_index/_doc/1</span><br>    request.id(<span class="hljs-string">&quot;1&quot;</span>);<br>    request.timeout(TimeValue.timeValueSeconds(<span class="hljs-number">1</span>));<br>    <span class="hljs-comment">// 将数据放入请求，json数据</span><br>    request.source(JSON.toJSONString(user), XContentType.JSON);<br>    <span class="hljs-comment">// 客户端发送请求，获取响应结果</span><br>    IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);<br>    System.out.println(indexResponse.toString());<br>    System.out.println(indexResponse.status());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取文档，判断是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取文档，判断是否存在</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testExistDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    GetRequest getRequest = <span class="hljs-keyword">new</span> GetRequest(<span class="hljs-string">&quot;atrox_index&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>    <span class="hljs-comment">// 不获取返回的 _source 的上下文</span><br>    getRequest.fetchSourceContext(<span class="hljs-keyword">new</span> FetchSourceContext(<span class="hljs-keyword">false</span>));<br>    getRequest.storedFields(<span class="hljs-string">&quot;_none_&quot;</span>);<br>    <span class="hljs-keyword">boolean</span> exists = client.exists(getRequest, RequestOptions.DEFAULT);<br>    System.out.println(exists);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取文档的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取文档的信息</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    GetRequest getRequest = <span class="hljs-keyword">new</span> GetRequest(<span class="hljs-string">&quot;atrox_index&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>    GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 打印文档内容</span><br>    System.out.println(getResponse.getSourceAsString());<br>    System.out.println(getResponse);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;age&quot;</span>:20,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;乔威&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;_index&quot;</span>:<span class="hljs-string">&quot;atrox_index&quot;</span>,<span class="hljs-string">&quot;_type&quot;</span>:<span class="hljs-string">&quot;_doc&quot;</span>,<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;_version&quot;</span>:1,<span class="hljs-string">&quot;_seq_no&quot;</span>:0,<span class="hljs-string">&quot;_primary_term&quot;</span>:1,<span class="hljs-string">&quot;found&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;_source&quot;</span>:&#123;<span class="hljs-string">&quot;age&quot;</span>:20,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;乔威&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure></li><li><p>更新文档的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 更新文档的信息</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    UpdateRequest updateRequest = <span class="hljs-keyword">new</span> UpdateRequest(<span class="hljs-string">&quot;atrox_index&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>    updateRequest.timeout(<span class="hljs-string">&quot;1s&quot;</span>);<br>    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;剑魔&quot;</span>, <span class="hljs-number">200</span>);<br>    updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);<br>    UpdateResponse updateResponse = client.update(updateRequest, RequestOptions.DEFAULT);<br>    System.out.println(updateResponse.status());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>删除文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除文档</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    DeleteRequest request = <span class="hljs-keyword">new</span> DeleteRequest(<span class="hljs-string">&quot;atrox_index&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>    request.timeout(<span class="hljs-string">&quot;1s&quot;</span>);<br>    DeleteResponse deleteResponse = client.delete(request, RequestOptions.DEFAULT);<br>    System.out.println(deleteResponse);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>批量插入文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 真实项目：批量插入数据</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBulkRequest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    BulkRequest bulkRequest = <span class="hljs-keyword">new</span> BulkRequest();<br>    bulkRequest.timeout(<span class="hljs-string">&quot;10s&quot;</span>);<br>    ArrayList&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;qiaowei1&quot;</span>,<span class="hljs-number">3</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;qiaowei2&quot;</span>,<span class="hljs-number">3</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;qiaowei3&quot;</span>,<span class="hljs-number">3</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;qiaowei4&quot;</span>,<span class="hljs-number">3</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;qiaowei5&quot;</span>,<span class="hljs-number">3</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; userList.size(); i++) &#123;<br>        bulkRequest.add(<br>            <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;atrox_index&quot;</span>)<br>            .id(<span class="hljs-string">&quot;&quot;</span>+(i+<span class="hljs-number">1</span>))<br>            .source(JSON.toJSONString(userList.get(i)),XContentType.JSON)<br>        );<br>    &#125;<br>    BulkResponse bulkResponse = client.bulk(bulkRequest, RequestOptions.DEFAULT);<br>    System.out.println(bulkResponse.hasFailures());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSearch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;atrox_index&quot;</span>);<br>    <span class="hljs-comment">// 构建搜索条件</span><br>    SearchSourceBuilder sourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br>    <span class="hljs-comment">// 可以使用 QueryBuilders工具类来实现查询条件</span><br>    <span class="hljs-comment">// 匹配所有</span><br>    <span class="hljs-comment">//MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span><br>    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;qiaowei1&quot;</span>);<br>    sourceBuilder.query(termQueryBuilder);<br>    sourceBuilder.highlighter();<br>    sourceBuilder.timeout(<span class="hljs-keyword">new</span> TimeValue(<span class="hljs-number">60</span>, TimeUnit.SECONDS));<br>    searchRequest.source(sourceBuilder);<br>    SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br>    System.out.println(JSON.toJSONString(searchResponse.getHits()));<br>    System.out.println(<span class="hljs-string">&quot;============================&quot;</span>);<br>    <span class="hljs-keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;<br>        System.out.println(documentFields.getSourceAsMap());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;fragment&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;hits&quot;</span>:[&#123;<span class="hljs-string">&quot;fields&quot;</span>:&#123;&#125;,<span class="hljs-string">&quot;fragment&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;highlightFields&quot;</span>:&#123;&#125;,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;matchedQueries&quot;</span>:[],<span class="hljs-string">&quot;primaryTerm&quot;</span>:0,<span class="hljs-string">&quot;rawSortValues&quot;</span>:[],<span class="hljs-string">&quot;score&quot;</span>:1.3862942,<span class="hljs-string">&quot;seqNo&quot;</span>:-2,<span class="hljs-string">&quot;sortValues&quot;</span>:[],<span class="hljs-string">&quot;sourceAsMap&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;qiaowei1&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:3&#125;,<span class="hljs-string">&quot;sourceAsString&quot;</span>:<span class="hljs-string">&quot;&#123;\&quot;age\&quot;:3,\&quot;name\&quot;:\&quot;qiaowei1\&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;sourceRef&quot;</span>:&#123;<span class="hljs-string">&quot;fragment&quot;</span>:<span class="hljs-literal">true</span>&#125;,<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;_doc&quot;</span>,<span class="hljs-string">&quot;version&quot;</span>:-1&#125;],<span class="hljs-string">&quot;maxScore&quot;</span>:1.3862942,<span class="hljs-string">&quot;totalHits&quot;</span>:&#123;<span class="hljs-string">&quot;relation&quot;</span>:<span class="hljs-string">&quot;EQUAL_TO&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>:1&#125;&#125;<br>============================<br>&#123;name=qiaowei1, age=3&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch笔记08-文档基本操作</title>
    <link href="/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B008-%E6%96%87%E6%A1%A3%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B008-%E6%96%87%E6%A1%A3%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="关于文档的操作"><a href="#关于文档的操作" class="headerlink" title="关于文档的操作"></a>关于文档的操作</h2><blockquote><p>基本操作</p></blockquote><ol><li><p><strong>添加数据</strong>，向yonghu索引表中添加类型为user的一条数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /yonghu/user/1<br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;乔威&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">20</span>,<br>  <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;simple code&quot;</span>,<br>  <span class="hljs-attr">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;技术宅&quot;</span>,<span class="hljs-string">&quot;自燃&quot;</span>,<span class="hljs-string">&quot;LOL&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/1.png" alt="添加数据" style="zoom: 80%;"><p>后面，再添加两条数据。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B008-%E6%96%87%E6%A1%A3%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/data.png" alt="数据"></p></li><li><p>获取数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET yonghu/user/1<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/get.png" alt="获取数据" style="zoom:67%;"></li><li><p>更新数据 PUT</p><p>将3号剑魔的name更新为atrox。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /yonghu/user/3<br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;atrox&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">3000</span>,<br>  <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;灭绝的死寂&quot;</span>,<br>  <span class="hljs-attr">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;暗裔&quot;</span>,<span class="hljs-string">&quot;剑气&quot;</span>,<span class="hljs-string">&quot;大灭&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/update.png" alt="更新数据" style="zoom:67%;"></li><li><p>更新数据POST  _update</p><p>将3号atrox的name改回剑魔</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">POST yonghu/user/3/_update<br>&#123;<br>  <span class="hljs-attr">&quot;doc&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;剑魔&quot;</span>,<br>    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">3000</span>,<br>    <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;灭绝的死寂&quot;</span>,<br>    <span class="hljs-attr">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;暗裔&quot;</span>,<span class="hljs-string">&quot;剑气&quot;</span>,<span class="hljs-string">&quot;大灭&quot;</span>]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/update2.png" alt="更新" style="zoom:67%;"></li><li><p>简单的条件搜索</p><p><strong>搜索name是剑魔的user</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/查.png" alt="查询" style="zoom:67%;"></li></ol><blockquote><p>复杂操作</p></blockquote><p><strong>简单的根据name查询</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/复杂.png" alt="复杂查询" style="zoom: 67%;"><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/2.png" alt="查询出两条" style="zoom:67%;"><p><strong>只查看想要的字段</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/3.png" alt="过滤字段" style="zoom:67%;"><p><strong>根据年龄排序查询</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/sort.png" alt="排序" style="zoom:67%;"><p><strong>分页查询</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/4.png" alt="分页" style="zoom:67%;"><p><strong>布尔值查询</strong>：多条件查询</p><ul><li>must（相当于and），所有的条件都要符合</li></ul><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/5.png" alt="布尔值查询" style="zoom:67%;"><ul><li><p>should（相当于or），符合某几个条件即可</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/6.png" alt="should" style="zoom:67%;"></li><li><p>must_not（相当于not）</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/not.png" alt="must_not" style="zoom:67%;"></li><li><p>过滤器filter</p><p>gt 大于<br>gte 大于等于<br>lt 小于<br>lte 小于等于</p><p> <strong>查询年龄大于2000岁且name不是大司马的用户</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/7.png" alt="过滤" style="zoom:67%;"></li><li><p>匹配多个条件</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/8.png" alt="多条件" style="zoom:67%;"></li></ul><blockquote><p>精确查询</p></blockquote><p>term查询时直接通过倒排索引指定的词条精确查找的。</p><p><strong>关于分词</strong>：</p><ul><li>term，直接查询精确的</li><li>match，会使用分词器解析！（先分析文档，然后在通过分析的文档进行查询）</li></ul><p><strong>两个类型：text keyword</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/9.png" alt="keyword" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/10.png" alt="text" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/11.png" alt="keyword字段不会被分词器解析" style="zoom:67%;"><blockquote><p>多个值匹配精确查询</p></blockquote><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/12.png" alt="多值匹配" style="zoom:67%;"><blockquote><p>高亮查询</p></blockquote><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/13.png" alt="高亮" style="zoom:67%;"><p>自定义高亮样式</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/ElasticSearch笔记08-文档基本操作/14.png" alt="自定义高亮样式" style="zoom:67%;">]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch笔记07-索引基本操作</title>
    <link href="/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B007-%E7%B4%A2%E5%BC%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B007-%E7%B4%A2%E5%BC%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="REST风格说明"><a href="#REST风格说明" class="headerlink" title="REST风格说明"></a>REST风格说明</h2><blockquote><p>基本Rest风格命令说明</p></blockquote><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>127.0.01:9200/索引名称/_create/文档id</td><td>创建文档（指定id）</td></tr><tr><td>POST</td><td>127.0.01:9200/索引名称/_doc</td><td>创建文档</td></tr><tr><td>POST</td><td>127.0.01:9200/索引名称/_update/文档id</td><td>修改文档</td></tr><tr><td>DELETE</td><td>127.0.01:9200/索引名称</td><td>删除索引</td></tr><tr><td>DELETE</td><td>127.0.01:9200/索引名称/_doc/文档id</td><td>删除文档</td></tr></tbody></table><blockquote><p>索引基本操作</p></blockquote><ol><li><p>创建一个索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /索引名/~类型名~/文档id<br>&#123;请求体&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/创建索引.png" alt="创建索引" style="zoom: 67%;"><p>在elasticsearch-head中查看该索引的添加数据，这就是可以当做数据库学习的原因。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/查看索引.png" alt="创建索引" style="zoom: 67%;"></li><li><p>那么name这个字段用不用指定类型呢？毕竟我们关系型数据库是需要指定的。</p><ul><li>字符串类型：text、keyword</li><li>数值类型：long、integer、short、byte、double、float、half、scaled float</li><li>日期类型：date</li><li>布尔值类型：boolean</li><li>二进制类型：binary</li><li>等等。。。</li></ul></li><li><p>创建索引时，指定字段的类型。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/指定类型.png" alt="指定类型" style="zoom: 67%;"></li><li><p>通过GET请求获取索引的信息。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/索引信息.png" alt="索引信息" style="zoom:67%;"></li><li><p>添加数据后，查看默认的字段类型</p><p><strong>添加数据</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/默认信息.png" alt="创建索引添加数据" style="zoom:67%;"><p><strong>如果自己的文档字段没有指定，那么ES就会给我们默认配置字段类型</strong></p></li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/默认.png" alt="默认类型" style="zoom:67%;"><ol start="7"><li><p>扩展：获得elasticsearch的一些信息。</p><p><strong>获得健康值</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/health.png" alt="健康值" style="zoom:67%;"><p><strong>查看索引的信息</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/info.png" alt="索引信息" style="zoom:80%;"></li><li><p>修改：提交还是使用PUT，然后覆盖</p><p><strong>曾经的办法</strong>：还是向test3索引添加id为1的数据，字段值改变。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/update1.png" alt="方法1" style="zoom:67%;"><p><strong>现在的方法</strong>：使用POST方法。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/update2.png" alt="方法二" style="zoom:67%;"></li><li><p>删除索引：根据请求判断是删除索引还是删除文档。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记07-索引基本操作/delete.png" alt="删除索引" style="zoom:67%;"></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch笔记06-IK分词器插件</title>
    <link href="/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B006-IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%8F%92%E4%BB%B6/"/>
    <url>/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B006-IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="IK分词器插件"><a href="#IK分词器插件" class="headerlink" title="IK分词器插件"></a>IK分词器插件</h2><blockquote><p>概念</p></blockquote><p>分词∶即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，比如“”我爱狂神”会被分为”我”∵”爱””狂””神”，这显然是不符合要求的，所以我们需要安装中文分词器ik来解决这个问题。</p><p>IK提供了两个分词算法: ik smart和ik_max_word，其中 ik_smart为最少切分，ik_max_word为最细粒度划分，一会我们测试。</p><blockquote><p>安装</p></blockquote><ol><li><p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.10.2/elasticsearch-analysis-ik-7.10.2.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.10.2/elasticsearch-analysis-ik-7.10.2.zip</a></p></li><li><p>下载完毕后，解压，放入到我们的elasticsearch插件即可。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记06-IK分词器插件/unzip.png" alt="解压" style="zoom:80%;"></li><li><p>重启观察ES</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B006-IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%8F%92%E4%BB%B6/1.png" alt="加载IK插件"></p></li><li><p>elasticsearch-plugin 可以通过这个命令来查看加载的插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">E:\environment\elasticsearch\elasticsearch-7.10.2\bin&gt;elasticsearch-plugin list<br>future versions of Elasticsearch will require Java 11; your Java version from [D:\tool\java-1.8.0-openjdk-1.8.0.252-2.b09.redhat.windows.x86_64\jre] does not meet this requirement<br>elastricsearch-analysis-ik-7.10.2<br></code></pre></td></tr></table></figure></li><li><p>使用Kibana测试。</p><p><strong>ik_smart</strong>：最小切分</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记06-IK分词器插件/smart.png" alt="最小划分" style="zoom:75%;"><p><strong>ik_max_word</strong>：最细粒度划分！穷尽词库的可能。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记06-IK分词器插件/max.png" alt="最细粒度划分" style="zoom:80%;"></li></ol><blockquote><p>IK分词器增加自己的配置：自己造的词需要自己加到字典中</p></blockquote><ol><li><p>在Ik分词器插件的配置文件中点开<code>IKAnalyzer.cfg.xml</code>，进行配置    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">properties</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>我们要去建立自己的词典，新建<code>atrox.dic</code></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记06-IK分词器插件/dic.png" alt="建立自己的词典" style="zoom:80%;"></li><li><p>在<code>IKAnalyzer.cfg.xml</code>配置自己的扩展字典</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>atrox.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>重启ES之前，分词<code>悟了个空</code>效果：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记06-IK分词器插件/2.png" alt="分词" style="zoom:80%;"></li><li><p>重启ES之后，分词<code>悟了个空</code>效果：</p><p>和上面一样，出错了，但是暂时找不到原因。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch笔记04-ES核心概念</title>
    <link href="/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B005-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <url>/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B005-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="ElasticSearch核心概念"><a href="#ElasticSearch核心概念" class="headerlink" title="ElasticSearch核心概念"></a>ElasticSearch核心概念</h2><blockquote><p>概述</p></blockquote><p>在前面的学习中，我们掌握了es是什么，同时也把es的服务已经安装启动，那么es是如何去存储数据，数据结构是什么，又是如何实现搜索的呢？我们先来聊聊Elasticsearch的相关概念吧！</p><p><strong>集群,节点,索引,类型,文档,分片,映射是什么。</strong></p><p>elasticsearch是面向文档的，关系行数据库和elasticsearch客观的对比!一切都是json。</p><table><thead><tr><th>ReationalDB</th><th>ElasticSearch</th></tr></thead><tbody><tr><td>数据库（database）</td><td>索引（indices）</td></tr><tr><td>表（tables）</td><td>types（7版本集后会被抛弃）</td></tr><tr><td>行（rows）</td><td>documents</td></tr><tr><td>字段（columns）</td><td>fields</td></tr></tbody></table><p><strong>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型先又包含多个文档(行)，每个文档中又包含多个字段(列)。</strong></p><blockquote><p>物理设计</p></blockquote><p>elasticsearch在后台把每个索引划分成多个分片，每个分片可以在集群中的不同服务器间迁移。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记05-ES核心概念/1.png" alt="集群" style="zoom:80%;"><blockquote><p>逻辑设计</p></blockquote><p>一个索引类型中，包含多个文档。比如所文档1、文档2。当我们索引一篇文章时，可以通过这样的一各顺序找到它:索引&gt;类型</p><p>文档+id，通过这个组合我们就能索引到某个具体的文档.。注意:：id不必是整数，实际上他是一个字符串.</p><table><thead><tr><th>user</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>qiaowei</td><td>20</td></tr><tr><td>2</td><td>zhangsan</td><td>20</td></tr><tr><td>3</td><td>…</td><td>…</td></tr></tbody></table><p>之前说elasticsearch是面向文档的，name就也为这索引和搜索数据的最小单位是文档，elasticsearch中，文档有几个重要属性:</p><ul><li><p>自我包含，一篇文档同时包含字段和对应值，也就是同时包含key，value。</p></li><li><p>可以是层次型的，一个文档中包含文档，复杂的逻辑实体就是这么来的。</p></li><li><p>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</p></li></ul><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要。比如一个年龄字段类型，可以是字符串也可以是整型。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中类型有时候也称为映射类型。</p><blockquote><p>类型</p></blockquote><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。类型中对于字段的定义称为映射，比如name映射为字符串类型。我们说文档是无模式的，他们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢？</p><p>elasticsearch会自动的将新的字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜。如果这个值是18，那么elasticsearch会认为他是整型。但是elasticsearch也可能猜不对，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后在使用，别整什么幺蛾子。</p><blockquote><p>索引</p></blockquote><p><strong>就是数据库</strong>。</p><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型字段和其他设置，然后他们被存储到了各个分片上了。我们来研究下分片是如何工作的。</p><p><strong>物理设计：节点和分片 如何工作</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记05-ES核心概念/2.png" alt="新建索引" style="zoom:80%;"><p>一个集群至少要有一个节点，一个节点就是一个elasticsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有5个分片(primary shard,又称主分片) 构成的，每个主分片会有一个副本(replica shard,又称复制分片)。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B005-ES%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/3.png" alt="集群"></p><p>上图是一个有3个节点的集群，可以看到主分片和对应的赋值分片都不会在同一个节点内。这样有利于如果某个节点挂掉了，数据也不至于丢失。实际上，<strong>一个分片是一个Lucene索引</strong>，一个包含<strong>倒排索引</strong>的文件目录。倒排索引的结构使得ElasticSearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。不过，什么是倒排索引呢？</p><blockquote><p>倒排索引</p></blockquote><p>elasticsearch使用的是一种称为倒排索引的结构，采用Lucene倒排索引作为底层。这种结构适用于快速的全文搜索，一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。例如,现在有两个文档，每个文档包含如下内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Study every day, good good up to forever   <span class="hljs-comment"># 文档一包含的内容</span><br>To forever, study every day, good good up  <span class="hljs-comment"># 文档二包含的内容</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>Study</td><td>√</td><td>x</td></tr><tr><td>To</td><td>x</td><td>x</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr><tr><td>day</td><td>√</td><td>√</td></tr><tr><td>study</td><td>x</td><td>√</td></tr><tr><td>good</td><td>√</td><td>√</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>to</td><td>√</td><td>x</td></tr><tr><td>up</td><td>√</td><td>√</td></tr></tbody></table><p>两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在,这两个包含关键字的文档都将返回。</p><p>再来看一个示例,比如我们通过博客标签来搜索博客文章.那么倒排索引列表就是这样的一个结构:</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记05-ES核心概念/4.png" alt="博客文章" style="zoom:80%;"><p>如果要搜索含有python标签的文章，那相对查找所有原始数据而言，查找倒排索引后的数据将会快的多，只需要查看标签这一栏,然后获取相关文章id即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch笔记03-ElasticSearch安装</title>
    <link href="/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B004-ElasticSearch%E5%AE%89%E8%A3%85/"/>
    <url>/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B004-ElasticSearch%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="ElasticSearch安装"><a href="#ElasticSearch安装" class="headerlink" title="ElasticSearch安装"></a>ElasticSearch安装</h2><blockquote><p>声明</p></blockquote><p>JDK最低要求版本：1.8，elasticsearch的版本和对应我们之后的Java的核心jar包。</p><blockquote><p>下载</p></blockquote><p>Elastic官网：<a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B004-ElasticSearch%E5%AE%89%E8%A3%85/elastic.png" alt="官网截图"></p><p>下载页面：<a href="https://www.elastic.co/cn/elasticsearch/">https://www.elastic.co/cn/elasticsearch/</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B004-ElasticSearch%E5%AE%89%E8%A3%85/down_elastic.png" alt="下载页面"></p><p>下载选项：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B004-ElasticSearch%E5%AE%89%E8%A3%85/down_select.png" alt="下载选项"></p><p>ElasticSearch用Windows和Linux环境下都可以学习，我们这里使用Windows学习</p><blockquote><p>安装elasticsearch</p></blockquote><ol><li><p>解压后即可使用。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B004-ElasticSearch%E5%AE%89%E8%A3%85/unzip.png" alt="解压"></p></li><li><p>熟悉目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">--bin 启动文件<br>--config 配置文件<br>|--elasticsearch.yml elasticsearch的配置文件 默认9200端口<br>|--jvm.options java虚拟机配置文件<br>|--log4j2.properties 日志配置文件<br>|--roles.yml 角色配置文件<br>|--users<br>|--users_roles<br>--lib 相关jar包<br>--moudle 功能模块<br>--plugin 插件<br>--logs 日志<br></code></pre></td></tr></table></figure></li><li><p>在bin目录下，双击<code>elasticsearch.bat</code>文件，启动elasticsearch</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记04-ElasticSearch安装/cmd.png" alt="执行" style="zoom:80%;"></li><li><p>访问<a href="http://127.0.0.1:9200/">http://127.0.0.1:9200/</a></p><p>获得json字符串：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;LAPTOP-F1JRDC9U&quot;</span>,<br>  <span class="hljs-attr">&quot;cluster_name&quot;</span>: <span class="hljs-string">&quot;elasticsearch&quot;</span>,<br>  <span class="hljs-attr">&quot;cluster_uuid&quot;</span>: <span class="hljs-string">&quot;WzTRyCYoSzGCO4BrF0L_Og&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;number&quot;</span>: <span class="hljs-string">&quot;7.10.2&quot;</span>,<br>    <span class="hljs-attr">&quot;build_flavor&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>    <span class="hljs-attr">&quot;build_type&quot;</span>: <span class="hljs-string">&quot;zip&quot;</span>,<br>    <span class="hljs-attr">&quot;build_hash&quot;</span>: <span class="hljs-string">&quot;747e1cc71def077253878a59143c1f785afa92b9&quot;</span>,<br>    <span class="hljs-attr">&quot;build_date&quot;</span>: <span class="hljs-string">&quot;2021-01-13T00:42:12.435326Z&quot;</span>,<br>    <span class="hljs-attr">&quot;build_snapshot&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;lucene_version&quot;</span>: <span class="hljs-string">&quot;8.7.0&quot;</span>,<br>    <span class="hljs-attr">&quot;minimum_wire_compatibility_version&quot;</span>: <span class="hljs-string">&quot;6.8.0&quot;</span>,<br>    <span class="hljs-attr">&quot;minimum_index_compatibility_version&quot;</span>: <span class="hljs-string">&quot;6.0.0-beta1&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;tagline&quot;</span>: <span class="hljs-string">&quot;You Know, for Search&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>安装可视化界面：es head插件</p></blockquote><ol><li><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head/archive/master.zip">https://github.com/mobz/elasticsearch-head/archive/master.zip</a></p></li><li><p>解压即可。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记04-ElasticSearch安装/head.png" alt="解压" style="zoom:75%;"></li><li><p>在此目录下执行安装命令<code>npm install  </code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure></li><li><p>安装完成后，执行启动命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm run start<br><br>&gt; elasticsearch-head@0.0.0 start E:\environment\elasticsearch\elasticsearch-head<br>-master<br>&gt; grunt server<br><br>Running <span class="hljs-string">&quot;connect:server&quot;</span> (connect) task<br>Waiting forever...<br>Started connect web server on http://localhost:9100<br></code></pre></td></tr></table></figure></li><li><p>访问<a href="http://localhost:9100，点击连接，由于端口不一致出现了跨域问题。">http://localhost:9100，点击连接，由于端口不一致出现了跨域问题。</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B004-ElasticSearch%E5%AE%89%E8%A3%85/cross.png" alt="跨域"></p></li><li><p>在elasticsearch下bin目录下<code>elasticsearch.yml</code>下添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">http:</span><br>  <span class="hljs-attr">cors:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>重启elasticsearch服务，再次连接。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B004-ElasticSearch%E5%AE%89%E8%A3%85/connect.png" alt="连接到自己的主机"></p></li></ol><p>这个head我们就可以当做数据展示的工具，后面我们所有的查询使用Kibana。</p><blockquote><p>了解 ELK</p></blockquote><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称，市面上也被成为Elastic Stack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。Logstash是ELK的中央数据流引擎，用户从不同目标（文件/数据存储/MQ）手机不同格式的数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka等）。Kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能。</p><p>市面上很多开发只要提到ELK能够一直说出它是一个日志分析架构技术栈总称，但实际上ELK不仅仅适用于日志分析，它还可以支持其他任何数据分析和手机的场景，日志分析只是更具有代表性，并非唯一性。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B004-ElasticSearch%E5%AE%89%E8%A3%85/elk.png" alt="ELK"></p><blockquote><p>安装Kibana</p></blockquote><ol><li><p>下载地址：<a href="https://www.elastic.co/cn/kibana/download">https://www.elastic.co/cn/kibana/download</a></p></li><li><p>解压即可。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记04-ElasticSearch安装/unzip2.png" alt="解压" style="zoom:67%;"></li><li><p>点击bin目录下的<code>kibana.bat</code>，进行启动。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记04-ElasticSearch安装/start.png" alt="启动" style="zoom:75%;"></li><li><p>访问<a href="http://localhost:5601/">http://localhost:5601</a></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记04-ElasticSearch安装/index.png" alt="首页" style="zoom:75%;"></li><li><p>开发工具，我们的代码写在这里</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记04-ElasticSearch安装/devt.png" alt="DevTools" style="zoom:75%;"></li><li><p>在<code>config/kibana.yaml</code>下配置汉化，重启项目变成中文。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记04-ElasticSearch安装/cn.png" alt="中文" style="zoom:75%;"></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch笔记03-ElasticSearch与Solr的区别</title>
    <link href="/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B003-ElasticSearch%E4%B8%8ESolr%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B003-ElasticSearch%E4%B8%8ESolr%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="ES和Solr的区别"><a href="#ES和Solr的区别" class="headerlink" title="ES和Solr的区别"></a>ES和Solr的区别</h2><blockquote><p>ElasticSearch简介</p></blockquote><p>Elasticsearch是一个实时分布式搜索和分析引擎，它让你以之前未有的速度处理大数据成为可能。</p><p>它用于<strong>全文搜索、结构化搜索、分析</strong>以及将这三者混合使用。</p><p>维基百科使用ElasticSearch提供<strong>全文搜索并高亮关键字</strong>，以及输入<strong>实时搜索</strong>（search-asyou-type）和<strong>搜索纠错</strong>（did-you-mean）等搜索建议功能。</p><p>英国卫报使用ElasticSearch结合用户日志和社交网络设局提供给他们的编辑以实时的反馈，以便及时了解公众对新发表的文章的回应。</p><p>StackOverflow结合全文搜索和地理位置查询，以及more-like-this功能来找到相关的问题和答案。</p><p>Github使用Elastic检索1300亿行的代码。</p><p>ElasticSearch不仅用于大型企业，它还让向DataDog以及Klout这样的创业公司最初的想法编程可扩展的解决方案。</p><p>ElasticSearch可以在你的笔记本上运行，也可以在数以百计的服务器上处理PB级别的数据。</p><p><strong>ElasticSearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被人为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</strong></p><p>但是，<strong>Lucene知识一个库</strong>，如果要使用它，必须使用Java作为开发语言并将其直接集成到应用中。更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p><p>ElasticSearch也使用Java开发并使用Lucene作为其核心来实现所有的索引和搜索的功能，但是它的目的是通过简单地<strong>Restful API</strong>来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><blockquote><p>Solr简介</p></blockquote><p>Solr是<strong>Apache下的一个顶级开源项目</strong>，采用<strong>java</strong>开发，它是<strong>基于Lucene</strong>的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。</p><p>Solr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr索引的实现方法很简单，<strong>用POST方法向Solr服务器发送一个描述Field及其内容的XML文档，Solr根据xml文档添加、删除、更新索引</strong>。Solr搜索只需要发送HTTP GET请求，然后对Solr返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</p><p>solr是基于lucene开发企业级搜索服务器，实际上就是封装了lucene。</p><p>Solr是一个独立的企业级搜索应用服务器，它对外提供<strong>类似于Web-service的API接口</strong>。用户可以通过http请求，向搜索引擎服务器提交一定格式的文件，生成索引;也可以通过提出查找请求，并得到返回结果。</p><blockquote><p>Es和Solr差别</p></blockquote><p>Elasticsearch是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能.。维基百科使用它提供全文搜索并高亮关键字，以及输入实时搜索</p><p>Solr是Apache下的一个顶级开源项目,采用Java开发，它是基于Lucene的全文搜索服务器。solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引，搜索性能进行优化。它可以独立运行，运行在tomcat 、jety等这些Servlet容器中 solr对外提供类似于Web-server的API接口。</p><blockquote><p>测试比较</p></blockquote><p><strong>当单纯的对已有数据进行搜索时，Solr更快</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记03-ElasticSearch与Solr的区别/1.png" alt="情况1" style="zoom:75%;"><p><strong>当实时建立索引时（边搜边添加索引），slor会产生IO阻塞，查询性能较差，ES则具有明显的优势。</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记03-ElasticSearch与Solr的区别/2.png" alt="情况2" style="zoom:80%;"><p><strong>随着数据量的增加，Solr的搜索效率会变得更低，而Elasticsearch却没有明显的变化。</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记03-ElasticSearch与Solr的区别/3.png" alt="情况3" style="zoom:80%;"><p>综上所述，solr的架构<code>不适合实时搜索</code>的应用。</p><p><strong>实际生产环境测试</strong></p><p>下图为将搜索引擎从solr转到Elasticsearch以后的平均查询速度有了50倍的提升。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B003-ElasticSearch%E4%B8%8ESolr%E7%9A%84%E5%8C%BA%E5%88%AB/4.png" alt="情况4"></p><blockquote><p>总结</p></blockquote><ol><li><p>es基本是<mark>开箱即用</mark>(解压就可以用了!)，非常简单。solr安装略微复杂一丢丢！</p></li><li><p>Solr利用<strong>Zookeeper进行分布式管理</strong>，而Elasticsearch自身带有分布式协调管理功能。</p></li><li><p>solr支持更多格式的数据,比如JSON、XML、CSV， 而elasticsearch仅仅支持json文件格式。</p></li><li><p>Solr官网提供的功能很多，而elasticsearch本身更注重核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好质层支撑。</p></li><li><p>Solr查询块，但更新索引时慢(即插入删除慢)，用于电商等查询多的应用；ES建立索引块(即查询慢)，即<strong>实时性查询快</strong>，用于facebook新浪等搜索。</p></li><li><p>Solr是传<strong>统搜索应用</strong>的有力解决方案，但Elasticsearch更适用于新兴的<strong>实时搜索</strong>应用。</p></li><li><p>Solr比较成熟，有一个更大、更成熟的用户群体，开发好贡献者社区，而Elasticsearch相对开发维护者较少，更新太快，学习使用成本较高。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch笔记02-概述</title>
    <link href="/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B002-%E6%A6%82%E8%BF%B0/"/>
    <url>/posts/2021/01/22/ElasticSearch%E7%AC%94%E8%AE%B002-%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>定义</p></blockquote><p>Elasticsearch，简称为es，es是一个开<strong>源的扩展的分布式全文检索引擎</strong>，他可以近乎实时的存储,检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别(大数据时代)的数据。es也<strong>使用Java并发使用Lucene作为其核心</strong>来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong> 来隐藏Lucene的复杂性，从而让全文搜索变得简单.</p><p>据国际权威的数据库产品评测机构<strong>DB Engines</strong>的统计，在2016年1月，ElasticSearch已超过Solr等,成为排名第一的搜索引擎类应用。</p><blockquote><p>历史</p></blockquote><p>多年前,一个叫做shay banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师,他便跟着去了。在他找工作的过程中，为了给妻子构建一个<strong>食谱的搜索引擎</strong>，他开始构建一个早期版本的Lucene。</p><p>基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便Java程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目,叫做”<strong>compass</strong>”。后来Shay找到一份工作，这个工作处在高性能和内存数据网络的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。然后他决定重写Compass库,使其成为一个独立的服务叫做<strong>Elasticsearch</strong>。第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。一家主营Elasticsearch的公司就此成立，他们一边提供商业支持，一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。</p><p> Shay的妻子依然等待着他的食谱搜索…….</p><blockquote><p>使用</p></blockquote><ul><li><p>维基百科，类似百度百科，全文检索、高亮、搜索推荐（权重）</p></li><li><p>The Guardian（国外新闻网站），类似搜狐新闻，用户行为日志（点击、浏览、收藏、评论 + 社交网络数据（对某某新闻的相关看法），数据分析，给到新闻文章的作者，让他知道他的文章公众反馈。</p></li><li><p>Stack Overflow（国外的程序异常讨论论坛），IT问题，程序的报错，提交上去，会有人和你讨论与回答，全文检索，搜索相关问题和答案，程序报错了，就会将报错信息粘贴到里面去，搜索有没有对应的答案。</p></li><li><p>Github（开源代码管理），搜索上千亿行代码。</p></li><li><p>电商网站，检索商品。</p></li><li><p>日志数据分析，logstash采集数据，ES进行复杂的数据分析，<mark>ELK技术，elasticSearch+logstash+kibana</mark></p></li><li><p>商品价格监控网站，用户设定某商品的价格阈值，当低于该阈值的时候，发通知给用户。比如订阅牙膏的监控，高露洁牙膏的家庭套装低于50元，就通知我去购买。</p></li><li><p>BI系统，商业智能（Business Intelligence）。比如说有个大型商场集团，BI，分析一下某某区域最近3年的用户消费金额的趋势以及用户群体的组成构成，产出相关的数据报表。</p></li><li><p>国内，站内搜索（电商、招聘、门户），IT系统搜索（OA、CEM、ERP），数据分析。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch笔记01-聊聊Doug Cutting</title>
    <link href="/posts/2021/01/21/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/"/>
    <url>/posts/2021/01/21/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/</url>
    
    <content type="html"><![CDATA[<h2 id="聊聊Doug-Cutting"><a href="#聊聊Doug-Cutting" class="headerlink" title="聊聊Doug Cutting"></a>聊聊Doug Cutting</h2><blockquote><p>本故事来自于公众号：新栆课堂</p></blockquote><p>1998年9月4日，Google公司在美国硅谷成立，正如大家所知，它是一家做搜索引擎起家的公司。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/google_brand.png" alt="Google商标"></p><p>无独有偶,一位名叫<strong>Doug Cutting</strong>的美国工程师,也迷上了<strong>搜索引擎</strong>。他做了一个用于文本搜索的函数库(姑且理解为软件的功能组件)，命名为<strong>Lucene</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/doug_cutting.png" alt="Doug Cutting"></p><p><strong>Lucene</strong>使用<strong>Java</strong>写的，目标是为各种中小型应用软件加入全文检索功能.因为好用而且<strong>开源</strong>(代码公开),非常受程序员们稀罕。</p><p>早期的时候，这个项目被发布在Doug Cutting的个人网站和SourceForge（一个开源软件网站）。后来，2001年底，Lucene成为<strong>Apache软件基金会</strong>jakarta项目的一个子项目。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/apache.png" alt="apache基金会"></p><p>2004年，Doug Cutting再接再励，在Lucene的基础上，和Apache开源伙伴Mike Cafarella合作，开发了一款可以代替当时的主流搜索的开源搜索引擎，命名为<strong>Nutch</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/nutch.png" alt="nutch"></p><p>Nutch是一个建立在<strong>Lucene核心</strong>之上的网页搜索应用程序，可以下载下来直接使用。它在Lucene的基础上加了网络爬虫和一些网页相关的功能，目的就是从一个简单的站内检索推广到全球网络的搜索上，就像Google一样。</p><p>Nutch在业界的影响力比Lucene更大。</p><p>大批网站采用了Nutch平台，<strong>大大降低了技术门槛</strong>，使低成本的普通计算机取代高价的Web服务器成为可能。甚至有一段时间，在硅谷有了一股用Nutch低成本创业的潮流。</p><p>随着时间的推移，无论是Google还是Nutch，都面临<strong>搜索对象“体积”不断增大</strong>的问题。尤其是Google，作为互联网搜索引擎，需要存储大量的网页，并<strong>不断优化自己的搜索算法，提升搜索效率</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/google.png" alt="google优化搜索"></p><p>在这个过程中，Google确实找到了不少好的办法,并且无私地分享了出来，开源是一种伟大的精神。</p><p>2003年,Google发表了一篇技术学术论文，公开介绍了自己的谷歌文件系统<strong>GFS</strong>(google File System)。这是google公司为了<strong>存储海量搜素数据</strong>而设计的<strong>专用文件系统</strong>。</p><p>第二年，2004年，Doug Cutting基于Google的GFS论文，实现了<strong>分布式文件存储系统</strong>，并将它命名为<strong>NDFS</strong>(<strong>Nutch</strong> Distributed File System)。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记01-聊聊Doug-Cutting/gfs_to_ndfs.jpg" alt="基于GFS实现NDFS" style="zoom:80%;"><p>还是2004年,Google又发表了一篇技术学术论文，介绍自己的<strong>MapReduce</strong>编程模型。这个编程模型,用于大规模数据集(大于1TB)的并行分析运算。</p><p>2005年，Doug Cutting 又<strong>基于MapReduce</strong>，在<strong>Nutch搜索引擎</strong>实现了该功能。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记01-聊聊Doug-Cutting/mapreduce.png" alt="MapReduce模型" style="zoom:80%;"><p>2006年，当时依然很厉害的<strong>Yahoo(雅虎)公司</strong>，招安了Doug Cutting。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/yahoo.png" alt="雅虎公司商标"></p><p>加盟Yahoo之后，Doug Cutting将<strong>NDFS</strong>和<strong>MapReduce</strong>进行了升级改造，并重新命名为<strong>Hadoop</strong>（NDFS也改名为HDFS，Hadoop Distributed File System）。</p><p>这个，就是后来大名鼎鼎的大数据框架系统——Hadoop的由来。而Doug Cutting，则被人们称为<strong>Hadoop之父</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/hadoop_father.png" alt="Hadoop之父"></p><p>我们继续叙述，还是2006年，Google又发表了一篇论文。这次，它们介绍了自己的<strong>BigTable</strong>。这是一种<strong>分布式数据存储系统</strong>，一种用来处理海量数据的<strong>非关系型数据库</strong>。</p><p>Doug Cutting当然没有放过，在自己的<strong>Hadoop</strong>系统里面，引入了<strong>BigTable</strong>，并命名为<strong>HBase</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch笔记01-聊聊Doug-Cutting/bigTable_to_hbase.png" alt="HBase" style="zoom:80%;"><p>好吧，Doug Cutting反正就是紧跟Google时代步伐，你出什么，我学什么。</p><p>所以，Hadoop的核心部分，基本上都有Google的影子。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN/source/_posts/ElasticSearch%E7%AC%94%E8%AE%B001-%E8%81%8A%E8%81%8ADoug-Cutting/google_hadoop.png" alt="google与hadoop联系"></p><p>2008年1月，Hadoop成功上位，正式成为Apache基金会的顶级项目。同年2月，Yahoo宣布建成了一个拥有1万个内核的Hadoop集群，并将自己的搜索引擎产品部署在上面。7月，Hadoop打破世界纪录，成为最快排序1TB数据的系统，用时209秒。</p><p>此后，<strong>Hadoop便进入了高速发展期，直至现在</strong>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记17-缓存穿透与雪崩</title>
    <link href="/posts/2021/01/21/Redis%E7%AC%94%E8%AE%B017-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E4%B8%8E%E9%9B%AA%E5%B4%A9/"/>
    <url>/posts/2021/01/21/Redis%E7%AC%94%E8%AE%B017-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E4%B8%8E%E9%9B%AA%E5%B4%A9/</url>
    
    <content type="html"><![CDATA[<h2 id="缓存穿透与雪崩"><a href="#缓存穿透与雪崩" class="headerlink" title="缓存穿透与雪崩"></a>缓存穿透与雪崩</h2><h3 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h3><blockquote><p>概念</p></blockquote><p>在默认情况下，用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再在数据库中进行查找，数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）缓存都没有命中的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。网络安全中也有人恶意使用这种手段进行攻击被称为洪水攻击。</p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong></p><p>对所有可能查询的参数以Hash的形式存储，以便快速确定是否存在这个值，在控制层先进行拦截校验，校验不通过直接打回，减轻了存储系统的压力。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B017-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E4%B8%8E%E9%9B%AA%E5%B4%A9/1.png" alt="布隆过滤器"></p><p><strong>缓存空对象</strong></p><p>一次请求若在缓存和数据库中都没找到，就在缓存中方一个空对象用于处理后续这个请求。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B017-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E4%B8%8E%E9%9B%AA%E5%B4%A9/2.png" alt="缓存空对象"></p><p> 这样做有一个缺陷：存储空对象也需要空间，大量的空对象会耗费一定的空间，存储效率并不高。解决这个缺陷的方式就是设置较短过期时间</p><p>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p><h3 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h3><blockquote><p>概念</p></blockquote><p> 相较于缓存穿透，缓存击穿的目的性更强，一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。这就是缓存被击穿，只是针对其中某个key的缓存不可用而导致击穿，但是其他的key依然可以使用缓存响应。</p><p> 比如热搜排行上，一个热点新闻被同时大量访问就可能导致缓存击穿。</p><blockquote><p>解决方案</p></blockquote><ol><li><p><strong>设置热点数据永不过期</strong></p><p>这样就不会出现热点数据过期的情况，但是当Redis内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。</p></li><li><p><strong>加互斥锁(分布式锁)</strong></p><p>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。</p></li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>概念</p></blockquote><p>大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B017-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E4%B8%8E%E9%9B%AA%E5%B4%A9/3.png" alt="缓存雪崩"></p><blockquote><p>解决方案</p></blockquote><ul><li><p>redis高可用</p><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</p></li><li><p>限流降级</p><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p></li><li><p>数据预热</p><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记16-哨兵模式</title>
    <link href="/posts/2021/01/21/Redis%E7%AC%94%E8%AE%B016-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
    <url>/posts/2021/01/21/Redis%E7%AC%94%E8%AE%B016-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>更多信息参考博客：<a href="https://www.jianshu.com/p/06ab9daf921d">https://www.jianshu.com/p/06ab9daf921d</a></p><p><strong>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。</strong>这不是一种推荐的方式，更多时候，我们优先考虑<strong>哨兵模式</strong>。</p><p>单机单个哨兵</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B016-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/1.png" alt="单哨兵"></p><p>哨兵的作用：</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机。</li></ul><p>多哨兵模式</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B016-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/2.png" alt="多哨兵"></p><p>哨兵的核心配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sentinel monitor mymaster 127.0.0.1 6379 1<br></code></pre></td></tr></table></figure><p>数字1表示 ：当一个哨兵主观认为主机断开，就可以客观认为主机故障，然后开始选举新的主机</p><blockquote><p>测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-sentinel xxx/sentinel.conf<br></code></pre></td></tr></table></figure><p>成功启动哨兵模式</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B016-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/3.png" alt="启动哨兵模式"></p><p>此时哨兵监视着我们的主机6379，当我们断开主机后：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B016-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/4.png" alt="选取新主机"></p><blockquote><p>哨兵模式优缺点</p></blockquote><p><strong>优点：</strong></p><ol><li>哨兵集群，基于主从复制模式，所有主从复制的优点，它都有</li><li>主从可以切换，故障可以转移，系统的可用性更好</li><li>哨兵模式是主从模式的升级，手动到自动，更加健壮</li></ol><p><strong>缺点：</strong></p><ol><li>Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多配置项</li></ol><blockquote><p>哨兵模式的全部配置</p></blockquote><p>完整的哨兵模式配置文件 sentinel.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Example sentinel.conf</span><br> <br><span class="hljs-meta">#</span><span class="bash"> 哨兵sentinel实例运行的端口 默认26379</span><br>port 26379<br> <br><span class="hljs-meta">#</span><span class="bash"> 哨兵sentinel的工作目录</span><br>dir /tmp<br> <br><span class="hljs-meta">#</span><span class="bash"> 哨兵sentinel监控的redis主节点的 ip port</span> <br><span class="hljs-meta">#</span><span class="bash"> master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符<span class="hljs-string">&quot;.-_&quot;</span>组成。</span><br><span class="hljs-meta">#</span><span class="bash"> quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><br><span class="hljs-meta">#</span><span class="bash"> sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br>sentinel monitor mymaster 127.0.0.1 6379 1<br> <br><span class="hljs-meta">#</span><span class="bash"> 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><br><span class="hljs-meta">#</span><span class="bash"> 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><br><span class="hljs-meta">#</span><span class="bash"> sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd<br> <br> <br><span class="hljs-meta">#</span><span class="bash"> 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><br><span class="hljs-meta">#</span><span class="bash"> sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br>sentinel down-after-milliseconds mymaster 30000<br> <br><span class="hljs-meta">#</span><span class="bash"> 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span><br>这个数字越小，完成failover所需的时间就越长，<br>但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。<br>可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。<br><span class="hljs-meta">#</span><span class="bash"> sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span><br>sentinel parallel-syncs mymaster 1<br><span class="hljs-meta">#</span><span class="bash"> 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span> <br><span class="hljs-meta">#</span><span class="bash">1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><br><span class="hljs-meta">#</span><span class="bash">2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><br><span class="hljs-meta">#</span><span class="bash">3.当想要取消一个正在进行的failover所需要的时间。</span>  <br><span class="hljs-meta">#</span><span class="bash">4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><span class="hljs-meta">#</span><span class="bash"> 默认三分钟</span><br><span class="hljs-meta">#</span><span class="bash"> sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br>sentinel failover-timeout mymaster 180000<br> <br><span class="hljs-meta">#</span><span class="bash"> SCRIPTS EXECUTION</span><br> <br><span class="hljs-meta">#</span><span class="bash">配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><br><span class="hljs-meta">#</span><span class="bash">对于脚本的运行结果有以下规则：</span><br><span class="hljs-meta">#</span><span class="bash">若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><br><span class="hljs-meta">#</span><span class="bash">若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><br><span class="hljs-meta">#</span><span class="bash">如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><br><span class="hljs-meta">#</span><span class="bash">一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><br> <br><span class="hljs-meta">#</span><span class="bash">通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><br><span class="hljs-meta">#</span><span class="bash">这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span><br><span class="hljs-meta">#</span><span class="bash">一个是事件的类型，</span><br><span class="hljs-meta">#</span><span class="bash">一个是事件的描述。</span><br><span class="hljs-meta">#</span><span class="bash">如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><br><span class="hljs-meta">#</span><span class="bash">通知脚本</span><br><span class="hljs-meta">#</span><span class="bash"> sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br>  sentinel notification-script mymaster /var/redis/notify.sh<br> <br><span class="hljs-meta">#</span><span class="bash"> 客户端重新配置主节点参数脚本</span><br><span class="hljs-meta">#</span><span class="bash"> 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><br><span class="hljs-meta">#</span><span class="bash"> 以下参数将会在调用脚本时传给脚本:</span><br><span class="hljs-meta">#</span><span class="bash"> &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span><br><span class="hljs-meta">#</span><span class="bash"> 目前&lt;state&gt;总是“failover”,</span><br><span class="hljs-meta">#</span><span class="bash"> &lt;role&gt;是“leader”或者“observer”中的一个。</span> <br><span class="hljs-meta">#</span><span class="bash"> 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><br><span class="hljs-meta">#</span><span class="bash"> 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><br><span class="hljs-meta">#</span><span class="bash"> sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记15-主从复制</title>
    <link href="/posts/2021/01/21/Redis%E7%AC%94%E8%AE%B015-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/posts/2021/01/21/Redis%E7%AC%94%E8%AE%B015-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p> 主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（Master/Leader）,后者称为从节点（Slave/Follower）， 数据的复制是单向的！只能由主节点复制到从节点（主节点以写为主、从节点以读为主）。</p><p>默认情况下，每台Redis服务器都是主节点，一个主节点可以有0个或者多个从节点，但每个从节点只能由一个主节点。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余的方式。</li><li>故障恢复：当主节点故障时，从节点可以暂时替代主节点提供服务，是一种服务冗余的方式</li><li>负载均衡：在主从复制的基础上，配合读写分离，由主节点进行写操作，从节点进行读操作，分担服务器的负载；尤其是在多读少写的场景下，通过多个从节点分担负载，提高并发量。</li><li>高可用基石：主从复制还是哨兵和集群能够实施的基础。</li></ol><h3 id="为什么使用集群"><a href="#为什么使用集群" class="headerlink" title="为什么使用集群"></a>为什么使用集群</h3><ol><li>单台服务器难以负载大量的请求</li><li>单台服务器故障率高，系统崩坏概率大</li><li>单台服务器内存容量有限。</li></ol><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>我们在讲解配置文件的时候，注意到有一个<code>replication</code>模块 (见Redis.conf中第8条)</p><p>查看当前库的信息：<code>info replication</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:master <span class="hljs-comment"># 角色</span><br>connected_slaves:0 <span class="hljs-comment"># 从机数量</span><br>master_replid:3b54deef5b7b7b7f7dd8acefa23be48879b4fcff<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:0<br>second_repl_offset:-1<br>repl_backlog_active:0<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:0<br>repl_backlog_histlen:0<br></code></pre></td></tr></table></figure><p>既然需要启动多个服务，就需要多个配置文件。每个配置文件对应修改以下信息：</p><ul><li>端口号</li><li>pid文件名</li><li>日志文件名</li><li>rdb文件名</li></ul><p>启动单机多服务集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZ2zeh7ydg2bbydds175q0Z bin]<span class="hljs-comment"># ps -ef|grep redis</span><br>root     24743 24236  0 09:35 pts/0    00:00:00 redis-cli -a zuiweizhiming666 -p 6379<br>root     28082     1  0 10:27 ?        00:00:00 redis-server *:6379<br>root     28092     1  0 10:27 ?        00:00:00 redis-server *:6380<br>root     28186     1  0 10:29 ?        00:00:00 redis-server *:6381<br></code></pre></td></tr></table></figure><h3 id="一主二从配置"><a href="#一主二从配置" class="headerlink" title="一主二从配置"></a>一主二从配置</h3><p>==默认情况下，每台Redis服务器都是主节点；==我们一般情况下只用配置从机就好了！</p><p>认老大！一主（79）二从（80，81）</p><p>使用<code>SLAVEOF host port</code>就可以为从机配置主机了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379<br>OK<br>127.0.0.1:6380&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:slave<br>master_host:127.0.0.1<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:6<br>master_sync_in_progress:0<br>slave_repl_offset:3430<br>slave_priority:100<br>slave_read_only:1<br>connected_slaves:0<br>master_replid:25d6b768a387a5f2383cf016e666b5cbf1e56900<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:3430<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:15<br>repl_backlog_histlen:3416<br></code></pre></td></tr></table></figure><p>然后主机上也能看到从机的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:master<br>connected_slaves:2<br>slave0:ip=127.0.0.1,port=6381,state=online,offset=28,lag=1<br>slave1:ip=127.0.0.1,port=6380,state=online,offset=28,lag=1<br>master_replid:25d6b768a387a5f2383cf016e666b5cbf1e56900<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:28<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:28<br></code></pre></td></tr></table></figure><p>我们这里是使用命令搭建，是暂时的，==真实开发中应该在从机的配置文件中进行配置，==这样的话是永久的。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B015-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/conf.png" alt="配置文件配置"></p><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><ol><li><p>从机只能读，不能写，主机可读可写但是多用于写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"> 127.0.0.1:6381&gt; <span class="hljs-built_in">set</span> name sakura <span class="hljs-comment"># 从机6381写入失败</span><br>(error) READONLY You can<span class="hljs-string">&#x27;t write against a read only replica.</span><br><span class="hljs-string"></span><br><span class="hljs-string">127.0.0.1:6380&gt; set name sakura # 从机6380写入失败</span><br><span class="hljs-string">(error) READONLY You can&#x27;</span>t write against a <span class="hljs-built_in">read</span> only replica.<br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> name sakura<br>OK<br>127.0.0.1:6379&gt; get name<br><span class="hljs-string">&quot;sakura&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>当主机断电宕机后，默认情况下从机的角色不会发生变化 ，集群中只是失去了写操作，当主机恢复以后，又会连接上从机恢复原状。</p></li><li><p>当从机断电宕机后，若不是使用配置文件配置的从机，再次启动后作为主机是无法获取之前主机的数据的，若此时重新配置称为从机，又可以获取到主机的所有数据。这里就要提到一个同步原理。</p></li><li><p>第二条中提到，默认情况下，主机故障后，不会出现新的主机，有两种方式可以产生新的主机：</p><ul><li>从机手动执行命令<code>slaveof no one</code>,这样执行以后从机会独立出来成为一个主机</li><li>使用哨兵模式（自动选举）</li></ul></li></ol><blockquote><p>如果没有老大了，这个时候能不能选择出来一个老大呢？手动！</p></blockquote><p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code>让自己变成主机！其他的节点就可以手动连接到最新的主节点（手动）！如果这个时候老大修复了，那么久重新连接！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记14-发布与订阅</title>
    <link href="/posts/2021/01/21/Redis%E7%AC%94%E8%AE%B014-%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85/"/>
    <url>/posts/2021/01/21/Redis%E7%AC%94%E8%AE%B014-%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85/</url>
    
    <content type="html"><![CDATA[<h2 id="发布与订阅"><a href="#发布与订阅" class="headerlink" title="发布与订阅"></a>发布与订阅</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B014-%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85/1.png" alt="关系"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B014-%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85/2.png" alt="关系"></p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>PSUBSCRIBE pattern [pattern..]</code></td><td>订阅一个或多个符合给定模式的频道。</td></tr><tr><td><code>PUNSUBSCRIBE pattern [pattern..]</code></td><td>退订一个或多个符合给定模式的频道。</td></tr><tr><td><code>PUBSUB subcommand [argument[argument]]</code></td><td>查看订阅与发布系统状态。</td></tr><tr><td><code>PUBLISH channel message</code></td><td>向指定频道发布消息</td></tr><tr><td><code>SUBSCRIBE channel [channel..]</code></td><td>订阅给定的一个或多个频道。</td></tr><tr><td><code>SUBSCRIBE channel [channel..]</code></td><td>退订一个或多个频道</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">------------订阅端---------------------- <br>127.0.0.1:6379&gt; SUBSCRIBE LOL   <span class="hljs-comment"># 订阅LOL频道</span><br>Reading messages... (press Ctrl-C to quit) <span class="hljs-comment"># 等待接收消息</span><br>1) <span class="hljs-string">&quot;subscribe&quot;</span> <span class="hljs-comment"># 订阅成功的消息</span><br>2) <span class="hljs-string">&quot;LOL&quot;</span><br>3) (<span class="hljs-built_in">integer</span>) 1<br>1) <span class="hljs-string">&quot;message&quot;</span><br>2) <span class="hljs-string">&quot;LOL&quot;</span>       <span class="hljs-comment"># 接收到来自LOL频道的消息 &quot;Atrox&quot;</span><br>3) <span class="hljs-string">&quot;Atrox&quot;</span><br>1) <span class="hljs-string">&quot;message&quot;</span><br>2) <span class="hljs-string">&quot;LOL&quot;</span><br>3) <span class="hljs-string">&quot;Hello,Ali&quot;</span>  <span class="hljs-comment"># 接收到来自LOL频道的消息 &quot;Hello,Ali&quot;</span><br><br>--------------消息发布端-------------------<br>127.0.0.1:6379&gt; PUBLISH LOL  <span class="hljs-string">&quot;Atrox&quot;</span>  <span class="hljs-comment"># 发布消息到LOL频道</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; PUBLISH LOL <span class="hljs-string">&quot;Hello,Ali&quot;</span> <span class="hljs-comment"># 发布消息到LOL频道</span><br>(<span class="hljs-built_in">integer</span>) 1<br><br>-----------------查看活跃的频道------------<br>127.0.0.1:6379&gt; PUBSUB channels<br>1) <span class="hljs-string">&quot;LOL&quot;</span><br></code></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每个 Redis 服务器进程都维持着一个表示服务器状态的 redis.h/redisServer 结构， 结构的 pubsub_channels 属性是一个字典， 这个字典就用于保存订阅频道的信息，其中，字典的键为正在被订阅的频道， 而字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B014-%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85/3.png" alt="原理"></p><p>客户端订阅，就被链接到对应频道的链表的尾部，退订则就是将客户端节点从链表中移除。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果一个客户端订阅了频道，但自己读取消息的速度却不够快的话，那么不断积压的消息会使redis输出缓冲区的体积变得越来越大，这可能使得redis本身的速度变慢，甚至直接崩溃。</li><li>这和数据传输可靠性有关，如果在订阅方断线，那么他将会丢失所有在短线期间发布者发布的消息。</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li>消息订阅：公众号订阅，微博关注等等（起始更多是使用消息队列来进行实现）</li><li>多人在线聊天室。</li></ol><p>稍微复杂的场景，我们就会使用消息中间件MQ处理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记13-Redis的持久化-AOF</title>
    <link href="/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B013-Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96-AOF/"/>
    <url>/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B013-Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96-AOF/</url>
    
    <content type="html"><![CDATA[<h2 id="持久化AOF"><a href="#持久化AOF" class="headerlink" title="持久化AOF"></a>持久化AOF</h2><p><strong>Append Only File</strong></p><p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍</p><blockquote><p>以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p></blockquote><h3 id="什么是AOF"><a href="#什么是AOF" class="headerlink" title="什么是AOF"></a>什么是AOF</h3><p> 快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p><p>如果要使用AOF，需要修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendonly no <span class="hljs-comment"># 默认不开启aof</span><br><br>appenfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span> 默认文件名<br></code></pre></td></tr></table></figure><p>ppendonly no yes`则表示启用AOF</p><p>默认是不开启的，我们需要手动配置，然后重启redis，就可以生效了！</p><p>如果这个aof文件有错位，这时候redis是启动不起来的，我需要修改这个aof文件</p><p>redis给我们提供了一个工具<code>redis-check-aof --fix</code></p><blockquote><p>优点和缺点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendonly yes  <span class="hljs-comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分的情况下，rdb完全够用</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span><br><br><span class="hljs-comment"># appendfsync always # 每次修改都会sync 消耗性能</span><br>appendfsync everysec <span class="hljs-comment"># 每秒执行一次 sync 可能会丢失这一秒的数据</span><br><span class="hljs-comment"># appendfsync no # 不执行 sync ,这时候操作系统自己同步数据，速度最快</span><br></code></pre></td></tr></table></figure><p><strong>优点</strong></p><ol><li>每一次修改都会同步，文件的完整性会更加好</li><li>没秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ol><p><strong>缺点</strong></p><ol><li>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！</li><li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ol><h2 id="RDB和AOF选择"><a href="#RDB和AOF选择" class="headerlink" title="RDB和AOF选择"></a>RDB和AOF选择</h2><h3 id="RDB-和-AOF-对比"><a href="#RDB-和-AOF-对比" class="headerlink" title="RDB 和 AOF 对比"></a>RDB 和 AOF 对比</h3><table><thead><tr><th>RDB</th><th>AOF</th><th></th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>丢数据</td><td>根据策略决定</td></tr></tbody></table><h3 id="如何选择使用哪种持久化方式？"><a href="#如何选择使用哪种持久化方式？" class="headerlink" title="如何选择使用哪种持久化方式？"></a>如何选择使用哪种持久化方式？</h3><p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。</p><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</p><p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记12-Redis的持久化-RDB</title>
    <link href="/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B012-Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96-RDB/"/>
    <url>/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B012-Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96-RDB/</url>
    
    <content type="html"><![CDATA[<h2 id="持久化-RDB"><a href="#持久化-RDB" class="headerlink" title="持久化-RDB"></a>持久化-RDB</h2><h3 id="什么是RDB"><a href="#什么是RDB" class="headerlink" title="什么是RDB"></a>什么是RDB</h3><hr><p>RDB：Redis Databases，在指定时间间隔后，将内存中的数据集快照写入数据库 ；在恢复时候，直接读取快照文件，进行数据的恢复 ；</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B012-Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96-RDB/rdb.png" alt="rdb"></p><p>默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。文件名可以在配置文件中进行自定义。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><hr><p>在进行 <strong><code>RDB</code></strong> 的时候，**<code>redis</code>** 的主线程是不会做 <strong><code>io</code></strong> 操作的，主线程会 <strong><code>fork</code></strong> 一个子线程来完成该操作；</p><ol><li><p>Redis 调用forks。同时拥有父进程和子进程。</p></li><li><p>子进程将数据集写入到一个临时 RDB 文件中。</p></li><li><p>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</p></li></ol><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益(因为是使用子进程进行写操作，而父进程依然可以接收来自客户端的请求。)</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B012-Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96-RDB/rdb_reason.png" alt="rdb原理"></p><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><hr><ol><li>save的规则满足的情况下，会自动触发rdb原则</li><li>执行flushall命令，也会触发我们的rdb原则</li><li>退出redis，也会自动产生rdb文件</li></ol><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>使用 <code>save</code> 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了；</p><blockquote><p>由于 <code>save</code> 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，<code>save</code>命令执行速度会非常慢，阻塞所有客户端的请求。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B012-Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96-RDB/save.png" alt="save"></p><h4 id="flushall命令"><a href="#flushall命令" class="headerlink" title="flushall命令"></a>flushall命令</h4><p><code>flushall</code> 命令也会触发持久化 ；</p><h4 id="触发持久化规则"><a href="#触发持久化规则" class="headerlink" title="触发持久化规则"></a>触发持久化规则</h4><p>满足配置条件中的触发条件 ；</p><blockquote><p>可以通过配置文件对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动进行数据集保存操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">save 900 1<br>save 300 10<br>save 60 10000<br></code></pre></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B012-Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96-RDB/tiaojian.png" alt="满足条件"></p><h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p><code>bgsave</code> 是异步进行，进行持久化的时候，<code>redis</code> 还可以将继续响应客户端请求 ；</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B012-Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96-RDB/bgsave.png" alt="bgsave"></p><p><strong>bgsave和save对比</strong></p><table><thead><tr><th>命令</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>阻塞？</td><td>是</td><td>是（阻塞发生在fock()，通常非常快）</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外的内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fock子进程，消耗内存</td></tr></tbody></table><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ol><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ol><p><strong>缺点：</strong></p><ol><li>需要一定的时间间隔进行操作，如果redis意外宕机了，这个最后一次修改的数据就没有了。</li><li>fork进程的时候，会占用一定的内容空间。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记11-Redis.conf配置文件分析</title>
    <link href="/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B011-Redis-conf%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <url>/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B011-Redis-conf%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis-config分析"><a href="#Redis-config分析" class="headerlink" title="Redis.config分析"></a>Redis.config分析</h2><blockquote><p>容量单位不区分大小写，G和GB有区别</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Note on units: when memory size is needed, it is possible to specify</span><br><span class="hljs-comment"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 1k =&gt; 1000 bytes</span><br><span class="hljs-comment"># 1kb =&gt; 1024 bytes</span><br><span class="hljs-comment"># 1m =&gt; 1000000 bytes</span><br><span class="hljs-comment"># 1mb =&gt; 1024*1024 bytes</span><br><span class="hljs-comment"># 1g =&gt; 1000000000 bytes</span><br><span class="hljs-comment"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br></code></pre></td></tr></table></figure><blockquote><p>可以使用 include 组合多个配置文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Include one or more other config files here.  This is useful if you</span><br><span class="hljs-comment"># have a standard template that goes to all Redis servers but also need</span><br><span class="hljs-comment"># to customize a few per-server settings.  Include files can include</span><br><span class="hljs-comment"># other files, so use this wisely.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note that option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span><br><span class="hljs-comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span><br><span class="hljs-comment"># line as value of a configuration directive, you&#x27;d better put includes</span><br><span class="hljs-comment"># at the beginning of this file to avoid overwriting config change at runtime.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If instead you are interested in using includes to override configuration</span><br><span class="hljs-comment"># options, it is better to use include as the last line.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># include /path/to/local.conf</span><br><span class="hljs-comment"># include /path/to/other.conf</span><br></code></pre></td></tr></table></figure><blockquote><p>网路配置</p></blockquote><p>绑定ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> 127.0.0.1      <span class="hljs-comment"># 绑定ip</span><br>protected-mode yes  <span class="hljs-comment"># 保护模式</span><br>port 6379           <span class="hljs-comment"># 端口 </span><br><br></code></pre></td></tr></table></figure><blockquote><p>通用配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">daemonize yes       <span class="hljs-comment"># 以守护进程的方式运行，默认是no，我们需要开启为yes</span><br>pidfile /var/run/redis_6379.pid  <span class="hljs-comment"># 如果以后台方式运行，我们需要指定一个 pid 文件</span><br></code></pre></td></tr></table></figure><blockquote><p>日志输出级别</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Specify the server verbosity level.</span><br><span class="hljs-comment"># This can be one of:</span><br><span class="hljs-comment"># debug (a lot of information, useful for development/testing)</span><br><span class="hljs-comment"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="hljs-comment"># notice (moderately verbose, what you want in production probably)</span><br><span class="hljs-comment"># warning (only very important / critical messages are logged)</span><br>loglevel notice     <span class="hljs-comment"># 日志输出级别</span><br></code></pre></td></tr></table></figure><blockquote><p>日志输出文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Specify the log file name. Also the empty string can be used to force</span><br><span class="hljs-comment"># Redis to log on the standard output. Note that if you use standard</span><br><span class="hljs-comment"># output for logging but daemonize, logs will be sent to /dev/null</span><br>logfile <span class="hljs-string">&quot;&quot;</span>          <span class="hljs-comment"># 日志文件名</span><br></code></pre></td></tr></table></figure><blockquote><p>默认数据库数量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Set the number of databases. The default database is DB 0, you can select</span><br><span class="hljs-comment"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="hljs-comment"># dbid is a number between 0 and &#x27;databases&#x27;-1</span><br>databases 16<br></code></pre></td></tr></table></figure><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb .aof</p><p>redis 是内存数据库，如果没有持久化，那么断电即失。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果900秒内，至少有一个key进行了修改，就进行持久化操作</span><br>save 900 1<br><span class="hljs-comment"># 如果300秒内，至少有10个key进行了修改，就进行持久化操作</span><br>save 300 10<br><span class="hljs-comment"># 如果60秒内，至少有一万个key进行了修改，就进行持久化操作</span><br>save 60 10000<br><br>stop-writes-on-bgsave-error yes  <span class="hljs-comment"># 持久化出现错误，是否要继续工作</span><br><br>rdbcompression yes  <span class="hljs-comment"># 是否压缩 rdb 资源，需要消耗一些CPU资源</span><br><br>rdbchecksum yes     <span class="hljs-comment"># 保存rdb文件的时候，进行错误的检查校验</span><br></code></pre></td></tr></table></figure><blockquote><p>Replication 主从复制</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">################################# REPLICATION #################################</span><br><br><span class="hljs-comment"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span><br><span class="hljs-comment"># another Redis server. A few things to understand ASAP about Redis replication.</span><br></code></pre></td></tr></table></figure><blockquote><p>Security模块中设置密码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">requirepass 要设置的密码<br></code></pre></td></tr></table></figure><p>或者直接命令行设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">config <span class="hljs-built_in">set</span> requirepass <span class="hljs-string">&quot;密码&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>CLIENTS：客户端连接相关</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">maxclients 10000  <span class="hljs-comment">#最大客户端数量</span><br>maxmemory &lt;bytes&gt; <span class="hljs-comment">#最大内存限制</span><br>maxmemory-policy noeviction <span class="hljs-comment"># 内存达到限制值的处理策略</span><br></code></pre></td></tr></table></figure><p>redis 中的<strong>默认</strong>的过期策略是 <strong>volatile-lru</strong> 。</p><p><strong>设置方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">config <span class="hljs-built_in">set</span> maxmemory-policy volatile-lru <br>1<br></code></pre></td></tr></table></figure><p><strong>maxmemory-policy 的六种策略</strong></p><p><strong>1、volatile-lru：</strong>只对设置了过期时间的key进行LRU（默认值）</p><p><strong>2、allkeys-lru ：</strong> 删除lru算法的key</p><p><strong>3、volatile-random：</strong>随机删除即将过期key</p><p><strong>4、allkeys-random：</strong>随机删除</p><p><strong>5、volatile-ttl ：</strong> 删除即将过期的</p><p><strong>6、noeviction ：</strong> 永不过期，返回错误</p><blockquote><p>APPEND ONLY 模式 aof</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendonly no  <span class="hljs-comment"># 默认是不开启aof模式的，默认使用rdb方式持久化，在大部分情况下，rdb完全够用</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span> <span class="hljs-comment"># 持久化的文件的名字</span><br><br><span class="hljs-comment"># appendfsync always     # 每次修改都会 sync，消耗性嗯那个</span><br>appendfsync everysec     <span class="hljs-comment"># 每秒执行一次 sync，可能会丢失1s的数据</span><br><span class="hljs-comment"># appendfsync no         # 不执行sync，这个时候操作系统进行同步 速度最快</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记10-SpringBoot整合Redis</title>
    <link href="/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B010-SpringBoot%E6%95%B4%E5%90%88Redis/"/>
    <url>/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B010-SpringBoot%E6%95%B4%E5%90%88Redis/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h2><blockquote><p>新建module，勾选SpringBoot项目，勾选NoSQL的Redis依赖。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 操作Redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点进<code>spring-boot-starter-data-redis</code>后，我们发现其本质是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.data<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是找啊找，发现其中并没有 Jedis 的任何依赖，其实是在 SpringBoot2.x 之后，原来使用的 Jedis 被替换为了lettuce。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.lettuce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lettuce-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Jedis：采用的直连方法，多个线程操作的化，是不安全的，如果想要避免不安全的情况，需要使用 Jedis Pool，更像 BIO模式。</p><p>Lettuce：采用 Netty 的方式，实例中可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据了，更像 NIO模式。</p><blockquote><p>剖析源码</p></blockquote><p>我们在学习 SpringBoot 自动配置原理时，整合一个组件并进行配置一定存在一个自动配置类<code>xxxAutoConfiguration</code>，并且在<code>spring.factories</code>中也一定能找到这个类的完全限定名，Redis 也不例外。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\<br></code></pre></td></tr></table></figure><p>从这里点进<code>RedisAutoConfiguration</code>类，可以看到绑定了一个<code>RedisProperties.class</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(</span><br><span class="hljs-meta">  proxyBeanMethods = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span><br><span class="hljs-meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span><br></code></pre></td></tr></table></figure><p>点进去<code>RedisProperties.class</code>，在<code>application.properties</code>中可以配置下列的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> database = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String host = <span class="hljs-string">&quot;localhost&quot;</span>;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port = <span class="hljs-number">6379</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> ssl;<br>    <span class="hljs-keyword">private</span> Duration timeout;<br>    <span class="hljs-keyword">private</span> Duration connectTimeout;<br>    <span class="hljs-keyword">private</span> String clientName;<br>    <span class="hljs-keyword">private</span> RedisProperties.ClientType clientType;<br>    <span class="hljs-keyword">private</span> RedisProperties.Sentinel sentinel;<br>    <span class="hljs-keyword">private</span> RedisProperties.Cluster cluster;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RedisProperties.Jedis jedis = <span class="hljs-keyword">new</span> RedisProperties.Jedis();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RedisProperties.Lettuce lettuce = <span class="hljs-keyword">new</span> RedisProperties.Lettuce();<br>    ...方法<br>&#125;<br></code></pre></td></tr></table></figure><p>那回到<code>RedisAutoConfiguration</code>类，看见它给我配置了两个模板类<code>redisTemplate</code>和<code>stringRedisTemplate</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;<br>    <span class="hljs-comment">// 默认的 RedisTemplate 没有过多的设置，redis对象都需要序列化。</span><br>    <span class="hljs-comment">// 两个泛型都是 Object类型，我们需要强制转换&lt;String, Object&gt;</span><br>    RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate();<br>    template.setConnectionFactory(redisConnectionFactory);<br>    <span class="hljs-keyword">return</span> template;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span><br><span class="hljs-comment">// 由于 Stirng 是 redis 中最常使用类型，所以单独提出来一个 Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> StringRedisTemplate <span class="hljs-title">stringRedisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;<br>    StringRedisTemplate template = <span class="hljs-keyword">new</span> StringRedisTemplate();<br>    template.setConnectionFactory(redisConnectionFactory);<br>    <span class="hljs-keyword">return</span> template;<br>&#125;<br></code></pre></td></tr></table></figure><p>当看到xxTemplate时可以对比RestTemplat、SqlSessionTemplate,通过使用这些Template来间接操作组件。那么这俩也不会例外。分别用于操作Redis和Redis中的String数据类型。</p><p>在RedisTemplate上也有一个条件注解<code>@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</code>，说明我们是可以对其Template进行定制化的。</p><blockquote><p>连接Redis与使用</p></blockquote><ol><li><p>编写<code>application.properties配置文件</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">8.131.49.###</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">zuiweizhiming666</span><br></code></pre></td></tr></table></figure></li><li><p>测试类使用 <code>RedisTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Redis02SpringbootApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span><br>        <span class="hljs-comment">// opsForValue 操作字符串 类似String</span><br>        <span class="hljs-comment">// opsForList 操作List 类似List</span><br>        <span class="hljs-comment">// opsForHah</span><br><br>        <span class="hljs-comment">// 除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD</span><br><br>        <span class="hljs-comment">// 获取连接对象</span><br>        <span class="hljs-comment">//RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br>        <span class="hljs-comment">//connection.flushDb();</span><br>        <span class="hljs-comment">//connection.flushAll();</span><br>        <br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;mykey&quot;</span>, <span class="hljs-string">&quot;qiaowei&quot;</span>);<br>        System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;mykey&quot;</span>));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">qiaowei<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>序列化问题</p></blockquote><p>但是当我们回到Redis命令行查看数据时，会发现全都是乱码，可是程序中却有正确的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; keys *<br>1) &quot;\xac\xed\x00\x05t\x00\x05mykey&quot;<br></code></pre></td></tr></table></figure><p> 这时候就关系到存储对象的序列化问题，在网络中传输的对象也是一样需要序列化，否者就全是乱码。</p><p>我们回头看默认的<code>RedisTemplate</code>类内部有关序列化的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> RedisSerializer keySerializer = <span class="hljs-keyword">null</span>;<br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> RedisSerializer valueSerializer = <span class="hljs-keyword">null</span>;<br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> RedisSerializer hashKeySerializer = <span class="hljs-keyword">null</span>;<br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> RedisSerializer hashValueSerializer = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">private</span> RedisSerializer&lt;String&gt; stringSerializer = RedisSerializer.string();<br></code></pre></td></tr></table></figure><p>这就是，我们看到几个关于序列化的参数，而默认的序列化器是采用的JDK序列化器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.defaultSerializer == <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">this</span>.defaultSerializer = <span class="hljs-keyword">new</span> JdkSerializationRedisSerializer(<span class="hljs-keyword">this</span>.classLoader != <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">this</span>.classLoader : <span class="hljs-keyword">this</span>.getClass().getClassLoader());<br>&#125;<br></code></pre></td></tr></table></figure><p>而默认的RedisTemplate中的所有序列化器都是使用这个序列化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.enableDefaultSerializer) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.keySerializer == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.keySerializer = <span class="hljs-keyword">this</span>.defaultSerializer;<br>        defaultUsed = <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.valueSerializer == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.valueSerializer = <span class="hljs-keyword">this</span>.defaultSerializer;<br>        defaultUsed = <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.hashKeySerializer == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.hashKeySerializer = <span class="hljs-keyword">this</span>.defaultSerializer;<br>        defaultUsed = <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.hashValueSerializer == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.hashValueSerializer = <span class="hljs-keyword">this</span>.defaultSerializer;<br>        defaultUsed = <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后续我们定制RedisTemplate就可以对其进行修改。</p><blockquote><p>定制RedisTemplate的模板</p></blockquote><p>我们创建一个Bean加入容器，就会触发RedisTemplate上的条件注解使默认的RedisTemplate失效，从而使用我们自己定义的模板。</p><p><code>RedisSerializer</code>提供了多种序列化方案：</p><ol><li><p>直接调用 <code>RedisSerializer</code>的静态方法来返回序列化器，然后set</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B010-SpringBoot%E6%95%B4%E5%90%88Redis/redis_serializer.png" alt="静态方法"></p></li><li><p>自己 new 相应的实现类，然后set</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B010-SpringBoot%E6%95%B4%E5%90%88Redis/self_serializer.png" alt="自己new实现类"></p></li></ol><p>我们来编写自己的RedisTemplate模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编写我们定制的 redisTemplate</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;<br>    RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;String, Object&gt;();<br>    template.setConnectionFactory(redisConnectionFactory);<br>    Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);<br>    ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>    jackson2JsonRedisSerializer.setObjectMapper(om);<br>    StringRedisSerializer stringRedisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>    <span class="hljs-comment">// key 采用 String 的序列化方法</span><br>    template.setKeySerializer(stringRedisSerializer);<br>    <span class="hljs-comment">// hash 的 key 也采用 String 的序列化方法</span><br>    template.setHashKeySerializer(stringRedisSerializer);<br>    <span class="hljs-comment">// value 序列化采用 jackson</span><br>    template.setValueSerializer(jackson2JsonRedisSerializer);<br>    <span class="hljs-comment">// hash 的 value 序列化采用jackson</span><br>    template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>    <span class="hljs-comment">// 配置具体的序列化方式</span><br>    template.setKeySerializer(jackson2JsonRedisSerializer);<br>    <span class="hljs-keyword">return</span> template;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完我们自己的<code>RedisTemplate</code>，我们去测试类测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    <span class="hljs-comment">// 真实开发一般都是用 json 传递对象</span><br>    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;乔威&quot;</span>, <span class="hljs-number">10</span>);<br>    redisTemplate.opsForValue().set(<span class="hljs-string">&quot;user&quot;</span>, user);<br>    System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;user&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>在Xshell中查看该key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; keys *<br>1) &quot;user&quot;<br></code></pre></td></tr></table></figure><blockquote><p>自定义Redis工具</p></blockquote><p>用RedisTemplate需要频繁调用<code>.opForxxx</code>然后才能进行对应的操作，这样使用起来代码效率低下，工作中一般不会这样使用，而是将这些常用的公共API抽取出来封装成为一个工具类，然后直接使用工具类来间接操作Redis,不但效率高并且易用。</p><p>参考博客：<a href="https://www.cnblogs.com/zhzhlong/p/11434284.html">https://www.cnblogs.com/zhzhlong/p/11434284.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis笔记09-使用Jedis操作Redis</title>
    <link href="/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B009-%E4%BD%BF%E7%94%A8Jedis%E6%93%8D%E4%BD%9CRedis/"/>
    <url>/posts/2021/01/20/Redis%E7%AC%94%E8%AE%B009-%E4%BD%BF%E7%94%A8Jedis%E6%93%8D%E4%BD%9CRedis/</url>
    
    <content type="html"><![CDATA[<h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>使用Java来操作Redis，Jedis是Redis官方推荐使用的Java连接redis的客户端。</p><blockquote><p>什么是Jedis？是Redis官方推荐的java连接开发工具！使用java操作Redis中间件。如果要使用java来操作redis，那么一定要对jedis十分熟悉。</p></blockquote><ol><li><p><strong>导入Jedis的依赖和fastJson依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Jedis的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- fastJson的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.75<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>连接数据库</strong></p><p> 首先在阿里云的服务器控制台安全组，添加6379端口</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B009-%E4%BD%BF%E7%94%A8Jedis%E6%93%8D%E4%BD%9CRedis/open_port_6379.png" alt="服务器安全组开启6379端口"></p><p>修改<code>redis.conf</code>配置文件，在其中设置访问redis的密码：requirepass 密码</p><p>，注释掉bind 127.0.0.1，重启redis-server服务，进入redis后要先验证密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z bin]# redis-cli -a zuiweizhiming666 -p 6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>127.0.0.1:6379&gt; ping<br>PONG<br></code></pre></td></tr></table></figure><p>防火墙开启6379端口，并重置防火墙服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z ~]# firewall-cmd --zone=public --add-port=6379/tcp --permanent  &amp;&amp; firewall-cmd --reload<br>success<br>success<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>操作命令</p><p>新建测试类<code>TestPing.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPing</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 1. 创建 Jedis 的对象</span><br>    Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;8.131.49.204&quot;</span>,<span class="hljs-number">6379</span>);<br>    jedis.auth(<span class="hljs-string">&quot;zuiweizhiming666&quot;</span>);<br>    <span class="hljs-comment">// 2. Jedis 所有的命令对应 Redis 的所有指令</span><br>    System.out.println(jedis.ping());  <span class="hljs-comment">// PONG</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>能够ping通即可。</p></li><li><p>关于事务操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTX</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;8.131.49.204&quot;</span>);<br>        jedis.auth(<span class="hljs-string">&quot;zuiweizhiming666&quot;</span>);<br><br>        jedis.flushDB();<br><br>        JSONObject jsonObject = <span class="hljs-keyword">new</span> JSONObject();<br>        jsonObject.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;qiaowei&quot;</span>);<br><br>        <span class="hljs-comment">// 开启事务</span><br>        Transaction multi = jedis.multi();<br>        String result = jsonObject.toJSONString();<br>        <span class="hljs-comment">//    jedis.watch(result);</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            multi.set(<span class="hljs-string">&quot;user1&quot;</span>,result );<br>            multi.set(<span class="hljs-string">&quot;user2&quot;</span>,result );<br>            <span class="hljs-keyword">int</span> i  = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>            multi.exec();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 放弃事务</span><br>            multi.discard();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(jedis.get(<span class="hljs-string">&quot;user1&quot;</span>));<br>            System.out.println(jedis.get(<span class="hljs-string">&quot;user2&quot;</span>));<br>            jedis.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>断开连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.close();<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记08-事务的相关操作</title>
    <link href="/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B008-%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B008-%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>Redis的单条命令是保证原子性的，但是redis事务不能保证原子性。</p><blockquote><p>Redis事务本质：一组命令的集合。</p><p>—————– 队列 set set set 执行 ——————-</p><p>事务中每条命令都会被序列化，执行过程中按顺序执行，不允许其他命令进行干扰。</p><ul><li>一次性</li><li>顺序性</li><li>排他性</li></ul><hr><ol><li>Redis事务没有隔离级别的概念</li><li>Redis单条命令是保证原子性的，但是事务不保证原子性！</li></ol></blockquote><h3 id="Redis事务操作过程"><a href="#Redis事务操作过程" class="headerlink" title="Redis事务操作过程"></a>Redis事务操作过程</h3><ul><li>开启事务（<code>multi</code>）</li><li>命令入队</li><li>执行事务（<code>exec</code>）</li></ul><p>所以事务中的命令在加入时都没有被执行，直到提交时才会开始执行(Exec)一次性完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; multi # 开启事务<br>OK<br>127.0.0.1:6379&gt; set k1 v1 # 命令入队<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v2 # ..<br>QUEUED<br>127.0.0.1:6379&gt; get k1<br>QUEUED<br>127.0.0.1:6379&gt; set k3 v3<br>QUEUED<br>127.0.0.1:6379&gt; keys *<br>QUEUED<br>127.0.0.1:6379&gt; exec # 事务执行<br>1) OK<br>2) OK<br>3) &quot;v1&quot;<br>4) OK<br>5) 1) &quot;k3&quot;<br>   2) &quot;k2&quot;<br>   3) &quot;k1&quot;<br></code></pre></td></tr></table></figure><p><strong>取消事务(<code>discurd</code>)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; set k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; DISCARD # 放弃事务<br>OK<br>127.0.0.1:6379&gt; EXEC <br>(error) ERR EXEC without MULTI # 当前未开启事务<br>127.0.0.1:6379&gt; get k1 # 被放弃事务中命令并未执行<br>(nil)<br></code></pre></td></tr></table></figure><h3 id="事务错误"><a href="#事务错误" class="headerlink" title="事务错误"></a>事务错误</h3><blockquote><p>代码语法错误（编译时异常）所有的命令都不执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; set k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; error k1 # 这是一条语法错误命令<br>(error) ERR unknown command `error`, with args beginning with: `k1`, # 会报错但是不影响后续命令入队 <br>127.0.0.1:6379&gt; get k2<br>QUEUED<br>127.0.0.1:6379&gt; EXEC<br>(error) EXECABORT Transaction discarded because of previous errors. # 执行报错<br>127.0.0.1:6379&gt; get k1 <br>(nil) # 其他命令并没有被执行<br></code></pre></td></tr></table></figure><blockquote><p>代码逻辑错误 (运行时异常) **其他命令可以正常执行 ** &gt;&gt;&gt; 所以不保证事务原子性</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; multi&gt;<br>OK<br>127.0.0.1:6379&gt; set k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; INCR k1 # 这条命令逻辑错误（对字符串进行增量）<br>QUEUED<br>127.0.0.1:6379&gt; get k2<br>QUEUED<br>127.0.0.1:6379&gt; exec<br>1) OK<br>2) OK<br>3) (error) ERR value is not an integer or out of range # 运行时报错<br>4) &quot;v2&quot; # 其他命令正常执行<br><br><span class="hljs-meta">#</span><span class="bash"> 虽然中间有一条命令报错了，但是后面的指令依旧正常执行成功了。</span><br><span class="hljs-meta">#</span><span class="bash"> 所以说Redis单条指令保证原子性，但是Redis事务不能保证原子性。</span><br></code></pre></td></tr></table></figure><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p><strong>悲观锁：</strong></p><ul><li>很悲观，认为什么时候都会出现问题，无论做什么都会加锁</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><p>使用<code>watch key</code>监控指定数据，相当于乐观锁加锁。</p><blockquote><p>正常执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; set money 100 # 设置余额:100<br>OK<br>127.0.0.1:6379&gt; set use 0 # 支出使用:0<br>OK<br>127.0.0.1:6379&gt; watch money # 监视money (上锁)<br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; DECRBY money 20<br>QUEUED<br>127.0.0.1:6379&gt; INCRBY use 20<br>QUEUED<br>127.0.0.1:6379&gt; exec # 监视值没有被中途修改，事务正常执行<br>1) (integer) 80<br>2) (integer) 20<br></code></pre></td></tr></table></figure><blockquote><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作（相当于getversion）</p></blockquote><p>我们启动另外一个客户端模拟插队线程。</p><p>线程1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; watch money # money上锁<br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; DECRBY money 20<br>QUEUED<br>127.0.0.1:6379&gt; INCRBY use 20<br>QUEUED<br>127.0.0.1:6379&gt; # 此时事务并没有执行<br></code></pre></td></tr></table></figure><p>模拟线程插队，线程2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; INCRBY money 500 # 修改了线程一中监视的money<br>(integer) 600<br>12<br></code></pre></td></tr></table></figure><p>回到线程1，执行事务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; EXEC # 执行之前，另一个线程修改了我们的值，这个时候就会导致事务执行失败<br>(nil) # 没有结果，说明事务执行失败<br><br>127.0.0.1:6379&gt; get money # 线程2 修改生效<br>&quot;600&quot;<br>127.0.0.1:6379&gt; get use # 线程1事务执行失败，数值没有被修改<br>&quot;0&quot;<br></code></pre></td></tr></table></figure><blockquote><p>解锁获取最新值，然后再加锁进行事务。</p><p><code>unwatch</code>进行解锁。</p></blockquote><p>注意：每次提交执行exec后都会自动释放锁，不管是否成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记07-三种特殊数据类型</title>
    <link href="/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B007-%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B007-%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><h3 id="Geospatial地理位置"><a href="#Geospatial地理位置" class="headerlink" title="Geospatial地理位置"></a>Geospatial地理位置</h3><blockquote><p>使用经纬度定位地理坐标并用一个<strong>有序集合zset保存</strong>，所以zset命令也可以使用</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>geoadd key longitud(经度) latitude(纬度) member [..]</code></td><td>将具体经纬度的坐标存入一个有序集合</td></tr><tr><td><code>geopos key member [member..]</code></td><td>获取集合中的一个/多个成员坐标</td></tr><tr><td><code>geodist key member1 member2 [unit]</code></td><td>返回两个给定位置之间的距离。默认以米作为单位。</td></tr><tr><td>`georadius key longitude latitude radius m</td><td>km</td></tr><tr><td><code>GEORADIUSBYMEMBER key member radius...</code></td><td>功能与GEORADIUS相同，只是中心位置不是具体的经纬度，而是使用结合中已有的成员作为中心点。</td></tr><tr><td><code>geohash key member1 [member2..]</code></td><td>返回一个或多个位置元素的Geohash表示。使用Geohash位置52点整数编码。</td></tr></tbody></table><p><strong>有效经纬度</strong></p><blockquote><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul></blockquote><p>指定单位的参数 <strong>unit</strong> 必须是以下单位的其中一个：</p><ul><li><strong>m</strong> 表示单位为米。</li><li><strong>km</strong> 表示单位为千米。</li><li><strong>mi</strong> 表示单位为英里。</li><li><strong>ft</strong> 表示单位为英尺。</li></ul><p><strong>关于GEORADIUS的参数</strong></p><blockquote><p>通过<code>georadius</code>就可以完成 <strong>附近的人</strong>功能</p><p>withcoord:带上坐标</p><p>withdist:带上距离，单位与半径单位相同</p><p>COUNT n : 只显示前n个(按距离递增排序)</p></blockquote><blockquote><p>geoadd</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> getadd 添加地理位置</span><br><span class="hljs-meta">#</span><span class="bash"> 规则：两级无法直接添加，我们一般会下载城市数据，直接通过java程序一次性导入！</span><br><span class="hljs-meta">#</span><span class="bash"> 有效的经度从-180度到180度。</span><br><span class="hljs-meta">#</span><span class="bash"> 有效的纬度从-85.05112878度到85.05112878度。</span><br><span class="hljs-meta">#</span><span class="bash"> 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span><br><span class="hljs-meta">#</span><span class="bash"> 127.0.0.1:6379&gt; geoadd china:city 39.90 116.40 beijin</span><br>(error) ERR invalid longitude,latitude pair 39.900000,116.400000<br><br><span class="hljs-meta">#</span><span class="bash"> 参数 key 值</span><br>127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city 114.05 22.52 shenzhen<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city 108.96 34.26 xian<br>(integer) 1<br></code></pre></td></tr></table></figure><blockquote><p>geopos</p></blockquote><p>获得当前定位：一定是一个坐标值！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; GEOPOS china:city beijing<br>1) 1) &quot;116.39999896287918091&quot;<br>   2) &quot;39.90000009167092543&quot;<br>127.0.0.1:6379&gt; GEOPOS china:city beijing chongqing<br>1) 1) &quot;116.39999896287918091&quot;<br>   2) &quot;39.90000009167092543&quot;<br>2) 1) &quot;106.49999767541885376&quot;<br>   2) &quot;29.52999957900659211&quot;<br></code></pre></td></tr></table></figure><blockquote><p>geodist</p></blockquote><p>两地之间的距离</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">127.0.0.1:6379&gt; GEODIST china:city beijing shanghai<br><span class="hljs-string">&quot;1067378.7564&quot;</span><br>127.0.0.1:6379&gt; GEODIST china:city beijing shanghai km<br><span class="hljs-string">&quot;1067.3788&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>georadius 以给定的经纬度为中心， 找出某一半径内的元素</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km      # 以110，30 这个经纬度为中心，寻找方圆1000km内的城市<br>1) &quot;chongqing&quot;<br>2) &quot;xian&quot;<br>3) &quot;shenzhen&quot;<br>4) &quot;hangzhou&quot;<br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 300 km<br>(empty array)<br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km<br>1) &quot;chongqing&quot;<br>2) &quot;xian&quot;<br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist  # 显示到中间距离的位置<br>1) 1) &quot;chongqing&quot;<br>   2) &quot;341.9374&quot;<br>2) 1) &quot;xian&quot;<br>   2) &quot;483.8340&quot;<br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord # 显示他人的定位信息<br>1) 1) &quot;chongqing&quot;<br>   2) 1) &quot;106.49999767541885376&quot;<br>      2) &quot;29.52999957900659211&quot;<br>2) 1) &quot;xian&quot;<br>   2) 1) &quot;108.96000176668167114&quot;<br>      2) &quot;34.25999964418929977&quot;<br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 2  # 筛选出指定的结果！<br>1) 1) &quot;chongqing&quot;<br>   2) &quot;341.9374&quot;<br>   3) 1) &quot;106.49999767541885376&quot;<br>      2) &quot;29.52999957900659211&quot;<br>2) 1) &quot;xian&quot;<br>   2) &quot;483.8340&quot;<br>   3) 1) &quot;108.96000176668167114&quot;<br>      2) &quot;34.25999964418929977&quot;<br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 1<br>1) 1) &quot;chongqing&quot;<br>   2) &quot;341.9374&quot;<br>   3) 1) &quot;106.49999767541885376&quot;<br>      2) &quot;29.52999957900659211&quot;<br></code></pre></td></tr></table></figure><blockquote><p>GEORADIUSBYMEMBER</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 找出位于指定元素周围的其他元素！</span><br>127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km<br>1) &quot;beijing&quot;<br>2) &quot;xian&quot;<br>127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city shanghai 1000 km<br>1) &quot;hangzhou&quot;<br>2) &quot;shanghai&quot;<br></code></pre></td></tr></table></figure><blockquote><p>GEOHASH 命令 - 返回一个或多个位置元素的 Geohash 表示</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; GEOHASH china:city beijing chongqing<br>1) &quot;wx4fbxxfke0&quot;<br>2) &quot;wm5xzrybty0&quot;<br></code></pre></td></tr></table></figure><blockquote><p>GEO 底层的实现原理其实就是 Zset！我们可以使用Zset命令来操作geo！</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; ZRANGE china:city 0 -1    # 查看地图中全部的元素<br>1) &quot;chongqing&quot;<br>2) &quot;xian&quot;<br>3) &quot;shenzhen&quot;<br>4) &quot;hangzhou&quot;<br>5) &quot;shanghai&quot;<br>6) &quot;beijing&quot;<br>127.0.0.1:6379&gt; ZREM china:city beijing<br>(integer) 1<br>127.0.0.1:6379&gt; ZRANGE china:city 0 -1    # 移除指定元素！<br>1) &quot;chongqing&quot;<br>2) &quot;xian&quot;<br>3) &quot;shenzhen&quot;<br>4) &quot;hangzhou&quot;<br>5) &quot;shanghai&quot;<br></code></pre></td></tr></table></figure><h3 id="Hyperloglog基数统计"><a href="#Hyperloglog基数统计" class="headerlink" title="Hyperloglog基数统计"></a>Hyperloglog基数统计</h3><blockquote><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。</p><p>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>其底层使用string数据类型</p></blockquote><p><strong>什么是基数？</strong></p><blockquote><p>数据集中不重复的元素的个数。</p></blockquote><p><strong>应用场景：</strong></p><p>网页的访问量（UV）：一个用户多次访问，也只能算作一个人。</p><blockquote><p>传统实现，存储用户的id,然后每次进行比较。当用户变多之后这种方式及其浪费空间，而我们的目的只是<strong>计数</strong>，Hyperloglog就能帮助我们利用最小的空间完成。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>PFADD key element1 [elememt2..]</code></td><td>添加指定元素到 HyperLogLog 中</td></tr><tr><td><code>PFCOUNT key [key]</code></td><td>返回给定 HyperLogLog 的基数估算值。</td></tr><tr><td><code>PFMERGE destkey sourcekey [sourcekey..]</code></td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; PFadd myset a b c d e f g h i j  # 添加元素<br>(integer) 1<br>127.0.0.1:6379&gt; PFCOUNT myset    # 估算myelemx的基数<br>(integer) 10<br>127.0.0.1:6379&gt; PFCOUNT myset2 i j z x c v b n m <br>(integer) 0<br>127.0.0.1:6379&gt; PFadd myset2 i j z x c v b n m <br>(integer) 1<br>127.0.0.1:6379&gt; PFCOUNT myset2<br>(integer) 9<br>127.0.0.1:6379&gt; PFMERGE myset3 myset1 myset2  #合并myset1和myset2位myset3，相当于交集<br>OK  <br>127.0.0.1:6379&gt; PFCOUNT myset3   # 估算基数<br>(integer) 9<br></code></pre></td></tr></table></figure><h3 id="BitMaps位图"><a href="#BitMaps位图" class="headerlink" title="BitMaps位图"></a>BitMaps位图</h3><blockquote><p>使用位存储，信息状态只有 0 和 1</p><p>Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为偏移(offset)，在bitmap上可执行AND,OR,XOR,NOT以及其它位操作。</p></blockquote><p><strong>应用场景</strong></p><p>签到统计、状态统计</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>setbit key offset value</code></td><td>为指定key的offset位设置值</td></tr><tr><td><code>getbit key offset</code></td><td>获取offset位的值</td></tr><tr><td><code>bitcount key [start end]</code></td><td>统计字符串被设置为1的bit数，也可以指定统计范围按字节</td></tr><tr><td><code>bitop operration destkey key[key..]</code></td><td>对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</td></tr><tr><td><code>BITPOS key bit [start] [end]</code></td><td>返回字符串里面第一个被设置为1或者0的bit位。start和end只能按字节,不能按位</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">------------setbit--getbit--------------<br>127.0.0.1:6379&gt; setbit sign 0 1 # 设置sign的第0位为 1 <br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 2 1 # 设置sign的第2位为 1  不设置默认 是0<br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 3 1<br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 5 1<br>(integer) 0<br>127.0.0.1:6379&gt; type sign<br>string<br><br>127.0.0.1:6379&gt; getbit sign 2 # 获取第2位的数值<br>(integer) 1<br>127.0.0.1:6379&gt; getbit sign 3<br>(integer) 1<br>127.0.0.1:6379&gt; getbit sign 4 # 未设置默认是0<br>(integer) 0<br><br>-----------bitcount----------------------------<br>127.0.0.1:6379&gt; BITCOUNT sign # 统计sign中为1的位数<br>(integer) 4<br></code></pre></td></tr></table></figure><p><strong>bitmaps的底层</strong></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9PlszjhS-1597890996519)(D:\我\MyBlog\狂神说 Redis.assets\image-20200803234336175.png)]</p><p>这样设置以后你能get到的值是：<strong>\xA2\x80</strong>，所以bitmaps是一串从左到右的二进制串</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记06-五大数据类型</title>
    <link href="/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B006-%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B006-%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>APPEND key value</code></td><td>向指定的key的value后追加字符串</td></tr><tr><td><code>DECR/INCR key</code></td><td>将指定key的value数值进行+1/-1(仅对于数字)</td></tr><tr><td><code>INCRBY/DECRBY key n</code></td><td>按指定的步长对数值进行加减</td></tr><tr><td><code>INCRBYFLOAT key n</code></td><td>为数值加上浮点型数值</td></tr><tr><td><code>STRLEN key</code></td><td>获取key保存值的字符串长度</td></tr><tr><td><code>GETRANGE key start end</code></td><td>按起止位置获取字符串（闭区间，起止位置都取）</td></tr><tr><td><code>SETRANGE key offset value</code></td><td>用指定的value 替换key中 offset开始的值</td></tr><tr><td><code>GETSET key value</code></td><td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td><code>SETNX key value</code></td><td>仅当key不存在时进行set</td></tr><tr><td><code>SETEX key seconds value</code></td><td>set 键值对并设置过期时间</td></tr><tr><td><code>MSET key1 value1 [key2 value2..]</code></td><td>批量set键值对</td></tr><tr><td><code>MSETNX key1 value1 [key2 value2..]</code></td><td>批量设置键值对，仅当参数中所有的key都不存在时执行</td></tr><tr><td><code>MGET key1 [key2..]</code></td><td>批量获取多个key保存的值</td></tr><tr><td><code>PSETEX key milliseconds value</code></td><td>和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，</td></tr><tr><td><code>getset key value</code></td><td>如果不存在值，则返回nil，如果存在值，获取原来的值，并设置新的值</td></tr></tbody></table><p>String的使用实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################################</span></span><br>127.0.0.1:6379&gt; set key1 v1           # 设置值<br>OK<br>127.0.0.1:6379&gt; type key1             # 获取值类型<br>string<br>127.0.0.1:6379&gt; keys *                # 获得所有的key<br>1) &quot;key1&quot;<br>127.0.0.1:6379&gt; EXISTS key1           # 判断一个key是否存在<br>(integer) 1<br>127.0.0.1:6379&gt; APPEND key1 &quot;hello&quot;   # 追加字符串，如果当前key不存在，就相当于setkey<br>(integer) 7<br>127.0.0.1:6379&gt; get key1 <br>&quot;v1hello&quot;<br>127.0.0.1:6379&gt; STRLEN key1           # 获取字符串的长度<br>(integer) 7<br>127.0.0.1:6379&gt; APPEND key1 &quot;qiaowei&quot;<br>(integer) 14<br>127.0.0.1:6379&gt; get key1<br>&quot;v1helloqiaowei&quot;<br>127.0.0.1:6379&gt; STRLEN key1<br>(integer) 14<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"> i++</span><br><span class="hljs-meta">#</span><span class="bash"> 步长 i+=</span> <br>127.0.0.1:6379&gt; set views 0            # 初始浏览量为0<br>OK<br>127.0.0.1:6379&gt; get views <br>&quot;0&quot; <br>127.0.0.1:6379&gt; incr views             # 自增1 浏览量变为1<br>(integer) 1<br>127.0.0.1:6379&gt; incr views             # 自增1 浏览量变为2<br>(integer) 2<br>127.0.0.1:6379&gt; get views<br>&quot;2&quot;<br>127.0.0.1:6379&gt; get views<br>&quot;2&quot;<br>127.0.0.1:6379&gt; decr views             # 自减1 浏览量变为1    <br>(integer) 1<br>127.0.0.1:6379&gt; decr views             # 自减1 浏览量变为0<br>(integer) 0<br>127.0.0.1:6379&gt; get views<br>&quot;0&quot;<br>127.0.0.1:6379&gt; INCRBY views 10        # 设置步长10 指定增量<br>(integer) 10<br>127.0.0.1:6379&gt; INCRBY views 10<br>(integer) 20<br>127.0.0.1:6379&gt; get views<br>&quot;20&quot;<br>127.0.0.1:6379&gt; DECRBY views 10<br>(integer) 10<br>127.0.0.1:6379&gt; DECRBY views 10<br>(integer) 0<br>127.0.0.1:6379&gt; get views<br>&quot;0&quot;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"> 字符串范围 range</span><br>127.0.0.1:6379&gt; set key1 &quot;hello,qiaowei&quot;   # 设置key1的值<br>OK<br>127.0.0.1:6379&gt; get key1<br>&quot;hello,qiaowei&quot;<br>127.0.0.1:6379&gt; GETRANGE key1 0 3          # 从下标0到3截取字符串<br>&quot;hell&quot;<br>127.0.0.1:6379&gt; GETRANGE key1 0 -1         # 截取全部字符串<br>&quot;hello,qiaowei&quot;<br>127.0.0.1:6379&gt; set key2 abcdefg  <br>OK<br>127.0.0.1:6379&gt; get key2<br>&quot;abcdefg&quot;<br>127.0.0.1:6379&gt; SETRANGE key2 1 xxx        # 从下标1开始替换为xxx<br>(integer) 7<br>127.0.0.1:6379&gt; get key2<br>&quot;axxxefg&quot;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"> setex (<span class="hljs-built_in">set</span> with expire) <span class="hljs-comment"># 设置过期时间</span></span><br><span class="hljs-meta">#</span><span class="bash"> setnx (<span class="hljs-built_in">set</span> <span class="hljs-keyword">if</span> not exist) <span class="hljs-comment"># 如果不存在才设置（在分布式锁中会常用）</span></span><br>127.0.0.1:6379&gt; setex key3 30 &quot;hello&quot;      # 设置key3值为hello，30秒后过期<br>OK <br>127.0.0.1:6379&gt; ttl key3<br>(integer) 26<br>127.0.0.1:6379&gt; ttl key3<br>(integer) 25<br>127.0.0.1:6379&gt; get key3<br>&quot;hello&quot;<br>127.0.0.1:6379&gt; setnx mykey &quot;redis&quot;        # 如果mykey不存在，创建mykey<br>(integer) 1<br>127.0.0.1:6379&gt; keys *<br>1) &quot;key1&quot;<br>2) &quot;key2&quot;<br>3) &quot;mykey&quot;<br>127.0.0.1:6379&gt; setnx mykey &quot;MongoDB&quot;      # 如果mykey存在，创建失败<br>(integer) 0<br>127.0.0.1:6379&gt; keys *<br>1) &quot;key1&quot;<br>2) &quot;key2&quot;<br>3) &quot;mykey&quot;<br>127.0.0.1:6379&gt; get mykey<br>&quot;redis&quot;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"> mset 和 mget</span>  <br>127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3     # 同时设置多个值<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) &quot;k1&quot;<br>2) &quot;k3&quot;<br>3) &quot;k2&quot;<br>127.0.0.1:6379&gt; mget k1 k2 k3              # 同时获取多个值<br>1) &quot;v1&quot;<br>2) &quot;v2&quot;<br>3) &quot;v3&quot;<br>127.0.0.1:6379&gt; msetnx k1 v1 k4 v4         # msetnx是一个原子性的操作，要么一起成功，要么一起失败<br>(integer) 0<br>127.0.0.1:6379&gt; get k4<br>(nil)<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"> 对象</span><br>set user:1 &#123;name:zhangsan,age:3&#125; # 设置一个user:1 对象 值为 json字符来保存一个对象！<br><span class="hljs-meta">#</span><span class="bash"> 这里的key是一个巧妙的设计： user:&#123;id&#125;:&#123;filed&#125; , 如此设计在Redis中是完全OK了！</span><br>127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2<br>OK<br>127.0.0.1:6379&gt; mget user:1:name user:1:age<br>1) &quot;zhangsan&quot;<br>2) &quot;2&quot;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"> getset 先get后<span class="hljs-built_in">set</span></span><br>127.0.0.1:6379&gt; getset db redis         # 一开始不存在值，则返回nil<br>(nil)<br>127.0.0.1:6379&gt; get db<br>&quot;redis&quot;<br>127.0.0.1:6379&gt; getset db mongodb       # 如果存在值，获取原来的值并设置新的值<br>&quot;redis&quot;<br>127.0.0.1:6379&gt; get db<br>&quot;mongodb&quot;<br></code></pre></td></tr></table></figure><p>String的使用场景：value除了我们的字符串还可以是我们的数字</p><ul><li>计数器</li><li>统计多单位的数量</li><li>粉丝数</li><li>对象缓存存储</li></ul><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><blockquote><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p></blockquote><p>首先我们列表，可以经过规则定义将其变为队列、栈、双端队列等</p><p><img src="/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B006-%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/list.png" alt="列表"></p><p>正如图Redis中List是可以进行双端操作的，所以命令也就分为了LXXX和RXXX两类，有时候L也表示List例如LLEN</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>LPUSH/RPUSH key value1[value2..]</code></td><td>从左边/右边向列表中PUSH值(一个或者多个)。</td></tr><tr><td><code>LRANGE key start end</code></td><td>获取list 起止元素==（索引从左往右 递增）==</td></tr><tr><td><code>LPUSHX/RPUSHX key value</code></td><td>向已存在的列名中push值（一个或者多个）</td></tr><tr><td>`LINSERT key BEFORE</td><td>AFTER pivot value`</td></tr><tr><td><code>LLEN key</code></td><td>查看列表长度</td></tr><tr><td><code>LINDEX key index</code></td><td>通过索引获取列表元素</td></tr><tr><td><code>LSET key index value</code></td><td>通过索引为元素设值</td></tr><tr><td><code>LPOP/RPOP key</code></td><td>从最左边/最右边移除值 并返回</td></tr><tr><td><code>RPOPLPUSH source destination</code></td><td>将列表的尾部(右)最后一个值弹出，并返回，然后加到另一个列表的头部</td></tr><tr><td><code>LTRIM key start end</code></td><td>通过下标截取指定范围内的列表</td></tr><tr><td><code>LREM key count value</code></td><td>List中是允许value重复的 <code>count &gt; 0</code>：从头部开始搜索 然后删除指定的value 至多删除count个 <code>count &lt; 0</code>：从尾部开始搜索… <code>count = 0</code>：删除列表中所有的指定value。</td></tr><tr><td><code>BLPOP/BRPOP key1[key2] timout</code></td><td>移出并获取列表的第一个/最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td><code>BRPOPLPUSH source destination timeout</code></td><td>和<code>RPOPLPUSH</code>功能相同，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs shell">---------------------------LPUSH---RPUSH---LRANGE--------------------------------<br>127.0.0.1:6379&gt; lpush list one     # LPUSH list=&gt;&#123;one&#125;<br>(integer) 1<br>127.0.0.1:6379&gt; lpush list two     # LPUSH list=&gt;&#123;two,one&#125;<br>(integer) 2<br>127.0.0.1:6379&gt; lpush list three   # LPUSH list=&gt;&#123;three,two,one&#125;<br>(integer) 3<br>127.0.0.1:6379&gt; LRANGE list 0 -1   # 获取全部元素<br>1) &quot;three&quot;<br>2) &quot;two&quot;<br>3) &quot;one&quot;<br>127.0.0.1:6379&gt; LRANGE list 0 1    # LRANGE 获取起止位置范围内的元素<br>1) &quot;three&quot;<br>2) &quot;two&quot;   <br>127.0.0.1:6379&gt; Rpush list right   # RPUSH list=&gt;&#123;three,two,one,right&#125;<br>(integer) 4<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) &quot;three&quot;<br>2) &quot;two&quot;<br>3) &quot;one&quot;<br>4) &quot;right&quot;<br><br>---------------------------LPOP---RPOP-----------------------------------<br>127.0.0.1:6379&gt; LRANGE list 0 -1   # list=&gt;&#123;three,two,one,right&#125;<br>1) &quot;three&quot; <br>2) &quot;two&quot;<br>3) &quot;one&quot;<br>4) &quot;right&quot;<br>127.0.0.1:6379&gt; LPOP list          # LPOP =&gt; 左侧（头部）弹出 three<br>&quot;three&quot;<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) &quot;two&quot;<br>2) &quot;one&quot;<br>3) &quot;right&quot;<br>127.0.0.1:6379&gt; RPOP list          # RPOP =&gt; 右侧（尾部）弹出 right <br>&quot;right&quot;<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) &quot;two&quot;<br>2) &quot;one&quot;<br><br>---------------------------LINDEX------------------------------------------<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) &quot;two&quot;<br>2) &quot;one&quot;<br>127.0.0.1:6379&gt; LINDEX list 1      # 通过下标获得list中的某个value<br>&quot;one&quot;<br>127.0.0.1:6379&gt; LINDEX list 0<br>&quot;two&quot;<br><br>---------------------------Llen--------------------------------------------<br>127.0.0.1:6379&gt; Lpush list one<br>(integer) 1<br>127.0.0.1:6379&gt; Lpush list two<br>(integer) 2<br>127.0.0.1:6379&gt; Lpush list three<br>(integer) 3<br>127.0.0.1:6379&gt; Llen list          # 返回list的长度<br>(integer) 3<br><br>---------------------------Lrem--------------------------------------------<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) &quot;three&quot;<br>2) &quot;three&quot;<br>3) &quot;two&quot;<br>4) &quot;one&quot;<br>127.0.0.1:6379&gt; LREM list 1 one    # 移除list集合中的1个one<br>(integer) 1<br>127.0.0.1:6379&gt; LRANGE list 0 -1   <br>1) &quot;three&quot;<br>2) &quot;three&quot;<br>3) &quot;two&quot;<br>127.0.0.1:6379&gt; LREM list 2 three  # 移除<br>(integer) 2<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) &quot;two&quot;<br><br>---------------------------Ltrim-------------------------------------------<br>127.0.0.1:6379&gt; Rpush mylist &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; Rpush mylist &quot;hello1&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; Rpush mylist &quot;hello2&quot;<br>(integer) 3<br>127.0.0.1:6379&gt; Rpush mylist &quot;hello3&quot;<br>(integer) 4<br>127.0.0.1:6379&gt; LTRIM mylist 1 2     # 通过下标截取指定的长度，这个list已经被改变了，只剩下截取的元素<br>OK<br>127.0.0.1:6379&gt; LRANGE mylist 0 -1<br>1) &quot;hello1&quot;<br>2) &quot;hello2&quot;<br><br>---------------------------rpoplpush----------------------------------------<br><span class="hljs-meta">#</span><span class="bash"> 移除列表的最后一个元素，将他移动到新的列表中！</span><br>127.0.0.1:6379&gt; rpush mylist &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; rpush mylist &quot;hello1&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; rpush mylist &quot;hello2&quot;<br>(integer) 3<br>127.0.0.1:6379&gt; rpoplpush mylist myotherlist # 移除列表的最后一个元素，将他移动到新的列表中！<br>&quot;hello2&quot;<br>127.0.0.1:6379&gt; lrange mylist 0 -1 # 查看原来的列表<br>1) &quot;hello&quot;<br>2) &quot;hello1&quot;<br>127.0.0.1:6379&gt; lrange myotherlist 0 -1 # 查看目标列表中，确实存在改值！<br>1) &quot;hello2&quot;<br><br>---------------------------Lset-------------------------------------------<br>127.0.0.1:6379&gt; EXISTS list        # 判断这个列表是否存在<br>(integer) 0 <br>127.0.0.1:6379&gt; lset list 9 item   # 如果不存在使用lset会报错<br>(error) ERR no such key<br>127.0.0.1:6379&gt; lpush list value1<br>(integer) 1<br>127.0.0.1:6379&gt; LRANGE list 0 0   <br>1) &quot;value1&quot;<br>127.0.0.1:6379&gt; LSET list 0 item   # 如果不存在，更新下标0的值为item<br>OK<br>127.0.0.1:6379&gt; LRANGE list 0 0<br>1) &quot;item&quot;<br><br>---------------------------Linsert-----------------------------------------<br><span class="hljs-meta">#</span><span class="bash"> 将某个具体的value插入到列把你中某个元素的前面或者后面！</span><br>127.0.0.1:6379&gt; Rpush mylist &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; Rpush mylist &quot;world&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; LINSERT mylist before &quot;world&quot; &quot;beautiful&quot;<br>(integer) 3<br>127.0.0.1:6379&gt; lrange mylist 0 -1<br>1) &quot;hello&quot;<br>2) &quot;beautiful&quot;<br>3) &quot;world&quot;<br>127.0.0.1:6379&gt; LINSERT mylist after &quot;world&quot; &quot;hahah&quot;<br>(integer) 4<br>127.0.0.1:6379&gt; lrange mylist 0 -1<br>1) &quot;hello&quot;<br>2) &quot;beautiful&quot;<br>3) &quot;world&quot;<br></code></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><ul><li>他实际上是一个链表，before Node after ， left，right 都可以插入值</li><li>如果key 不存在，创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在！</li><li>在两边插入或者改动值，效率最高！ 中间元素，相对来说效率会低一点~</li></ul><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><blockquote><p>Redis的Set是<strong>string类型</strong>的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>SADD key member1[member2..]</code></td><td>向集合中无序增加一个/多个成员</td></tr><tr><td><code>SCARD key</code></td><td>获取集合的成员数</td></tr><tr><td><code>SMEMBERS key</code></td><td>返回集合中所有的成员</td></tr><tr><td><code>SISMEMBER key member</code></td><td>查询member元素是否是集合的成员,结果是无序的</td></tr><tr><td><code>SRANDMEMBER key [count]</code></td><td>随机返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>SPOP key [count]</code></td><td>随机移除并返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>SMOVE source destination member</code></td><td>将source集合的成员member移动到destination集合</td></tr><tr><td><code>SREM key member1[member2..]</code></td><td>移除集合中一个/多个成员</td></tr><tr><td><code>SDIFF key1[key2..]</code></td><td>返回所有集合的差集 key1- key2 - …</td></tr><tr><td><code>SDIFFSTORE destination key1[key2..]</code></td><td>在SDIFF的基础上，将结果保存到集合中==(覆盖)==。不能保存到其他类型key噢！</td></tr><tr><td><code>SINTER key1 [key2..]</code></td><td>返回所有集合的交集</td></tr><tr><td><code>SINTERSTORE destination key1[key2..]</code></td><td>在SINTER的基础上，存储结果到集合中。覆盖</td></tr><tr><td><code>SUNION key1 [key2..]</code></td><td>返回所有集合的并集</td></tr><tr><td><code>SUNIONSTORE destination key1 [key2..]</code></td><td>在SUNION的基础上，存储结果到及和张。覆盖</td></tr><tr><td><code>SSCAN KEY [MATCH pattern] [COUNT count]</code></td><td>在大量数据环境下，使用此命令遍历集合中元素，每次遍历部分</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs shell">---------------SADD--SCARD--SMEMBERS--SISMEMBER--------------------<br>127.0.0.1:6379&gt; sadd myset &quot;hello&quot;      # 向myset集合中添加元素<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset &quot;qiaowei&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset &quot;girl&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; SMEMBERS myset          # 查看myset集合所有元素<br>1) &quot;girl&quot;<br>2) &quot;hello&quot;<br>3) &quot;qiaowei&quot;<br>127.0.0.1:6379&gt; SISMEMBER myset girl    # 判断某个值是否在集合内<br>(integer) 1<br>127.0.0.1:6379&gt; SISMEMBER myset haah<br>(integer) 0<br>-------------------------------SCARD--------------------------------<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) &quot;girl&quot;<br>2) &quot;qiaowei&quot;<br>127.0.0.1:6379&gt; scard myset             # 获取myset集合的元素个数<br>(integer) 2<br>-------------------------------SREM--------------------------------<br>127.0.0.1:6379&gt; SREM myset hello        # 移除集合中指定元素hello<br>(integer) 1<br>127.0.0.1:6379&gt; scard myset<br>(integer) 2<br>127.0.0.1:6379&gt; SMEMBERS myset          <br>1) &quot;girl&quot;<br>2) &quot;qiaowei&quot;<br>-------------------------------SPOP---------------------------------<br>127.0.0.1:6379&gt; spop myset              # 随即删除set集合中的元素<br>&quot;girl&quot;<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) &quot;atrox&quot;<br>2) &quot;qiaowei&quot;<br>127.0.0.1:6379&gt; SPOP myset 2            # 随机移除并返回2个元素<br>1) &quot;m1&quot;<br>2) &quot;m4&quot;<br>------------------------------SRANDMEMBER---------------------------<br>127.0.0.1:6379&gt; SRANDMEMBER myset <br>&quot;qiaowei&quot;<br>127.0.0.1:6379&gt; SRANDMEMBER myset<br>&quot;girl&quot;<br>127.0.0.1:6379&gt; SRANDMEMBER myset 2     # 随机抽取指定个数元素<br>1) &quot;girl&quot;<br>2) &quot;qiaowei&quot;<br>-------------------------------SMOVE---------------------------------<br>127.0.0.1:6379&gt; sadd myset &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset &quot;world&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset &quot;kuangshen&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset2 &quot;set2&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; smove myset myset2 &quot;kuangshen&quot; #将一个指定的值，移动到另外一个set集合！<br>(integer) 1<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) &quot;world&quot;<br>2) &quot;hello&quot;<br>127.0.0.1:6379&gt; SMEMBERS myset2<br>1) &quot;kuangshen&quot;<br>2) &quot;set2&quot;<br>-----------------------------集合操作-----------------------------------<br>127.0.0.1:6379&gt; sadd set1 a<br>(integer) 1<br>127.0.0.1:6379&gt; sadd set1 b<br>(integer) 1<br>127.0.0.1:6379&gt; sadd set1 c<br>(integer) 1<br>127.0.0.1:6379&gt; sadd set2 c<br>(integer) 1<br>127.0.0.1:6379&gt; sadd set2 d<br>(integer) 1<br>127.0.0.1:6379&gt; sadd set2 e<br>(integer) 1<br>127.0.0.1:6379&gt; SDIFF set1 set2        # 差集<br>1) &quot;b&quot;<br>2) &quot;a&quot;<br>127.0.0.1:6379&gt; SINTER set1 set2       # 交集<br>1) &quot;c&quot;<br>127.0.0.1:6379&gt; sunion set1 set2       # 并集<br>1) &quot;b&quot;<br>2) &quot;a&quot;<br>3) &quot;c&quot;<br>4) &quot;e&quot;<br>5) &quot;d&quot;<br></code></pre></td></tr></table></figure><p>微博，A用户将所有关注的人放在一个set集合中！将它的粉丝也放在一个集合中！共同关注，共同爱好，二度好友，推荐好友！（六度分割理论）。</p><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><blockquote><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>Set就是一种简化的Hash,只变动key,而value使用默认值填充。可以将一个Hash表作为一个对象进行存储，表中存放对象的信息。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>HSET key field value</code></td><td>将哈希表 key 中的字段 field 的值设为 value 。重复设置同一个field会覆盖,返回0</td></tr><tr><td><code>HMSET key field1 value1 [field2 value2..]</code></td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td><code>HSETNX key field value</code></td><td>只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td><code>HEXISTS key field</code></td><td>查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td><code>HGET key field value</code></td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td><code>HMGET key field1 [field2..]</code></td><td>获取所有给定字段的值</td></tr><tr><td><code>HGETALL key</code></td><td>获取在哈希表key 的所有字段和值</td></tr><tr><td><code>HKEYS key</code></td><td>获取哈希表key中所有的字段</td></tr><tr><td><code>HLEN key</code></td><td>获取哈希表中字段的数量</td></tr><tr><td><code>HVALS key</code></td><td>获取哈希表中所有值</td></tr><tr><td><code>HDEL key field1 [field2..]</code></td><td>删除哈希表key中一个/多个field字段</td></tr><tr><td><code>HINCRBY key field n</code></td><td>为哈希表 key 中的指定字段的整数值加上增量n，并返回增量后结果 一样只适用于整数型字段</td></tr><tr><td><code>HINCRBYFLOAT key field n</code></td><td>为哈希表 key 中的指定字段的浮点数值加上增量 n。</td></tr><tr><td><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code></td><td>迭代哈希表中的键值对</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#################################################################</span></span><br>127.0.0.1:6379&gt; hset myhash field1 qiaowei         # 设置一个具体的key-value<br>(integer) 1<br>127.0.0.1:6379&gt; hget myhash field1        # 获取一个字段值<br>&quot;qiaowei&quot;<br>127.0.0.1:6379&gt; hmset myhash field1 hello field2 world   # 设置多个key-value<br>OK<br>127.0.0.1:6379&gt; hmget myhash field1 field2     # 获取多个字段值<br>1) &quot;hello&quot;<br>2) &quot;world&quot;<br>127.0.0.1:6379&gt; HGETALL myhash                 # 获取全部数据<br>1) &quot;field1&quot;<br>2) &quot;hello&quot;<br>3) &quot;field2&quot;<br>4) &quot;world&quot;<br>127.0.0.1:6379&gt; hdel myhash field1             # 删除hash指定key字段<br>(integer) 1<br>127.0.0.1:6379&gt; HGETALL myhash<br>1) &quot;field2&quot;<br>2) &quot;world&quot;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"> hlen</span><br>127.0.0.1:6379&gt; HGETALL myhash<br>1) &quot;field1&quot;<br>2) &quot;hello&quot;<br>3) &quot;field2&quot;<br>4) &quot;world <br>127.0.0.1:6379&gt; hlen myhash                     # 获取hash表的字段数量 <br>(integer) 2<br>2) &quot;world&quot;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#################################################################</span></span><br>127.0.0.1:6379&gt; HEXISTS myhash field1           # 判断hash中指定字段是否存在<br>(integer) 1<br>127.0.0.1:6379&gt; HEXISTS myhash field3<br>(integer) 0<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#################################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"> 只获得所有field</span><br><span class="hljs-meta">#</span><span class="bash"> 只获得所有value</span><br>127.0.0.1:6379&gt; hkeys myhash    # 只获得所有field<br>1) &quot;field1&quot;<br>2) &quot;field2&quot;<br>127.0.0.1:6379&gt; hvals myhash    # 只获得所有value<br>1) &quot;hello&quot;<br>2) &quot;world&quot;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#################################################################</span></span><br>incr decr<br>127.0.0.1:6379&gt; hset myhash field3 5 #指定增量！<br>(integer) 1<br>127.0.0.1:6379&gt; HINCRBY myhash field3 1<br>(integer) 6<br>127.0.0.1:6379&gt; HINCRBY myhash field3 -1<br>(integer) 5<br>127.0.0.1:6379&gt; hsetnx myhash field4 hello # 如果不存在则可以设置<br>(integer) 1<br>127.0.0.1:6379&gt; hsetnx myhash field4 world # 如果存在则不能设置<br>(integer) 0<br></code></pre></td></tr></table></figure><p>hash变更的数据 user name age,尤其是是用户信息之类的，经常变动的信息！ hash 更适合于对象的存储，String更加适合字符串存储！</p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><blockquote><p>不同的是每个元素都会关联一个double类型的分数（score）。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>score相同：按字典顺序排序</p><p>有序集合的成员是唯一的,但分数(score)却可以重复</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>ZADD key score member1 [score2 member2]</code></td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td><code>ZCARD key</code></td><td>获取有序集合的成员数</td></tr><tr><td><code>ZCOUNT key min max</code></td><td>计算在有序集合中指定区间score的成员数</td></tr><tr><td><code>ZINCRBY key n member</code></td><td>有序集合中对指定成员的分数加上增量 n</td></tr><tr><td><code>ZSCORE key member</code></td><td>返回有序集中，成员的分数值</td></tr><tr><td><code>ZRANK key member</code></td><td>返回有序集合中指定成员的索引</td></tr><tr><td><code>ZRANGE key start end</code></td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td><code>ZRANGEBYLEX key min max</code></td><td>通过字典区间返回有序集合的成员</td></tr><tr><td><code>ZRANGEBYSCORE key min max</code></td><td>通过分数返回有序集合指定区间内的成员==-inf 和 +inf分别表示最小最大值，只支持开区间()==</td></tr><tr><td><code>ZLEXCOUNT key min max</code></td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td><code>ZREM key member1 [member2..]</code></td><td>移除有序集合中一个/多个成员</td></tr><tr><td><code>ZREMRANGEBYLEX key min max</code></td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYRANK key start stop</code></td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYSCORE key min max</code></td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td><code>ZREVRANGE key start end</code></td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td><code>ZREVRANGEBYSCORRE key max min</code></td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td><code>ZREVRANGEBYLEX key max min</code></td><td>返回有序集中指定字典区间内的成员，按字典顺序倒序</td></tr><tr><td><code>ZREVRANK key member</code></td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td><code>ZINTERSTORE destination numkeys key1 [key2 ..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中，numkeys：表示参与运算的集合数，将score相加作为结果的score</td></tr><tr><td><code>ZUNIONSTORE destination numkeys key1 [key2..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td><code>ZSCAN key cursor [MATCH pattern\] [COUNT count]</code></td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs shell">-------------------ZADD--ZCARD--ZCOUNT--------------<br>127.0.0.1:6379&gt; ZADD myzset 1 m1 2 m2 3 m3 # 向有序集合myzset中添加成员m1 score=1 以及成员m2 score=2..<br>(integer) 2<br>127.0.0.1:6379&gt; ZCARD myzset # 获取有序集合的成员数<br>(integer) 2<br>127.0.0.1:6379&gt; ZCOUNT myzset 0 1 # 获取score在 [0,1]区间的成员数量<br>(integer) 1<br>127.0.0.1:6379&gt; ZCOUNT myzset 0 2<br>(integer) 2<br><br>----------------ZINCRBY--ZSCORE--------------------------<br>127.0.0.1:6379&gt; ZINCRBY myzset 5 m2 # 将成员m2的score +5<br>&quot;7&quot;<br>127.0.0.1:6379&gt; ZSCORE myzset m1 # 获取成员m1的score<br>&quot;1&quot;<br>127.0.0.1:6379&gt; ZSCORE myzset m2<br>&quot;7&quot;<br><br>--------------ZRANK--ZRANGE-----------------------------------<br>127.0.0.1:6379&gt; ZRANK myzset m1 # 获取成员m1的索引，索引按照score排序，score相同索引值按字典顺序顺序增加<br>(integer) 0<br>127.0.0.1:6379&gt; ZRANK myzset m2<br>(integer) 2<br>127.0.0.1:6379&gt; ZRANGE myzset 0 1 # 获取索引在 0~1的成员<br>1) &quot;m1&quot;<br>2) &quot;m3&quot;<br>127.0.0.1:6379&gt; ZRANGE myzset 0 -1 # 获取全部成员<br>1) &quot;m1&quot;<br>2) &quot;m3&quot;<br>3) &quot;m2&quot;<br><br><span class="hljs-meta">#</span><span class="bash">testset=&gt;&#123;abc,add,amaze,apple,back,java,redis&#125; score均为0</span><br>------------------ZRANGEBYLEX---------------------------------<br>127.0.0.1:6379&gt; ZRANGEBYLEX testset - + # 返回所有成员<br>1) &quot;abc&quot;<br>2) &quot;add&quot;<br>3) &quot;amaze&quot;<br>4) &quot;apple&quot;<br>5) &quot;back&quot;<br>6) &quot;java&quot;<br>7) &quot;redis&quot;<br>127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 0 3 # 分页 按索引显示查询结果的 0,1,2条记录<br>1) &quot;abc&quot;<br>2) &quot;add&quot;<br>3) &quot;amaze&quot;<br>127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 3 3 # 显示 3,4,5条记录<br>1) &quot;apple&quot;<br>2) &quot;back&quot;<br>3) &quot;java&quot;<br>127.0.0.1:6379&gt; ZRANGEBYLEX testset (- [apple # 显示 (-,apple] 区间内的成员<br>1) &quot;abc&quot;<br>2) &quot;add&quot;<br>3) &quot;amaze&quot;<br>4) &quot;apple&quot;<br>127.0.0.1:6379&gt; ZRANGEBYLEX testset [apple [java # 显示 [apple,java]字典区间的成员<br>1) &quot;apple&quot;<br>2) &quot;back&quot;<br>3) &quot;java&quot;<br><br>-----------------------ZRANGEBYSCORE---------------------<br>127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 10 # 返回score在 [1,10]之间的的成员<br>1) &quot;m1&quot;<br>2) &quot;m3&quot;<br>3) &quot;m2&quot;<br>127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 5<br>1) &quot;m1&quot;<br>2) &quot;m3&quot;<br><br>--------------------ZLEXCOUNT-----------------------------<br>127.0.0.1:6379&gt; ZLEXCOUNT testset - +<br>(integer) 7<br>127.0.0.1:6379&gt; ZLEXCOUNT testset [apple [java<br>(integer) 3<br><br>------------------ZREM--ZREMRANGEBYLEX--ZREMRANGBYRANK--ZREMRANGEBYSCORE--------------------------------<br>127.0.0.1:6379&gt; ZREM testset abc # 移除成员abc<br>(integer) 1<br>127.0.0.1:6379&gt; ZREMRANGEBYLEX testset [apple [java # 移除字典区间[apple,java]中的所有成员<br>(integer) 3<br>127.0.0.1:6379&gt; ZREMRANGEBYRANK testset 0 1 # 移除排名0~1的所有成员<br>(integer) 2<br>127.0.0.1:6379&gt; ZREMRANGEBYSCORE myzset 0 3 # 移除score在 [0,3]的成员<br>(integer) 2<br><br><br><span class="hljs-meta">#</span><span class="bash"> testset=&gt; &#123;abc,add,apple,amaze,back,java,redis&#125; score均为0</span><br><span class="hljs-meta">#</span><span class="bash"> myzset=&gt; &#123;(m1,1),(m2,2),(m3,3),(m4,4),(m7,7),(m9,9)&#125;</span><br>----------------ZREVRANGE--ZREVRANGEBYSCORE--ZREVRANGEBYLEX-----------<br>127.0.0.1:6379&gt; ZREVRANGE myzset 0 3 # 按score递减排序，然后按索引，返回结果的 0~3<br>1) &quot;m9&quot;<br>2) &quot;m7&quot;<br>3) &quot;m4&quot;<br>4) &quot;m3&quot;<br>127.0.0.1:6379&gt; ZREVRANGE myzset 2 4 # 返回排序结果的 索引的2~4<br>1) &quot;m4&quot;<br>2) &quot;m3&quot;<br>3) &quot;m2&quot;<br>127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset 6 2 # 按score递减顺序 返回集合中分数在[2,6]之间的成员<br>1) &quot;m4&quot;<br>2) &quot;m3&quot;<br>3) &quot;m2&quot;<br>127.0.0.1:6379&gt; ZREVRANGEBYLEX testset [java (add # 按字典倒序 返回集合中(add,java]字典区间的成员<br>1) &quot;java&quot;<br>2) &quot;back&quot;<br>3) &quot;apple&quot;<br>4) &quot;amaze&quot;<br><br>-------------------------ZREVRANK------------------------------<br>127.0.0.1:6379&gt; ZREVRANK myzset m7 # 按score递减顺序，返回成员m7索引<br>(integer) 1<br>127.0.0.1:6379&gt; ZREVRANK myzset m2<br>(integer) 4<br><br><br><span class="hljs-meta">#</span><span class="bash"> mathscore=&gt;&#123;(xm,90),(xh,95),(xg,87)&#125; 小明、小红、小刚的数学成绩</span><br><span class="hljs-meta">#</span><span class="bash"> enscore=&gt;&#123;(xm,70),(xh,93),(xg,90)&#125; 小明、小红、小刚的英语成绩</span><br>-------------------ZINTERSTORE--ZUNIONSTORE-----------------------------------<br>127.0.0.1:6379&gt; ZINTERSTORE sumscore 2 mathscore enscore # 将mathscore enscore进行合并 结果存放到sumscore<br>(integer) 3<br>127.0.0.1:6379&gt; ZRANGE sumscore 0 -1 withscores # 合并后的score是之前集合中所有score的和<br>1) &quot;xm&quot;<br>2) &quot;160&quot;<br>3) &quot;xg&quot;<br>4) &quot;177&quot;<br>5) &quot;xh&quot;<br>6) &quot;188&quot;<br><br>127.0.0.1:6379&gt; ZUNIONSTORE lowestscore 2 mathscore enscore AGGREGATE MIN # 取两个集合的成员score最小值作为结果的<br>(integer) 3<br>127.0.0.1:6379&gt; ZRANGE lowestscore 0 -1 withscores<br>1) &quot;xm&quot;<br>2) &quot;70&quot;<br>3) &quot;xg&quot;<br>4) &quot;87&quot;<br>5) &quot;xh&quot;<br>6) &quot;93&quot;<br></code></pre></td></tr></table></figure><p>应用案例：</p><ul><li>set排序 存储班级成绩表 工资表排序！</li><li>普通消息，1.重要消息 2.带权重进行判断</li><li>排行榜应用实现，取Top N测试</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记05-RedisKey基本命令</title>
    <link href="/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B005-RedisKey%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B005-RedisKey%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="RedisKey基本命令"><a href="#RedisKey基本命令" class="headerlink" title="RedisKey基本命令"></a>RedisKey基本命令</h2><p>Redis 是一个开源（BSD许可），内存存储的数据结构服务器，可用作<strong>数据库</strong>，<strong>高速缓存</strong>和<strong>消息队列代理</strong>。它支持<b style="color:blue">字符串、哈希表、列表、集合、有序集合、为徒、hyperloglogs等数据类型</b>。内置了复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。</p><blockquote><p>在Redis中无论什么数据类型，在数据库中都是以key-value形式保存，通过进行对Redis-key的操作，来完成对数据库中数据的操作。</p></blockquote><p>下面学习的命令：</p><ul><li><code>exists key</code>：判断某个key是否存在</li><li><code>del key</code>：删除键值对</li><li><code>move key db</code>：将键值对移动到指定数据库</li><li><code>expire key second</code>：设置键值对的过期时间</li><li><code>type key</code>：查看value的数据类型</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; keys * # 查看当前数据库所有key<br>(empty list or set)<br>127.0.0.1:6379&gt; set name qinjiang # set key<br>OK<br>127.0.0.1:6379&gt; set age 20<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) &quot;age&quot;<br>2) &quot;name&quot;<br>127.0.0.1:6379&gt; move age 1 # 将键值对移动到指定数据库<br>(integer) 1<br>127.0.0.1:6379&gt; EXISTS age # 判断键是否存在<br>(integer) 0 # 不存在<br>127.0.0.1:6379&gt; EXISTS name<br>(integer) 1 # 存在<br>127.0.0.1:6379&gt; SELECT 1<br>OK<br>127.0.0.1:6379[1]&gt; keys *<br>1) &quot;age&quot;<br>127.0.0.1:6379[1]&gt; del age # 删除键值对<br>(integer) 1 # 删除个数<br><br><br>127.0.0.1:6379&gt; set age 20<br>OK<br>127.0.0.1:6379&gt; EXPIRE age 15 # 设置键值对的过期时间<br><br>(integer) 1 # 设置成功 开始计数<br>127.0.0.1:6379&gt; ttl age # 查看key的过期剩余时间<br>(integer) 13<br>127.0.0.1:6379&gt; ttl age<br>(integer) 11<br>127.0.0.1:6379&gt; ttl age<br>(integer) 9<br>127.0.0.1:6379&gt; ttl age<br>(integer) -2 # -2 表示key过期，-1表示key未设置过期时间<br><br>127.0.0.1:6379&gt; get age # 过期的key 会被自动delete<br>(nil)<br>127.0.0.1:6379&gt; keys *<br>1) &quot;name&quot;<br><br>127.0.0.1:6379&gt; type name # 查看value的数据类型<br>string<br></code></pre></td></tr></table></figure><p>关于<code>TTL</code>命令，Redis的key，通过TTL命令会返回key的过期时间，一般有3种：</p><ol><li>当前key没有设置过期时间，所以会返回-1</li><li>当前key有设置过期时间，而且key已经过期，会返回-2</li><li>当前key有设置过期时间，而且key尚未过期，会返回key的正常剩余时间</li></ol><p>关于重命名<code>RENAME</code>和<code>RENAMENX</code></p><ul><li><code>RENAME key newkey</code>修改 key 的名称</li><li><code>RENAMENX key newkey</code>仅当 newkey 不存在时，将 key 改名为 newkey 。</li></ul><p>更多命令学习：<a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记04-Redis的基本知识</title>
    <link href="/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B004-Redis%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <url>/posts/2021/01/19/Redis%E7%AC%94%E8%AE%B004-Redis%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis基础知识"><a href="#Redis基础知识" class="headerlink" title="Redis基础知识"></a>Redis基础知识</h2><blockquote><p>redis默认有16个数据库</p></blockquote><p>默认使用的是第0个</p><p>16个数据库为：DB 0~DB 15。默认使用DB 0 ，可以使用<code>select n</code>切换到DB n，<code>dbsize</code>可以查看当前数据库的大小，与key数量相关。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; config get databases # 命令行查看数据库数量databases<br>1) &quot;databases&quot;<br>2) &quot;16&quot;<br><br>127.0.0.1:6379&gt; select 8 # 切换数据库 DB 8<br>OK<br>127.0.0.1:6379[8]&gt; dbsize # 查看数据库大小<br>(integer) 0<br><br><span class="hljs-meta">#</span><span class="bash"> 不同数据库之间 数据是不能互通的，并且dbsize 是根据库中key的个数。</span><br>127.0.0.1:6379&gt; set name qiaowei<br>OK<br>127.0.0.1:6379&gt; SELECT 8<br>OK<br>127.0.0.1:6379[8]&gt; get name # db8中并不能获取db0中的键值对。<br>(nil)<br>127.0.0.1:6379[8]&gt; DBSIZE<br>(integer) 0<br>127.0.0.1:6379[8]&gt; SELECT 0<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) &quot;counter:__rand_int__&quot;<br>2) &quot;mylist&quot;<br>3) &quot;name&quot;<br>4) &quot;key:__rand_int__&quot;<br>5) &quot;myset:__rand_int__&quot;<br>127.0.0.1:6379&gt; DBSIZE # size和key个数相关<br>(integer) 5<br></code></pre></td></tr></table></figure><p><code>keys *</code> ：查看当前数据库中所有的key。</p><p><code>flushdb</code>：清空当前数据库中的键值对。</p><p><code>flushall</code>：清空所有数据库的键值对。</p><blockquote><p>Redis是单线程的，Redis是基于内存操作的</p></blockquote><p>所以Redis的性能瓶颈不是CPU,而是机器内存和网络带宽。</p><p>那么为什么Redis的速度如此快呢，性能这么高呢？QPS达到10W+</p><blockquote><p>Redis为什么单线程还这么快？</p></blockquote><ul><li>误区1：高性能的服务器一定是多线程的？</li><li>误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</li></ul><p>核心：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上的，在内存存储数据情况下，单线程就是最佳的方案。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记03-redis-benchmark性能测试</title>
    <link href="/posts/2021/01/18/Redis%E7%AC%94%E8%AE%B003-redis-benchmark%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <url>/posts/2021/01/18/Redis%E7%AC%94%E8%AE%B003-redis-benchmark%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p><strong>redis-benchmark</strong>是一个压力测试工具，而且是官方自带的。</p><p>redis-benchmark的命令参数，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B003-redis-benchmark%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/paras.png" alt="参数"></p><p>下面我们来进行简单测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试：100个并发连接，100000个请求</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B003-redis-benchmark%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/resp.png" alt="测试结果"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记04-常用的基本命令</title>
    <link href="/posts/2021/01/17/Linux%E7%AC%94%E8%AE%B004-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/posts/2021/01/17/Linux%E7%AC%94%E8%AE%B004-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="常用的基本命令"><a href="#常用的基本命令" class="headerlink" title="常用的基本命令"></a>常用的基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote><p>绝对路径与相对路径</p></blockquote><p>cd：切换目录命令。</p><p>./：当前目录</p><p>cd .. 返回上一级目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZ2zeh7ydg2bbydds175q0Z ~]<span class="hljs-comment"># cd /</span><br>[root@iZ2zeh7ydg2bbydds175q0Z /]<span class="hljs-comment"># ls</span><br>bin   dev  home  lib64  mnt  patch  root  sbin  sys  usr  www<br>boot  etc  lib   media  opt  proc   run   srv   tmp  var<br>[root@iZ2zeh7ydg2bbydds175q0Z /]<span class="hljs-comment"># cd home</span><br>[root@iZ2zeh7ydg2bbydds175q0Z home]<span class="hljs-comment"># cd ..</span><br></code></pre></td></tr></table></figure><blockquote><p>ls：列出目录</p></blockquote><p>在Linux中 ls 可能是最经常被使用的。</p><p>-a：all，查看全部的文件，包含隐藏文件。</p><p>-l：列出所有的文件，包含文件的属性和权限，没有隐藏文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZ2zeh7ydg2bbydds175q0Z /]<span class="hljs-comment"># ls</span><br>bin   dev  home  lib64  mnt  patch  root  sbin  sys  usr  www<br>boot  etc  lib   media  opt  proc   run   srv   tmp  var<br>[root@iZ2zeh7ydg2bbydds175q0Z /]<span class="hljs-comment"># ls -a</span><br>.             bin   etc   lib64  opt    root  srv  usr<br>..            boot  home  media  patch  run   sys  var<br>.autorelabel  dev   lib   mnt    proc   sbin  tmp  www<br>[root@iZ2zeh7ydg2bbydds175q0Z /]<span class="hljs-comment"># ls -l</span><br>total 24<br>lrwxrwxrwx.   1 root root    7 May 11  2019 bin -&gt; usr/bin<br>dr-xr-xr-x.   5 root root 4096 Feb 18  2020 boot<br>drwxr-xr-x   19 root root 2940 Jan 16 11:10 dev<br>drwxr-xr-x. 100 root root 8192 Jan 16 15:42 etc<br>drwxr-xr-x.   6 root root   60 Jan 16 23:23 home<br>lrwxrwxrwx.   1 root root    7 May 11  2019 lib -&gt; usr/lib<br>lrwxrwxrwx.   1 root root    9 May 11  2019 lib64 -&gt; usr/lib64<br>drwxr-xr-x.   2 root root    6 May 11  2019 media<br>drwxr-xr-x.   2 root root    6 May 11  2019 mnt<br>drwxr-xr-x.   2 root root    6 May 11  2019 opt<br>drwxr-xr-x    2 root root   39 Jan 16 15:32 patch<br>dr-xr-xr-x  128 root root    0 Jan 16 11:10 proc<br>dr-xr-x---.   5 root root  192 Jan 16 15:33 root<br>drwxr-xr-x   32 root root  920 Jan 16 12:02 run<br>lrwxrwxrwx.   1 root root    8 May 11  2019 sbin -&gt; usr/sbin<br>drwxr-xr-x.   2 root root    6 May 11  2019 srv<br>dr-xr-xr-x   13 root root    0 Jan 16 19:10 sys<br>drwxrwxrwt.  11 root root 4096 Jan 17 15:46 tmp<br>drwxr-xr-x.  13 root root  156 Dec 13  2016 usr<br>drwxr-xr-x.  21 root root 4096 Jan 16 15:30 var<br>drwxr-xr-x    6 root root   64 Jan 16 12:02 www<br>[root@iZ2zeh7ydg2bbydds175q0Z /]<span class="hljs-comment"># ls -al</span><br>total 24<br>dr-xr-xr-x.  19 root root  268 Jan 16 15:32 .<br>dr-xr-xr-x.  19 root root  268 Jan 16 15:32 ..<br>-rw-r--r--    1 root root    0 Feb 18  2020 .autorelabel<br>lrwxrwxrwx.   1 root root    7 May 11  2019 bin -&gt; usr/bin<br>dr-xr-xr-x.   5 root root 4096 Feb 18  2020 boot<br>drwxr-xr-x   19 root root 2940 Jan 16 11:10 dev<br>drwxr-xr-x. 100 root root 8192 Jan 16 15:42 etc<br>drwxr-xr-x.   6 root root   60 Jan 16 23:23 home<br>lrwxrwxrwx.   1 root root    7 May 11  2019 lib -&gt; usr/lib<br>lrwxrwxrwx.   1 root root    9 May 11  2019 lib64 -&gt; usr/lib64<br>drwxr-xr-x.   2 root root    6 May 11  2019 media<br>drwxr-xr-x.   2 root root    6 May 11  2019 mnt<br>drwxr-xr-x.   2 root root    6 May 11  2019 opt<br>drwxr-xr-x    2 root root   39 Jan 16 15:32 patch<br>dr-xr-xr-x  128 root root    0 Jan 16 11:10 proc<br>dr-xr-x---.   5 root root  192 Jan 16 15:33 root<br>drwxr-xr-x   32 root root  920 Jan 16 12:02 run<br>lrwxrwxrwx.   1 root root    8 May 11  2019 sbin -&gt; usr/sbin<br>drwxr-xr-x.   2 root root    6 May 11  2019 srv<br>dr-xr-xr-x   13 root root    0 Jan 16 19:10 sys<br>drwxrwxrwt.  11 root root 4096 Jan 17 15:46 tmp<br>drwxr-xr-x.  13 root root  156 Dec 13  2016 usr<br>drwxr-xr-x.  21 root root 4096 Jan 16 15:30 var<br>drwxr-xr-x    6 root root   64 Jan 16 12:02 www<br></code></pre></td></tr></table></figure><blockquote><p>cd：切换目录</p></blockquote><p>cd 目录名（绝对路径都是以/开头的，相对路径对于当前目录该如何寻找）</p><ul><li><p>从<code>home</code>目录以相对路径进入<code>usr</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# cd ../usr<br>[root@iZ2zeh7ydg2bbydds175q0Z usr]# <br></code></pre></td></tr></table></figure></li><li><p>在<code>home</code>目录下创建一个目录<code>AtroxQW</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# cd home<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# mkdir AtroxQW<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  img  redis  www<br></code></pre></td></tr></table></figure></li><li><p>从根目录<code>/</code>以绝对路径，跳转到刚才创建的<code>AtroxQW</code>目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# cd /home/AtroxQW<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]#<br></code></pre></td></tr></table></figure></li><li><p>使用<code>~</code>回到当前的用户目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# cd ~<br>[root@iZ2zeh7ydg2bbydds175q0Z ~]# pwd<br>/root<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>pwd：显示当前用户所在的目录</p></blockquote><ul><li><p>进入<code>/bin</code>目录，并显示所在目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z ~]# cd /bin<br>[root@iZ2zeh7ydg2bbydds175q0Z bin]# pwd<br>/bin<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>mkdir：创建一个目录</p></blockquote><ul><li><p>在<code>/home</code>目录下创建<code>test1</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# mkdir test1<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  img  redis  test1  www<br></code></pre></td></tr></table></figure></li><li><p>以递归的形式，在<code>test1</code>目录下创建<code>test2</code>目录，其中<code>test2</code>目录下有<code>test3</code>目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# mkdir -p test1/test2/test3<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# cd test1<br>[root@iZ2zeh7ydg2bbydds175q0Z test1]# ls<br>test2<br>[root@iZ2zeh7ydg2bbydds175q0Z test1]# cd test2<br>[root@iZ2zeh7ydg2bbydds175q0Z test2]# ls<br>test3<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>rmdir：删除目录</p></blockquote><ul><li><p>删除上面<code>/home</code>目录下创建的<code>test1/test2/test3</code>层级目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  img  redis  test1  www<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# rmdir test1<br>rmdir: failed to remove &#x27;test1&#x27;: Directory not empty<br></code></pre></td></tr></table></figure></li><li><p>由于，<code>test1</code>目录非空，不能直接删除该目录，我们可以用下面的方法删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# rmdir -p test1/test2/test3<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  img  redis  www<br></code></pre></td></tr></table></figure></li><li><p><code>rmdir</code>仅能删除空的目录，如果下面存在文件，需要先删除文件。</p></li><li><p>递归删除多个目录 在<code>rmdir</code>后加上<code>-p</code>即可。</p></li></ul><blockquote><p>cp：复制文件或者目录</p></blockquote><ul><li><p>将<code>/home/img/atrox2.jpg</code>复制到<code>/home/AtroxQW</code>目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# cd /home<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  img  redis  www<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# cd img<br>[root@iZ2zeh7ydg2bbydds175q0Z img]# ls<br>atrox2.jpg<br>[root@iZ2zeh7ydg2bbydds175q0Z img]# cp atrox2.jpg ../AtroxQW<br>[root@iZ2zeh7ydg2bbydds175q0Z img]# cd ../AtroxQW<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls<br>atrox2.jpg<br></code></pre></td></tr></table></figure></li><li><p>将<code>atrox2.jpg</code>再次复制到<code>/home/AtroxQW</code>目录下，文件名重复选择覆盖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z img]# cp atrox2.jpg ../AtroxQW<br>cp: overwrite &#x27;../AtroxQW/atrox2.jpg&#x27;? y<br>[root@iZ2zeh7ydg2bbydds175q0Z img]# <br></code></pre></td></tr></table></figure></li></ul><blockquote><p>rm：移除文件或者目录</p></blockquote><p>-f：忽略不存在的文件，不会出现警告，强制删除。</p><p>-r：递归删除目录</p><p>-i：互动，删除询问是否删除</p><ul><li><p>删除<code>/home/AtroxQW</code>目录下的图片<code>atrox2.jpg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# clear<br>[root@iZ2zeh7ydg2bbydds175q0Z /]# cd /home/AtroxQW<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls<br>atrox2.jpg<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# rm -rf atrox2.jpg <br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# <br></code></pre></td></tr></table></figure></li><li><p>删除系统所有的文件，删库跑路。<strong>不要尝试！</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>mv：移动文件或者目录或者重命名文件</p></blockquote><p>-f：强制移动</p><p>-u：只替换已经更新过的文件</p><ul><li><p>将<code>/home/img</code>目录下的<code>atrox2.jpg</code>移动到<code>/home/AtroxQW</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# mv img/atrox2.jpg AtroxQW/<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  img  redis  www<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# cd AtroxQW<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls<br>atrox2.jpg<br></code></pre></td></tr></table></figure></li><li><p>将<code>home/AtroxQW</code>下的<code>atrox2.jpg</code>重命名为<code>atrox3.jpg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# mv atrox2.jpg atrox3.jpg<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls<br>atrox3.jpg<br></code></pre></td></tr></table></figure></li></ul><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><blockquote><p>文件属性</p></blockquote><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用<code>ll</code>或者<code>ls -ll</code>命令来显示一个文件的属性以及文件所属的用户和组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# ls -ll<br>total 24<br>lrwxrwxrwx.   1 root root    7 May 11  2019 bin -&gt; usr/bin<br>dr-xr-xr-x.   5 root root 4096 Feb 18  2020 boot<br>drwxr-xr-x   19 root root 2940 Jan 16 11:10 dev<br>drwxr-xr-x. 100 root root 8192 Jan 16 15:42 etc<br>drwxr-xr-x.   7 root root   75 Jan 17 16:27 home<br>lrwxrwxrwx.   1 root root    7 May 11  2019 lib -&gt; usr/lib<br>lrwxrwxrwx.   1 root root    9 May 11  2019 lib64 -&gt; usr/lib64<br>drwxr-xr-x.   2 root root    6 May 11  2019 media<br>drwxr-xr-x.   2 root root    6 May 11  2019 mnt<br>drwxr-xr-x.   2 root root    6 May 11  2019 opt<br>drwxr-xr-x    2 root root   39 Jan 16 15:32 patch<br>dr-xr-xr-x  128 root root    0 Jan 16 11:10 proc<br>dr-xr-x---.   5 root root  192 Jan 16 15:33 root<br>drwxr-xr-x   32 root root  920 Jan 16 12:02 run<br>lrwxrwxrwx.   1 root root    8 May 11  2019 sbin -&gt; usr/sbin<br>drwxr-xr-x.   2 root root    6 May 11  2019 srv<br>dr-xr-xr-x   13 root root    0 Jan 16 19:10 sys<br>drwxrwxrwt.  11 root root 4096 Jan 17 16:54 tmp<br>drwxr-xr-x.  13 root root  156 Dec 13  2016 usr<br>drwxr-xr-x.  21 root root 4096 Jan 16 15:30 var<br>drwxr-xr-x    6 root root   64 Jan 16 12:02 www<br></code></pre></td></tr></table></figure><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等：</p><ul><li>当为[ d ]则是目录</li><li>当为[ - ]则是文件；</li><li>若是[ l ]则表示为链接文档 ( link file )；</li><li>若是[ b ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记04-常用的基本命令/file_properties.jpg" alt="文件属性"><p>后面，是改文件的属主和数组，有boot文件来说，它是一个目录文件，属主和数组都是root。</p><p>再后面，就是文件的创建时间。</p><p>如果是链接文件，后面会出现一个链接，相当于Windows中快捷方式 -&gt; 绝对位置。</p><blockquote><p>修改文件属性</p></blockquote><ol><li><p><strong>chgrp：更改文件属组</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">chgrp [-R] 属组名 文件名</span><br></code></pre></td></tr></table></figure><p>将<code>/home/AtroxQW</code>目录下的<code>atrox3.jpg</code>的属组改为<code>AtroxQW</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls -ll<br>total 900<br>-rw-r--r-- 1 root root 918515 Jan 16 23:23 atrox3.jpg<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# chgrp -R AtroxQW atrox3.jpg <br>chgrp: invalid group: ‘AtroxQW’<br></code></pre></td></tr></table></figure><p>现在系统中没有这个属组，如果有则可以修改。</p></li><li><p><strong>chown：更改文件属主，也可以同时更改文件属组</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> chown [-R] 属主名 文件名</span><br><span class="hljs-meta">#</span><span class="bash"> chown [-R] 属主名: 属组名 文件名</span><br></code></pre></td></tr></table></figure></li><li><p><strong>chmod：更改文件的9个属性</strong></p><p>这个指令用于更改文件的权限操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> chomd [-R] xyz 文件或目录</span><br></code></pre></td></tr></table></figure><p>Linux文件属性有两种设置方式，一种是数字（最常用），一种是符号。</p><p>Linux文件的基本权限有九个，分别是<code>owner/group/others</code>三中身份各有自己的<code>read/write/execute</code>权限。</p><p>文件的权限字符为：[-rwxrwxrwx]，这9个权限是三三一组的！其中我们可以用数字来代表各个权限，各权限的数字对照表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">r: 4  w: 2  x:1<br></code></pre></td></tr></table></figure><p>每种身份(owner/group/others)各自的三个权限(rwx)分数是需要累加的，例如当权限为：[-rwxrwx—]分数则是：</p><ul><li>owner = rwx = 4 + 2 + 1 = 7</li><li>group = rwx = 4 + 2 + 1 = 7</li><li>others = — = 0 + 0 + 0 = 0</li></ul><p>对于赋予权限的命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> chmod -R 770 filename</span><br></code></pre></td></tr></table></figure><p>例如，将<code>/home/Atrox/atrox3.jpg</code>文件，赋予权限所有用户可读可写可执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls -ll<br>total 900<br>-rw-r--r-- 1 root root 918515 Jan 16 23:23 atrox3.jpg<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# chmod -R 777 atrox3.jpg <br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls<br>atrox3.jpg<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls -ll<br>total 900<br>-rwxrwxrwx 1 root root 918515 Jan 16 23:23 atrox3.jpg<br></code></pre></td></tr></table></figure></li></ol><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote><p>查看文件内容</p></blockquote><p>Linux系统使用以下命令来查看文件的内容，我们选择<code>/etc/sysconfig/network-scripts</code>目录，这其中有一个默认网络配置文件<code>ifcfg-eth0</code>。</p><ul><li><p><strong>cat</strong>：由第一行开始显示文件内容，用来读文章或者读取配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z network-scripts]# cat ifcfg-eth0 <br><span class="hljs-meta">#</span><span class="bash"> Created by cloud-init on instance boot automatically, <span class="hljs-keyword">do</span> not edit.</span><br><span class="hljs-meta">#</span><br><span class="bash">BOOTPROTO=dhcp</span><br>DEVICE=eth0<br>ONBOOT=yes<br>STARTMODE=auto<br>TYPE=Ethernet<br>USERCTL=no<br></code></pre></td></tr></table></figure></li><li><p><strong>tac</strong>：从最后一行开始显示，tac 是 cat 的倒着版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z network-scripts]# ls<br>ifcfg-eth0<br>[root@iZ2zeh7ydg2bbydds175q0Z network-scripts]# tac ifcfg-eth0 <br>USERCTL=no<br>TYPE=Ethernet<br>STARTMODE=auto<br>ONBOOT=yes<br>DEVICE=eth0<br>BOOTPROTO=dhcp<br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Created by cloud-init on instance boot automatically, do not edit.</span></span><br></code></pre></td></tr></table></figure></li><li><p><strong>nl</strong>：显示的时候，输出行号，适合查看代码的时候，较为常用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z network-scripts]# ls<br>ifcfg-eth0<br>[root@iZ2zeh7ydg2bbydds175q0Z network-scripts]# nl ifcfg-eth0 <br>     1# Created by cloud-init on instance boot automatically, do not edit.<br>     2#<br>     3BOOTPROTO=dhcp<br>     4DEVICE=eth0<br>     5ONBOOT=yes<br>     6STARTMODE=auto<br>     7TYPE=Ethernet<br>     8USERCTL=no<br></code></pre></td></tr></table></figure></li><li><p><strong>more</strong>：一页一页的显示文件内容，我们使用<code>/etc</code>目录下的<code>csh.login</code>文件，可以使用<code>space</code>空格进行翻页，<code>enter</code>可以向下看一行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z etc]# more csh.login<br><span class="hljs-meta">#</span><span class="bash"> /etc/csh.login</span><br><br><span class="hljs-meta">#</span><span class="bash"> System wide environment and startup programs, <span class="hljs-keyword">for</span> login setup</span><br><br><span class="hljs-meta">#</span><span class="bash">add sbin directories to the path</span><br>foreach p ( /usr/local/sbin /usr/sbin )<br>switch (&quot;:$&#123;PATH&#125;:&quot;)<br>case &quot;*:$&#123;p&#125;:*&quot;:<br>breaksw<br>default:<br>if ( $uid == 0 ) then<br>                        set path = ( $&#123;p&#125; $&#123;path:q&#125; )<br>else<br>                        set path = ( $&#123;path:q&#125; $&#123;p&#125; )<br>endif<br>breaksw<br>endsw<br>end<br><br>setenv HOSTNAME `/usr/bin/hostname`<br>set history=1000<br><br>if ( -d /etc/profile.d ) then<br>        set nonomatch<br>        foreach i ( /etc/profile.d/*.csh )<br>                if ( -r &quot;$i&quot; ) then<br>                        if ($?prompt) then<br>                              source &quot;$i&quot;<br>                        else<br><span class="hljs-meta">--More--(81%</span><span class="bash">)</span><br></code></pre></td></tr></table></figure></li><li><p><strong>less</strong>：<code>less</code>与<code>more</code>类似，但是比more更好的是，它可以往前翻页，这里<code>space</code>空格可以翻页，上下键代表上下翻动页面，退出时按<code>q</code>退出命令回到命令行。查找字符串 /要查询的字符向下查询，向上查询使用？要查询的字符串，n 继续搜寻下一个，N 上寻找。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z etc]# less csh.login <br><br><br><span class="hljs-meta">#</span><span class="bash"> /etc/csh.login</span><br><br><span class="hljs-meta">#</span><span class="bash"> System wide environment and startup programs, <span class="hljs-keyword">for</span> login setup</span><br><br><span class="hljs-meta">#</span><span class="bash">add sbin directories to the path</span><br>foreach p ( /usr/local/sbin /usr/sbin )<br>        switch (&quot;:$&#123;PATH&#125;:&quot;)<br>        case &quot;*:$&#123;p&#125;:*&quot;:<br>                breaksw<br>        default:<br>                if ( $uid == 0 ) then<br>                        set path = ( $&#123;p&#125; $&#123;path:q&#125; )<br>                else<br>                        set path = ( $&#123;path:q&#125; $&#123;p&#125; )<br>                endif<br>                breaksw<br>        endsw<br>end<br><br>setenv HOSTNAME `/usr/bin/hostname`<br>set history=1000<br><br>if ( -d /etc/profile.d ) then<br>        set nonomatch<br>        foreach i ( /etc/profile.d/*.csh )<br>                if ( -r &quot;$i&quot; ) then<br>                                if ($?prompt) then<br>                                      source &quot;$i&quot;<br>                                else<br>                                      source &quot;$i&quot; &gt;&amp; /dev/null<br>                                endif<br>/set<br></code></pre></td></tr></table></figure></li><li><p><strong>head</strong>：只看前多少行，通过<code>-n</code>参数来控制显示行数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z etc]# head -n 5 csh.login<br><span class="hljs-meta">#</span><span class="bash"> /etc/csh.login</span><br><br><span class="hljs-meta">#</span><span class="bash"> System wide environment and startup programs, <span class="hljs-keyword">for</span> login setup</span><br><br><span class="hljs-meta">#</span><span class="bash">add sbin directories to the path</span><br></code></pre></td></tr></table></figure></li><li><p><strong>tail</strong>：只看文件尾部多少行，通过<code>-n</code>参数来控制显示行数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z etc]# tail -n 5 csh.login <br>                        endif<br>                endif<br>        end<br>        unset i nonomatch<br>endif<br></code></pre></td></tr></table></figure></li></ul><p>我们可以使用<code>man</code>命令来查看各个命令的使用文档，如：<code>man cp</code></p><p>经过演示，我们收获一个网络配置的目录：<code>/etc/sysconfig/network-scripts</code>，我们在命令行通过<code>ifconfig</code>命令也可以查看网络配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# ifconfig<br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 172.27.4.42  netmask 255.255.240.0  broadcast 172.27.15.255<br>        inet6 fe80::216:3eff:fe2c:7f4  prefixlen 64  scopeid 0x20&lt;link&gt;<br>        ether 00:16:3e:2c:07:f4  txqueuelen 1000  (Ethernet)<br>        RX packets 576227  bytes 781997326 (745.7 MiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 195816  bytes 48479173 (46.2 MiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;<br>        loop  txqueuelen 1000  (Local Loopback)<br>        RX packets 174  bytes 13491 (13.1 KiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 174  bytes 13491 (13.1 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></td></tr></table></figure><blockquote><p>Linux链接的概念</p></blockquote><p>Linux的链接分为两种：硬链接和软链接。</p><p><strong>硬链接</strong>：A—&gt;B；假设B是A的硬链接，那么它们两个指向同一个文件，允许一个文件拥有多个路径，用户可以通过这个机制建立硬链接到一些重要文件上，防止误删。</p><p><strong>软链接</strong>：类似Windows下的快捷方式，删除源文件后，快捷方式也就访问不了。</p><p><code>ln</code>创建链接命令</p><p><code>touch</code>创建文件命令</p><p><code>echo</code>输入字符串，也可以输入到文件中</p><ul><li><p>在<code>/home</code>目录下新建一个<code>f1</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# touch f1<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  f1  img  redis  www<br></code></pre></td></tr></table></figure></li><li><p>在<code>/home</code>目录下新建<code>f1</code>文件硬链接<code>f2</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# ln f1 f2<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  f1  f2  img  redis  www<br></code></pre></td></tr></table></figure></li><li><p>在<code>/home</code>目录下新建<code>f1</code>文件软链接<code>f3</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# ln -s f1 f3<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  f1  f2  f3  img  redis  www<br></code></pre></td></tr></table></figure></li><li><p>查看<code>/home</code>目录下文件属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# ls -ll<br>total 0<br>drwxr-xr-x 2 root  root  24 Jan 17 16:54 AtroxQW<br>drwxr-xr-x 2 root  root   6 Jan 16 23:21 environment<br>-rw-r--r-- 2 root  root   0 Jan 17 19:59 f1<br>-rw-r--r-- 2 root  root   0 Jan 17 19:59 f2<br>lrwxrwxrwx 1 root  root   2 Jan 17 22:28 f3 -&gt; f1<br>drwxr-xr-x 2 root  root   6 Jan 17 16:51 img<br>drwx------ 2 redis redis 62 Jan 16 15:42 redis<br>drwx------ 3 www   www   87 Jan 16 15:42 www<br></code></pre></td></tr></table></figure></li><li><p>将”i love u”输入到<code>f1</code>文件中，并查看<code>f1</code>内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# echo &quot;i love u&quot; &gt;&gt;f1<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# cat f1<br>i love u<br></code></pre></td></tr></table></figure></li><li><p>访问<code>f2</code>文件内容和<code>f3</code>文件内容，<code>f1</code>内容已同步到这两个文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# cat f2<br>i love u<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# cat f3<br>i love u<br></code></pre></td></tr></table></figure></li><li><p>删除<code>f1</code>，查看<code>f2</code>和<code>f3</code>的状态，硬链接<code>f2</code>文件内容还存在，<code>f3</code>已经爆红无效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# rm -rf f1<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  f2  f3  img  redis  www<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# cat f2<br>i love u<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# cat f3<br>cat: f3: No such file or directory<br></code></pre></td></tr></table></figure></li></ul><h3 id="Vim-编辑器"><a href="#Vim-编辑器" class="headerlink" title="Vim 编辑器"></a>Vim 编辑器</h3><blockquote><p>什么是Vim编辑器</p></blockquote><p>vim 通过一些插件可以实现和IDE一样的功能！</p><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。尤其是Linux中，必须要会使用Vim（查看内容，编辑内容，保存内容！）</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p><p>vim 则可以说是程序开发者的一项很好用的工具。</p><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>连 vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><p>vim 键盘图：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B004-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/vim.jpg" alt="vim键盘图"></p><blockquote><p>三种使用模式</p></blockquote><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式</strong>（Command mode），<strong>输入模式</strong>（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是：</p><p><strong>命令模式</strong>：</p><p>用户刚刚启动 vi/vim，便进入了命令模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z ~]# vim atrox.txt<br><br><br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>&quot;atrox.txt&quot; [New File]                                   0,0-1         All<br></code></pre></td></tr></table></figure><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li>i 切换到输入模式，以输入字符。</li><li>x 删除当前光标所在处的字符。</li><li>: 切换到底线命令模式，以在最底一行输入命令。 如果是编辑模式，需要先退出编辑模式！ESC</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><p><strong>输入模式</strong>：</p><p>在命令模式下按下i就进入了输入模式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z ~]# vim atrox.txt<br><br><br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>~                                                                          <br>-- INSERT --                                             0,1           All<br></code></pre></td></tr></table></figure><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及shift组合</strong>：输入字符。</li><li><strong>Enter</strong>：回车键，换行。</li><li><strong>Back Space</strong>：退格键，删除光标前一个字符。 </li><li><strong>Del</strong>：删除键，删除光标后一个字符。</li><li><strong>方向键</strong>：在文本中移动光标。</li><li><strong>Home/End</strong>：移动光标到行首/行尾。</li><li><strong>Page Up/Page Down</strong>：上/下翻页。</li><li><strong>Insert</strong>：切换光标为输入/替换模式，光标将变成竖线/下划线。</li><li><strong>Esc</strong>：退出输入模式，切换到命令模式。</li></ul><p><strong>底线命令模式</strong>：</p><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。光标就移动到了最底下，就可以在这里输入一些底线命令了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">~                                                                          <br>:  <br></code></pre></td></tr></table></figure><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：wq</p><ul><li><strong>q</strong>：退出程序</li><li><strong>w</strong>：保存文件</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-symbol">~                                                                          </span><br><span class="hljs-symbol"></span>:wq   <br></code></pre></td></tr></table></figure><p>按ESC键可随时退出底线命令模式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看文件</span><br>cat atrox.txt<br><span class="hljs-meta">#</span><span class="bash"> 如果文件存在，为编辑文件；如果不存在，会新建文件。</span><br>vim atrox.txt<br></code></pre></td></tr></table></figure><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B004-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/vim2.jpg" alt="vim三种模式"></p><blockquote><p>Vim按键说明</p></blockquote><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p><table><thead><tr><th>移动光标的方法</th><th></th></tr></thead><tbody><tr><td>h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td>j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td>k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td>l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行，配置文件中空格较多！</td></tr><tr><td>数字 &lt; space&gt;</td><td>那个 n 表示『数字』，例如 20 。快捷切换光标， 数字 + 空格</td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td>$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td>G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20行(可配合 :set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td></tr><tr><td>数字<Enter></Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><table><thead><tr><th>搜索替换</th><th></th></tr></thead><tbody><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird后，按下 N 则表示『向上』搜寻 vbird 。</td></tr></tbody></table><table><thead><tr><th>删除、复制与粘贴</th><th></th></tr></thead><tbody><tr><td>x,X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td>dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p,P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成30 行。(常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[ctrl]+r</td><td>重做上一个动作。(常用)</td></tr></tbody></table><p><strong>第二部分：一般模式切换到编辑模式的可用按钮说明</strong></p><table><thead><tr><th>进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td>i,I</td><td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td></tr><tr><td>a,A</td><td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』，A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o,O</td><td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td>r,R</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><p><strong>第三部分：一般模式切换到指令行模式的可用按钮说明</strong></p><table><thead><tr><th>指令行的存储、离开等指令</th><th></th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td>:set nu 设置行号，代码中经常会使用！</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><p>在公司中，我们用的一般不是root账户。</p><blockquote><p>简介</p></blockquote><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除与修改。</li><li>用户口令的管理。</li><li>用户组的管理。</li></ul><blockquote><p>用户账号的管理</p></blockquote><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。</p><p>属主，属组。</p><blockquote><p>useradd：添加用户</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">useradd</span> -选项 用户名<br></code></pre></td></tr></table></figure><p>选项：</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-m　使用者目录如不存在则自动建立。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号</li></ul><p>用户名：</p><ul><li>指定新账号的登录名。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# useradd -m qiaowei<br>[root@iZ2zeh7ydg2bbydds175q0Z home]# ls<br>AtroxQW  environment  img  qiaowei  redis  www<br></code></pre></td></tr></table></figure><p>理解一下本质：Linux中一切皆文件，这里的添加用户说白了就是往某一个文件中写入用户的信息了！这个信息我们可以在<code>/etc/passwd</code>中看到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z etc]# cat passwd<br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>sync:x:5:0:sync:/sbin:/bin/sync<br>shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>halt:x:7:0:halt:/sbin:/sbin/halt<br>mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>operator:x:11:0:operator:/root:/sbin/nologin<br>games:x:12:100:games:/usr/games:/sbin/nologin<br>ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>nobody:x:65534:65534:Kernel Overflow User:/:/sbin/nologin<br>dbus:x:81:81:System message bus:/:/sbin/nologin<br>systemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologin<br>systemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologin<br>tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin<br>polkitd:x:998:996:User for polkitd:/:/sbin/nologin<br>unbound:x:997:994:Unbound DNS resolver:/etc/unbound:/sbin/nologin<br>libstoragemgmt:x:996:993:daemon account for libstoragemgmt:/var/run/lsm:/sbin/nologin<br>cockpit-ws:x:995:991:User for cockpit-ws:/:/sbin/nologin<br>setroubleshoot:x:994:990::/var/lib/setroubleshoot:/sbin/nologin<br>sssd:x:993:989:User for sssd:/:/sbin/nologin<br>insights:x:992:988:Red Hat Insights:/var/lib/insights:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>chrony:x:991:987::/var/lib/chrony:/sbin/nologin<br>tcpdump:x:72:72::/:/sbin/nologin<br>nscd:x:28:28:NSCD Daemon:/:/sbin/nologin<br>exim:x:93:93::/var/spool/exim:/sbin/nologin<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>www:x:1000:1000::/home/www:/sbin/nologin<br>mysql:x:1001:1001::/home/mysql:/sbin/nologin<br>rngd:x:990:986:Random Number Generator Daemon:/var/lib/rngd:/sbin/nologin<br>redis:x:1002:1002::/home/redis:/sbin/nologin<br>qiaowei:x:1003:1003::/home/qiaowei:/bin/bash<br></code></pre></td></tr></table></figure><p>最后一行，就是我们刚才创建的用户信息</p><blockquote><p>usermod：修改用户</p></blockquote><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用usermod命令，其格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">usermod 选项 用户名<br></code></pre></td></tr></table></figure><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><p>例如：修改qiaowei用户的主目录为<code>/home/z</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# usermod -d /home/z qiaowei<br></code></pre></td></tr></table></figure><p>查询<code>/etc/passwd</code>，发现最后一行的qiaowei用户信息主目录已经改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">qiaowei:x:1003:1003::/home/z:/bin/bash<br></code></pre></td></tr></table></figure><blockquote><p>su：切换用户</p></blockquote><ol><li><p>从root切换普通用户的命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# su qiaowei<br>[qiaowei@iZ2zeh7ydg2bbydds175q0Z /]$ <br></code></pre></td></tr></table></figure></li><li><p>从普通用户切换到root用户：exit或sudo su</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[qiaowei@iZ2zeh7ydg2bbydds175q0Z /]$ exit<br>exit<br>[root@iZ2zeh7ydg2bbydds175q0Z /]# <br></code></pre></td></tr></table></figure></li><li><p>在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令。</p></li><li><p>在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p></li><li><p>$表示普通用户；#表示超级用户，也就是root用户</p></li></ol><blockquote><p>userdel：删除用户</p></blockquote><p>如果一个用户的账号不再使用，可以从系统中删除。</p><p>删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用userdel命令，其格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> userdel 选项 用户名</span><br></code></pre></td></tr></table></figure><p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# userdel -r qiaowei<br></code></pre></td></tr></table></figure><p>此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p><blockquote><p>passwd：用户密码管理</p></blockquote><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p><p>命令的格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> passwd 选项 用户名</span><br></code></pre></td></tr></table></figure><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p>例如，如果当前用户是qiaowei，则下面的命令修改该用户自己的口令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> $ passwd</span><br>Old password:******<br>New password:*******<br>Re-enter new password:*******<br></code></pre></td></tr></table></figure><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> passwd qiaowei</span><br>New password:*******<br>Re-enter new password:*******<br></code></pre></td></tr></table></figure><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p><blockquote><p>冻结锁定账户</p></blockquote><p>root，比如qiaowei辞职了，冻结这个账号，一旦冻结，这个人就登不上系统了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> passwd -l qiaowei</span> <br><span class="hljs-meta">#</span><span class="bash"> passwd -d qiaowei</span><br></code></pre></td></tr></table></figure><p>第一个命令为用 -l(lock) 选项锁定某一用户，使其不能登录。</p><p>第二个命令为将用户的口令删除，这样用户下一次登录时，系统就不再允许该用户登录了。</p><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对<code>/etc/group</code>文件的更新。</p><blockquote><p>groupadd：添加新的用户组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupadd 选项 用户组<br></code></pre></td></tr></table></figure><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><ul><li><p>创建开发用户组(develop)组的ID号是520</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# groupadd -g 520 develop<br></code></pre></td></tr></table></figure><p>去<code>/etc/group</code>文件中查看刚刚创建的用户组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# cat /etc/group<br>develop:x:520:<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>groupmod：修改用户组的属性</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupmod 选项 用户组<br></code></pre></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><p>比如，将上面创建的<code>develop</code>用户组标识号改为666，组名改为<code>operation</code>运维组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# groupmod -g 666 -n operation develop<br></code></pre></td></tr></table></figure><p>去<code>/etc/group</code>文件中查看刚刚修改的用户组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">operation:x:666:<br></code></pre></td></tr></table></figure><blockquote><p>newgrp：用户切换用户组</p></blockquote><p>将当前<code>qiaowei</code>用户从当前用户组切换到<code>operation</code>用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> newgrp operation</span><br></code></pre></td></tr></table></figure><blockquote><p>groupdel：删除用户组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> groupdel operation</span><br></code></pre></td></tr></table></figure><blockquote><p>/etc/passwd</p></blockquote><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p><p>下面分别介绍这些文件的内容。</p><p><strong>/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p><p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs groovy">＃ cat <span class="hljs-regexp">/etc/</span>passwd<br><br><span class="hljs-attr">root:</span><span class="hljs-attr">x:</span><span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-attr">Superuser:</span>/:<br><span class="hljs-attr">daemon:</span><span class="hljs-attr">x:</span><span class="hljs-number">1</span>:<span class="hljs-number">1</span>:System <span class="hljs-attr">daemons:</span>/<span class="hljs-attr">etc:</span><br><span class="hljs-attr">bin:</span><span class="hljs-attr">x:</span><span class="hljs-number">2</span>:<span class="hljs-number">2</span>:Owner of system <span class="hljs-attr">commands:</span>/<span class="hljs-attr">bin:</span><br><span class="hljs-attr">sys:</span><span class="hljs-attr">x:</span><span class="hljs-number">3</span>:<span class="hljs-number">3</span>:Owner of system <span class="hljs-attr">files:</span><span class="hljs-regexp">/usr/</span><span class="hljs-attr">sys:</span><br><span class="hljs-attr">adm:</span><span class="hljs-attr">x:</span><span class="hljs-number">4</span>:<span class="hljs-number">4</span>:System <span class="hljs-attr">accounting:</span><span class="hljs-regexp">/usr/</span><span class="hljs-attr">adm:</span><br><span class="hljs-attr">uucp:</span><span class="hljs-attr">x:</span><span class="hljs-number">5</span>:<span class="hljs-number">5</span>:UUCP <span class="hljs-attr">administrator:</span><span class="hljs-regexp">/usr/</span>lib/<span class="hljs-attr">uucp:</span><br><span class="hljs-attr">auth:</span><span class="hljs-attr">x:</span><span class="hljs-number">7</span>:<span class="hljs-number">21</span>:Authentication <span class="hljs-attr">administrator:</span><span class="hljs-regexp">/tcb/</span>files/<span class="hljs-attr">auth:</span><br><span class="hljs-attr">cron:</span><span class="hljs-attr">x:</span><span class="hljs-number">9</span>:<span class="hljs-number">16</span>:Cron <span class="hljs-attr">daemon:</span><span class="hljs-regexp">/usr/</span>spool/<span class="hljs-attr">cron:</span><br><span class="hljs-attr">listen:</span><span class="hljs-attr">x:</span><span class="hljs-number">37</span>:<span class="hljs-number">4</span>:Network <span class="hljs-attr">daemon:</span><span class="hljs-regexp">/usr/</span>net/<span class="hljs-attr">nls:</span><br><span class="hljs-attr">lp:</span><span class="hljs-attr">x:</span><span class="hljs-number">71</span>:<span class="hljs-number">18</span>:Printer <span class="hljs-attr">administrator:</span><span class="hljs-regexp">/usr/</span>spool/<span class="hljs-attr">lp:</span><br></code></pre></td></tr></table></figure><p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录<span class="hljs-keyword">Shell</span><br></code></pre></td></tr></table></figure><p>1）”用户名”是代表用户账号的字符串。</p><p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p><p>2）“口令”一些系统中，存放着加密后的用户口令字。</p><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p><p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p><p>4）“组标识号”字段记录的是用户所属的用户组。</p><p>它对应着/etc/group文件中的一条记录。</p><p>5)“注释性描述”字段记录着用户的一些个人情况。</p><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p><p>6)“主目录”，也就是用户的起始工作目录。</p><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p><p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p><p>8)系统中有一类用户称为伪用户（pseudo users）。</p><p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p><p>常见的伪用户如下所示：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">伪 用 户 含 义<br>bin 拥有可执行的用户命令文件<br>sys 拥有系统文件<br>adm 拥有帐户文件<br>uucp UUCP使用<br><span class="hljs-built_in">lp</span> <span class="hljs-built_in">lp</span>或lpd子系统使用<br>nobody NFS使用<br></code></pre></td></tr></table></figure><blockquote><p>/etc/shadow</p></blockquote><p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p><p>由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p><p><strong>2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</strong></p><p>它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></code></pre></td></tr></table></figure><ol><li>“登录名”是与/etc/passwd文件中的登录名相一致的用户账号</li><li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li><li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li><li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li><li>“最大时间间隔”指的是口令保持有效的最大天数。</li><li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li><li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li><li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li></ol><blockquote><p>/etc/group</p></blockquote><p>用户组的所有信息都存放在/etc/group文件中。</p><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p><p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p><p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p><p>用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">组名:口令:组标识号:组内用户列表</span><br></code></pre></td></tr></table></figure><ol><li>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</li><li>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li><li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li><li>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li></ol><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><blockquote><p>概述</p></blockquote><p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux磁盘管理常用命令为 df、du。</p><ul><li>df ：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li></ul><blockquote><p>df</p></blockquote><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">df</span> <span class="hljs-selector-attr">[-ahikHTm]</span> <span class="hljs-selector-attr">[目录或文件名]</span><br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><p>测试：</p><p>将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# df<br>Filesystem     1K-blocks    Used Available Use% Mounted on<br>devtmpfs         1920368       0   1920368   0% /dev<br>tmpfs            1935776       0   1935776   0% /dev/shm<br>tmpfs            1935776     496   1935280   1% /run<br>tmpfs            1935776       0   1935776   0% /sys/fs/cgroup<br>/dev/vda1       41931756 5389692  36542064  13% /<br>tmpfs             387152       0    387152   0% /run/user/0<br></code></pre></td></tr></table></figure><p>将容量结果以易读的容量格式显示出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# df -h<br>Filesystem      Size  Used Avail Use% Mounted on<br>devtmpfs        1.9G     0  1.9G   0% /dev<br>tmpfs           1.9G     0  1.9G   0% /dev/shm<br>tmpfs           1.9G  496K  1.9G   1% /run<br>tmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup<br>/dev/vda1        40G  5.2G   35G  13% /<br>tmpfs           379M     0  379M   0% /run/user/0<br></code></pre></td></tr></table></figure><p>将系统内的所有特殊文件格式及名称都列出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# df -aT<br>Filesystem     Type        1K-blocks    Used Available Use% Mounted on<br>sysfs          sysfs               0       0         0    - /sys<br>proc           proc                0       0         0    - /proc<br>devtmpfs       devtmpfs      1920368       0   1920368   0% /dev<br>securityfs     securityfs          0       0         0    - /sys/kernel/security<br>tmpfs          tmpfs         1935776       0   1935776   0% /dev/shm<br>devpts         devpts              0       0         0    - /dev/pts<br>tmpfs          tmpfs         1935776     496   1935280   1% /run<br>tmpfs          tmpfs         1935776       0   1935776   0% /sys/fs/cgroup<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/systemd<br>pstore         pstore              0       0         0    - /sys/fs/pstore<br>bpf            bpf                 0       0         0    - /sys/fs/bpf<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/hugetlb<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/freezer<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/perf_event<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/net_cls,net_prio<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/devices<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/blkio<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/memory<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpu,cpuacct<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpuset<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/pids<br>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/rdma<br>configfs       configfs            0       0         0    - /sys/kernel/config<br>/dev/vda1      xfs          41931756 5389672  36542084  13% /<br>systemd-1      -                   -       -         -    - /proc/sys/fs/binfmt_misc<br>mqueue         mqueue              0       0         0    - /dev/mqueue<br>debugfs        debugfs             0       0         0    - /sys/kernel/debug<br>hugetlbfs      hugetlbfs           0       0         0    - /dev/hugepages<br>tracefs        tracefs             0       0         0    - /sys/kernel/debug/tracing<br>tmpfs          tmpfs          387152       0    387152   0% /run/user/0<br>binfmt_misc    binfmt_misc         0       0         0    - /proc/sys/fs/binfmt_misc<br></code></pre></td></tr></table></figure><p>将 /etc 底下的可用的磁盘容量以易读的容量格式显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# df -h /etc<br>Filesystem      Size  Used Avail Use% Mounted on<br>/dev/vda1        40G  5.2G   35G  13% /<br></code></pre></td></tr></table></figure><blockquote><p>du</p></blockquote><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">du [-ahskm] 文件或目录名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G/M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><p>测试：</p><p>只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# du<br>4./www/.oracle_jre_usage<br>16./www<br>12./redis<br>0./environment<br>0./img<br>900./AtroxQW<br>16./qiaowei<br>944.<br></code></pre></td></tr></table></figure><p>显示出文件夹里面的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# du -a<br>4./www/.bash_logout<br>4./www/.bash_profile<br>4./www/.bashrc<br>4./www/.oracle_jre_usage/aa694b02fe91242e.timestamp<br>4./www/.oracle_jre_usage<br>16./www<br>4./redis/.bash_logout<br>4./redis/.bash_profile<br>4./redis/.bashrc<br>12./redis<br>0./environment<br>0./img<br>900./AtroxQW/atrox3.jpg<br>900./AtroxQW<br>4./qiaowei/.bash_logout<br>4./qiaowei/.bash_profile<br>4./qiaowei/.bashrc<br>4./qiaowei/.bash_history<br>16./qiaowei<br>944.<br></code></pre></td></tr></table></figure><p>检查根目录底下每个目录所占用的容量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# du -sm /*<br>0/bin<br>198/boot<br>0/dev<br>23/etc<br>1/home<br>0/lib<br>0/lib64<br>0/media<br>0/mnt<br>0/opt<br>1/patch<br>0/proc<br>1/root<br>1/run<br>0/sbin<br>0/srv<br>0/sys<br>77/tmp<br>2613/usr<br>200/var<br></code></pre></td></tr></table></figure><p>通配符 * 来代表每个目录。</p><p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><blockquote><p>磁盘挂载与卸除</p></blockquote><p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p><p>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。</p><p>磁盘挂载语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将 /dev/hdc6 挂载到 /mnt/hdc6 上面！</span><br>[root@www ~]# mkdir /mnt/hdc6<br>[root@www ~]# mount /dev/hdc6 /mnt/hdc6<br>[root@www ~]# df<br>Filesystem           1K-blocks     Used Available Use% Mounted on<br>/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6<br></code></pre></td></tr></table></figure><p>磁盘卸载命令 umount 语法：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">umount</span> [-<span class="hljs-meta">fn</span>] 装置文件名或挂载点<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 /etc/mtab 情况下卸除。</li></ul><p>卸载/dev/hdc6</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@www</span> ~]<span class="hljs-meta"># umount /dev/hdc6</span><br></code></pre></td></tr></table></figure><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><blockquote><p>基本概念</p></blockquote><ol><li>在Linux中，每一个程序都是有自己的一个进程，每一个进程都有一个id号。</li><li>每一个进程，都有一个父进程。</li><li>进程可以有两种存在方式：前台或者后台</li><li>一般的话服务是后台运行的，基本的程序都是前台运行的</li></ol><blockquote><p>命令</p></blockquote><p><strong>ps</strong>：查看当前系统中正在执行的各种进程的信息！</p><p>ps -xx：</p><ul><li>-a ：显示当前终端运行的所有的进程信息</li><li>-u：以用户的信息显示进程</li><li>-x：显示后台运行进程的参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看所有的进程</span><br>ps -aux|<br><span class="hljs-meta">#</span><span class="bash"> | 在Linux中|为管道符  A|B</span><br><span class="hljs-meta">#</span><span class="bash"> grep 查找文件中符合条件的字符串。</span><br>ps -aux|grep mysql<br>ps -aux|grep java<br></code></pre></td></tr></table></figure><p>查看关于mysql的进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# ps aux| grep mysql<br>root      1255  0.0  0.0  12964  3404 ?        S    Jan16   0:00 /bin/sh /www/server/mysql/bin/mysqld_safe --datadir=/www/server/data --pid-file=/www/server/data/iZ2zeh7ydg2bbydds175q0Z.pid<br>mysql     1929  0.4 10.2 1822928 397932 ?      Sl   Jan16  12:44 /www/server/mysql/bin/mysqld --basedir=/www/server/mysql --datadir=/www/server/data --plugin-dir=/www/server/mysql/lib/plugin --user=mysql --log-error=iZ2zeh7ydg2bbydds175q0Z.err --open-files-limit=65535 --pid-file=/www/server/data/iZ2zeh7ydg2bbydds175q0Z.pid --socket=/tmp/mysql.sock --port=3306<br>root      8018  0.0  0.0  12112  1064 pts/1    S+   16:55   0:00 grep --color=auto mysql<br></code></pre></td></tr></table></figure><p><strong>ps-ef</strong>：查看父进程的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef|grep mysql #看父进程，我们一般可以通过目录树结构来查看<br>pstree -pu<br>-p 显示父id<br>-u 显示用户组<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z home]# pstree -pu<br>systemd(1)─┬─AliYunDun(27808)─┬─&#123;AliYunDun&#125;(27809)<br>           │                  ├─&#123;AliYunDun&#125;(27810)<br>           │                  ├─&#123;AliYunDun&#125;(27821)<br>           │                  ├─&#123;AliYunDun&#125;(27822)<br>           │                  ├─&#123;AliYunDun&#125;(27823)<br>           │                  ├─&#123;AliYunDun&#125;(27824)<br>           │                  ├─&#123;AliYunDun&#125;(27825)<br>           │                  ├─&#123;AliYunDun&#125;(27826)<br>           │                  ├─&#123;AliYunDun&#125;(27827)<br>           │                  ├─&#123;AliYunDun&#125;(27828)<br>           │                  ├─&#123;AliYunDun&#125;(27829)<br>           │                  ├─&#123;AliYunDun&#125;(27830)<br>           │                  ├─&#123;AliYunDun&#125;(27831)<br>           │                  ├─&#123;AliYunDun&#125;(27832)<br>           │                  ├─&#123;AliYunDun&#125;(27833)<br>           │                  ├─&#123;AliYunDun&#125;(27834)<br>           │                  ├─&#123;AliYunDun&#125;(27835)<br>           │                  ├─&#123;AliYunDun&#125;(27836)<br>           │                  ├─&#123;AliYunDun&#125;(27837)<br>           │                  ├─&#123;AliYunDun&#125;(27838)<br>           │                  ├─&#123;AliYunDun&#125;(27839)<br>           │                  ├─&#123;AliYunDun&#125;(27840)<br>           │                  └─&#123;AliYunDun&#125;(27845)<br>           ├─AliYunDunUpdate(27739)─┬─&#123;AliYunDunUpdate&#125;(27740)<br>           │                        ├─&#123;AliYunDunUpdate&#125;(27741)<br>           │                        └─&#123;AliYunDunUpdate&#125;(27745)<br>           ├─BT-Panel(27877)───&#123;BT-Panel&#125;(27878)<br>           ├─BT-Task(27899)─┬─sh(8252)───python(8253)<br>           │                ├─&#123;BT-Task&#125;(27900)<br>           │                ├─&#123;BT-Task&#125;(27901)<br>           │                ├─&#123;BT-Task&#125;(27902)<br>           │                ├─&#123;BT-Task&#125;(27903)<br>           │                ├─&#123;BT-Task&#125;(27904)<br>           │                ├─&#123;BT-Task&#125;(27905)<br>           │                ├─&#123;BT-Task&#125;(27906)<br>           │                └─&#123;BT-Task&#125;(27907)<br>           ├─NetworkManager(970)─┬─&#123;NetworkManager&#125;(973)<br>           │                     └─&#123;NetworkManager&#125;(974)<br>           ├─agetty(1090)<br>           ├─agetty(1091)<br>           ├─aliyun-service(1080)─┬─&#123;aliyun-service&#125;(1094)<br>           │                      ├─&#123;aliyun-service&#125;(1095)<br>           │                      ├─&#123;aliyun-service&#125;(1096)<br>           │                      ├─&#123;aliyun-service&#125;(1103)<br>           │                      ├─&#123;aliyun-service&#125;(1106)<br>           │                      ├─&#123;aliyun-service&#125;(1108)<br>           │                      └─&#123;aliyun-service&#125;(1190)<br>           ├─assist_daemon(814)─┬─&#123;assist_daemon&#125;(853)<br>           │                    ├─&#123;assist_daemon&#125;(860)<br>           │                    ├─&#123;assist_daemon&#125;(861)<br>           │                    ├─&#123;assist_daemon&#125;(1129)<br>           │                    ├─&#123;assist_daemon&#125;(1130)<br>           │                    ├─&#123;assist_daemon&#125;(1131)<br>           │                    └─&#123;assist_daemon&#125;(1132)<br>           ├─atd(1084)<br>           ├─auditd(773)─┬─sedispatch(775)<br>           │             ├─&#123;auditd&#125;(774)<br>           │             └─&#123;auditd&#125;(776)<br>           ├─chronyd(816,chrony)<br>           ├─crond(10343)<br>           ├─dbus-daemon(810,dbus)<br>           ├─firewalld(28583)─┬─&#123;firewalld&#125;(28661)<br>           │                  └─&#123;firewalld&#125;(28680)<br>           ├─httpd(10916)─┬─httpd(10919,www)─┬─&#123;httpd&#125;(10986)<br>           │              │                  ├─&#123;httpd&#125;(10987)<br>           │              │                  ├─&#123;httpd&#125;(10988)<br>           │              │                  ├─&#123;httpd&#125;(10989)<br>           │              │                  ├─&#123;httpd&#125;(10990)<br>           │              │                  ├─&#123;httpd&#125;(10991)<br>           │              │                  ├─&#123;httpd&#125;(10992)<br>           │              │                  ├─&#123;httpd&#125;(10993)<br>           │              │                  ├─&#123;httpd&#125;(10994)<br>           │              │                  ├─&#123;httpd&#125;(10995)<br>           │              │                  ├─&#123;httpd&#125;(10996)<br>           │              │                  ├─&#123;httpd&#125;(10997)<br>           │              │                  ├─&#123;httpd&#125;(10998)<br>           │              │                  ├─&#123;httpd&#125;(10999)<br>           │              │                  ├─&#123;httpd&#125;(11000)<br>           │              │                  ├─&#123;httpd&#125;(11001)<br>           │              │                  ├─&#123;httpd&#125;(11002)<br>           │              │                  ├─&#123;httpd&#125;(11003)<br>           │              │                  ├─&#123;httpd&#125;(11004)<br>           │              │                  ├─&#123;httpd&#125;(11005)<br>           │              │                  ├─&#123;httpd&#125;(11006)<br>           │              │                  ├─&#123;httpd&#125;(11007)<br>           │              │                  ├─&#123;httpd&#125;(11008)<br>           │              │                  ├─&#123;httpd&#125;(11009)<br>           │              │                  ├─&#123;httpd&#125;(11010)<br>           │              │                  ├─&#123;httpd&#125;(11011)<br>           │              │                  ├─&#123;httpd&#125;(11012)<br>           │              │                  ├─&#123;httpd&#125;(11013)<br>           │              │                  ├─&#123;httpd&#125;(11014)<br>           │              │                  ├─&#123;httpd&#125;(11015)<br>           │              │                  ├─&#123;httpd&#125;(11016)<br>           │              │                  ├─&#123;httpd&#125;(11017)<br>           │              │                  ├─&#123;httpd&#125;(11018)<br>           │              │                  ├─&#123;httpd&#125;(11019)<br>           │              │                  ├─&#123;httpd&#125;(11020)<br>           │              │                  ├─&#123;httpd&#125;(11021)<br>           │              │                  ├─&#123;httpd&#125;(11022)<br>           │              │                  ├─&#123;httpd&#125;(11062)<br>           │              │                  ├─&#123;httpd&#125;(11063)<br>           │              │                  ├─&#123;httpd&#125;(11064)<br>           │              │                  ├─&#123;httpd&#125;(11065)<br>           │              │                  ├─&#123;httpd&#125;(11066)<br>           │              │                  ├─&#123;httpd&#125;(11067)<br>           │              │                  ├─&#123;httpd&#125;(11068)<br>           │              │                  ├─&#123;httpd&#125;(11069)<br>           │              │                  ├─&#123;httpd&#125;(11070)<br>           │              │                  ├─&#123;httpd&#125;(11071)<br>           │              │                  ├─&#123;httpd&#125;(11072)<br>           │              │                  ├─&#123;httpd&#125;(11073)<br>           │              │                  ├─&#123;httpd&#125;(11074)<br>           │              │                  ├─&#123;httpd&#125;(11075)<br>           │              │                  ├─&#123;httpd&#125;(11076)<br>           │              │                  ├─&#123;httpd&#125;(11077)<br>           │              │                  ├─&#123;httpd&#125;(11078)<br>           │              │                  ├─&#123;httpd&#125;(11079)<br>           │              │                  ├─&#123;httpd&#125;(11080)<br>           │              │                  ├─&#123;httpd&#125;(11081)<br>           │              │                  ├─&#123;httpd&#125;(11082)<br>           │              │                  ├─&#123;httpd&#125;(11083)<br>           │              │                  ├─&#123;httpd&#125;(11084)<br>           │              │                  ├─&#123;httpd&#125;(11085)<br>           │              │                  ├─&#123;httpd&#125;(11086)<br>           │              │                  └─&#123;httpd&#125;(11087)<br>           │              ├─httpd(10920,www)─┬─&#123;httpd&#125;(10922)<br>           │              │                  ├─&#123;httpd&#125;(10923)<br>           │              │                  ├─&#123;httpd&#125;(10924)<br>           │              │                  ├─&#123;httpd&#125;(10925)<br>           │              │                  ├─&#123;httpd&#125;(10926)<br>           │              │                  ├─&#123;httpd&#125;(10927)<br>           │              │                  ├─&#123;httpd&#125;(10928)<br>           │              │                  ├─&#123;httpd&#125;(10929)<br>           │              │                  ├─&#123;httpd&#125;(10930)<br>           │              │                  ├─&#123;httpd&#125;(10931)<br>           │              │                  ├─&#123;httpd&#125;(10932)<br>           │              │                  ├─&#123;httpd&#125;(10933)<br>           │              │                  ├─&#123;httpd&#125;(10934)<br>           │              │                  ├─&#123;httpd&#125;(10935)<br>           │              │                  ├─&#123;httpd&#125;(10936)<br>           │              │                  ├─&#123;httpd&#125;(10937)<br>           │              │                  ├─&#123;httpd&#125;(10938)<br>           │              │                  ├─&#123;httpd&#125;(10939)<br>           │              │                  ├─&#123;httpd&#125;(10940)<br>           │              │                  ├─&#123;httpd&#125;(10941)<br>           │              │                  ├─&#123;httpd&#125;(10942)<br>           │              │                  ├─&#123;httpd&#125;(10943)<br>           │              │                  ├─&#123;httpd&#125;(10944)<br>           │              │                  ├─&#123;httpd&#125;(10945)<br>           │              │                  ├─&#123;httpd&#125;(10946)<br>           │              │                  ├─&#123;httpd&#125;(10947)<br>           │              │                  ├─&#123;httpd&#125;(10948)<br>           │              │                  ├─&#123;httpd&#125;(10949)<br>           │              │                  ├─&#123;httpd&#125;(10950)<br>           │              │                  ├─&#123;httpd&#125;(10951)<br>           │              │                  ├─&#123;httpd&#125;(10952)<br>           │              │                  ├─&#123;httpd&#125;(10953)<br>           │              │                  ├─&#123;httpd&#125;(10954)<br>           │              │                  ├─&#123;httpd&#125;(10955)<br>           │              │                  ├─&#123;httpd&#125;(10956)<br>           │              │                  ├─&#123;httpd&#125;(10957)<br>           │              │                  ├─&#123;httpd&#125;(10958)<br>           │              │                  ├─&#123;httpd&#125;(10960)<br>           │              │                  ├─&#123;httpd&#125;(10961)<br>           │              │                  ├─&#123;httpd&#125;(10962)<br>           │              │                  ├─&#123;httpd&#125;(10963)<br>           │              │                  ├─&#123;httpd&#125;(10964)<br>           │              │                  ├─&#123;httpd&#125;(10965)<br>           │              │                  ├─&#123;httpd&#125;(10966)<br>           │              │                  ├─&#123;httpd&#125;(10967)<br>           │              │                  ├─&#123;httpd&#125;(10968)<br>           │              │                  ├─&#123;httpd&#125;(10969)<br>           │              │                  ├─&#123;httpd&#125;(10970)<br>           │              │                  ├─&#123;httpd&#125;(10971)<br>           │              │                  ├─&#123;httpd&#125;(10972)<br>           │              │                  ├─&#123;httpd&#125;(10973)<br>           │              │                  ├─&#123;httpd&#125;(10974)<br>           │              │                  ├─&#123;httpd&#125;(10975)<br>           │              │                  ├─&#123;httpd&#125;(10976)<br>           │              │                  ├─&#123;httpd&#125;(10977)<br>           │              │                  ├─&#123;httpd&#125;(10978)<br>           │              │                  ├─&#123;httpd&#125;(10979)<br>           │              │                  ├─&#123;httpd&#125;(10980)<br>           │              │                  ├─&#123;httpd&#125;(10981)<br>           │              │                  ├─&#123;httpd&#125;(10982)<br>           │              │                  ├─&#123;httpd&#125;(10983)<br>           │              │                  ├─&#123;httpd&#125;(10984)<br>           │              │                  └─&#123;httpd&#125;(10985)<br>           │              ├─httpd(10921,www)─┬─&#123;httpd&#125;(11024)<br>           │              │                  ├─&#123;httpd&#125;(11025)<br>           │              │                  ├─&#123;httpd&#125;(11026)<br>           │              │                  ├─&#123;httpd&#125;(11027)<br>           │              │                  ├─&#123;httpd&#125;(11028)<br>           │              │                  ├─&#123;httpd&#125;(11029)<br>           │              │                  ├─&#123;httpd&#125;(11030)<br>           │              │                  ├─&#123;httpd&#125;(11031)<br>           │              │                  ├─&#123;httpd&#125;(11032)<br>           │              │                  ├─&#123;httpd&#125;(11033)<br>           │              │                  ├─&#123;httpd&#125;(11034)<br>           │              │                  ├─&#123;httpd&#125;(11035)<br>           │              │                  ├─&#123;httpd&#125;(11036)<br>           │              │                  ├─&#123;httpd&#125;(11037)<br>           │              │                  ├─&#123;httpd&#125;(11038)<br>           │              │                  ├─&#123;httpd&#125;(11039)<br>           │              │                  ├─&#123;httpd&#125;(11040)<br>           │              │                  ├─&#123;httpd&#125;(11041)<br>           │              │                  ├─&#123;httpd&#125;(11042)<br>           │              │                  ├─&#123;httpd&#125;(11043)<br>           │              │                  ├─&#123;httpd&#125;(11044)<br>           │              │                  ├─&#123;httpd&#125;(11045)<br>           │              │                  ├─&#123;httpd&#125;(11046)<br>           │              │                  ├─&#123;httpd&#125;(11047)<br>           │              │                  ├─&#123;httpd&#125;(11048)<br>           │              │                  ├─&#123;httpd&#125;(11049)<br>           │              │                  ├─&#123;httpd&#125;(11050)<br>           │              │                  ├─&#123;httpd&#125;(11051)<br>           │              │                  ├─&#123;httpd&#125;(11052)<br>           │              │                  ├─&#123;httpd&#125;(11053)<br>           │              │                  ├─&#123;httpd&#125;(11054)<br>           │              │                  ├─&#123;httpd&#125;(11055)<br>           │              │                  ├─&#123;httpd&#125;(11056)<br>           │              │                  ├─&#123;httpd&#125;(11057)<br>           │              │                  ├─&#123;httpd&#125;(11058)<br>           │              │                  ├─&#123;httpd&#125;(11059)<br>           │              │                  ├─&#123;httpd&#125;(11060)<br>           │              │                  ├─&#123;httpd&#125;(11088)<br>           │              │                  ├─&#123;httpd&#125;(11089)<br>           │              │                  ├─&#123;httpd&#125;(11090)<br>           │              │                  ├─&#123;httpd&#125;(11091)<br>           │              │                  ├─&#123;httpd&#125;(11092)<br>           │              │                  ├─&#123;httpd&#125;(11093)<br>           │              │                  ├─&#123;httpd&#125;(11094)<br>           │              │                  ├─&#123;httpd&#125;(11095)<br>           │              │                  ├─&#123;httpd&#125;(11096)<br>           │              │                  ├─&#123;httpd&#125;(11097)<br>           │              │                  ├─&#123;httpd&#125;(11098)<br>           │              │                  ├─&#123;httpd&#125;(11099)<br>           │              │                  ├─&#123;httpd&#125;(11100)<br>           │              │                  ├─&#123;httpd&#125;(11101)<br>           │              │                  ├─&#123;httpd&#125;(11102)<br>           │              │                  ├─&#123;httpd&#125;(11103)<br>           │              │                  ├─&#123;httpd&#125;(11104)<br>           │              │                  ├─&#123;httpd&#125;(11105)<br>           │              │                  ├─&#123;httpd&#125;(11106)<br>           │              │                  ├─&#123;httpd&#125;(11107)<br>           │              │                  ├─&#123;httpd&#125;(11108)<br>           │              │                  ├─&#123;httpd&#125;(11109)<br>           │              │                  ├─&#123;httpd&#125;(11110)<br>           │              │                  ├─&#123;httpd&#125;(11111)<br>           │              │                  ├─&#123;httpd&#125;(11112)<br>           │              │                  └─&#123;httpd&#125;(11113)<br>           │              └─httpd(18750,www)─┬─&#123;httpd&#125;(18751)<br>           │                                 ├─&#123;httpd&#125;(18752)<br>           │                                 ├─&#123;httpd&#125;(18753)<br>           │                                 ├─&#123;httpd&#125;(18754)<br>           │                                 ├─&#123;httpd&#125;(18755)<br>           │                                 ├─&#123;httpd&#125;(18756)<br>           │                                 ├─&#123;httpd&#125;(18757)<br>           │                                 ├─&#123;httpd&#125;(18758)<br>           │                                 ├─&#123;httpd&#125;(18759)<br>           │                                 ├─&#123;httpd&#125;(18760)<br>           │                                 ├─&#123;httpd&#125;(18761)<br>           │                                 ├─&#123;httpd&#125;(18762)<br>           │                                 ├─&#123;httpd&#125;(18763)<br>           │                                 ├─&#123;httpd&#125;(18764)<br>           │                                 ├─&#123;httpd&#125;(18765)<br>           │                                 ├─&#123;httpd&#125;(18766)<br>           │                                 ├─&#123;httpd&#125;(18767)<br>           │                                 ├─&#123;httpd&#125;(18768)<br>           │                                 ├─&#123;httpd&#125;(18769)<br>           │                                 ├─&#123;httpd&#125;(18770)<br>           │                                 ├─&#123;httpd&#125;(18771)<br>           │                                 ├─&#123;httpd&#125;(18772)<br>           │                                 ├─&#123;httpd&#125;(18773)<br>           │                                 ├─&#123;httpd&#125;(18774)<br>           │                                 ├─&#123;httpd&#125;(18775)<br>           │                                 ├─&#123;httpd&#125;(18776)<br>           │                                 ├─&#123;httpd&#125;(18777)<br>           │                                 ├─&#123;httpd&#125;(18778)<br>           │                                 ├─&#123;httpd&#125;(18779)<br>           │                                 ├─&#123;httpd&#125;(18780)<br>           │                                 ├─&#123;httpd&#125;(18781)<br>           │                                 ├─&#123;httpd&#125;(18782)<br>           │                                 ├─&#123;httpd&#125;(18783)<br>           │                                 ├─&#123;httpd&#125;(18784)<br>           │                                 ├─&#123;httpd&#125;(18785)<br>           │                                 ├─&#123;httpd&#125;(18786)<br>           │                                 ├─&#123;httpd&#125;(18787)<br>           │                                 ├─&#123;httpd&#125;(18789)<br>           │                                 ├─&#123;httpd&#125;(18790)<br>           │                                 ├─&#123;httpd&#125;(18791)<br>           │                                 ├─&#123;httpd&#125;(18792)<br>           │                                 ├─&#123;httpd&#125;(18793)<br>           │                                 ├─&#123;httpd&#125;(18794)<br>           │                                 ├─&#123;httpd&#125;(18795)<br>           │                                 ├─&#123;httpd&#125;(18796)<br>           │                                 ├─&#123;httpd&#125;(18797)<br>           │                                 ├─&#123;httpd&#125;(18798)<br>           │                                 ├─&#123;httpd&#125;(18799)<br>           │                                 ├─&#123;httpd&#125;(18800)<br>           │                                 ├─&#123;httpd&#125;(18801)<br>           │                                 ├─&#123;httpd&#125;(18802)<br>           │                                 ├─&#123;httpd&#125;(18803)<br>           │                                 ├─&#123;httpd&#125;(18804)<br>           │                                 ├─&#123;httpd&#125;(18805)<br>           │                                 ├─&#123;httpd&#125;(18806)<br>           │                                 ├─&#123;httpd&#125;(18807)<br>           │                                 ├─&#123;httpd&#125;(18808)<br>           │                                 ├─&#123;httpd&#125;(18809)<br>           │                                 ├─&#123;httpd&#125;(18810)<br>           │                                 ├─&#123;httpd&#125;(18811)<br>           │                                 ├─&#123;httpd&#125;(18812)<br>           │                                 ├─&#123;httpd&#125;(18813)<br>           │                                 └─&#123;httpd&#125;(18814)<br>           ├─jsvc(13252)───jsvc(13253,www)─┬─&#123;jsvc&#125;(13254)<br>           │                               ├─&#123;jsvc&#125;(13255)<br>           │                               ├─&#123;jsvc&#125;(13256)<br>           │                               ├─&#123;jsvc&#125;(13257)<br>           │                               ├─&#123;jsvc&#125;(13258)<br>           │                               ├─&#123;jsvc&#125;(13259)<br>           │                               ├─&#123;jsvc&#125;(13260)<br>           │                               ├─&#123;jsvc&#125;(13261)<br>           │                               ├─&#123;jsvc&#125;(13262)<br>           │                               ├─&#123;jsvc&#125;(13263)<br>           │                               ├─&#123;jsvc&#125;(13264)<br>           │                               ├─&#123;jsvc&#125;(13265)<br>           │                               ├─&#123;jsvc&#125;(13266)<br>           │                               ├─&#123;jsvc&#125;(13267)<br>           │                               ├─&#123;jsvc&#125;(13270)<br>           │                               ├─&#123;jsvc&#125;(13271)<br>           │                               ├─&#123;jsvc&#125;(13272)<br>           │                               ├─&#123;jsvc&#125;(13273)<br>           │                               ├─&#123;jsvc&#125;(13274)<br>           │                               ├─&#123;jsvc&#125;(13275)<br>           │                               ├─&#123;jsvc&#125;(13276)<br>           │                               ├─&#123;jsvc&#125;(13277)<br>           │                               ├─&#123;jsvc&#125;(13278)<br>           │                               ├─&#123;jsvc&#125;(13279)<br>           │                               ├─&#123;jsvc&#125;(13280)<br>           │                               ├─&#123;jsvc&#125;(13281)<br>           │                               ├─&#123;jsvc&#125;(13282)<br>           │                               ├─&#123;jsvc&#125;(13283)<br>           │                               ├─&#123;jsvc&#125;(13284)<br>           │                               ├─&#123;jsvc&#125;(13285)<br>           │                               ├─&#123;jsvc&#125;(13286)<br>           │                               ├─&#123;jsvc&#125;(13287)<br>           │                               ├─&#123;jsvc&#125;(13288)<br>           │                               ├─&#123;jsvc&#125;(13289)<br>           │                               ├─&#123;jsvc&#125;(13290)<br>           │                               ├─&#123;jsvc&#125;(13291)<br>           │                               ├─&#123;jsvc&#125;(13292)<br>           │                               ├─&#123;jsvc&#125;(13293)<br>           │                               ├─&#123;jsvc&#125;(13294)<br>           │                               ├─&#123;jsvc&#125;(13295)<br>           │                               ├─&#123;jsvc&#125;(13296)<br>           │                               ├─&#123;jsvc&#125;(13297)<br>           │                               └─&#123;jsvc&#125;(13298)<br>           ├─lsmd(803,libstoragemgmt)<br>           ├─master(17692)─┬─pickup(4334,postfix)<br>           │               └─qmgr(17694,postfix)<br>           ├─mcelog(801)<br>           ├─mysqld_safe(1255)───mysqld(1929,mysql)─┬─&#123;mysqld&#125;(1935)<br>           │                                        ├─&#123;mysqld&#125;(1936)<br>           │                                        ├─&#123;mysqld&#125;(1937)<br>           │                                        ├─&#123;mysqld&#125;(1938)<br>           │                                        ├─&#123;mysqld&#125;(1939)<br>           │                                        ├─&#123;mysqld&#125;(1940)<br>           │                                        ├─&#123;mysqld&#125;(1941)<br>           │                                        ├─&#123;mysqld&#125;(1969)<br>           │                                        ├─&#123;mysqld&#125;(1970)<br>           │                                        ├─&#123;mysqld&#125;(1971)<br>           │                                        ├─&#123;mysqld&#125;(1972)<br>           │                                        ├─&#123;mysqld&#125;(1973)<br>           │                                        ├─&#123;mysqld&#125;(1974)<br>           │                                        ├─&#123;mysqld&#125;(1975)<br>           │                                        ├─&#123;mysqld&#125;(1976)<br>           │                                        ├─&#123;mysqld&#125;(1977)<br>           │                                        ├─&#123;mysqld&#125;(1978)<br>           │                                        ├─&#123;mysqld&#125;(1979)<br>           │                                        ├─&#123;mysqld&#125;(1980)<br>           │                                        ├─&#123;mysqld&#125;(1981)<br>           │                                        ├─&#123;mysqld&#125;(1982)<br>           │                                        ├─&#123;mysqld&#125;(1983)<br>           │                                        ├─&#123;mysqld&#125;(1988)<br>           │                                        ├─&#123;mysqld&#125;(1989)<br>           │                                        ├─&#123;mysqld&#125;(1990)<br>           │                                        ├─&#123;mysqld&#125;(1991)<br>           │                                        ├─&#123;mysqld&#125;(1992)<br>           │                                        ├─&#123;mysqld&#125;(1993)<br>           │                                        ├─&#123;mysqld&#125;(1996)<br>           │                                        ├─&#123;mysqld&#125;(1997)<br>           │                                        ├─&#123;mysqld&#125;(1998)<br>           │                                        ├─&#123;mysqld&#125;(1999)<br>           │                                        ├─&#123;mysqld&#125;(2000)<br>           │                                        └─&#123;mysqld&#125;(31149)<br>           ├─polkitd(802,polkitd)─┬─&#123;polkitd&#125;(888)<br>           │                      ├─&#123;polkitd&#125;(890)<br>           │                      ├─&#123;polkitd&#125;(896)<br>           │                      ├─&#123;polkitd&#125;(897)<br>           │                      └─&#123;polkitd&#125;(906)<br>           ├─redis-server(18249,redis)─┬─&#123;redis-server&#125;(18250)<br>           │                           ├─&#123;redis-server&#125;(18251)<br>           │                           ├─&#123;redis-server&#125;(18252)<br>           │                           └─&#123;redis-server&#125;(18253)<br>           ├─rngd(11597)─┬─&#123;rngd&#125;(11598)<br>           │             └─&#123;rngd&#125;(11599)<br>           ├─rsyslogd(1079)─┬─&#123;rsyslogd&#125;(1105)<br>           │                └─&#123;rsyslogd&#125;(1110)<br>           ├─smartd(807)<br>           ├─sshd(1083)───sshd(20824)───sshd(20838)───bash(20839)─┬─pstree+<br>           │                                                      ├─vim(21+<br>           │                                                      └─vim(22+<br>           ├─sssd(797)─┬─sssd_be(908)<br>           │           └─sssd_nss(909)<br>           ├─systemd(1267)───(sd-pam)(1270)<br>           ├─systemd-journal(588)<br>           ├─systemd-logind(914)<br>           ├─systemd-resolve(1034,systemd-resolve)<br>           ├─systemd-udevd(621)<br>           └─tuned(975)─┬─&#123;tuned&#125;(1046)<br>                        ├─&#123;tuned&#125;(1050)<br>                        └─&#123;tuned&#125;(1067)<br></code></pre></td></tr></table></figure><p>结束进程：杀掉进程，等价于Window结束任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 进程id<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记03-Linux系统初探</title>
    <link href="/posts/2021/01/17/Linux%E7%AC%94%E8%AE%B003-Linux%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2/"/>
    <url>/posts/2021/01/17/Linux%E7%AC%94%E8%AE%B003-Linux%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux系统初探"><a href="#Linux系统初探" class="headerlink" title="Linux系统初探"></a>Linux系统初探</h2><blockquote><p><strong>开机登录</strong></p></blockquote><p>开机会启动许多程序，它们在Windows中叫做“服务”(service)，在Linux就叫做“<strong>守护进程</strong>”(daemon)。</p><p>开机成功后，会显示一个文本登录界面。这个界面就是我们经常看到的登录界面，在这个登录界面会提示用户输入用户名，而用户输入的用户名将作为参数传给login程序来验证用户的身份，密码是不明文显示的，输完确认回车即可。</p><p>一般来说，用户的登录方式有三种：</p><ul><li>命令行登录</li><li>SSH登录</li><li>图形界面登录</li></ul><p>最高权限账户为root，可以操作一切。</p><blockquote><p><strong>关机</strong></p></blockquote><p>在Linux领域内大多用在服务器上，很少有关机的操作，毕竟服务器上跑一个服务是限期内永无止境的。除非特殊情况下，不得已才会关机。</p><p>关机指令为：shutdown</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">sync <span class="hljs-comment"># 将数据由内存同步到硬盘中</span><br><br>shutdown <span class="hljs-comment"># 关机指令，可以 man shutdown 来看帮助文档</span><br><br>shutdown -h 10 <span class="hljs-comment"># 系统将在10分钟后关机</span><br><br>shutdown -h +10 <span class="hljs-comment"># 系统将在10分钟后关机</span><br><br>shutdown -h now <span class="hljs-comment"># 立刻关机</span><br><br>shutdown -h 20:25 <span class="hljs-comment"># 系统在今天20:25关机</span><br><br>shutdown -r now <span class="hljs-comment"># 系统立刻重启</span><br><br>shutdown -r now +10 <span class="hljs-comment"># 系统10分钟后重启</span><br><br>reboot <span class="hljs-comment"># 重启，等同于shutdown -r now</span><br><br>halt <span class="hljs-comment"># 关闭系统，等同于shutdown -h now </span><br><br>poweroff <span class="hljs-comment"># 关闭系统，等同于shutdown -h now </span><br></code></pre></td></tr></table></figure><p>总结：不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存数据同步到磁盘中。</p><blockquote><p>系统目录结构</p></blockquote><p>登录Linux系统后，在当前命令窗口输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ls / <span class="hljs-comment"># 显示根目录下的文件</span><br></code></pre></td></tr></table></figure><p>输出结果，如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@iZ2zeh7ydg2bbydds175q0Z ~] ls /<br>bin   dev  home  lib64  mnt  patch  root  sbin  sys  usr  www<br>boot  etc  lib   media  opt  proc   run   srv   tmp  var<br></code></pre></td></tr></table></figure><p>树形目录结构：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记03-Linux系统初探/tree_dir.jpg" alt="树形目录" style="zoom:67%;"><p>以下是对这些目录的解释：</p><ul><li><p><strong>/bin</strong>：bin是Binary的缩写，这个目录存放着最经常使用的命令。</p></li><li><p><strong>/boo</strong>t：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev</strong>：dev是Device的缩写，存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc</strong>：这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>/home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号名命名的。</p></li><li><p><strong>/lib</strong>：这个目录存放着系统最基本的动态连接共享库，其作用类似于Windows中的DLL(Dynamic Link Library)文件。</p></li><li><p><strong>/lost+found</strong>：这个目录一般情况为空，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>/media</strong>：Linux系统会自动识别一些设备，例如U盘、光驱等，当识别后，Linux会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的。我们可以把光驱挂载在/mnt上，然后进入该目录就可以查看光驱的内容，后面我们会把一些本地文件挂载到这个目录下。</p></li><li><p><strong>/opt</strong>：这是给主机额外安装软件所摆放的目录。比如安装一个Oracle数据库就可以放到这个目录下，默认为空。</p></li><li><p><strong>/proc</strong>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p></li><li><p><strong>/root</strong>：该目录为系统管理员，也称为超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：s是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/srv</strong>：该目录存放的是一些服务器启动之后需要提取的数据。</p></li><li><p><strong>/sys</strong>：文件系统。</p></li><li><p><strong>/tmp</strong>：该目录用来存放一些临时文件。用完即丢的文件，可以放在这个目录下，比如说安装包。</p></li><li><p><strong>/usr</strong>：这是非常重要的一个目录，用户的很多应用程序和文件都放在这个目录下，类似于Windows中的<code>Programming files</code>目录</p></li><li><p><strong>/usr/bin</strong>：系统用户使用的应用程序。</p></li><li><p><strong>/usr/sbin</strong>：超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>/var</strong>：这个目录中存放着不断扩充着的东西，我们习惯将那些经常被修改的文件放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：这是一个临时文件系统，存储系统启动以来的信息，当系统重启后，这个目录下的文件应该被删掉或清除。</p></li><li><p>/www：存放服务器网站相关的资源，环境，网站的项目。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记02-Linux环境搭建</title>
    <link href="/posts/2021/01/16/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/posts/2021/01/16/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux环境搭建"><a href="#Linux环境搭建" class="headerlink" title="Linux环境搭建"></a>Linux环境搭建</h2><blockquote><p><strong>前言</strong></p></blockquote><p>在学习Linux之前，我需要把Linux的环境搭建好，其实Linux操作系统本身也可以看做是一个大的软件。下面我将会以两种方式搭建Linux环境，第一种方式是在<strong>在本地虚拟机上安装CentOS</strong>，免费；第二种方式是<strong>购买云服务器</strong>，在服务器命令行搭建环境。</p><p><strong>安装虚拟机会占用内存空间，但是没有经济压力，比较快捷；购买服务器会产生消费，但最接近原生的线上开发</strong>。这两种方式，各有利弊，兄弟盟参考即可。</p><blockquote><p><strong>方式一：虚拟机安装CentOS</strong></p></blockquote><p>首先在安装CentOS之前，我们要先在本地安装虚拟机 <strong>VMware Workstation</strong>，这里我们从华军科技园下载VMware16 pro。当然，如果有经济条件，建议从官网购买正版虚拟机，下面是下载地址：</p><p>华军科技园下载虚拟机：<a href="https://www.onlinedown.net/soft/2062.htm/">https://www.onlinedown.net/soft/2062.htm/</a></p><blockquote><p><strong>VMware Workstation安装步骤</strong></p></blockquote><ol><li><p>双击运行VMware Workstation15运行程序，打开如下图<strong>安装向导界面</strong>，点击下一步。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/install_guide.png" alt="安装向导界面"></li><li><p>阅读如下图 VMware 虚拟机用户许可协议，<strong>勾选我接受协议</strong>，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/agreement.png" alt="勾选接受协议"></p></li><li><p><strong>自定义安装目录</strong>：默认安装在C盘目录下，我可以点击“更改”按钮自定义安装路径，并点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/change_path.png" alt="自定义安装目录"></p></li><li><p>在<strong>用户体验设置界面</strong>，这里选择默认设置即可，直接点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/UE.png" alt="用户体验设置界面"></p></li><li><p><strong>创建快捷方式</strong>，桌面快捷方式以及开始菜单程序文件夹，自选，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/shortcut.png" alt="快捷方式"></p></li><li><p>确认信息无误，<strong>点击安装</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/install.png" alt="准备好安装"></p></li><li><p>等待VMware Workstation 16 Pro安装过程。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/install_pro.png" alt="等待安装"></p></li><li><p>在安装成功界面，输入<strong>许可证秘钥</strong>。在这里，我推荐3条许可证秘钥：</p><p><em>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</em><br><em>YF390-0HF8P-M81RQ-2DXQE-M2UT6</em><br><em>ZF71R-DMX85-08DQY-8YMNC-PPHV8</em></p></li></ol><p>   <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/secret_key.png" alt="许可证秘钥"></p><ol start="9"><li><p><strong>安装向导完成</strong>，退出即可。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/install_finish.png" alt="安装完成"></p></li><li><p>打开软件，可以看到<strong>软件的主界面</strong>，并且已经完美激活！</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/work_ui.png" alt="软件界面" style="zoom: 50%;"></li><li><p>详细操作可以查看VMware pro 16.0的使用文档</p><p>文档地址：<a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/16.0/com.vmware.ws.using.doc/GUID-0EE752F8-C159-487A-9159-FE1F646EE4CA.html">https://docs.vmware.com/cn/VMware-Workstation-Pro/16.0/com.vmware.ws.using.doc/GUID-0EE752F8-C159-487A-9159-FE1F646EE4CA.html</a></p></li></ol><p>其实呢，还有一种简单的安装虚拟机方法，那就是流氓软件360的<strong>软件管家</strong>！但是，它的版本好像停更很久了，不过也不失为一种资源，觉得安装麻烦的朋友，可以使用360一键安装。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/install_360.png" alt="360软件管家" style="zoom: 67%;"><blockquote><p><strong>虚拟机安装完毕之后呢，我们需要在虚拟机上安装CentOS。</strong></p></blockquote><p>从哪里安装CentOS 8呢？我们面前有来两种选择，一种是从官网下载，一种是镜像下载，下面我一一把下载地址列举出来。</p><p><strong>下载CentOS 8</strong> </p><p>官网CentOS 8下载：<a href="https://www.centos.org/download/">https://www.centos.org/download/</a></p><p>阿里CentOS 8下载：<a href="https://mirrors.aliyun.com/centos/8/isos/x86_64/">https://mirrors.aliyun.com/centos/8/isos/x86_64/</a></p><p>清华CentOS 8下载：<a href="https://mirrors.tuna.tsinghua.edu.cn/centos/8/isos/x86_64/">https://mirrors.tuna.tsinghua.edu.cn/centos/8/isos/x86_64/</a></p><p>找个大点的文件夹，然后把CentOS 8下载到该文件夹下即可，我这里速度还可以6M/s，25分钟就下载完了。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/download_centos.png" alt="下载CentOS 8"></p><p><strong>创建虚拟机</strong></p><ol><li><p>打开VMware，点击<strong>创建新的虚拟机</strong>，如下图所示。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/new_virtual_machine.png" alt="创建新的虚拟机" style="zoom:75%;"></li><li><p>在<strong>新建虚拟机向导界面</strong>，选择<strong>自定义高级</strong>，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/advanced.png" alt="自定义高级选项"></p></li><li><p>在选择<strong>虚拟机硬件兼容性</strong>界面，采用默认设置，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/handware.png" alt="虚拟机硬件兼容"></p></li><li><p>在<strong>安装客户机操作系统界面</strong>，选择<strong>稍后安装操作系统</strong>，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/install_os.png" alt="稍后安装OS"></p></li><li><p>选择Linux，<strong>版本选择Linux 4 ×64位</strong>，因为CentOS 8系列基于 Linux 内核 4.18，点击下一步</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/os_version.png" alt="选择Linux操作系统和版本"></p></li><li><p><strong>命名虚拟机页面</strong>，虚拟机名称随便起，安装位置尽量选空间大的磁盘，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/define_virtual_machine.png" alt="命名虚拟机"></p></li><li><p><strong>处理机配置页面</strong>，根据自己的主机CPU配置确定，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/cpu.png" alt="处理机配置"></p></li><li><p><strong>分配虚拟机内存界面</strong>，我的电脑内存8G，我分配给它1G，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/memory.png" alt="分配虚拟机内存"></p></li><li><p>设置**虚拟机网络连接模式(**NAT)，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/nat.png" alt="设置网络连接模式"></p></li><li><p><strong>选择I/O控制器类型</strong>，选定LSI Logic（推荐）即可，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/io.png" alt="选择I/O控制器类型"></p></li><li><p><strong>选择磁盘类型</strong>，选择推荐的SCSI类型即可，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/scsi.png" alt="选择磁盘类型"></p></li><li><p><strong>选择磁盘</strong>，仍然是选择默认的创建新虚拟磁盘，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/new_virtual.png" alt="创建新虚拟磁盘"></p></li><li><p><strong>指定磁盘容量</strong>，根据自己的需要分配磁盘容量，勾选将虚拟磁盘拆分成多个文件（方便用储存设备拷贝复制虚拟机到其他设备），点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/disk_size.png" alt="指定磁盘容量"></p></li><li><p><strong>指定磁盘文件存储位置</strong>，这里我选择E盘，点击下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/centos_path.png" alt="指定磁盘文件存储位置"></p></li><li><p><strong>准备好创建虚拟机界面</strong>，如果想安装图形界面，可以自定义硬件修改内存和磁盘大小，点击完成。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ready.png" alt="完成创建"></p></li></ol><p><strong>安装CentOS 8</strong></p><ol><li><p>创建好虚拟机后，点击<strong>编辑虚拟机设置</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/config.png" alt="编辑虚拟机设置" style="zoom: 67%;"></li><li><p>选择<strong>CD/DVD</strong>，勾选启动时连接，再<strong>选择使用ISO映像文件</strong>，找到下载好的系统镜像文件添加进去，最后确定。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/cd.png" alt="选择ISO映像文件" style="zoom: 80%;"></li><li><p>点击<strong>开启虚拟机</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/start_machine.png" alt="开启虚拟机" style="zoom: 67%;"></li><li><p><strong>启动虚拟机失败</strong>，弹出错误。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/error.png" alt="Intel VT-x禁用"></p></li><li><p><strong>借鉴博文</strong><a href="http://www.xitongcheng.com/jiaocheng/xtazjc_article_38955.html">http://www.xitongcheng.com/jiaocheng/xtazjc_article_38955.html</a></p><p>Intel VT-x完整名称是Intel Virtualization Technology，就是Intel虚拟技术，开启它可以让硬件平台同时运行多个操作系统，是虚拟机软件运行必备的技术之一，如果禁用，就会弹出“此主机支持Intel VT-x,但Intel VT-x处于禁用状态”这个提示，解决办法就是进BIOS开启Intel Virtualization Technology。</p><p>我的笔记本是联想，所以我的操作是：</p><ul><li><p>开机点击F2进入BIOS，接着进入到bios的界面。</p></li><li><p>选择标题栏的configuration选项，在界面的下方就可以看到intel virtual technology的选项，也就是intel虚拟化技术选项，在其后边显示disabled选项，也就是禁用的意思，按回车键。</p></li><li><p>接着会弹出一个小窗口的选项，在其中选择enabled选项，也就是启用的意思，同样是按回车键确认选择。</p></li><li><p>接着就可以看到intel virtual technology选项后边的标识变成了enabled选项，也就是此时启用了该功能。</p></li></ul></li><li><p>按照5当中博文的说法，重启后，不管怎么按F2都不会进入BIOS界面，搜索处理办法，得到原因：<strong>Win10系统默认打开了【快速启动】，会导致笔记本开机过快，无法进入BIOS开启intel vt-x。</strong></p><p>【快速启动】原理：关机时 Windows 10 会将当前所有系统状态写入到休眠文件中，然后再关机，当再次启动计算机时，Windwos 就不用再重新加载系统内核、驱动程序和系统状态，而是直接从休眠文件进行加载并刷入内存，完成之后直接向用户推送 Windwos 登录界面。</p><p><strong>解决办法</strong>：</p><ol><li><p>关闭【快速启动】</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/power.png" alt="进入控制面板电源选项"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/no_quick_start.png" alt="    "></p></li><li><p>windows恢复功能</p><p>首先，选择恢复中的立即重新启动</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/advance_start.png" alt="点击立即重新启动" style="zoom:67%;"><p>然后，重启后，会进入<strong>高级选项</strong>，选择<strong>疑难解答</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/problem.png" alt="疑难解答" style="zoom: 67%;"><p>选择UFFI固件设置。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/固件.png" alt="UFFI固件设置" style="zoom:67%;"><p>自动重启，进入BIOS界面。选择标题栏的configuration选项，在界面的下方就可以看到intel virtual technology的选项，也就是intel虚拟化技术选项，在其后边显示disabled选项，也就是禁用的意思，按回车键。接着会弹出一个小窗口的选项，在其中选择enabled选项，也就是启用的意思，同样是按回车键确认选择。接着就可以看到intel virtual technology选项后边的标识变成了enabled选项，也就是此时启用了该功能。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/网络虚拟.png" alt="开启网络虚拟选项" style="zoom:67%;"><p>最后，F10保存设置并退出，重启即可。</p></li></ol></li><li><p>再次开启虚拟机，选择 <strong>Install CentOS Linux8</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/install_8.png" alt="安装CentOS 8" style="zoom:67%;"></li><li><p>安装完成后，<strong>选择语言</strong>，点击继续。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/select_la.png" alt="选择语言" style="zoom:67%;"></li><li><p>首先打开<strong>网络和主机名</strong>，给虚拟机连上网络。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/open_int.png" alt="打开网络和主机名" style="zoom: 67%;"><p>如果网络连接不上，多半是DHCP问题，参考博客：<a href="https://blog.csdn.net/suoyudong/article/details/83037670">https://blog.csdn.net/suoyudong/article/details/83037670</a></p></li><li><p>点击时间和日期，设置系统时间并更改时区(打开网络时间)：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/date.png" alt="修改时区" style="zoom:67%;"></li><li><p>选择安装目的地，进行自定义配置，点击完成。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/install_loc.png" alt="选择安装目的地" style="zoom:67%;"></li><li><p>添加磁盘分区</p><p>下面是Linux的分区知识：</p><ul><li><p>交换分区(sqap):交换分区和Windows的虚拟内存很像。我们虚拟机内存为1G，我们划给它2G。</p></li><li><p>启动分区(boot):200MB足够</p></li><li><p>根分区(/)：剩余空间都给根分区，当然我们也可以单独划出/data分区，专门用来存储存数据，不过这里我们先不这样做，直接全部都给根分区。</p></li></ul><p>按照下图顺序依次进行设置：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/boot.png" alt="boot分区" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/swap.png" alt="swap分区" style="zoom:67%;"></li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/根.png" alt="根分区" style="zoom:67%;"><ol start="11"><li><p>点击完成后会弹出<strong>更改摘要页面</strong>，点击接受更改：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/accept_change.png" alt="接受更改" style="zoom:67%;"></li><li><p><strong>修改root密码</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/change_pwd.png" alt="修改root密码" style="zoom:67%;"></li><li><p>创建用户,这里我创建的用户全名是AtroxQW，用户名是atroxqw，并设置为管理员。这一步忘了截图，采用网上的图片。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/create_user.png" alt="创建用户" style="zoom: 80%;"></li><li><p>点击<strong>开始安装</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/install_2.png" alt="开始安装" style="zoom:67%;"></li><li><p>安装过程中报错，Error in posttrans scriptlet in rpm package kmod-kv</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/error2.png" alt="安装报错" style="zoom: 67%;"></li><li><p>参考博文<a href="https://blog.csdn.net/weixin_42789947/article/details/108687277?utm_medium=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.control%EF%BC%8C%E5%88%86%E5%8C%BA%E7%9A%84%E7%9A%84%E6%97%B6%E5%80%99%E6%8A%8A/boot%E5%88%86%E5%8C%BA%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%94%B9%E6%88%90300M%EF%BC%8C%E5%AE%9E%E6%B5%8B%E6%9C%89%E6%95%88%E3%80%82">https://blog.csdn.net/weixin_42789947/article/details/108687277?utm_medium=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.control，分区的的时候把/boot分区的大小改成300M，实测有效。</a></p></li><li><p>安装完成后点击重启系统。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/restart.png" alt="重启系统" style="zoom:67%;"></li><li><p>重启完成后点击LICENS INFORMATION接受许可证,勾选同意许可，然后点击完成。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/accept_license.png" alt="接受许可证" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/ui.png" alt="同意许可协议" style="zoom:67%;"></li><li><p>接受许可证之后，点击结束配置。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/finish_config.png" alt="结束配置" style="zoom:67%;"></li><li><p>来到登录界面，点击未列出，以root用户登录，方便后面配置操作：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/root.png" alt="以root用户登录" style="zoom:67%;"></li><li><p>在欢迎页选择语言。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/select_la2.png" alt="选择语言" style="zoom:67%;"></li><li><p>选择键盘布局。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/select_kb.png" alt="键盘布局" style="zoom:67%;"></li><li><p>打开位置服务</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/loc.png" alt="位置服务" style="zoom:67%;"></li><li><p>连接在线账号或者直接跳过。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/account.png" alt="连接在线账号" style="zoom:67%;"></li><li><p>开始使用CentOS Linux系统。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/use.png" alt="使用系统" style="zoom:67%;"></li><li><p>打开命令行测试。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/all_finish.png" alt="测试命令行" style="zoom:67%;"></li><li><p>安装完成，大功告成啦，本地Linux环境就准备好啦！</p></li></ol><blockquote><p>方式二：连接阿里云服务器</p></blockquote><ol><li><p>购买完阿里云服务器，<strong>配置安全组的端口号</strong>，获取公网IP。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux%E7%AC%94%E8%AE%B002-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/IP.png" alt="阿里云服务器配置"></p></li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/safe.png" alt="安全组" style="zoom:67%;"><ol start="2"><li><p><strong>安装xshell和xftp软件</strong>，这里推荐从官网下载，学生免费试用xshell和xftp。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/xshell.png" alt="xshell" style="zoom:67%;"><p>当然，还有一个渠道，360软件管家，但是<img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/ye.png" alt="img" style="zoom: 80%;">不用。</p></li><li><p><strong>xshell连接阿里云服务器</strong>，新建连接。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/new_con.png" alt="新建连接" style="zoom:67%;"></li><li><p><strong>添加新建会话的相关信息</strong>，包括公网id和一些描述。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/con_info.png" alt="会话信息" style="zoom:67%;"></li><li><p><strong>登录用户名填写root</strong>，选择记住用户名。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/name.png" alt="登录用户名" style="zoom:67%;"></li><li><p>填写登录密码。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/pws.png" alt="密码" style="zoom:67%;"></li><li><p>连接成功，在命令行进行操作。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/con_suc.png" alt="xshell连接阿里云服务器" style="zoom:67%;"></li><li><p>上传文件，启动xshell上面菜单栏的xftp。比如说我们上传一张图片到阿里云服务器。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记02-Linux环境搭建/upimg.png" alt="xftp上传文件" style="zoom:67%;"></li><li><p>到此，Xshell连接阿里云结束！</p></li></ol><blockquote><p>Linux获取宝塔棉被登录地址、账号和密码</p></blockquote><ul><li><p>首先用xshell通过公网连接服务器；</p></li><li><p>连接成功后，在xshell终端输入命令：/etc/init.d/bt </p></li><li><p>进入宝塔面板命令行: 输入命令编号：14</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记01-入门概述</title>
    <link href="/posts/2021/01/16/Linux%E7%AC%94%E8%AE%B001-%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/"/>
    <url>/posts/2021/01/16/Linux%E7%AC%94%E8%AE%B001-%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux入门概述"><a href="#Linux入门概述" class="headerlink" title="Linux入门概述"></a>Linux入门概述</h2><blockquote><p><strong>我们为什么要学习Linux？</strong></p></blockquote><p>Linux诞生了这么多年，以前还喊着如何能取代windows系统，<strong>现在这个口号已经小多了</strong>。任何事物发展都有其局限性都有其天花板。就如同在国内再搞一个社交软件取代腾讯一样，想想而已基本不可能，因为用户已经习惯于使用微信交流，不是说技术上实现不了解而是老百姓已经习惯了，想让他们不用，即使他们自己不用亲戚朋友还是要用，<strong>习惯成自然的事情</strong>。</p><p>同理，当世界上大部分用户已经习惯了Windows操作系统，再让大家切换到陌生的Linux操作系统基本上是不可能的事情。<strong>改变一个人已经养成的习惯是有难度的，如果不是具有历史性、革命性的变革，Linux基本上没有办法深入到普通大众的生活中</strong>。</p><p>但是，<mark>这并不意味着Linux没有用武之地</mark>。在<strong>服务器领域和开发者社区</strong>，Linux有越来越受欢迎的趋势，以至于现在的开发岗位多多少少有着对Linux操作的需求。许多程序员都觉得不懂Linux不能适应现在的分布式、集群等开发环境，这也从用户的角度反映了<strong>Linux在开源社区的地位依然巍然不动</strong>。</p><blockquote><p><strong>Linux简介</strong></p></blockquote><p>Linux内核最初只是由芬兰人林纳斯·托瓦兹（<mark>Linus Torvalds</mark>&gt;）在赫尔辛基大学上学时<strong>出于个人爱好而编写</strong>的。</p><p><strong>Linux 是一套免费使用和自由传播的类 Unix 操作系统</strong>，是一个基于 POSIX（可移植操作系统接口） 和<br>UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了<br>Unix 以网络为核心的设计思想，是一个性能稳定的<strong>多用户网络操作系统</strong>。</p><blockquote><p><strong>Linux发行版</strong></p></blockquote><p>Linux的发行版，通俗的说就是将Linux内核与应用软件做一个打包，下图是Linux的各个发行版。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记01-入门概述/Linux_distributions.png" alt="Linux发行版" style="zoom:75%;"><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、<br>Arch Linux、SolusOS 等，下图是各个发行版的图标。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记01-入门概述/Linux_distributions_logo.png" alt="Linux发行版的logo" style="zoom:60%;"><blockquote><p><strong>Linux应用领域</strong></p></blockquote><p>今天，各种场合都有使用Linux发行版的现象，从嵌入式到超级计算机，Linux尤其在服务器领域确定了地位。通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或者 LNMP（Linux + Nginx + MySQL + PHP）组合。</p><p>目前，Linux不仅在家庭与企业中被广泛使用，并且在政府中也备受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><blockquote><p><strong>Linux V.S. Windows</strong></p></blockquote><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Linux笔记01-入门概述/Linux_vs_Windows.jpg" alt="Linux与Windows的比较" style="zoom:80%;">]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记02-Redis环境搭建</title>
    <link href="/posts/2021/01/15/Redis%E7%AC%94%E8%AE%B002-Redis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/posts/2021/01/15/Redis%E7%AC%94%E8%AE%B002-Redis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-Redis是什么？"><a href="#1-Redis是什么？" class="headerlink" title="1. Redis是什么？"></a>1. Redis是什么？</h3><p>Redis（Remote Dictionary Server )，即远程字典服务。</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、<strong>Key-Value数据库</strong>，并提供多种语言的API。</p><p>与memcached一样，为了保证效率，<strong>数据都是缓存在内存中</strong>。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><h3 id="2-Redis能干什么？"><a href="#2-Redis能干什么？" class="headerlink" title="2.Redis能干什么？"></a>2.Redis能干什么？</h3><ol><li>内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）</li><li>高效率、用于高速缓冲</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器(eg：浏览量)</li><li>。。。</li></ol><h3 id="3-Redis的特性"><a href="#3-Redis的特性" class="headerlink" title="3. Redis的特性"></a>3. Redis的特性</h3><ol><li><p>多样的数据类型</p></li><li><p>持久化</p></li><li><p>集群</p></li><li><p>事务</p><p>…</p></li></ol><h2 id="二、Redis环境搭建"><a href="#二、Redis环境搭建" class="headerlink" title="二、Redis环境搭建"></a>二、Redis环境搭建</h2><p>官网：<a href="https://redis.io/">https://redis.io/</a></p><p>中文网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p><p>推荐使用Linux服务器学习。</p><p>windows版本的Redis已经停更很久了…</p><h2 id="三、Windows安装"><a href="#三、Windows安装" class="headerlink" title="三、Windows安装"></a>三、Windows安装</h2><p>在github上下载：<a href="https://github.com/microsoftarchive/redis">https://github.com/microsoftarchive/redis</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B002-Redis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/windows_redis.png" alt="github地址"></p><p>下载完成后解压到本地的环境文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B002-Redis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/environment.png" alt="解压压缩包"></p><h2 id="四、Linux安装"><a href="#四、Linux安装" class="headerlink" title="四、Linux安装"></a>四、Linux安装</h2><ol><li><p>在官网<a href="https://redis.io/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%60redis-6.0.10.tar.gz%60">https://redis.io/下载安装包`redis-6.0.10.tar.gz`</a></p></li><li><p>将该压缩包上传到服务器上<code>/home/AtroxQW</code>目录下。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B002-Redis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/linux_redis.png" alt="压缩包上传服务器"></p><p>在Linux命令行查看<code>/home/AtroxQW</code>目录下有没有压缩包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z /]# cd /home/AtroxQW/<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# ls<br>atrox3.jpg  redis-6.0.10.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>将压缩包移动到<code>/opt</code>目录下，解压Redis的安装包，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# mv redis-6.0.10.tar.gz /opt<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxQW]# cd /opt<br>[root@iZ2zeh7ydg2bbydds175q0Z opt]# ls<br>redis-6.0.10.tar.gz<br>[root@iZ2zeh7ydg2bbydds175q0Z opt]# tar -zxvf redis-6.0.10.tar.gz <br></code></pre></td></tr></table></figure><p>解压完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z opt]# ls<br>redis-6.0.10  redis-6.0.10.tar.gz<br></code></pre></td></tr></table></figure><p>进入解压后的redis下的目录文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z opt]# cd redis-6.0.10/<br>[root@iZ2zeh7ydg2bbydds175q0Z redis-6.0.10]# ls<br>00-RELEASENOTES  deps       README.md        runtest-moduleapi  tests<br>BUGS             INSTALL    redis.conf       runtest-sentinel   TLS.md<br>CONTRIBUTING     Makefile   runtest          sentinel.conf      utils<br>COPYING          MANIFESTO  runtest-cluster  src<br></code></pre></td></tr></table></figure><p>其中，<code>redis.conf</code>是redis的配置文件。</p></li><li><p>基本的环境安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z redis-6.0.10]# yum install gcc-c++<br>Repository epel is listed more than once in the configuration<br>Last metadata expiration check: 1:01:24 ago on Mon 18 Jan 2021 07:09:00 PM CST.<br>Package gcc-c++-8.3.1-5.1.el8.x86_64 is already installed.<br>Dependencies resolved.<br>Nothing to do.<br>Complete!<br></code></pre></td></tr></table></figure><p>执行make命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z redis-6.0.10]# make<br></code></pre></td></tr></table></figure><p>再次执行make命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z redis-6.0.10]# make<br>cd src &amp;&amp; make all<br>make[1]: Entering directory &#x27;/opt/redis-6.0.10/src&#x27;<br>    CC Makefile.dep<br><br>Hint: It&#x27;s a good idea to run &#x27;make test&#x27; ;)<br><br>make[1]: Leaving directory &#x27;/opt/redis-6.0.10/src&#x27;<br></code></pre></td></tr></table></figure><p>执行make install命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z redis-6.0.10]# make install<br>cd src &amp;&amp; make install<br>make[1]: Entering directory &#x27;/opt/redis-6.0.10/src&#x27;<br><br>Hint: It&#x27;s a good idea to run &#x27;make test&#x27; ;)<br><br>    INSTALL install<br>    INSTALL install<br>    INSTALL install<br>    INSTALL install<br>    INSTALL install<br>make[1]: Leaving directory &#x27;/opt/redis-6.0.10/src&#x27;<br></code></pre></td></tr></table></figure></li><li><p>redis的默认安装路径 <code>usr/local/bin</code></p></li><li><p>将redis的配置文件<code>redis.config</code>复制到<code>/usr/local/bin/AtroxConfig</code>，之后就是用这个配置文件进行启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z bin]# mkdir AtroxConfig<br>[root@iZ2zeh7ydg2bbydds175q0Z bin]# cp /opt/redis-6.0.10/redis.conf AtroxConfig<br>[root@iZ2zeh7ydg2bbydds175q0Z bin]# cd AtroxConfig/<br>[root@iZ2zeh7ydg2bbydds175q0Z AtroxConfig]# ls<br>redis.conf<br></code></pre></td></tr></table></figure></li><li><p>redis默认不是后台启动的，需要修改<code>redis.config</code>配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">将daemonize no 修改为 daemonize yes<br></code></pre></td></tr></table></figure></li><li><p>启动Redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z bin]# redis-server AtroxConfig/redis.conf <br></code></pre></td></tr></table></figure></li><li><p>使用redis客户端连接指定的端口号，测试设置key和查询key。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z bin]# redis-cli -p 6379<br>127.0.0.1:6379&gt; ping<br>PONG<br>127.0.0.1:6379&gt; set name AtroxQW<br>OK<br>127.0.0.1:6379&gt; get name<br>&quot;AtroxQW&quot;<br>127.0.0.1:6379&gt; keys *<br>1) &quot;name&quot;<br></code></pre></td></tr></table></figure></li><li><p>查看redis进程是否开启。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z bin]# ps -ef|grep redis<br>redis    18249     1  0 Jan16 ?        00:04:02 /www/server/redis/src/redi-server 127.0.0.1:6379<br>root     26739 20013  0 20:24 pts/0    00:00:00 redis-cli -p 6379<br>root     26909 26875  0 20:27 pts/2    00:00:00 grep --color=auto redis<br></code></pre></td></tr></table></figure></li><li><p>如何关闭Redis服务呢？使用shutdown并退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; shutdown<br>not connected&gt; exit<br></code></pre></td></tr></table></figure><p>再查看redis进程是否开启，发现已经关闭。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeh7ydg2bbydds175q0Z bin]# ps -ef|grep redis<br>root     27025 26875  0 20:29 pts/2    00:00:00 grep --color=auto redis<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis笔记01-NoSQL追根溯源</title>
    <link href="/posts/2021/01/15/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/"/>
    <url>/posts/2021/01/15/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、为什么使用NoSQL？"><a href="#一、为什么使用NoSQL？" class="headerlink" title="一、为什么使用NoSQL？"></a>一、为什么使用NoSQL？</h2><p>说到为什么使用NoSQL，要从互联网网站架构的发展历史讲起。</p><h3 id="1-单机MySQL时代"><a href="#1-单机MySQL时代" class="headerlink" title="1. 单机MySQL时代"></a>1. 单机MySQL时代</h3><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/stand_alone_mysql.png" alt="单机MySQL架构图"></p><p>90年代,一个网站的访问量一般不会太大，单个数据库完全够用。随着用户增多，网站出现以下问题</p><ol><li>数据量增加到一定程度，单机数据库就放不下了</li><li>数据的索引（B+ Tree）,一个机器内存也存放不下</li><li>访问量变大后（读写混合），一台服务器承受不住。</li></ol><h3 id="2-Memcached-缓存-MySQL-垂直拆分-读写分离"><a href="#2-Memcached-缓存-MySQL-垂直拆分-读写分离" class="headerlink" title="2. Memcached(缓存) + MySQL + 垂直拆分(读写分离)"></a>2. Memcached(缓存) + MySQL + 垂直拆分(读写分离)</h3><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/cache_read_wirite_separation.png" alt="缓存+读写分离架构"></p><p>优化过程经历了以下几个过程：</p><ol><li>优化数据库的数据结构和索引(难度大)</li><li>文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了</li><li>MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。</li></ol><h3 id="3-分库分表-水平拆分-MySQL集群"><a href="#3-分库分表-水平拆分-MySQL集群" class="headerlink" title="3. 分库分表 + 水平拆分 + MySQL集群"></a>3. 分库分表 + 水平拆分 + MySQL集群</h3><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/history_3.png" alt="架构"></p><h3 id="4-现代"><a href="#4-现代" class="headerlink" title="4. 现代"></a>4. 现代</h3><p> 如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql数据库就能轻松解决这些问题。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/modern_arch.png" alt="现代网站架构"></p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="5-使用NoSQL的原因"><a href="#5-使用NoSQL的原因" class="headerlink" title="5. 使用NoSQL的原因"></a>5. 使用NoSQL的原因</h3><p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！</p><h2 id="二、什么是NoSQL"><a href="#二、什么是NoSQL" class="headerlink" title="二、什么是NoSQL"></a>二、什么是NoSQL</h2><p><strong>NoSQL = Not Only SQL（不仅仅是SQL）</strong></p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><h2 id="三、NoSQL的特点"><a href="#三、NoSQL的特点" class="headerlink" title="三、NoSQL的特点"></a>三、NoSQL的特点</h2><ol><li><p>方便扩展（数据之间没有关系，很好扩展！）</p></li><li><p>大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p></li><li><p>数据类型是多样型的！（不需要事先设计数据库，随取随用）</p></li><li><p>传统的 RDBMS 和 NoSQL对比</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">传统的 RDBMS(关系型数据库)<br><span class="hljs-bullet">- </span>结构化组织<br><span class="hljs-bullet">- </span>SQL<br><span class="hljs-bullet">- </span>数据和关系都存在单独的表中 row col<br><span class="hljs-bullet">- </span>操作，数据定义语言<br><span class="hljs-bullet">- </span>严格的一致性<br><span class="hljs-bullet">- </span>基础的事务<br><span class="hljs-bullet">- </span>...<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">Nosql<br><span class="hljs-bullet">- </span>不仅仅是数据<br><span class="hljs-bullet">- </span>没有固定的查询语言<br><span class="hljs-bullet">- </span>键值对存储，列存储，文档存储，图形数据库（社交关系）<br><span class="hljs-bullet">- </span>最终一致性<br><span class="hljs-bullet">- </span>CAP定理和BASE<br><span class="hljs-bullet">- </span>高性能，高可用，高扩展<br><span class="hljs-bullet">- </span>...<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>了解：3V + 3高</p></blockquote><p>大数据时代的3V ：主要是<strong>描述问题</strong>的</p><ol><li>海量Velume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高 ： 主要是<strong>对程序的要求</strong></p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p><h2 id="四、阿里巴巴架构演进分析"><a href="#四、阿里巴巴架构演进分析" class="headerlink" title="四、阿里巴巴架构演进分析"></a>四、阿里巴巴架构演进分析</h2><p>推荐阅读：阿里云的这群疯子<a href="https://yq.aliyun.com/articles/653511">https://yq.aliyun.com/articles/653511</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/tb.png" alt="一张电商网站截图"></p><p>思考问题：这么多东西难道都是在一个数据库中的吗?</p><p>这里我们以阿里巴巴的网站演进历史为例进行分析。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/ali_history.png" alt="阿里巴巴演进史"></p><p>随着，网站功能的完善，数据架构也变得日益复杂。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/data_complex.png" alt="日益复杂的数据架构"></p><p>阿里巴巴给出的方案是，编写UDSL统一数据服务平台</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/UDSL.png" alt="UDSL"></p><p>再然后，进行了热点缓存的设计。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Redis%E7%AC%94%E8%AE%B001-NoSQL%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90/hot_pot_cache.png" alt="UDSL热点缓存设计"></p><h2 id="五、不同类型数据的容器"><a href="#五、不同类型数据的容器" class="headerlink" title="五、不同类型数据的容器"></a>五、不同类型数据的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 商品信息</span><br>- 一般存放在关系型数据库：Mysql,阿里巴巴使用的Mysql都是经过内部改动的。<br><br><span class="hljs-comment"># 商品描述、评论(文字居多)</span><br>- 文档型数据库：MongoDB<br><br><span class="hljs-comment"># 图片</span><br>- 分布式文件系统 FastDFS<br>- 淘宝：TFS<br>- Google: GFS<br>- Hadoop: HDFS<br>- 阿里云: oss<br><br><span class="hljs-comment"># 商品关键字 用于搜索</span><br>- 搜索引擎：solr,elasticsearch<br>- 阿里：Isearch 多隆<br><br><span class="hljs-comment"># 商品热门的波段信息</span><br>- 内存数据库：Redis，Memcache<br><br><span class="hljs-comment"># 商品交易，外部支付接口</span><br>- 第三方应用<br></code></pre></td></tr></table></figure><h2 id="六、NoSQL的四大分类"><a href="#六、NoSQL的四大分类" class="headerlink" title="六、NoSQL的四大分类"></a>六、NoSQL的四大分类</h2><blockquote><p><strong>KV键值对</strong></p></blockquote><ul><li>新浪：<strong>Redis</strong></li><li>美团：Redis + Tair</li><li>阿里、百度：Redis + Memcache</li></ul><blockquote><p>文档型数据库（bson数据格式）：</p></blockquote><ul><li><strong>MongoDB</strong>(掌握)<ul><li>基于分布式文件存储的数据库。C++编写，用于处理大量文档。</li><li>MongoDB是RDBMS和NoSQL的中间产品。MongoDB是非关系型数据库中功能最丰富的，NoSQL中最像关系型数据库的数据库。</li></ul></li><li>ConthDB</li></ul><blockquote><p>列存储数据库</p></blockquote><ul><li><strong>HBase</strong>(大数据必学)</li><li>分布式文件系统</li></ul><blockquote><p>图关系数据库</p></blockquote><p>用于广告推荐，社交网络</p><ul><li><strong>Neo4j</strong>、InfoGrid</li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>Examples举例</strong></th><th><strong>典型应用场景</strong></th><th><strong>数据模型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>键值对（key-value）</strong></td><td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td>Key 指向 Value 的键值对，通常用hash table来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>Cassandra, HBase, Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>CouchDB, MongoDb</td><td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td>Key-Value对应的键值对，Value为结构化数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td><strong>图形(Graph)数据库</strong></td><td>Neo4J, InfoGrid, Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud笔记09-Zuul路由网关</title>
    <link href="/posts/2021/01/14/SpringCloud%E7%AC%94%E8%AE%B009-Zuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/"/>
    <url>/posts/2021/01/14/SpringCloud%E7%AC%94%E8%AE%B009-Zuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="Zull路由网关"><a href="#Zull路由网关" class="headerlink" title="Zull路由网关"></a>Zull路由网关</h2><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><blockquote><p>什么是zuul？</p></blockquote><p> Zull包含了对请求的<strong>路由</strong>(用来跳转的)和<strong>过滤</strong>两个最主要功能：</p><p> 其中<strong>路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础</strong>，而过<strong>滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础</strong>。Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B009-Zuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/zuul1.png" alt="zuul作用"></p><p><strong>注意</strong>：Zuul 服务最终还是会注册进 Eureka</p><p><strong>提供</strong>：代理 + 路由 + 过滤 三大功能！</p><blockquote><p>Zuul 能干嘛？</p></blockquote><ul><li>路由</li><li>过滤</li></ul><p>官方文档：<a href="https://github.com/Netflix/zuul/">https://github.com/Netflix/zuul/</a></p><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><p><strong>新建springcloud-zuul模块，并导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入zuul依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9527</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">springcloud-zuul</span> <span class="hljs-comment">#微服务名称</span><br><br><span class="hljs-comment"># eureka 注册中心配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br>  <span class="hljs-attr">instance:</span> <span class="hljs-comment">#实例的id</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">zuul9527.com</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 显示ip</span><br><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">app.name:</span> <span class="hljs-string">haust.springcloud</span> <span class="hljs-comment"># 项目名称</span><br>  <span class="hljs-attr">company.name:</span> <span class="hljs-string">河南科技大学西苑校区</span> <span class="hljs-comment"># 公司名称</span><br><br><span class="hljs-comment"># zull 路由网关配置</span><br><span class="hljs-attr">zuul:</span><br>  <span class="hljs-comment"># 路由相关配置</span><br>  <span class="hljs-comment"># 原来访问路由 eg:http://www.cspStudy.com:9527/springcloud-provider-dept/dept/get/1</span><br>  <span class="hljs-comment"># zull路由配置后访问路由 eg:http://www.cspstudy.com:9527/haust/mydept/dept/get/1</span><br>  <span class="hljs-attr">routes:</span><br>    <span class="hljs-attr">mydept.serviceId:</span> <span class="hljs-string">springcloud-provider-dept</span> <span class="hljs-comment"># eureka注册中心的服务提供方路由名称</span><br>    <span class="hljs-attr">mydept.path:</span> <span class="hljs-string">/mydept/**</span> <span class="hljs-comment"># 将eureka注册中心的服务提供方路由名称 改为自定义路由名称</span><br>  <span class="hljs-comment"># 不能再使用这个路径访问了，*： 忽略,隐藏全部的服务名称~</span><br>  <span class="hljs-attr">ignored-services:</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-comment"># 设置公共的前缀</span><br>  <span class="hljs-attr">prefix:</span> <span class="hljs-string">/haust</span><br></code></pre></td></tr></table></figure><p><strong>主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableZuulProxy</span> <span class="hljs-comment">// 开启Zuul</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ZuulApplication_9527</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ZuulApplication_9527.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B009-Zuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/1.png" alt="查看是否被注册"></p><p>可以看到，Zull路由网关被注册到Eureka注册中心中了！</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B009-Zuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/2.png" alt="没有经过路由网关配置的情况"></p><p>所以经过Zull路由网关配置后，访问的路由为：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B009-Zuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/3.png" alt="经过路由网关配置的情况"></p><p>我们看到，微服务名称被替换并隐藏，换成了我们自定义的微服务名称mydept，同时加上了前缀haust，这样就做到了对路由fan访问的加密处理！</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud08笔记-Hystrix:服务熔断</title>
    <link href="/posts/2021/01/14/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/"/>
    <url>/posts/2021/01/14/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="Hystrix：服务熔断"><a href="#Hystrix：服务熔断" class="headerlink" title="Hystrix：服务熔断"></a>Hystrix：服务熔断</h2><blockquote><p>分布式系统面临的问题</p></blockquote><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免失败！</p><h3 id="一、服务雪崩"><a href="#一、服务雪崩" class="headerlink" title="一、服务雪崩"></a>一、服务雪崩</h3><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上<strong>某个微服务的调用响应时间过长，或者不可用</strong>，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/%E6%9C%8D%E5%8A%A1%E9%9B%AA%E5%B4%A9.png" alt="服务雪崩"></p><p> 对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，<strong>这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行</strong>。</p><p> 我们需要，<strong>弃车保帅</strong>！</p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="二、什么是Hystrix"><a href="#二、什么是Hystrix" class="headerlink" title="二、什么是Hystrix"></a>二、什么是Hystrix</h3><p><strong>ystrix</strong>是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，<strong>Hystrix</strong> 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。</p><p> “<strong>断路器</strong>”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，<strong>向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用</strong>，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD.png" alt="服务熔断"></p><h3 id="三、Hystrix能干什么"><a href="#三、Hystrix能干什么" class="headerlink" title="三、Hystrix能干什么"></a>三、Hystrix能干什么</h3><ul><li>服务降级</li><li>服务熔断</li><li>服务限流</li><li>接近实时的监控</li><li>…</li></ul><p>当一切正常时，请求流可以如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/1.png" alt="正常请求流"></p><p>当许多后端系统中有一个潜在阻塞服务时，它可以阻止整个用户请求：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/2.png" alt="阻塞请求流"></p><p>随着大容量通信量的增加，单个后端依赖项的潜在性会导致所有服务器上的所有资源在几秒钟内饱和。</p><p>应用程序中通过网络或客户端库可能导致网络请求的每个点都是潜在故障的来源。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，从而备份队列、线程和其他系统资源，从而导致更多跨系统的级联故障。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/3.png" alt="级联故障"></p><p>当使用<strong>Hystrix</strong>包装每个基础依赖项时，上面的图表中所示的体系结构会发生类似于以下关系图的变化。<strong>每个依赖项是相互隔离的</strong>，限制在延迟发生时它可以填充的资源中，并包含在回退逻辑中，该逻辑决定在依赖项中发生任何类型的故障时要做出什么样的响应：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/4.png" alt="发生故障的响应"></p><h3 id="四、服务熔断"><a href="#四、服务熔断" class="headerlink" title="四、服务熔断"></a>四、服务熔断</h3><h5 id="什么是服务熔断"><a href="#什么是服务熔断" class="headerlink" title="什么是服务熔断?"></a>什么是服务熔断?</h5><p> <strong>熔断机制是赌赢雪崩效应的一种微服务链路保护机制</strong>。</p><p> 当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回错误的响应信息</strong>。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阀值缺省是<strong>5秒内20次调用失败，就会启动熔断机制</strong>。熔断机制的注解是：<code>@HystrixCommand</code>。</p><p>服务熔断解决如下问题：</p><ul><li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li><li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</li></ul><h5 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h5><p>新建springcloud-provider-dept-hystrix-8001模块并拷贝springcloud-provider-dept–8001内的<strong>pom.xml、resource</strong>和Java代码进行初始化并调整。</p><p><strong>导入hystrix依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Hystrix的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>调整yml配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Eureka的配置，注册服务</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">springcloud-provider-dept-hystrix-8001</span> <span class="hljs-comment"># 修改Eureka上已注册服务的默认描述信息</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>修改controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询部门信息</span><br><span class="hljs-comment">     * 如果根据id查询出现异常,则走hystrixGet这段备选代码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;hystrixGet&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span><span class="hljs-comment">//根据id查询</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;<br>        Dept dept = deptService.queryById(id);<br>        <span class="hljs-keyword">if</span> (dept==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;这个id=&gt;&quot;</span>+id+<span class="hljs-string">&quot;,不存在该用户，或信息无法找到~&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dept;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询备选方案(熔断)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">hystrixGet</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Dept().setDeptno(id)<br>            .setDname(<span class="hljs-string">&quot;这个id=&gt;&quot;</span>+id+<span class="hljs-string">&quot;,没有对应的信息,null---@Hystrix~&quot;</span>)<br>            .setDb_source(<span class="hljs-string">&quot;在MySQL中没有这个数据库&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>为主启动类添加对熔断的支持注解@EnableCircuitBreaker</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启动类</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 在服务启动后自动注册到Eureka中</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// 服务发现</span><br><span class="hljs-comment">// 添加对熔断的支持</span><br><span class="hljs-meta">@EnableCircuitBreaker</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProviderHystrix_8001</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DeptProviderHystrix_8001.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p>使用熔断后，当访问一个不存在的id时，前台页展示数据如下:</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/5.png" alt="id不存在"></p><p>而不适用熔断的springcloud-provider-dept–8001模块访问相同地址会出现Error Page;</p><p>因此，<strong>为了避免因某个微服务后台出现异常或错误而导致整个应用或网页报错，使用熔断是必要的</strong></p><h3 id="五、服务降级"><a href="#五、服务降级" class="headerlink" title="五、服务降级"></a>五、服务降级</h3><h5 id="什么是服务降级"><a href="#什么是服务降级" class="headerlink" title="什么是服务降级?"></a>什么是服务降级?</h5><p> 服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理，或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。说白了，<strong>就是尽可能的把系统资源让给优先级高的服务</strong>。</p><p>资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双11活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。</p><p>服务降级主要用于什么场景呢？当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些 不重要 或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。</p><p>降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行 ；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7.png" alt="服务降级"></p><p>由上图可得，<strong>当某一时间内服务A的访问量暴增，而B和C的访问量较少，为了缓解A服务的压力，这时候需要B和C暂时关闭一些服务功能，去承担A的部分服务，从而为A分担压力，叫做服务降级</strong>。</p><h5 id="服务降级需要考虑的问题"><a href="#服务降级需要考虑的问题" class="headerlink" title="服务降级需要考虑的问题"></a>服务降级需要考虑的问题</h5><ul><li>1）那些服务是核心服务，哪些服务是非核心服务</li><li>2）那些服务可以支持降级，那些服务不能支持降级，降级策略是什么</li><li>3）除服务降级之外是否存在更复杂的业务放通场景，策略是什么？</li></ul><h5 id="自动降级分类"><a href="#自动降级分类" class="headerlink" title="自动降级分类"></a>自动降级分类</h5><p>1）超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</p><p>2）失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</p><p>3）故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</p><p>4）限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</p><h5 id="入门案例-1"><a href="#入门案例-1" class="headerlink" title="入门案例"></a>入门案例</h5><p>在springcloud-api模块下的service包中新建降级配置类<code>DeptClientServiceFallBackFactory.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptClientServiceFallBackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FallbackFactory</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DeptClientService <span class="hljs-title">create</span><span class="hljs-params">(Throwable cause)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DeptClientService() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">queryById</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Dept()<br>                        .setDeptno(id)<br>                        .setDname(<span class="hljs-string">&quot;id=&gt;&quot;</span> + id + <span class="hljs-string">&quot;没有对应的信息，客户端提供了降级的信息，这个服务现在已经被关闭&quot;</span>)<br>                        .setDb_source(<span class="hljs-string">&quot;没有数据~&quot;</span>);<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">addDept</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>DeptClientService</code>中指定降级配置类<code>DeptClientServiceFallBackFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册到spring容器中</span><br><span class="hljs-comment">//@FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务</span><br><span class="hljs-meta">@FeignClient(value = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;,fallbackFactory = DeptClientServiceFallBackFactory.class)</span><span class="hljs-comment">//fallbackFactory指定降级配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptClientService</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/dept/list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/dept/add&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">addDept</span><span class="hljs-params">(Dept dept)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<strong>springcloud-consumer-dept-feign</strong>模块中开启降级：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment"># Eureka配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 不向 Eureka注册自己</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment"># 从三个注册中心中随机取一个去访问</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br><br><span class="hljs-comment"># 开启降级feign.hystrix</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="六、服务熔断和服务降级的区别"><a href="#六、服务熔断和服务降级的区别" class="headerlink" title="六、服务熔断和服务降级的区别"></a>六、服务熔断和服务降级的区别</h3><ul><li><strong>服务熔断—&gt;服务端</strong>：某个服务超时或异常，引起熔断~，类似于保险丝(自我熔断)</li><li><strong>服务降级—&gt;客户端</strong>：从整体网站请求负载考虑，当某个服务熔断或者关闭之后，服务将不再被调用，此时在客户端，我们可以准备一个 FallBackFactory ，返回一个默认的值(缺省值)。会导致整体的服务下降，但是好歹能用，比直接挂掉强。</li><li>触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li><li>实现方式不太一样，服务降级具有代码侵入性(由控制器完成/或自动降级)，熔断一般称为<strong>自我熔断</strong>。</li></ul><p><strong>熔断，降级，限流</strong>：</p><p>限流：限制并发的请求访问量，超过阈值则拒绝；</p><p>降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定；从整体负荷考虑；</p><p>熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃；系统自动执行和恢复</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> [<span class="hljs-string">&quot;health&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;hystrix.stream&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="七、Dashboard流监控"><a href="#七、Dashboard流监控" class="headerlink" title="七、Dashboard流监控"></a>七、Dashboard流监控</h3><p>新建springcloud-consumer-hystrix-dashboard模块</p><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Hystrix依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--dashboard依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Ribbon--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Eureka--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--实体类+web--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.haust<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--热部署--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>主启动类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">// 开启Dashboard</span><br><span class="hljs-meta">@EnableHystrixDashboard</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptConsumerDashboard_9001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DeptConsumerDashboard_9001.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>给springcloud-provider-dept-hystrix-8001模块下的主启动类添加如下代码,添加监控</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">//EnableEurekaClient 客户端的启动类，在服务启动后自动向注册中心注册服务</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider_8001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DeptProvider_8001.class,args);<br>    &#125;<br><br>    <span class="hljs-comment">//增加一个 Servlet</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">hystrixMetricsStreamServlet</span><span class="hljs-params">()</span></span>&#123;<br>        ServletRegistrationBean registrationBean = <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> HystrixMetricsStreamServlet());<br>        <span class="hljs-comment">//访问该页面就是监控页面</span><br>        registrationBean.addUrlMappings(<span class="hljs-string">&quot;/actuator/hystrix.stream&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问：<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/dashboard.png" alt="Hystrix Dashboard"></p><p>进入监控页面：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/dash1.png" alt="Hystrix Dashboard"></p><p>效果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/dash2.png" alt="Hystrix Dashboard监控"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B008-Hystrix-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD/dash3.png" alt="Hystrix Dashboard监控讲解"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud笔记07-Feign:负载均衡(基于服务端)</title>
    <link href="/posts/2021/01/14/SpringCloud%E7%AC%94%E8%AE%B007-Feign-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <url>/posts/2021/01/14/SpringCloud%E7%AC%94%E8%AE%B007-Feign-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="Feign：负载均衡（基于服务端）"><a href="#Feign：负载均衡（基于服务端）" class="headerlink" title="Feign：负载均衡（基于服务端）"></a>Feign：负载均衡（基于服务端）</h2><h3 id="一、Feign简介"><a href="#一、Feign简介" class="headerlink" title="一、Feign简介"></a>一、Feign简介</h3><p>Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端</p><p><strong>只需要创建一个接口，然后添加注解即可~</strong></p><p>Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法</p><ol><li>微服务名字 【ribbon】</li><li>接口和注解 【feign】</li></ol><p><strong>Feign能干什么？</strong></p><ul><li>Feign旨在使编写Java Http客户端变得更容易</li><li>前面在使用<strong>Ribbon</strong> + <strong>RestTemplate</strong>时，利用<strong>RestTemplate</strong>对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，<strong>Feign</strong>在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</li></ul><p><strong>Feign默认集成了Ribbon</strong></p><ul><li>利用<strong>Ribbon</strong>维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与<strong>Ribbon</strong>不同的是，通过<strong>Feign</strong>只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</li></ul><h3 id="二、Feign的使用步骤"><a href="#二、Feign的使用步骤" class="headerlink" title="二、Feign的使用步骤"></a>二、Feign的使用步骤</h3><ol><li><p>创建<code>springcloud-consumer-dept-feign</code>模块</p></li><li><p>拷贝springcloud-consumer-dept-80模块下的pom.xml，resource，以及java代码到springcloud-consumer-feign模块，并添加feign依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Feign的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>改造<code>springcloud-api模块</code></p><p><code>pom.xml</code>添加 feign依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Feign的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建service包，并新建<code>DeptClientService</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务</span><br><span class="hljs-meta">@FeignClient(value = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptClientService</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/dept/list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">queryAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/dept/add&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">addDept</span><span class="hljs-params">(Dept dept)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改<code>springcloud-consumer-dept-feign</code>模块下控制层的<code>DeptConsumerController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptConsumerController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 理解：消费者，不应该有service层</span><br>    <span class="hljs-comment">// RestTemplate ... 供我们直接调用！注册到spring中</span><br>    <span class="hljs-comment">// (url, 实体: Map, Class&lt;T&gt; responseType)</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate; <span class="hljs-comment">// 提供多种便捷访问远程http服务的方法，简单的restful服务模板</span><br><br>    <span class="hljs-meta">@Autowired</span><br>    DeptClientService deptClientService ;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.deptClientService.addDept(dept);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.deptClientService.queryById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.deptClientService.queryAll();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Feign和Ribbon二者对比，前者显现出面向接口编程特点，代码看起来更清爽，而且Feign调用方式更符合我们之前在做SSM或者SprngBoot项目时，Controller层调用Service层的编程习惯！</p></li><li><p>修改主配置类<code>FeignDeptConsumer_80</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients(basePackages = &#123;&quot;com.atrox.springcloud&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeignDeptConsumer_80</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(FeignDeptConsumer_80.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动即可。</p></li></ol><h3 id="三、Feign和Ribbon如何选择？"><a href="#三、Feign和Ribbon如何选择？" class="headerlink" title="三、Feign和Ribbon如何选择？"></a>三、Feign和Ribbon如何选择？</h3><p><strong>根据个人习惯而定，如果喜欢REST风格使用Ribbon；如果喜欢社区版的面向接口风格使用Feign.</strong></p><p>Feign 本质上也是实现了 Ribbon，只不过后者是在调用方式上，为了满足一些开发者习惯的接口调用习惯！</p><p>下面我们关闭springcloud-consumer-dept-80 这个服务消费方，换用springcloud-consumer-dept-feign(端口还是80) 来代替：(依然可以正常访问，就是调用方式相比于Ribbon变化了)</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud笔记06-Ribbon:负载均衡（基于客户端）</title>
    <link href="/posts/2021/01/13/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/"/>
    <url>/posts/2021/01/13/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="Ribbon：负载均衡（基于客户端）"><a href="#Ribbon：负载均衡（基于客户端）" class="headerlink" title="Ribbon：负载均衡（基于客户端）"></a>Ribbon：负载均衡（基于客户端）</h2><h3 id="一、负载均衡以及Ribbon"><a href="#一、负载均衡以及Ribbon" class="headerlink" title="一、负载均衡以及Ribbon"></a>一、负载均衡以及Ribbon</h3><p><strong>Ribbon是什么？</strong></p><ul><li>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</li><li>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！</li></ul><p><strong>Ribbon能干嘛？</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/ribbon_1.png" alt="ribbon的作用"></p><ul><li>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</li><li>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高用)。</li><li>常见的负载均衡软件有 Nginx、Lvs 等等。</li><li>Dubbo、SpringCloud 中均给我们提供了负载均衡，<strong>SpringCloud 的负载均衡算法可以自定义</strong>。</li><li>负载均衡简单分类：<ul><li>集中式LB<ul><li>即在服务的提供方和消费方之间使用独立的LB设施，如**Nginx(反向代理服务器)**，由该设施负责把访问请求通过某种策略转发至服务的提供方！</li></ul></li><li>进程式 LB<ul><li>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。</li><li><strong>Ribbon 就属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</li></ul></li></ul></li></ul><h3 id="二、集成Ribbon"><a href="#二、集成Ribbon" class="headerlink" title="二、集成Ribbon"></a>二、集成Ribbon</h3><p><strong>springcloud-consumer-dept-80</strong>向pom.xml中添加Ribbon和Eureka依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 集成了Ribbon --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Eureka客户端配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>application.yml</code>文件中配置Eureka</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Eureka配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 不向 Eureka注册自己</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment"># 从三个注册中心中随机取一个去访问</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br><br></code></pre></td></tr></table></figure><p>主启动类加上@EnableEurekaClient注解，开启Eureka</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptConsumer_80</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DeptConsumer_80.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义Spring配置类：ConfigBean.java 配置负载均衡实现RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigBean</span> </span>&#123; <span class="hljs-comment">// 类似于@Configuration --- spring application</span><br><br>    <span class="hljs-comment">// 配置负载均衡实现RestTmplate</span><br>    <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">// Ribbon的作用</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>修改conroller：DeptConsumerController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过ribbon实现负载均衡，我们这里的地址应该是一个变量，通过服务名来访问。</span><br><span class="hljs-comment">//  private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REST_URL_PREFIX = <span class="hljs-string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;<br></code></pre></td></tr></table></figure><p>启动集群，和服务端，最后启动客户端，用<a href="http://localhost:88/comsume/dept/list%E8%BF%9B%E8%A1%8C%E8%AF%B7%E6%B1%82%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:88/comsume/dept/list进行请求测试。</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/ribbon_2.png" alt="测试结果"></p><h3 id="三、使用Ribbon实现负载均衡"><a href="#三、使用Ribbon实现负载均衡" class="headerlink" title="三、使用Ribbon实现负载均衡"></a>三、使用Ribbon实现负载均衡</h3><p>实现原理：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.png" alt="实现原理"></p><ol><li><p>新建两个数据库dept02、dept03供以后的两个服务提供者使用。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/db_3.png" alt="新建的两个数据库"></p></li><li><p>参照springcloud-provider-dept-8001，新建两个服务提供者模块：springcloud-provider-dept-8002、springcloud-provider-dept-8003</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/3provider.png" alt="3个服务提供者模块"></p></li><li><p>在pom文件中引入springcloud-provider-dept-8001的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Eureka服务端的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- actuator完善监控信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 我们需要拿到实体类，所以要配置api module --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Junit单元测试的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL数据库连接的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Druid数据源的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Logback的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringBoot启动器的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringBoot-test的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringBoot-web启动器的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- jetty应用服务器的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Devtools热部署工具的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改resources目录下mapper文件的查询语句的库为自己响应的库。</p><p>修改<code>application.yml</code>中的端口号和Eureka的配置，注册服务</p></li><li><p>启动8001、8002、8003三个服务提供者和7001、7002、7003注册中心集群。随便访问ttp://eureka7001.com:7001/查看结果：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/ribbon_3.png" alt="3个服务提供者"></p></li></ol><ol start="5"><li><p>启动客户端80，查看ribbon的负载均衡效果，访问<a href="http://localhost:88/consumer/dept/list">http://localhost:88/consumer/dept/list</a></p><p>第一次访问的是服务提供者8001:</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/ribbon_4.png" alt="默认负载均衡"></p><p>第二次访问的是服务提供者8002:</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/ribbon_5.png" alt="默认负载均衡"></p><p>第三次访问的是服务提供者8003:</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B006-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/ribbon_6.png" alt="默认负载均衡"></p></li></ol><p>以上这种<strong>每次访问<a href="http://localhost/consumer/dept/list%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%9F%90%E4%B8%AA%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E5%8F%AB%E5%81%9A%E8%BD%AE%E8%AF%A2">http://localhost/consumer/dept/list随机访问集群中某个服务提供者，这种情况叫做轮询</a></strong>，轮询算法在SpringCloud中可以自定义。</p><h3 id="四、切换和自定义负载均衡策略"><a href="#四、切换和自定义负载均衡策略" class="headerlink" title="四、切换和自定义负载均衡策略"></a>四、切换和自定义负载均衡策略</h3><p><strong>如何切换负载均衡策略呢？</strong></p><p>在springcloud-provider-dept-80模块下的ConfigBean中进行配置，切换使用不同的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigBean</span> </span>&#123;<span class="hljs-comment">//@Configuration -- spring  applicationContext.xml</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * IRule:</span><br><span class="hljs-comment">     * RoundRobinRule 轮询策略</span><br><span class="hljs-comment">     * RandomRule 随机策略</span><br><span class="hljs-comment">     * AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~</span><br><span class="hljs-comment">     * RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IRule <span class="hljs-title">myRule</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RandomRule();<span class="hljs-comment">//使用随机策略</span><br>        <span class="hljs-comment">//return new RoundRobinRule();//使用轮询策略</span><br>        <span class="hljs-comment">//return new AvailabilityFilteringRule();//使用轮询策略</span><br>        <span class="hljs-comment">//return new RetryRule();//使用轮询策略</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如何自定义负载均衡策略？</strong></p><p>首先在与<code>springcloud</code>包同级建立<code>myRule</code>包，在<code>myRule</code>包下建立一个配置类<code>AtroxRule.java</code>，注意：<strong>该包不要和主启动类所在的包同级，要跟启动类所在包同级</strong></p><p>主启动类开启负载均衡并指定自定义的MyRule配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-comment">//在微服务启动的时候就能加载自定义的Ribbon类(自定义的规则会覆盖原有默认的规则)</span><br><span class="hljs-meta">@RibbonClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;,configuration = MyRule.class)</span><span class="hljs-comment">//开启负载均衡,并指定自定义的规则</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptConsumer_80</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DeptConsumer_80.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义的规则(这里我们参考Ribbon中默认的规则代码自己稍微改动):<code>AtroxRule.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtroxRule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractLoadBalancerRule</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 每个服务访问5次则换下一个服务(总共3个服务)</span><br><span class="hljs-comment">   * &lt;p&gt;</span><br><span class="hljs-comment">   * total=0,默认=0,如果=5,指向下一个服务节点</span><br><span class="hljs-comment">   * index=0,默认=0,如果total=5,index+1</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;<span class="hljs-comment">//被调用的次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentIndex = <span class="hljs-number">0</span>;<span class="hljs-comment">//当前是谁在提供服务</span><br><br>    <span class="hljs-comment">//@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = &quot;RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Server <span class="hljs-title">choose</span><span class="hljs-params">(ILoadBalancer lb, Object key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (lb == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        Server server = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">while</span> (server == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            List&lt;Server&gt; upList = lb.getReachableServers();<span class="hljs-comment">//获得当前活着的服务</span><br>            List&lt;Server&gt; allList = lb.getAllServers();<span class="hljs-comment">//获取所有的服务</span><br><br>            <span class="hljs-keyword">int</span> serverCount = allList.size();<br>            <span class="hljs-keyword">if</span> (serverCount == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * No servers. End regardless of pass, because subsequent passes</span><br><span class="hljs-comment">         * only get more restrictive.</span><br><span class="hljs-comment">         */</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//int index = chooseRandomInt(serverCount);//生成区间随机数</span><br>            <span class="hljs-comment">//server = upList.get(index);//从或活着的服务中,随机获取一个</span><br><br>            <span class="hljs-comment">//=====================自定义代码=========================</span><br><br>            <span class="hljs-keyword">if</span> (total &lt; <span class="hljs-number">5</span>) &#123;<br>                server = upList.get(currentIndex);<br>                total++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                total = <span class="hljs-number">0</span>;<br>                currentIndex++;<br>                <span class="hljs-keyword">if</span> (currentIndex &gt; upList.size()) &#123;<br>                    currentIndex = <span class="hljs-number">0</span>;<br>                &#125;<br>                server = upList.get(currentIndex);<span class="hljs-comment">//从活着的服务中,获取指定的服务来进行操作</span><br>            &#125;<br><br>            <span class="hljs-comment">//======================================================</span><br><br>            <span class="hljs-keyword">if</span> (server == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * The only time this should happen is if the server list were</span><br><span class="hljs-comment">         * somehow trimmed. This is a transient condition. Retry after</span><br><span class="hljs-comment">         * yielding.</span><br><span class="hljs-comment">         */</span><br>                Thread.yield();<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (server.isAlive()) &#123;<br>                <span class="hljs-keyword">return</span> (server);<br>            &#125;<br>            <span class="hljs-comment">// Shouldn&#x27;t actually happen.. but must be transient or a bug.</span><br>            server = <span class="hljs-keyword">null</span>;<br>            Thread.yield();<br>        &#125;<br>        <span class="hljs-keyword">return</span> server;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-title">chooseRandomInt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serverCount)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Server <span class="hljs-title">choose</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> choose(getLoadBalancer(), key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initWithNiwsConfig</span><span class="hljs-params">(IClientConfig clientConfig)</span> </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud笔记05-Eureka服务注册与发现</title>
    <link href="/posts/2021/01/13/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <url>/posts/2021/01/13/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Eureka服务注册中心"><a href="#Eureka服务注册中心" class="headerlink" title="Eureka服务注册中心"></a>Eureka服务注册中心</h2><h3 id="一、什么是Eureka"><a href="#一、什么是Eureka" class="headerlink" title="一、什么是Eureka"></a>一、什么是Eureka</h3><ul><li>Netflix在涉及Eureka时，遵循的就是API原则.</li><li>Eureka是Netflix的有个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper.</li></ul><h3 id="二、原理理解"><a href="#二、原理理解" class="headerlink" title="二、原理理解"></a>二、原理理解</h3><p><strong>Eureka基本的架构</strong></p><ul><li>Springcloud 封装了Netflix公司开发的Eureka模块来实现服务注册与发现 (对比Zookeeper).</li><li>Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，他是服务注册中心.</li><li>而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/eureka.png" alt="eureka架构"></p><ul><li><p>和 Dubbo架构对比</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/dubbo.png" alt="eureka架构"></p></li></ul><ul><li>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client</strong>.</li><li>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到.</li><li>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s).</li></ul><p><strong>三大角色</strong></p><ul><li>Eureka Server：提供服务的注册与发现</li><li>Service Provider：服务生产方，将自身服务注册到Eureka中，从而使服务消费方能狗找到</li><li>Service Consumer：服务消费方，从Eureka中获取注册服务列表，从而找到消费服务</li></ul><h3 id="三、构建Eureka注册中心"><a href="#三、构建Eureka注册中心" class="headerlink" title="三、构建Eureka注册中心"></a>三、构建Eureka注册中心</h3><ol><li><p>新建<code>springcloud-eureka-7001</code> 子模块。</p></li><li><p>pom文件导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 导包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- eureka-server --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Devtools --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写<code>application.yml</code>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">server:<br>  port: 7001<br><br># Eureka配置<br>eureka:<br>  instance:<br>    hostname: localhost # Eureka 服务端的实例名称<br>  client:<br>    register-with-eureka: false # 表示是否向Eureka注册中心注册自己<br>    fetch-registry: false # 如果为false，则表示自己为注册中心<br>    service-url: # 监控页面<br>      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/<br></code></pre></td></tr></table></figure></li><li><p>编写主启动类，并使用注解表名自己是注册中心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启动之后，访问http://localhost:7001</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span> <span class="hljs-comment">// 服务端的启动类，可以接受别人注册进来</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServer_7001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaServer_7001.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动后访问<a href="http://localhost:7001/">http://localhost:7001/</a> 得到以下页面，并无服务注册进来。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/eureka_server.png" alt="注册中心"></p></li></ol><h3 id="四、配置Eureka服务端"><a href="#四、配置Eureka服务端" class="headerlink" title="四、配置Eureka服务端"></a>四、配置Eureka服务端</h3><h4 id="1-配置步骤"><a href="#1-配置步骤" class="headerlink" title="1. 配置步骤"></a>1. 配置步骤</h4><p>在这类，我们修改之前的<strong>springlouc-provider-dept-8001</strong></p><ol><li><p>在pom文件中导入Eureka服务端依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!-- Eureka服务端的依赖 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;<br>    &lt;version&gt;1.4.6.RELEASE&lt;&#x2F;version&gt;<br>&lt;&#x2F;dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>在<code>application.yml</code>中新增Eureka服务端配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-comment"># mybatis配置</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.atrox.springcloud.pojo</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:/mybatis/mapper/*.xml</span><br>  <span class="hljs-attr">config-location:</span> <span class="hljs-string">classpath:/mybatis/mybatis-config.xml</span><br><br><span class="hljs-comment"># spring配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">springcloud-provider-dept</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db01?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">zuiweizhiming666</span><br><br><span class="hljs-comment"># Eureka的配置，注册服务</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br></code></pre></td></tr></table></figure></li><li><p>为主启动类添加@EnableEurekaClient注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启动类</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 在服务启动后自动注册到Eureka中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider_8001</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DeptProvider_8001.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>先启动7001服务端后启动8001客户端进行测试，然后访问监控页<a href="http://localhost:7001/">http://localhost:7001/</a> 产看结果如图，成功.</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/eureka_1.png" alt="成功注册"></p></li><li><p>修改Eureka上已注册服务的默认描述信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Eureka的配置，注册服务</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">springcloud-provider-dept8001</span> <span class="hljs-comment"># 修改Eureka上已注册服务的默认描述信息</span><br></code></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/eureka_2.png" alt="修改注册服务的默认描述信息"></p></li><li><p>如果此时停掉springcloud-provider-dept-8001 等<strong>30s</strong>后 监控会开启保护机制：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/eureka_3.png" alt="eureka的保护机制"></p></li><li><p>配置关于服务加载的监控信息</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/eureka_5.png" alt="跳转到监控信息的链接"></p><p>首先在pom.xml中添加完善监控信息的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- actuator完善监控信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在<code>application.yml</code>中添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Eureka的配置，注册服务</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">springcloud-provider-dept8001</span> <span class="hljs-comment"># 修改Eureka上已注册服务的默认描述信息</span><br><br><span class="hljs-comment"># 监控Eureka的info配置</span><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">app.name:</span> <span class="hljs-string">atrox-springcloud</span><br>  <span class="hljs-attr">company.name:</span> <span class="hljs-string">http://AtroxQW.github.io</span><br></code></pre></td></tr></table></figure><p> 点击所注册服务的Status的链接后，进入信息页面：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/eureka_4.png" alt="信息页面"></p></li></ol><h4 id="2-EureKa自我保护机制：好死不如赖活着"><a href="#2-EureKa自我保护机制：好死不如赖活着" class="headerlink" title="2. EureKa自我保护机制：好死不如赖活着"></a>2. EureKa自我保护机制：好死不如赖活着</h4><p>一句话总结就是：<strong>某时刻某一个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存！</strong></p><ul><li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是90秒</strong>），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心），<strong>当一分钟内收到的心跳数大量减少时，会触发该保护机制</strong>。可以在eureka管理界面看到Renews threshold和Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：<code>EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.</code>从警告中可以看到，eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。</li><li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</li><li>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：<code>eureka.server.enable-self-preservation=false</code>【不推荐关闭自我保护机制】</li></ul><p>详细内容可以参考下这篇博客内容：<a href="https://blog.csdn.net/wudiyong22/article/details/80827594">https://blog.csdn.net/wudiyong22/article/details/80827594</a></p><h4 id="3-对注册进来的微服务，获取一些消息（团队开发）"><a href="#3-对注册进来的微服务，获取一些消息（团队开发）" class="headerlink" title="3. 对注册进来的微服务，获取一些消息（团队开发）"></a>3. 对注册进来的微服务，获取一些消息（团队开发）</h4><p>在<code>DeptController</code>类中添加新方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注册进来的微服务，获取一些消息</span><br><span class="hljs-meta">@GetMapping(&quot;/dept/discovery&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">Discovery</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 获取微服务列表的清单</span><br>    List&lt;String&gt; services = client.getServices();<br>    System.out.println(<span class="hljs-string">&quot;discovery=&gt;service:&quot;</span> + services);<br>    <span class="hljs-comment">// 得到一个具体的微服务信息，通过具体的微服务id，applicationName</span><br>    List&lt;ServiceInstance&gt; instances = client.getInstances(<span class="hljs-string">&quot;SPRINGCLOUD-PROVIDER-DEPT&quot;</span>);<br>    <span class="hljs-keyword">for</span> (ServiceInstance instance : instances) &#123;<br>        System.out.println(<br>            instance.getHost() + <span class="hljs-string">&quot;\t&quot;</span> +<br>            instance.getPort() + <span class="hljs-string">&quot;\t&quot;</span>+<br>            instance.getUri() + <span class="hljs-string">&quot;\t&quot;</span> +<br>            instance.getServiceId()<br>        );<br>    &#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.client;<br>&#125;<br></code></pre></td></tr></table></figure><p>主启动类中加入@EnableDiscoveryClient 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启动类</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 在服务启动后自动注册到Eureka中</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// 服务发现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider_8001</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DeptProvider_8001.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在<a href="http://localhost:8001/dept/discovery%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE">http://localhost:8001/dept/discovery进行访问</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/eureka_6.png" alt="访问结果"></p><p>控制台</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/eureka_7.png" alt="控制台输出"></p><h3 id="五、Eureka集群环境配置"><a href="#五、Eureka集群环境配置" class="headerlink" title="五、Eureka集群环境配置"></a>五、Eureka集群环境配置</h3><h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h4><p>新建springcloud-eureka-7002、springcloud-eureka-7003 模块</p><ol><li><p>为pom.xml添加依赖 (与springcloud-eureka-7001相同)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 导包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- eureka-server --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Devtools --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>application.yml配置(与springcloud-eureka-7001相同)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7003</span><br><br><span class="hljs-comment"># Eureka配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span> <span class="hljs-comment"># Eureka 服务端的实例名称</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 表示是否向Eureka注册中心注册自己</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 如果为false，则表示自己为注册中心</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment"># 监控页面</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure></li><li><p>添加主启动类(与springcloud-eureka-7001相同)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启动之后，访问http://localhost:7001</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span> <span class="hljs-comment">// 服务端的启动类，可以接受别人注册进来</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServer_7002</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaServer_7002.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-集群成员相互关联"><a href="#2-集群成员相互关联" class="headerlink" title="2.集群成员相互关联"></a>2.集群成员相互关联</h4><p>配置一些自定义本机名字，找到本机hosts文件并打开</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/hosts.png" alt="修改本机hosts文件"></p><p>在hosts文件最后加上，要访问的本机名称，默认是localhost</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/hosts_1.png" alt="修改本机hosts文件"></p><p>修改application.yml的配置，如图为springcloud-eureka-7001配置，在集群中关联其他两个集群，springcloud-eureka-7002/springcloud-eureka-7003同样分别修改为其对应的名称即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><br><span class="hljs-comment"># Eureka配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment"># Eureka 服务端的实例名称</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 表示是否向Eureka注册中心注册自己</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 如果为false，则表示自己为注册中心</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment"># 监控页面</span><br>      <span class="hljs-comment"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br>      <span class="hljs-comment"># 集群（关联）</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br></code></pre></td></tr></table></figure><p>随后，修改springcloud-provider-dept-8001下的yml配置文件，修改<strong>Eureka配置：配置服务注册中心地址</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Eureka的配置，注册服务</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">springcloud-provider-dept8001</span> <span class="hljs-comment"># 修改Eureka上已注册服务的默认描述信息</span><br></code></pre></td></tr></table></figure><p>最后，启动3个注册中心，集群就搭建好了，再启动项目，就挂载到了“3个服务器上”了。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B005-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/hosts_2.png" alt="集群模拟"></p><h3 id="六、Eureka和Zookeeper的区别"><a href="#六、Eureka和Zookeeper的区别" class="headerlink" title="六、Eureka和Zookeeper的区别"></a>六、Eureka和Zookeeper的区别</h3><p><strong>1.回顾CAP原则</strong></p><ul><li><p>RDBMS (MySQL\Oracle\sqlServer) ===&gt; ACID</p></li><li><p>NoSQL (Redis\MongoDB) ===&gt; CAP</p></li></ul><p><strong>2. ACID是什么？</strong></p><ul><li>A (Atomicity) 原子性</li><li>C (Consistency) 一致性</li><li>I (Isolation) 隔离性</li><li>D (Durability) 持久性</li></ul><p><strong>3. CAP是什么?</strong></p><ul><li>C (Consistency) 强一致性</li><li>A (Availability) 可用性</li><li>P (Partition tolerance) 分区容错性</li></ul><p>CAP的三进二：CA、AP、CP</p><p><strong>4.CAP理论的核心</strong></p><ul><li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</li><li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类<ul><li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li><li>CP：满足一致性，分区容错的系统，通常性能不是特别高</li><li>AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ul></li></ul><p><strong>5.作为分布式服务注册中心，Eureka比Zookeeper好在哪里？</strong></p><p>著名的CAP理论指出，一个分布式系统不可能同时满足C (一致性) 、A (可用性) 、P (容错性)，由于分区容错性P再分布式系统中是必须要保证的，因此我们只能再A和C之间进行权衡。</p><ul><li>Zookeeper 保证的是 CP —&gt; 满足一致性，分区容错的系统，通常性能不是特别高</li><li>Eureka 保证的是 AP —&gt; 满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ul><p><strong>Zookeeper保证的是CP</strong></p><p> 当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接收服务直接down掉不可用。也就是说，<strong>服务注册功能对可用性的要求要高于一致性</strong>。但zookeeper会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30-120s，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。</p><p><strong>Eureka保证的是AP</strong></p><p> Eureka看明白了这一点，因此在设计时就优先保证可用性。<strong>Eureka各个节点都是平等的</strong>，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eureka还有之中自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ul><li>Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)</li><li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li></ul><p>因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud笔记04-Rest学习环境搭建:服务提供者</title>
    <link href="/posts/2021/01/13/SpringCloud%E7%AC%94%E8%AE%B004-Rest%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/posts/2021/01/13/SpringCloud%E7%AC%94%E8%AE%B004-Rest%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Rest学习环境搭建"><a href="#Rest学习环境搭建" class="headerlink" title="Rest学习环境搭建"></a>Rest学习环境搭建</h2><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><ul><li>我们会使用一个Dept部门模块做一个微服务通用案例<strong>Consumer消费者（Client）通过REST调用Provider提供者（Server）提供的服务。</strong></li><li>回顾Spring、SpringMVC、MyBatis等以往的学习知识。</li><li>Maven的分包分模块架构复习。</li></ul><blockquote><p>一个简单的Maven模块结构是这样的：</p><p>– app-parent: 一个父项目(app-parent)聚合了很多子项目(app-util\app-dao\app-web…)<br>     |– pom.xml<br>     |<br>     |– app-core<br>     ||—- pom.xml<br>     |<br>     |– app-web<br>     ||—- pom.xml<br>     ……</p></blockquote><p>一个父工程带着多个Module子模块。</p><p>MicroServiceCloud父工程(Project)下初次带着3个子模块(Module)：</p><ul><li><strong>microservicecloud-api 【封装的整体entity/接口/公共配置等】</strong></li><li><strong>microservicecloud-consumer-dept-80 【服务提供者】</strong></li><li><strong>microservicecloud-provider-dept-8001 【服务消费者】</strong></li></ul><h3 id="二、SpringCloud版本选择"><a href="#二、SpringCloud版本选择" class="headerlink" title="二、SpringCloud版本选择"></a>二、SpringCloud版本选择</h3><p>永远最新的 <strong>2020.0.0</strong>，出了问题再降版本，勇敢试错。</p><h3 id="三、创建父工程"><a href="#三、创建父工程" class="headerlink" title="三、创建父工程"></a>三、创建父工程</h3><ul><li>新建父工程项目springcloud，切记<strong>Packaging是pom模式</strong>。</li><li>定义pom文件，将后续各个子模块公用的jar包的版本统一提取出来管理。</li></ul><p><strong>pom.xml</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud_Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-provider-dept-8001<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 打包方式 pom --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.complier.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.complier.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.complier.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.complier.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logback.version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">logback.version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringCloud的依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2020.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringBoot的依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- mysql数据库的依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- Druid数据源的依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringBoot启动器的依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- Log4j日志的依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- Juint单元测试的依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- Lombok注解的依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- Logback日志的依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父工程为springcloud，其下面有多个子module。</p><p>springcloud-consumer-dept-80访问springcloud-provider-dept-8001下的controller使用REST方式。</p><h3 id="四、创建API模块"><a href="#四、创建API模块" class="headerlink" title="四、创建API模块"></a>四、创建API模块</h3><p>我们首先建立API子模块，来进行实体类的封装。</p><p>pom文件只需要导入lombok的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>建立<code>com.atrox.springcloud.pojo</code>目录，在该目录下Dept实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Accessors(chain = true)</span> <span class="hljs-comment">// 链式写法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dept</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123; <span class="hljs-comment">// Dept 实体类，必须实现序列化</span><br><br>    <span class="hljs-keyword">private</span> Long deptno;<br>    <span class="hljs-keyword">private</span> String dname;<br><br>    <span class="hljs-comment">// 这个数据存在那个数据库的字段；微服务，一个服务对应一个数据库，同一个信息可能存在不同的数据库</span><br>    <span class="hljs-keyword">private</span> String db_source;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dept</span><span class="hljs-params">(String dname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.dname = dname;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">  链式写法：</span><br><span class="hljs-comment">    Dept dept = new Dept();</span><br><span class="hljs-comment">    dept.setDeptNo(11).setDname(&#x27;sss&#x27;).setDb_Source(&#x27;001&#x27;);</span><br><span class="hljs-comment">   */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="五、创建服务提供者Provider"><a href="#五、创建服务提供者Provider" class="headerlink" title="五、创建服务提供者Provider"></a>五、创建服务提供者Provider</h3><p>在此子模块我们用来提供服务，首先在pom文件中引入我们所需的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 我们需要拿到实体类，所以要配置api module --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Junit单元测试的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL数据库连接的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Druid数据源的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Logback的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringBoot启动器的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringBoot-test的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringBoot-web启动器的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- jetty应用服务器的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Devtools热部署工具的依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后，我们编写<code>applicaiton.yml</code>进行配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-comment"># mybatis配置</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.atrox.springcloud.pojo</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:/mybatis/mapper/*.xml</span><br>  <span class="hljs-attr">config-location:</span> <span class="hljs-string">classpath:/mybatis/mybatis-config.xml</span><br><br><span class="hljs-comment"># spring配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">springcloud-provider-dept</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db01?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">zuiweizhiming666</span><br></code></pre></td></tr></table></figure><p>随后，建立<code>com.atrox.springcloud.dao</code>目录，在该目录下建立<code>DeptDao</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptDao</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addDept</span><span class="hljs-params">(Dept dept)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">queryById</span><span class="hljs-params">(Long id)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>编写DeptDao接口完毕后，在<code>resources</code>目录下创建<code>mybatis.mapper</code>目录，在该目录下建立<code>DeptMapper.xml</code>文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br><br>&lt;mapper namespace=<span class="hljs-string">&quot;com.atrox.springcloud.dao.DeptDao&quot;</span>&gt;<br><br>  &lt;insert id=<span class="hljs-string">&quot;addDept&quot;</span> parameterType=<span class="hljs-string">&quot;Dept&quot;</span>&gt;<br>    insert into db01.dept (dname, db_source) values (#&#123;name&#125;,DATABASE());<br>  &lt;/insert&gt;<br><br>  &lt;select id=<span class="hljs-string">&quot;queryById&quot;</span> parameterType=<span class="hljs-string">&quot;Long&quot;</span> resultType=<span class="hljs-string">&quot;com.atrox.springcloud.pojo.Dept&quot;</span>&gt;<br>    select * from db01.dept where deptno = #&#123;deptno&#125;;<br>  &lt;/select&gt;<br><br>  &lt;select id=<span class="hljs-string">&quot;queryAll&quot;</span> resultType=<span class="hljs-string">&quot;com.atrox.springcloud.pojo.Dept&quot;</span>&gt;<br>    select * from db01.dept;<br>  &lt;/select&gt;<br><br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><p>编写通用映射文件后，下一层是<code>com.atrox.springcloud.service</code>，建立<code>DeptService</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addDept</span><span class="hljs-params">(Dept dept)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">queryById</span><span class="hljs-params">(Long id)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后在同级目录下建立<code>DeptServiceImpl</code>实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DeptService</span></span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptDao deptDao;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addDept</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> deptDao.addDept(dept);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">queryById</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> deptDao.queryById(id);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> deptDao.queryAll();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>随后，编写控制层，建立<code>com.atrox.springcloud.controller</code>目录，建立<code>DeptController</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 提供Restful服务</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptController</span> </span>&#123;<br><br>  <span class="hljs-meta">@Autowired</span><br>  DeptService deptService;<br><br>  <span class="hljs-meta">@PostMapping(&quot;/dept/add&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addDept</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> deptService.addDept(dept);<br>  &#125;<br><br>  <span class="hljs-meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> deptService.queryById(id);<br>  &#125;<br><br>  <span class="hljs-meta">@GetMapping(&quot;/dept/list&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> deptService.queryAll();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>随后，添加主启动类<code>DeptProvider_8001</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启动类</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider_8001</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DeptProvider_8001.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最后，再网页测试即可。</p><h3 id="六、创建服务消费者Consumer"><a href="#六、创建服务消费者Consumer" class="headerlink" title="六、创建服务消费者Consumer"></a>六、创建服务消费者Consumer</h3><p>首先，在<code>application.yml</code>中设置消费者端口号为80。</p><p>然后，建立<code>com.atrox.springcloud.config</code>目录，在此目录下建立<code>ConfigBean</code>类，来装载所有的Bean,将RestTemplate放入Spring容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigBean</span> </span>&#123; <span class="hljs-comment">// 类似于@Configuration --- spring application</span><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后，建立<code>com.atrox.springclud.controller</code>目录，在此目录下建立<code>DeptConsumerController</code>类,使用Rest方式调用远程http服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptConsumerController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 理解：消费者，不应该有service层</span><br>    <span class="hljs-comment">// RestTemplate ... 供我们直接调用！注册到spring中</span><br>    <span class="hljs-comment">// (url, 实体: Map, Class&lt;T&gt; responseType)</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate; <span class="hljs-comment">// 提供多种便捷访问远程http服务的方法，简单的restful服务模板</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REST_URL_PREFIX = <span class="hljs-string">&quot;http://localhost:8001&quot;</span>;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX + <span class="hljs-string">&quot;/dept/add&quot;</span>, dept, Boolean.class);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="hljs-string">&quot;/dept/get/&quot;</span> + id, Dept.class);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="hljs-string">&quot;/dept/list&quot;</span>, List.class);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最后，建立<code>DeptConsumer_80</code>启动类，开启网页测试即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptConsumer_80</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DeptConsumer_80.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud笔记03-SpringCloud入门概述</title>
    <link href="/posts/2021/01/12/SpringCloud%E7%AC%94%E8%AE%B003-SpringCloud%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/"/>
    <url>/posts/2021/01/12/SpringCloud%E7%AC%94%E8%AE%B003-SpringCloud%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringCloud入门概述"><a href="#SpringCloud入门概述" class="headerlink" title="SpringCloud入门概述"></a>SpringCloud入门概述</h2><h3 id="一、SpringCloud是什么？"><a href="#一、SpringCloud是什么？" class="headerlink" title="一、SpringCloud是什么？"></a>一、SpringCloud是什么？</h3><p>详情请查看Spring官网：<a href="https://spring.io/">https://spring.io</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B003-SpringCloud%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/SpringCloud.png" alt="SpringCloud是什么"></p><p>SpringCloud的生态与流程：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B003-SpringCloud%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/SpringCloud_process.png" alt="SpringCloud的流程"></p><h3 id="二、SpringCloud和SpringBoot的关系"><a href="#二、SpringCloud和SpringBoot的关系" class="headerlink" title="二、SpringCloud和SpringBoot的关系"></a>二、SpringCloud和SpringBoot的关系</h3><ul><li><strong>Springboot专注于方便地开发单个个体微服务</strong></li><li><strong>SpringCloud是关注全局的微服务协调治理框架</strong>。它将SpringBoot开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、时间总栈、全局锁、决策竞选、分布式会话等等集成服务</li><li>SpringBoot可以离开SpringCloud独立使用，开发项目；但是SpringBoot离不开SpringBoot，属于依赖关系</li></ul><h3 id="三、Dubbo和SpringCloud技术选型"><a href="#三、Dubbo和SpringCloud技术选型" class="headerlink" title="三、Dubbo和SpringCloud技术选型"></a>三、Dubbo和SpringCloud技术选型</h3><h4 id="1-分布式-服务治理Dubbo"><a href="#1-分布式-服务治理Dubbo" class="headerlink" title="1. 分布式 + 服务治理Dubbo"></a>1. 分布式 + 服务治理Dubbo</h4><p>目前成熟的互联网那个架构，采用<strong>应用服务化拆分+消息中间件的架构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B003-SpringCloud%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84.png" alt="互联网架构"></p><h4 id="2-Dubbo-和-SpringCloud对比"><a href="#2-Dubbo-和-SpringCloud对比" class="headerlink" title="2. Dubbo 和 SpringCloud对比"></a>2. Dubbo 和 SpringCloud对比</h4><p>我们可以对比一下社区活跃度：</p><p><strong>Dubbo</strong>：<a href="https://github.com/dubbo">https://github.com/dubbo</a></p><p><strong>SpringCloud</strong>：<a href="https://github.com/spring-cloud">https://github.com/spring-cloud</a></p><p><strong>对比结果</strong>：</p><table><thead><tr><th>Dubbo</th><th>SpringCloud</th><th></th></tr></thead><tbody><tr><td>服务注册中心</td><td>Zookeeper</td><td>Spring Cloud Netfilx Eureka</td></tr><tr><td>服务调用方式</td><td>RPC</td><td>REST API</td></tr><tr><td>服务监控</td><td>Dubbo-monitor</td><td>Spring Boot Admin</td></tr><tr><td>断路器</td><td>不完善</td><td>Spring Cloud Netfilx Hystrix</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netfilx Zuul</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloud Config</td></tr><tr><td>服务跟踪</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总栈</td><td>无</td><td>Spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr></tbody></table><p><strong>最大区别：Spring Cloud 抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式</strong></p><p>严格说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调度的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更加灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这个有点在当下快速演化的微服务环境下，显得更加合适。</p><p><strong>总结：</strong>二者解决的问题域不一样：Dubbo的定位是一款RPC框架，而SpringCloud的目标是微服务架构下的一站式解决方案。</p><h3 id="四、SpringCloud能做什么？"><a href="#四、SpringCloud能做什么？" class="headerlink" title="四、SpringCloud能做什么？"></a>四、SpringCloud能做什么？</h3><ul><li>Distributed/versioned configuration 分布式/版本控制配置</li><li>Service registration and discovery 服务注册与发现</li><li>Routing 路由</li><li>Service-to-service calls 服务到服务的调用</li><li>Load balancing 负载均衡配置</li><li>Circuit Breakers 断路器</li><li>Distributed messaging 分布式消息管理</li></ul><h3 id="五、SpringCloud下载"><a href="#五、SpringCloud下载" class="headerlink" title="五、SpringCloud下载"></a>五、SpringCloud下载</h3><p>官网：<a href="http://projects.spring.io/spring-cloud/">http://projects.spring.io/spring-cloud/</a></p><p><strong>版本号与之前相比是有一些特殊的：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringCloud%E7%AC%94%E8%AE%B003-SpringCloud%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/version.png" alt="SpringCloud版本号"></p><p>SpringCloud没有采用数字编号的方式命名版本号，而是采用了伦敦地铁站的名称，<strong>同时根据字母表的顺序来对应版本时间顺序</strong>，比如最早的Realse版本：Angel，第二个Realse版本：Brixton，然后是Camden、Dalston、Edgware。</p><h3 id="六、相关文档、社区"><a href="#六、相关文档、社区" class="headerlink" title="六、相关文档、社区"></a>六、相关文档、社区</h3><ul><li><p><strong>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></strong></p></li><li><p><strong>SpringCloud 中文API文档(官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></strong></p></li><li><p><strong>SpringCloud中国社区：<a href="http://springcloud.cn/">http://springcloud.cn/</a></strong></p></li><li><p><strong>SpringCloud中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></strong></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud笔记02-微服务概述</title>
    <link href="/posts/2021/01/12/SpringCloud%E7%AC%94%E8%AE%B002-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0/"/>
    <url>/posts/2021/01/12/SpringCloud%E7%AC%94%E8%AE%B002-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h2><h3 id="一、什么是微服务？"><a href="#一、什么是微服务？" class="headerlink" title="一、什么是微服务？"></a>一、什么是微服务？</h3><blockquote><p>什么是微服务？</p></blockquote><p>微服务(Microservice Architecture) 是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。</p><p>究竟什么是微服务呢？我们在此引用ThoughtWorks 公司的首席科学家 Martin Fowler 于2014年提出的一段话：</p><p>原文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p><p>汉化：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p><ul><li>就目前而言，对于微服务，业界并没有一个统一的，标准的定义。</li><li>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，<strong>它体长将单一的应用程序划分成一组小的服务</strong>，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(<strong>HTTP</strong>)互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(<strong>Maven</strong>)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</li></ul><blockquote><p>再来从技术维度角度理解下：</p></blockquote><p>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p><h3 id="二、微服务与微服务架构"><a href="#二、微服务与微服务架构" class="headerlink" title="二、微服务与微服务架构"></a>二、微服务与微服务架构</h3><blockquote><p>微服务</p></blockquote><p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是IDEA中的一个个微服务工程，或者Moudel。IDEA 工具里面使用Maven开发的一个个独立的小Moudel，它具体是使用SpringBoot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p><blockquote><p>微服务架构</p></blockquote><p>一种新的架构形式，Martin Fowler 于2014年提出。</p><p>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如HTTP)<strong>互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具</strong>(如Maven)**对其进行构建。</p><h3 id="三、微服务的优缺点"><a href="#三、微服务的优缺点" class="headerlink" title="三、微服务的优缺点"></a>三、微服务的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>单一职责原则；</li><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li><li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li><li>微服务能够被小团队单独开发，这个团队只需2-5个开发人员组成；</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li><li>微服务能使用不同的语言开发；</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；</li><li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li><li>微服务允许利用和融合最新技术；</li><li><strong>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合;</strong></li><li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</strong></li></ul><blockquote><p>缺点</p></blockquote><ul><li>开发人员要处理分布式系统的复杂性；</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li><li>系统部署依赖问题；</li><li>服务间通信成本问题；</li><li>数据一致性问题；</li><li>系统集成测试问题；</li><li>性能和监控问题；</li></ul><h3 id="四、微服务的技术栈有哪些？"><a href="#四、微服务的技术栈有哪些？" class="headerlink" title="四、微服务的技术栈有哪些？"></a>四、微服务的技术栈有哪些？</h3><table><thead><tr><th><strong>微服务技术条目</strong></th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMVC等</td></tr><tr><td>服务配置与管理</td><td>Netfix公司的Archaius、阿里的Diamond等</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper等</td></tr><tr><td>服务调用</td><td>Rest、PRC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用(客户端调用服务的简化工具)</td><td>Fegin等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由(API网关)</td><td>Zuul等</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Specatator等</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper等</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td></tr><tr><td>时间消息总栈</td><td>SpringCloud Bus</td></tr><tr><td>服务部署</td><td>Docker、OpenStack、Kubernetes等</td></tr></tbody></table><h3 id="五、为什么选择SpringCloud作为为服务架构"><a href="#五、为什么选择SpringCloud作为为服务架构" class="headerlink" title="五、为什么选择SpringCloud作为为服务架构"></a>五、为什么选择SpringCloud作为为服务架构</h3><ol><li><p>选型依据</p><ol><li><p>整体解决方案和框架成熟度</p></li><li><p>社区热度</p></li><li><p>可维护性</p></li><li><p>学习曲线</p></li><li><p>当前各大IT公司用的微服务架构有哪些？</p><ol><li>阿里：dubbo+HFS<ol start="2"><li>京东：JFS</li><li>新浪：Motan</li><li>当当网：DubboX</li></ol></li></ol></li></ol></li><li><p>各微服务框架对比</p><table><thead><tr><th><strong>功能点/服务框架</strong></th><th>Netflix/SpringCloud</th><th>Motan</th><th>gRPC</th><th>Thri t</th><th>Dubbo/DubboX</th></tr></thead><tbody><tr><td>功能定位</td><td>完整的微服务框架</td><td>RPC框架，但整合了ZK或Consul，实现集群环境的基本服务注册发现</td><td>RPC框架</td><td>RPC框架</td><td>服务框架</td></tr><tr><td>支持Rest</td><td>是，Ribbon支持多种可拔插的序列号选择</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td>支持RPC</td><td>否</td><td>是(Hession2)</td><td>是</td><td>是</td><td>是</td></tr><tr><td>支持多语言</td><td>是(Rest形式)</td><td>否</td><td>是</td><td>是</td><td>否</td></tr><tr><td>负载均衡</td><td>是(服务端zuul+客户端Ribbon)，zuul-服务，动态路由，云端负载均衡Eureka（针对中间层服务器）</td><td>是(客户端)</td><td>否</td><td>否</td><td>是(客户端)</td></tr><tr><td>配置服务</td><td>Netfix Archaius，Spring Cloud Config Server 集中配置</td><td>是(Zookeeper提供)</td><td>否</td><td>否</td><td>否</td></tr><tr><td>服务调用链监控</td><td>是(zuul)，zuul提供边缘服务，API网关</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td>高可用/容错</td><td>是(服务端Hystrix+客户端Ribbon)</td><td>是(客户端)</td><td>否</td><td>否</td><td>是(客户端)</td></tr><tr><td>典型应用案例</td><td>Netflix</td><td>Sina</td><td>Google</td><td>Facebook</td><td></td></tr><tr><td>社区活跃程度</td><td>高</td><td>一般</td><td>高</td><td>一般</td><td>2017年后重新开始维护，之前中断了5年</td></tr><tr><td>学习难度</td><td>中等</td><td>低</td><td>高</td><td>高</td><td>低</td></tr><tr><td>文档丰富程度</td><td>高</td><td>一般</td><td>一般</td><td>一般</td><td>高</td></tr><tr><td>其他</td><td>Spring Cloud Bus为我们的应用程序带来了更多管理端点</td><td>支持降级</td><td>Netflix内部在开发集成gRPC</td><td>IDL定义</td><td>实践的公司比较多</td></tr></tbody></table></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud笔记01-微服务架构核心问题</title>
    <link href="/posts/2021/01/12/SpringCloud%E7%AC%94%E8%AE%B001-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/"/>
    <url>/posts/2021/01/12/SpringCloud%E7%AC%94%E8%AE%B001-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="微服务架构的4个核心问题"><a href="#微服务架构的4个核心问题" class="headerlink" title="微服务架构的4个核心问题"></a>微服务架构的4个核心问题</h2><h3 id="一、核心问题"><a href="#一、核心问题" class="headerlink" title="一、核心问题"></a>一、核心问题</h3><ol><li><p><strong>服务很多，客户端该怎么访问？</strong></p></li><li><p><strong>这么多服务，服务之间如何通信？</strong></p></li><li><p><strong>这么多服务，应该如何治理</strong>？</p></li><li><p><strong>服务挂了怎么办？</strong></p></li></ol><h3 id="二、3种主流解决方案"><a href="#二、3种主流解决方案" class="headerlink" title="二、3种主流解决方案"></a>二、3种主流解决方案</h3><ul><li>SpringCloud NetFlix</li><li>Apache Dubbo Zookeeper</li><li>SpringCloud  Alibaba</li></ul><h3 id="三、详细方案"><a href="#三、详细方案" class="headerlink" title="三、详细方案"></a>三、详细方案</h3><ol><li><p><strong>SpringCloud NetFlix 一站式解决方案</strong></p><p>API网关，zuul组件</p><p>Feign —HttpClinet — Http通信方式，同步、阻塞</p><p>服务注册发现：Eureka</p><p>熔断机制：Hystrix</p></li><li><p>Apache Dubbo Zookeeper 半自动，需要整合别人的</p><p>API：没有，找第三方组件，或者自己实现</p><p>Dubbo</p><p>Zookeeper</p><p>没有：借助Hystrix</p></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记14-异步、定时、邮件任务</title>
    <link href="/posts/2021/01/11/SpringBoot%E7%AC%94%E8%AE%B014-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/posts/2021/01/11/SpringBoot%E7%AC%94%E8%AE%B014-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>在我们的工作中，常常会用到异步处理任务，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。还有一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息。还有就是邮件的发送，微信的前身也是邮件服务呢？这些东西都是怎么实现的呢？其实SpringBoot都给我们提供了对应的支持，我们上手使用十分的简单，只需要开启一些注解支持，配置一些配置文件即可！那我们来看看吧~  </p></blockquote><h3 id="二、异步任务"><a href="#二、异步任务" class="headerlink" title="二、异步任务"></a>二、异步任务</h3><ol><li><p>创建一个service包</p></li><li><p>创建一个类AsyncService</p><p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p><p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;业务进行中....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>编写controller包</p></li><li><p>编写AsyncController类</p><p>我们去写一个Controller测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    AsyncService asyncService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        asyncService.hello();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0success%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。</a></p><p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p></li><li><p>给hello方法添<strong>加@Async注解</strong>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//告诉Spring这是一个异步方法</span><br><span class="hljs-meta">@Async</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;业务进行中....&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要<strong>在主程序上添加一个注解@EnableAsync</strong> ，开启异步注解功能；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span> <span class="hljs-comment">//开启异步注解功能</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootTaskApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringbootTaskApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>​    </p><ol start="7"><li>重启测试，网页瞬间响应，后台代码依旧执行！</li></ol><h3 id="三、邮件任务"><a href="#三、邮件任务" class="headerlink" title="三、邮件任务"></a>三、邮件任务</h3><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p><ul><li>邮件发送需要引入spring-boot-start-mail</li><li>SpringBoot 自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml中</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p><strong>测试</strong>：</p><ol><li><p>引入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>看它引入的依赖，可以看到 jakarta.mail</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.mail<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>查看自动配置类：MailSenderAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123; MailSenderJndiConfiguration.class, MailSenderPropertiesConfiguration.class &#125;)</span><br></code></pre></td></tr></table></figure><p>点进MailSenderJndiConfiguration，这个类中存在bean，JavaMailSenderImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function">JavaMailSenderImpl <span class="hljs-title">mailSender</span><span class="hljs-params">(Session session)</span> </span>&#123;<br>    JavaMailSenderImpl sender = <span class="hljs-keyword">new</span> JavaMailSenderImpl();<br>    sender.setDefaultEncoding(<span class="hljs-keyword">this</span>.properties.getDefaultEncoding().name());<br>    sender.setSession(session);<br>    <span class="hljs-keyword">return</span> sender;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们去看下配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">    prefix = &quot;spring.mail&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MailProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_CHARSET;<br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-keyword">private</span> Integer port;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String protocol = <span class="hljs-string">&quot;smtp&quot;</span>;<br>    <span class="hljs-keyword">private</span> Charset defaultEncoding;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; properties;<br>    <span class="hljs-keyword">private</span> String jndiName;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.mail.username</span>=<span class="hljs-string">454921269@qq.com</span><br><span class="hljs-comment"># QQ授权码</span><br><span class="hljs-meta">spring.mail.password</span>=<span class="hljs-string">jfsoqryszenzcbaf</span><br><span class="hljs-meta">spring.mail.host</span>=<span class="hljs-string">smtp.qq.com</span><br><span class="hljs-comment"># 开启加密验证</span><br><span class="hljs-meta">spring.mail.properties.mail.smtl.ssl.enable</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B014-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/QQ%E9%82%AE%E7%AE%B1.png" alt="QQ邮箱获取授权码"></p><p>然后，按照要求发送短信</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记14-异步、定时、邮件任务/发短信.jpg" alt="发短信" style="zoom: 20%;"><p>然后，成功获取授权码</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B014-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/%E6%8E%88%E6%9D%83%E7%A0%81.png" alt="获取授权码"></p></li></ol><ol start="4"><li><p>发送简单邮件测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>JavaMailSenderImpl mailSender;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 一个简单的邮件</span><br>    SimpleMailMessage mailMessage = <span class="hljs-keyword">new</span> SimpleMailMessage();<br>    mailMessage.setSubject(<span class="hljs-string">&quot;乔威，你好&quot;</span>);<br>    mailMessage.setText(<span class="hljs-string">&quot;暗裔剑魔教学&quot;</span>);<br>    mailMessage.setTo(<span class="hljs-string">&quot;454921269@qq.com&quot;</span>);<br>    mailMessage.setFrom(<span class="hljs-string">&quot;454921269@qq.com&quot;</span>);<br>    mailSender.send(mailMessage);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>查看邮箱，发送成功</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B014-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/%E7%AE%80%E5%8D%95%E9%82%AE%E4%BB%B6.png" alt="简单邮件发送"></p></li></ol><ol start="5"><li><p>复杂邮件发送测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>JavaMailSenderImpl mailSender;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException </span>&#123;<br><br>    <span class="hljs-comment">// 一个复杂的邮件</span><br>    MimeMessage mimeMessage = mailSender.createMimeMessage();<br>    <span class="hljs-comment">// 组装</span><br>    MimeMessageHelper helper = <span class="hljs-keyword">new</span> MimeMessageHelper(mimeMessage,<span class="hljs-keyword">true</span>,<span class="hljs-string">&quot;utf-8&quot;</span> );<br>    helper.setSubject(<span class="hljs-string">&quot;芜湖！起飞！&quot;</span>);<br>    helper.setText(<span class="hljs-string">&quot;&lt;h1 style=&#x27;color:red&#x27;&gt;肉蛋葱鸡！&lt;/h1&gt;&quot;</span>,<span class="hljs-keyword">true</span>);<br>    <span class="hljs-comment">// 附件</span><br>    helper.addAttachment(<span class="hljs-string">&quot;大司马.jpg&quot;</span>, <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\blog\\source\\_posts\\SpringBoot笔记14-异步、定时、邮件任务\\大司马.jpg&quot;</span>));<br><br>    helper.setTo(<span class="hljs-string">&quot;454921269@qq.com&quot;</span>);<br>    helper.setFrom(<span class="hljs-string">&quot;454921269@qq.com&quot;</span>);<br>    mailSender.send(mimeMessage);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    查看邮箱，发送成功.</p><p>​    <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B014-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/%E5%A4%8D%E6%9D%82%E9%82%AE%E4%BB%B6.png" alt="发送复杂邮件"></p></li></ol><h3 id="四、定时任务"><a href="#四、定时任务" class="headerlink" title="四、定时任务"></a>四、定时任务</h3><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p><ul><li>TaskExecutor接口</li><li>TaskScheduler接口</li></ul><p>两个注解：</p><ul><li>@EnableScheduling</li><li>@Scheduled</li></ul><p><strong>cron表达式：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B014-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/cron1.webp" alt="表达式字段"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B014-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/cron2.png" alt="特殊字符"></p><p><strong>测试步骤：</strong></p><ol><li><p>创建一个ScheduledService</p><p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduledService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 在一个特定的时间执行这个方法</span><br>    <span class="hljs-comment">// cron表达式</span><br>    <span class="hljs-comment">// 秒 分 时 日 月 周几</span><br>    <span class="hljs-comment">// 每天的18点58分0秒执行</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 58 18 * * ?&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello，你被执行了~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span> <span class="hljs-comment">//开启异步注解功能</span><br><span class="hljs-meta">@EnableScheduling</span> <span class="hljs-comment">//开启基于注解的定时任务</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootTaskApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringbootTaskApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>我们来详细了解下cron表达式</p><p><a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs markdown">（1）0/2 <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> ?   表示每2秒 执行任务<br>（1）0 0/2 <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* ?   表示每2分钟 执行任务</span><br><span class="hljs-emphasis">（1）0 0 2 1 *</span> ?   表示在每月的1日的凌晨2点调整任务<br>（2）0 15 10 ? <span class="hljs-emphasis">* MON-FRI   表示周一到周五每天上午10:15执行作业</span><br><span class="hljs-emphasis">（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br><span class="hljs-emphasis">（4）0 0 10,14,16 *</span> <span class="hljs-emphasis">* ?   每天上午10点，下午2点，4点</span><br><span class="hljs-emphasis">（5）0 0/30 9-17 *</span> <span class="hljs-emphasis">* ?   朝九晚五工作时间内每半小时</span><br><span class="hljs-emphasis">（6）0 0 12 ? *</span> WED   表示每个星期三中午12点<br>（7）0 0 12 <span class="hljs-emphasis">* *</span> ?   每天中午12点触发<br>（8）0 15 10 ? <span class="hljs-emphasis">* *</span>   每天上午10:15触发<br>（9）0 15 10 <span class="hljs-emphasis">* *</span> ?     每天上午10:15触发<br>（10）0 15 10 <span class="hljs-emphasis">* *</span> ?   每天上午10:15触发<br>（11）0 15 10 <span class="hljs-emphasis">* *</span> ? 2005   2005年的每天上午10:15触发<br>（12）0 <span class="hljs-emphasis">* 14 *</span> <span class="hljs-emphasis">* ?     在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class="hljs-emphasis">（13）0 0/5 14 *</span> <span class="hljs-emphasis">* ?   在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="hljs-emphasis">（14）0 0/5 14,18 *</span> <span class="hljs-emphasis">* ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="hljs-emphasis">（15）0 0-5 14 *</span> <span class="hljs-emphasis">* ?   在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="hljs-emphasis">（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发</span><br><span class="hljs-emphasis">（17）0 15 10 ? *</span> MON-FRI   周一至周五的上午10:15触发<br>（18）0 15 10 15 <span class="hljs-emphasis">* ?   每月15日上午10:15触发</span><br><span class="hljs-emphasis">（19）0 15 10 L *</span> ?   每月最后一日的上午10:15触发<br>（20）0 15 10 ? <span class="hljs-emphasis">* 6L   每月的最后一个星期五上午10:15触发</span><br><span class="hljs-emphasis">（21）0 15 10 ? *</span> 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发<br>（22）0 15 10 ? <span class="hljs-emphasis">* 6#3   每月的第三个星期五上午10:15触发</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记13-项目集成Swagger</title>
    <link href="/posts/2021/01/11/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/"/>
    <url>/posts/2021/01/11/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot项目集成Swagger"><a href="#SpringBoot项目集成Swagger" class="headerlink" title="SpringBoot项目集成Swagger"></a>SpringBoot项目集成Swagger</h2><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/logo.png" alt="Swagger官网"></p><p><strong>学习目标：</strong></p><ul><li>了解Swagger的概念及作用</li><li>掌握在项目中集成Swagger自动生成API文档</li></ul><h3 id="一、Swagger简介"><a href="#一、Swagger简介" class="headerlink" title="一、Swagger简介"></a>一、Swagger简介</h3><p><strong>前后端分离</strong></p><ul><li>前端 -&gt; 前端控制层、视图层</li><li>后端 -&gt; 后端控制层、服务层、数据访问层</li><li>前后端通过API进行交互</li><li>前后端相对独立且松耦合</li></ul><p><strong>产生的问题</strong></p><ul><li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li></ul><p><strong>解决方案</strong></p><ul><li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险</li></ul><p><strong>Swagger</strong></p><ul><li>号称世界上最流行的API框架</li><li>Restful Api 文档在线自动生成器 =&gt; <strong>API 文档 与API 定义同步更新</strong></li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><h3 id="二、SpringBoot集成Swagger"><a href="#二、SpringBoot集成Swagger" class="headerlink" title="二、SpringBoot集成Swagger"></a>二、SpringBoot集成Swagger</h3><ol><li><p>新建一个SpringBoot-web项目</p></li><li><p>添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- springfox-boot-starter --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写HelloController，测试确保运行成功！</p></li><li><p>要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span>  <span class="hljs-comment">// 开启Swagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>同时我们要在主启动类上加一个注解@EnableOpenApi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerProApplication</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    SpringApplication.run(SwaggerProApplication.class, args);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问测试：<a href="http://localhost:8080/swagger-ui/index.html%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0swagger%E7%9A%84%E7%95%8C%E9%9D%A2%EF%BC%9B">http://localhost:8080/swagger-ui/index.html，可以看到swagger的界面；</a></p><p>​    </p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/index.png" alt="swagger页面"></p></li></ol><h3 id="三、配置Swagger"><a href="#三、配置Swagger" class="headerlink" title="三、配置Swagger"></a>三、配置Swagger</h3><ol><li><p>Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span> <span class="hljs-comment">//配置docket以配置Swagger具体参数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以通过apiInfo()属性配置文档信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 配置Swagger信息=apiInfo</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 作者信息</span><br>    Contact contact = <span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;乔威&quot;</span>, <span class="hljs-string">&quot;http://AtroxQW.github.io&quot;</span>, <span class="hljs-string">&quot;454921269@qq.com&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfo(<span class="hljs-string">&quot;乔威的API文档&quot;</span>,<br>                       <span class="hljs-string">&quot;聆听灭绝的死寂吧&quot;</span>,<br>                       <span class="hljs-string">&quot;1.0&quot;</span>,<br>                       <span class="hljs-string">&quot;http://AtroxQW.github.io&quot;</span>,<br>                       contact,<br>                       <span class="hljs-string">&quot;Apache 2.0&quot;</span>,<br>                       <span class="hljs-string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,<br>                       <span class="hljs-keyword">new</span> ArrayList());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Docket实例关联上 apiInfo()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 配置了Swagger的Docket的bean实例</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>        .apiInfo(apiInfo());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>  看下效果；</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/apiInfo.png" alt="配置文档信息"></p></li></ol><h3 id="四、配置扫描接口"><a href="#四、配置扫描接口" class="headerlink" title="四、配置扫描接口"></a>四、配置扫描接口</h3><ol><li><p>构建Docket时通过select()方法配置怎么扫描接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>        .apiInfo(apiInfo())<br>        .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>        .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p></li><li><p>除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">any() <span class="hljs-comment">// 扫描所有，项目中的所有接口都会被扫描到</span><br>none() <span class="hljs-comment">// 不扫描接口</span><br><span class="hljs-comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><br>withMethodAnnotation(<span class="hljs-keyword">final</span> Class&lt;? extends Annotation&gt; annotation)<br><span class="hljs-comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><br>withClassAnnotation(<span class="hljs-keyword">final</span> Class&lt;? extends Annotation&gt; annotation)<br>basePackage(<span class="hljs-keyword">final</span> String basePackage) <span class="hljs-comment">// 根据包路径扫描接口</span><br></code></pre></td></tr></table></figure></li><li><p>除此之外，我们还可以配置接口扫描过滤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>        .apiInfo(apiInfo())<br>        .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>        .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.atrox.controller&quot;</span>))<br>        <span class="hljs-comment">// 配置如何通过path过滤,即这里只扫描请求以/atrox开头的接口</span><br>        .paths(PathSelectors.ant(<span class="hljs-string">&quot;/atrox/**&quot;</span>))<br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这里的可选值还有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">any() <span class="hljs-comment">// 任何请求都扫描</span><br>none() <span class="hljs-comment">// 任何请求都不扫描</span><br>regex(<span class="hljs-keyword">final</span> String pathRegex) <span class="hljs-comment">// 通过正则表达式控制</span><br>ant(<span class="hljs-keyword">final</span> String antPattern) <span class="hljs-comment">// 通过ant()控制</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="五、配置Swagger开关"><a href="#五、配置Swagger开关" class="headerlink" title="五、配置Swagger开关"></a>五、配置Swagger开关</h3><ol><li><p>通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>      .apiInfo(apiInfo())<br>      .enable(<span class="hljs-keyword">false</span>) <span class="hljs-comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br>      .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>      .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>       <span class="hljs-comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br>      .paths(PathSelectors.ant(<span class="hljs-string">&quot;/kuang/**&quot;</span>))<br>      .build();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">(Environment environment)</span> </span>&#123;<br>    <span class="hljs-comment">// 设置要显示swagger的环境</span><br>    Profiles of = Profiles.of(<span class="hljs-string">&quot;dev&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-comment">// 判断当前是否处于该环境</span><br>    <span class="hljs-comment">// 通过 enable() 接收此参数判断是否要显示</span><br>    <span class="hljs-keyword">boolean</span> b = environment.acceptsProfiles(of);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>        .apiInfo(apiInfo())<br>        .enable(b) <span class="hljs-comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br>        .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>        .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>        <span class="hljs-comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br>        .paths(PathSelectors.ant(<span class="hljs-string">&quot;/kuang/**&quot;</span>))<br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="六、配置API分组"><a href="#六、配置API分组" class="headerlink" title="六、配置API分组"></a>六、配置API分组</h3><ol><li><p>如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">(Environment environment)</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())<br>      .groupName(<span class="hljs-string">&quot;乔威&quot;</span>) <span class="hljs-comment">// 配置分组</span><br>       <span class="hljs-comment">// 省略配置....</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启项目查看分组</p></li><li><p>如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket1</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group1&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket2</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group2&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket3</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group3&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启项目查看即可</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/group.png" alt="分组"></p></li></ol><h3 id="七、实体配置"><a href="#七、实体配置" class="headerlink" title="七、实体配置"></a>七、实体配置</h3><ol><li><p>新建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;用户实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户名&quot;)</span><br>    <span class="hljs-keyword">public</span> String username;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;密码&quot;)</span><br>    <span class="hljs-keyword">public</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/getUser&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启查看测试</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/pojo.webp" alt="实体类配置"></p></li></ol><p>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p><p>@ApiModel为类添加注释</p><p>@ApiModelProperty为类属性添加注释</p><h3 id="八、常用注解"><a href="#八、常用注解" class="headerlink" title="八、常用注解"></a>八、常用注解</h3><p>Swagger的所有注解定义在io.swagger.annotations包下</p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags = “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td><td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>我们也可以给请求的接口配置一些注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;乔威的接口&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/atrox&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">kuang</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(&quot;这个名字会被返回&quot;)</span>String username)</span></span>&#123;<br>   <span class="hljs-keyword">return</span> username;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p><p>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p><p>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</p><h3 id="九、扩展：其他皮肤"><a href="#九、扩展：其他皮肤" class="headerlink" title="九、扩展：其他皮肤"></a>九、扩展：其他皮肤</h3><p>我们可以导入不同的包实现不同的皮肤定义：</p><ol><li><p>默认的 <strong>访问 <a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/group.png" alt="默认皮肤"></p></li></ol><ol start="2"><li><p>bootstrap-ui  <strong>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;<br>&lt;dependency&gt;<br>   &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>   &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>   &lt;version&gt;1.9.1&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/bootstrap.png" alt="bootstrap皮肤"></p></li></ol><ol start="3"><li><p>Layui-ui  <strong>访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.caspar-chen<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-ui-layer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B013-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Swagger/layui.png" alt="layui皮肤"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记12-整合MyBatis</title>
    <link href="/posts/2021/01/10/SpringBoot%E7%AC%94%E8%AE%B012-%E6%95%B4%E5%90%88MyBatis/"/>
    <url>/posts/2021/01/10/SpringBoot%E7%AC%94%E8%AE%B012-%E6%95%B4%E5%90%88MyBatis/</url>
    
    <content type="html"><![CDATA[<h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><p>Maven仓库地址：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1">https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1</a></p><h3 id="一、整合测试"><a href="#一、整合测试" class="headerlink" title="一、整合测试"></a>一、整合测试</h3><ol><li><p>导入 MyBatis 所需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置数据库连接信息和mybatis配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">zuiweizhiming666</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span><br><br><span class="hljs-comment"># 整合mybatis</span><br><span class="hljs-meta">mybatis.type-aliases-package</span>=<span class="hljs-string">com.atrox.pojo</span><br><span class="hljs-meta">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br></code></pre></td></tr></table></figure></li><li><p>测试数据库是否连接成功</p></li><li><p>创建实体类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atrox.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建mapper目录以及对应的Mapper接口UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Mapper注解表示这是一个mybatis的mapper类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>  <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">queryUserList</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function">User <span class="hljs-title">queryUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在resources目创建mybatis/mapper目录，再在此目录下创建对应的Mapper映射文件UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atrox.mapper.UserMapper&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from user;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    update user set name = #&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>    delete from user where id = #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写Controller层进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>  <span class="hljs-meta">@GetMapping(&quot;/queryList&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">queryUserList</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;User&gt; userList = userMapper.queryUserList();<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>      System.out.println(user);<br>    &#125;<br>    <span class="hljs-keyword">return</span> userList;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动项目访问结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B012-%E6%95%B4%E5%90%88MyBatis/querylist.png" alt="访问结果"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记11-整合Druid数据源</title>
    <link href="/posts/2021/01/09/SpringBoot%E7%AC%94%E8%AE%B011-%E6%95%B4%E5%90%88Druid%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/posts/2021/01/09/SpringBoot%E7%AC%94%E8%AE%B011-%E6%95%B4%E5%90%88Druid%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="集成Druid"><a href="#集成Druid" class="headerlink" title="集成Druid"></a>集成Druid</h2><h3 id="一、Druid简介"><a href="#一、Druid简介" class="headerlink" title="一、Druid简介"></a>一、Druid简介</h3><p>Java程序很大一部分要操作数据库，为了提高心梗操作数据库的同时，有不得不使用数据库连接池。</p><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，结合了C3P0、DNCP等DB池的优点，同时加入了日志监控。</p><p>Druid可以很好地监控DB池连接和SQL执行情况，天生就是针对监控而生的DB连接池。</p><p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p><p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p><p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p><p><strong>com.alibaba.druid.pool.DruidDataSource基本配置参数如下：</strong></p><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：“DataSource-” + System.identityHashCode(this)</td></tr><tr><td>jdbcUrl</td><td></td><td>连接数据库的url，不同数据库不一样。例如： mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td>根据url自动识别</td><td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>validationQueryTimeout</td><td></td><td>单位:秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td>1分钟 ( 1.0.14 )</td><td>有两个含义： 1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td>30分钟 ( 1.0.14 )</td><td>连接保持空闲而不被驱逐的最长时间</td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td>根据dbType自动识别</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h3 id="二、配置数据源"><a href="#二、配置数据源" class="headerlink" title="二、配置数据源"></a>二、配置数据源</h3><ol><li><p>添加上Druid数据源依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>切换数据源：之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以 通过 spring.datasource.type 指定数据源。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEndoing=utf-8&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">zuiweizhiming666</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br></code></pre></td></tr></table></figure></li><li><p>数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">com</span>.<span class="hljs-title">alibaba</span>.<span class="hljs-title">druid</span>.<span class="hljs-title">pool</span>.<span class="hljs-title">DruidDataSource</span></span><br></code></pre></td></tr></table></figure></li><li><p>切换成功！既然切换成功，就可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEndoing=utf-8&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">zuiweizhiming666</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br>    <span class="hljs-comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span><br>    <span class="hljs-comment">#druid 数据源专有配置</span><br>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span><br>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span><br>    <span class="hljs-comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span><br>    <span class="hljs-comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span><br>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span><br>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br></code></pre></td></tr></table></figure></li><li><p>导入log4j的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span><br><span class="hljs-comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span><br><span class="hljs-comment">       @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)：作用就是将 全局配置文件中</span><br><span class="hljs-comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">druidDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DruidDataSource();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="三、配置Druid数据源监控"><a href="#三、配置Druid数据源监控" class="headerlink" title="三、配置Druid数据源监控"></a>三、配置Druid数据源监控</h3><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p><p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 后台监控功能</span><br><span class="hljs-comment">// 因为Springboot内置了servlet容器，所以没有web.xml，替换方法：ServletRegistrationBean</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">statViewServlet</span><span class="hljs-params">()</span> </span>&#123;<br>    ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="hljs-keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="hljs-keyword">new</span> StatViewServlet(), <span class="hljs-string">&quot;/druid/*&quot;</span>);<br>    <span class="hljs-comment">// 后台需要有人登陆，账号密码配置</span><br>    HashMap&lt;String, String&gt; initParameters = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// 添加配置</span><br>    <span class="hljs-comment">// 登陆key是固定的loginUsername和loginPassword</span><br>    initParameters.put(<span class="hljs-string">&quot;loginUsername&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>    initParameters.put(<span class="hljs-string">&quot;loginPassword&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-comment">// 允许谁可以访问 localhost 或者 某个具体的人 或者空字符串表示任何人可以访问</span><br>    initParameters.put(<span class="hljs-string">&quot;allow&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">// 禁止谁可以访问 initParameters.put(&quot;qiaowei&quot;,&quot;192.168.11.123&quot;);</span><br>    <span class="hljs-comment">// 设置初始化参数</span><br>    bean.setInitParameters(initParameters);<br>    <span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B011-%E6%95%B4%E5%90%88Druid%E6%95%B0%E6%8D%AE%E6%BA%90/druid_login.png" alt="druid后台"></p><p>进入之后</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B011-%E6%95%B4%E5%90%88Druid%E6%95%B0%E6%8D%AE%E6%BA%90/druid_admin.png" alt="druid监控"></p><h3 id="四、配置Druid-Web-监控-filter-过滤器"><a href="#四、配置Druid-Web-监控-filter-过滤器" class="headerlink" title="四、配置Druid Web 监控 filter 过滤器"></a>四、配置Druid Web 监控 filter 过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 过滤器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">webStatFilter</span><span class="hljs-params">()</span> </span>&#123;<br>    FilterRegistrationBean bean = <span class="hljs-keyword">new</span> FilterRegistrationBean();<br>    bean.setFilter(<span class="hljs-keyword">new</span> WebStatFilter());<br>    <span class="hljs-comment">// 可以过滤哪些请求呢？</span><br>    HashMap&lt;String, String&gt; initParameters = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// 哪些东西不进行统计</span><br>    initParameters.put(<span class="hljs-string">&quot;exclusions&quot;</span>, <span class="hljs-string">&quot;*.js,*.css,/druid/*&quot;</span>);<br>    bean.setInitParameters(initParameters);<br>    <span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记10-整合JDBC</title>
    <link href="/posts/2021/01/09/SpringBoot%E7%AC%94%E8%AE%B010-%E6%95%B4%E5%90%88JDBC/"/>
    <url>/posts/2021/01/09/SpringBoot%E7%AC%94%E8%AE%B010-%E6%95%B4%E5%90%88JDBC/</url>
    
    <content type="html"><![CDATA[<h3 id="一、SpringData简介"><a href="#一、SpringData简介" class="headerlink" title="一、SpringData简介"></a>一、SpringData简介</h3><p>对于数据访问层，无论是SQL（关系型数据库）还是NOSQL（非关系型数据库），SpringBoot 底层都是采用 Sping Data 的方式统一处理。</p><p>SpringBoot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p><p>Spring Data 官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></p><p>数据库相关的启动器：可以参考官方文档：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></p><h3 id="二、整合JDBC"><a href="#二、整合JDBC" class="headerlink" title="二、整合JDBC"></a>二、整合JDBC</h3><h4 id="1-创建测试项目测试数据源"><a href="#1-创建测试项目测试数据源" class="headerlink" title="1.  创建测试项目测试数据源"></a>1.  创建测试项目测试数据源</h4><ol><li><p>我们去新建一个项目测试：springboot-data-jdbc，引入相关的基础模块。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B010-%E6%95%B4%E5%90%88JDBC/dep.png" alt="选择依赖"></p></li><li><p>项目搭建之后，发现SpringBoot自动帮我们导入了如下的启动器:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--JDBC--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--MySQL--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写yaml配置文件application.yml连接数据库：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEndoing=utf-8&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">zuiweizhiming666</span><br></code></pre></td></tr></table></figure></li><li><p>配置完这些环境，我们就可以直接使用了，因为SpringBoot已经默认帮我们进行了自动配置；去测试类测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>    <span class="hljs-comment">// 查看一下默认的数据源：com.zaxxer.hikari.HikariDataSource</span><br>    System.out.println(dataSource.getClass());<br>    <span class="hljs-comment">// 获得数据库连接</span><br>    Connection connection = dataSource.getConnection();<br>    System.out.println(connection);<br>    <span class="hljs-comment">// xxxx Template: SpringBoot已经配置好模板bean，拿来即用</span><br>    <span class="hljs-comment">// jdbc/redis Template</span><br><br>    <span class="hljs-comment">// 关闭数据库连接</span><br>    connection.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果可以看到，SpringBoot默认给我们配置的数据源为：com.zaxxer.hikari.HikariDataSource。</p><p>我们来全局搜索一下，找到数据源的所有自动配置都在：<code>DataSourceAutoConfiguration</code>文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span><br><span class="hljs-meta">         DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.OracleUcp.class,</span><br><span class="hljs-meta">         DataSourceConfiguration.Generic.class, DataSourceJmxConfiguration.class &#125;)</span><br></code></pre></td></tr></table></figure><p>这些导入的类都在<code>DataSourceConfiguration</code>配置类下，可以看出SpringBoot默认使用Hikari作为数据源。</p><p><strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；</strong></p><p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong></p><p>关于数据源我们并不做介绍，有了数据库连接，显然就可以 CRUD 操作数据库了。但是我们需要先了解一个对象 <strong>JdbcTemplate</strong></p></li></ol><h3 id="2-JDBCTemplate"><a href="#2-JDBCTemplate" class="headerlink" title="2. JDBCTemplate"></a>2. JDBCTemplate</h3><ol><li><p>有了数据源（com.zaxxer.hikari.HikariDataSource），然后可以拿到数据库连接（java.sql.Connection），有了连接，就可以使用原生的JDBC语句来操作数据库</p></li><li><p>即使不适用第三方数据库操作框架，如MyBatis等，Spring本身也对原生的JDBC做了轻量级的饭呢该庄，即JdbcTemplate。</p></li><li><p>数据库操作的所有CRUD方法都在JdbcTemplate中。</p></li><li><p>Springboot不禁提供了默认的数据源，同时默认已经配置好了JdbcTemplate放在容器中，程序员只需要自己注入即可使用。</p></li><li><p>JdbcTemplate的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p></li></ol><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句。</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句。</li><li>query方法及queryForXXX方法：用于执行查询相关语句。</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><p>编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">// 查询数据库的所有信息</span><br>    <span class="hljs-comment">// 思考：没有实体类，数据库中的数据，如何获取？ 使用Map</span><br>    <span class="hljs-meta">@GetMapping(&quot;/userList&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; userList() &#123;<br>        String sql = <span class="hljs-string">&quot;select * from mybatis.user&quot;</span>;<br>        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);<br>        <span class="hljs-keyword">return</span> maps;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/addUser&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;insert into mybatis.user(id,name,pwd) values (5,&#x27;小明&#x27;,&#x27;123456&#x27;)&quot;</span>;<br>        jdbcTemplate.update(sql);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;insert-ok&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/updateUser/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;update mybatis.user set name = ?,pwd = ? where id =&quot;</span> + id;<br>        <span class="hljs-comment">// 封装</span><br>        Object[] objects = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">2</span>];<br>        objects[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;小明2&quot;</span>;<br>        objects[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;zzzzzz&quot;</span>;<br>        jdbcTemplate.update(sql, objects);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update-ok&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;delete from mybatis.user where id = ?&quot;</span>;<br>        jdbcTemplate.update(sql,id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;delete-ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试请求，结果正常；</p><p>到此，CURD的基本操作，使用 JDBC 就搞定了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记09-页面国际化</title>
    <link href="/posts/2021/01/09/SpringBoot%E7%AC%94%E8%AE%B009-%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <url>/posts/2021/01/09/SpringBoot%E7%AC%94%E8%AE%B009-%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="页面国际化"><a href="#页面国际化" class="headerlink" title="页面国际化"></a>页面国际化</h2><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p>在IDEA中统一设置properties的编码问题：<strong>utf-8</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B009-%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96/file_encoding.png" alt="设置编码"></p><h3 id="二、编写配置文件"><a href="#二、编写配置文件" class="headerlink" title="二、编写配置文件"></a>二、编写配置文件</h3><p>编写国际化配置文件，抽取页面需要显示的国际化页面消息。我们可以去登录页面查看一下，哪些内容我们需要编写国际化的配置。</p><ol><li><p>我们在<code>resources</code>资源文件下新建一个<code>i18n</code>目录，存放国际化配置文件</p></li><li><p>建立一个login.properties文件，还有一个login_zh_CN.properties；发现IDEA自动识别了我们要做国际化操作；文件夹变了</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B009-%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96/i18n.png" alt="新生成资源包"></p></li><li><p>我们可以再添加一个英文的，结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B009-%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96/i18n_2.png" alt="添加英文"></p></li><li><p>编写配置，我们可以看到idea下面有一个<strong>视图选项</strong> : Resource Bundle，点击进去就可以直接添加属性。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B009-%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96/bundle.png" alt="可视化编写"></p></li></ol><ol start="5"><li><p>这个视图我们点击 + 号就可以直接添加属性了,右边的三个文本框可以输入对应的属性值</p></li><li><p>然后依次添加其他页面内容即可（键的名字可以随便取，值按照页面上的来）</p></li><li><p>然后。查看一下我们的配置文件</p><p><strong>login.properties</strong>：默认</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-meta">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-meta">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-meta">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-meta">login.username</span>=<span class="hljs-string">用户名</span><br></code></pre></td></tr></table></figure><p><strong>login_en_US.properties</strong>：英文</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">login.btn</span>=<span class="hljs-string">Sign in</span><br><span class="hljs-meta">login.password</span>=<span class="hljs-string">Password</span><br><span class="hljs-meta">login.remember</span>=<span class="hljs-string">Remember me</span><br><span class="hljs-meta">login.tip</span>=<span class="hljs-string">please sign in</span><br><span class="hljs-meta">login.username</span>=<span class="hljs-string">Username</span><br></code></pre></td></tr></table></figure><p><strong>login_zh_CN.properties</strong>：中文</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-meta">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-meta">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-meta">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-meta">login.username</span>=<span class="hljs-string">用户名</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="三、配置文件生效探究"><a href="#三、配置文件生效探究" class="headerlink" title="三、配置文件生效探究"></a>三、配置文件生效探究</h3><p>看一下SpringBoot对国际化的自动配置！这里又涉及到一个类：<code>MessageSourceAutoConfiguration</code></p><p>在这个类中有一个方法：<code>messageSource</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MessageSource <span class="hljs-title">messageSource</span><span class="hljs-params">(MessageSourceProperties properties)</span> </span>&#123;<br>    ResourceBundleMessageSource messageSource = <span class="hljs-keyword">new</span> ResourceBundleMessageSource();<br>    <span class="hljs-keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;<br>        messageSource.setBasenames(StringUtils<br>                                   .commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (properties.getEncoding() != <span class="hljs-keyword">null</span>) &#123;<br>        messageSource.setDefaultEncoding(properties.getEncoding().name());<br>    &#125;<br>    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());<br>    Duration cacheDuration = properties.getCacheDuration();<br>    <span class="hljs-keyword">if</span> (cacheDuration != <span class="hljs-keyword">null</span>) &#123;<br>        messageSource.setCacheMillis(cacheDuration.toMillis());<br>    &#125;<br>    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());<br>    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());<br>    <span class="hljs-keyword">return</span> messageSource;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击此方法的形参所属的类<code>MessageSourceProperties</code>，有一个属性配置了默认的国际化资源文件名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String basename = <span class="hljs-string">&quot;messages&quot;</span>;<br></code></pre></td></tr></table></figure><p>好，回到刚才的类<code>MessageSourceAutoConfiguration</code>的方法<code>messageSource</code>中来，第一条语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ResourceBundleMessageSource messageSource = <span class="hljs-keyword">new</span> ResourceBundleMessageSource();<br></code></pre></td></tr></table></figure><p>点进<code>ResourceBundleMessageSource</code>会发现用到了一个类<code>Locale</code>的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">resolveCodeWithoutArguments</span><span class="hljs-params">(String code, Locale locale)</span></span><br></code></pre></td></tr></table></figure><p>点进<code>Locale</code>类，发现其中定义了许多常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Locale FRENCH = createConstant(<span class="hljs-string">&quot;fr&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Locale ITALIAN = createConstant(<span class="hljs-string">&quot;it&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Locale JAPANESE = createConstant(<span class="hljs-string">&quot;ja&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Locale CHINESE = createConstant(<span class="hljs-string">&quot;zh&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>回归到让配置文件生效</strong>：</p><p>真实的情况我们把这些放在了国际化配置文件放在了<code>i18n</code>目录下，所以我们要去application.properties配置这个messages的路径。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.messages.basename</span>=<span class="hljs-string">i18n.login</span><br></code></pre></td></tr></table></figure><h3 id="四、配置页面国际化值"><a href="#四、配置页面国际化值" class="headerlink" title="四、配置页面国际化值"></a>四、配置页面国际化值</h3><p>去页面获取国际化的值，查看Thymeleaf的文档，找到message取值操作为：#{…}。我们去页面测试下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;dashboard.html&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;72&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">&quot;#&#123;login.username&#125;&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">&quot;#&#123;login.password&#125;&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox mb-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remember-me&quot;</span>&gt;</span> [[#&#123;login.remember&#125;]]<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>[[#&#123;login.btn&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>去启动项目，访问一下，发现已经自动识别为中文的了</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B009-%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96/ch_page.png" alt="配置中文"></p><p><strong>但我们想看的是，可以根据按钮自动切换中文和英文</strong></p><h3 id="五、配置国际化解析"><a href="#五、配置国际化解析" class="headerlink" title="五、配置国际化解析"></a>五、配置国际化解析</h3><p>在Spring中有一个类<code>Locale(区域)</code>，里面有一个叫做``LocaleResolver`的解析器。</p><p>去<code>WebMvcAutoConfiguration</code>文件，寻找一下，看到SpringBoot默认配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.webProperties.getLocaleResolver() == WebProperties.LocaleResolver.FIXED) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FixedLocaleResolver(<span class="hljs-keyword">this</span>.webProperties.getLocale());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FixedLocaleResolver(<span class="hljs-keyword">this</span>.mvcProperties.getLocale());<br>    &#125;<br>    AcceptHeaderLocaleResolver localeResolver = <span class="hljs-keyword">new</span> AcceptHeaderLocaleResolver();<br>    Locale locale = (<span class="hljs-keyword">this</span>.webProperties.getLocale() != <span class="hljs-keyword">null</span>) ? <span class="hljs-keyword">this</span>.webProperties.getLocale()<br>        : <span class="hljs-keyword">this</span>.mvcProperties.getLocale();<br>    localeResolver.setDefaultLocale(locale);<br>    <span class="hljs-keyword">return</span> localeResolver;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类中有一个类 <code>AcceptHeaderLocaleResolver</code>,点进去看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AcceptHeaderLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LocaleResolver</span></span><br></code></pre></td></tr></table></figure><p>和视图解析器类似，只要实现 <code>LocaleResolver</code> 接口的就是一个地区解析器</p><p>所以现在想点击链接让我们的国际化资源生效，就需要让我们自己的<code>Locale</code>生效</p><p>我们可以模仿源码去自己写一个自己的<code>LocaleResolver</code>，可以在链接上携带区域信息。</p><p>首先，我们修改一下前端页面控制中，英文的跳转链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这里传入参数不需要使用 ？使用 （key=value）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>去写一个处理的组件类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LocaleResolver</span> </span>&#123;<br><br>    <span class="hljs-comment">// 解析请求</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">resolveLocale</span><span class="hljs-params">(HttpServletRequest httpServletRequest)</span> </span>&#123;<br>        <span class="hljs-comment">// 获取请求中的语言参数</span><br>        String language = httpServletRequest.getParameter(<span class="hljs-string">&quot;l&quot;</span>);<br>        <span class="hljs-comment">// 如果没有就是用默认的</span><br>        Locale locale = Locale.getDefault();<br>        <span class="hljs-comment">// 如果请求的链接携带了国际化的参数</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(language)) &#123;<br>            <span class="hljs-comment">// zh_CN</span><br>            String[] split = language.split(<span class="hljs-string">&quot;_&quot;</span>);<br>            <span class="hljs-comment">// 国家，地区分割</span><br>            locale = <span class="hljs-keyword">new</span> Locale(split[<span class="hljs-number">0</span>], split[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> locale;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocale</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了让我们的区域化信息能够生效，我们需要再配置一下这个组件,<strong>在我们自己的MvcConofig下添加bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 放在Spring的Beans里面，自己的国际化组件就生效了！</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyLocaleResolver();<br>&#125;<br></code></pre></td></tr></table></figure><p>重启项目，来访问一下，发现点击按钮可以实现成功切换。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记08-MVC自动配置原理</title>
    <link href="/posts/2021/01/09/SpringBoot%E7%AC%94%E8%AE%B008-MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
    <url>/posts/2021/01/09/SpringBoot%E7%AC%94%E8%AE%B008-MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="MVC自动配置原理"><a href="#MVC自动配置原理" class="headerlink" title="MVC自动配置原理"></a>MVC自动配置原理</h2><h3 id="一、官网阅读"><a href="#一、官网阅读" class="headerlink" title="一、官网阅读"></a>一、官网阅读</h3><p>在进行项目编写前，我们还需要知道一个东西，就是SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。</p><p>只有把这些都搞清楚了，我们在之后使用才会更加得心应手。途径一：源码分析，途径二：官方文档！</p><p>地址：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs apl">Spring MVC Auto-configuration<br>&#x2F;&#x2F; Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。<br>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.<br>&#x2F;&#x2F; 自动配置在Spring默认设置的基础上添加了以下功能：<br>The auto-configuration adds the following features on top of Spring’s defaults:<br>&#x2F;&#x2F; 包含视图解析器<br>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.<br>&#x2F;&#x2F; 支持静态资源文件夹的路径，以及webjars<br>Support for serving static resources, including support for WebJars <br>&#x2F;&#x2F; 自动注册了Converter：<br>&#x2F;&#x2F; 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把&quot;1&quot;字符串自动转换为int类型<br>&#x2F;&#x2F; Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】<br>Automatic registration of Converter, GenericConverter, and Formatter beans.<br>&#x2F;&#x2F; HttpMessageConverters<br>&#x2F;&#x2F; SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；<br>Support for HttpMessageConverters (covered later in this document).<br>&#x2F;&#x2F; 定义错误代码生成规则的<br>Automatic registration of MessageCodesResolver (covered later in this document).<br>&#x2F;&#x2F; 首页定制<br>Static index.html support.<br>&#x2F;&#x2F; 图标定制<br>Custom Favicon support (covered later in this document).<br>&#x2F;&#x2F; 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！<br>Automatic use of a ConfigurableWebBindingInitializer bean (covered later in this document).<br><br>&#x2F;*<br>如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己<br>的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供<br>RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义<br>实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。<br>*&#x2F;<br>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration <br>(interceptors, formatters, view controllers, and other features), you can add your own <br>@Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide <br>custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or <br>ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.<br><br>&#x2F;&#x2F; 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。<br>If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.<br></code></pre></td></tr></table></figure><p>我们来仔细对照，看一下它怎么实现的，它告诉我们SpringBoot已经帮我们自动配置好了SpringMVC，然后自动配置了哪些东西呢？</p><h3 id="二、ContentNegotiatingViewResolver-内容协商视图解析器"><a href="#二、ContentNegotiatingViewResolver-内容协商视图解析器" class="headerlink" title="二、ContentNegotiatingViewResolver 内容协商视图解析器"></a>二、ContentNegotiatingViewResolver 内容协商视图解析器</h3><p>自动配置了ViewResolver，就是我们之前学习的SpringMVC的视图解析器；</p><p>即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。</p><p>我们去看看这里的源码：我们找到 <code>WebMvcAutoConfiguration</code> ， 然后搜索<code>ContentNegotiatingViewResolver</code>。找到如下方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(ViewResolver.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ContentNegotiatingViewResolver <span class="hljs-title">viewResolver</span><span class="hljs-params">(BeanFactory beanFactory)</span> </span>&#123;<br>    ContentNegotiatingViewResolver resolver = <span class="hljs-keyword">new</span> ContentNegotiatingViewResolver();<br>    resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));<br>    <span class="hljs-comment">// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级</span><br>    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);<br>    <span class="hljs-keyword">return</span> resolver;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以点进这类看看！找到对应的解析视图的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span> <span class="hljs-comment">// 注解说明：@Nullable 即参数可为null</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    RequestAttributes attrs = RequestContextHolder.getRequestAttributes();<br>    Assert.state(attrs <span class="hljs-keyword">instanceof</span> ServletRequestAttributes, <span class="hljs-string">&quot;No current ServletRequestAttributes&quot;</span>);<br>    List&lt;MediaType&gt; requestedMediaTypes = <span class="hljs-keyword">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());<br>    <span class="hljs-keyword">if</span> (requestedMediaTypes != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 获取候选的视图对象</span><br>        List&lt;View&gt; candidateViews = <span class="hljs-keyword">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);<br>        <span class="hljs-comment">// 选择一个最适合的视图对象，然后把这个对象返回</span><br>        View bestView = <span class="hljs-keyword">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);<br>        <span class="hljs-keyword">if</span> (bestView != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> bestView;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们继续点进去看，他是怎么获得候选的视图的呢？</p><p><code>getCandidateViews</code>方法中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator var5 = <span class="hljs-keyword">this</span>.viewResolvers.iterator();<br></code></pre></td></tr></table></figure><p>所以得出结论：<strong>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的</strong></p><p>我们再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initServletContext</span><span class="hljs-params">(ServletContext servletContext)</span> </span>&#123;<br>    <span class="hljs-comment">// 这里它是从beanFactory工具中获取容器中的所有视图解析器</span><br>    <span class="hljs-comment">// ViewRescolver.class 把所有的视图解析器来组合的</span><br>    Collection&lt;ViewResolver&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(<span class="hljs-keyword">this</span>.obtainApplicationContext(), ViewResolver.class).values();<br>    ViewResolver viewResolver;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.viewResolvers == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.viewResolvers = <span class="hljs-keyword">new</span> ArrayList(matchingBeans.size());<br>    &#125;<br>    <span class="hljs-comment">// ...............</span><br>&#125;<br></code></pre></td></tr></table></figure><p>既然它是在容器中去找视图解析器，我们是否可以猜想，我们就可以去实现一个视图解析器了呢？</p><p>我们可以自己给容器中去添加一个视图解析器；这个类就会帮我们自动的将它组合进来；<strong>我们去实现一下</strong></p><ol><li><p>我们在我们的主程序中去写一个视图解析器来试试；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span> <span class="hljs-comment">//放到bean中</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title">myViewResolver</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyViewResolver();<br>&#125;<br><br><span class="hljs-comment">//我们写一个静态内部类，视图解析器就需要实现ViewResolver接口</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ViewResolver</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String s, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>怎么看我们自己写的视图解析器有没有起作用呢？</p><p>我们给 <code>DispatcherServlet</code> 中的 <code>doDispatch</code>方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B008-MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/debug.png" alt="断点"></p></li><li><p>我们启动我们的项目，然后随便访问一个页面，看一下Debug信息；</p><p>找到this</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B008-MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/this.png" alt="this"></p><p>在this下面找到视图解析器，我们看到我们自己定义的就在这里了。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B008-MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/my_resolver.png" alt="自定义的视图解析器"></p></li></ol><h3 id="三、转换器和格式化器"><a href="#三、转换器和格式化器" class="headerlink" title="三、转换器和格式化器"></a>三、转换器和格式化器</h3><p>找到格式化转换器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FormattingConversionService <span class="hljs-title">mvcConversionService</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 拿到配置文件中的格式化规则</span><br>    WebConversionService conversionService = <br>        <span class="hljs-keyword">new</span> WebConversionService(<span class="hljs-keyword">this</span>.mvcProperties.getDateFormat());<br>    addFormatters(conversionService);<br>    <span class="hljs-keyword">return</span> conversionService;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDateFormat</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.dateFormat;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Date format to use. For instance, `dd/MM/yyyy`. 默认的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String dateFormat;<br></code></pre></td></tr></table></figure><p>可以看到在我们的Properties文件中，我们可以进行自动配置它！</p><h3 id="四、修改SpringBoot的默认配置"><a href="#四、修改SpringBoot的默认配置" class="headerlink" title="四、修改SpringBoot的默认配置"></a>四、修改SpringBoot的默认配置</h3><p>这么多的自动配置，原理都是一样的，通过这个WebMVC的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。</p><p>SpringBoot的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；</p><p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；</p><p>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</p><p><strong>扩展使用SpringMVC</strong> 官方文档如下：</p><p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p><p>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span><br><span class="hljs-comment">//可以使用自定义类扩展MVC的功能</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">// 浏览器发送/test ， 就会跳转到test页面；</span><br>        registry.addViewController(<span class="hljs-string">&quot;/test&quot;</span>).setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们去浏览器访问一下：<strong>确实也跳转过来了！所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p><p>我们可以去分析一下原理：</p><p>1、WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p><p>2、这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)</p><p>3、我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration</p><p>这个父类中有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WebMvcConfigurerComposite configurers = <span class="hljs-keyword">new</span> WebMvcConfigurerComposite();<br>    <br>  <span class="hljs-comment">// 从容器中获取所有的webmvcConfigurer</span><br>    <span class="hljs-meta">@Autowired(required = false)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigurers</span><span class="hljs-params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;<br>            <span class="hljs-keyword">this</span>.configurers.addWebMvcConfigurers(configurers);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.configurers.addViewControllers(registry);<br>&#125;<br></code></pre></td></tr></table></figure><p>5、我们点进去看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>    Iterator var2 = <span class="hljs-keyword">this</span>.delegates.iterator();<br><br>    <span class="hljs-keyword">while</span>(var2.hasNext()) &#123;<br>        <span class="hljs-comment">// 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的</span><br>        WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();<br>        delegate.addViewControllers(registry);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>所以得出结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p><h3 id="五、全面接管SpringMVC"><a href="#五、全面接管SpringMVC" class="headerlink" title="五、全面接管SpringMVC"></a>五、全面接管SpringMVC</h3><p>官方文档：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">If you want to take complete control of Spring MVC<br>you can add your own @Configuration annotated with @EnableWebMvc.<br></code></pre></td></tr></table></figure><p>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p><p>只需在我们的配置类中要加一个@EnableWebMvc。</p><p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下；</p><p>不加注解之前，访问首页：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B008-MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/before.png" alt="结果"></p><p>给配置类加上注解：@EnableWebMvc</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B008-MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/after.png" alt="结果"></p><p>我们发现所有的SpringMVC自动配置都失效了！回归到了最初的样子；</p><p><strong>当然，我们开发中，不推荐使用全面接管SpringMVC</strong></p><p>思考问题？为什么加了一个注解，自动配置就失效了！我们看下源码：</p><ol><li><p>这里发现它是导入了一个类，我们可以继续进去看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>它继承了一个父类 WebMvcConfigurationSupport</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;<br>  <span class="hljs-comment">// ......</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>我们来回顾一下Webmvc自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-comment">// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">                     ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcAutoConfiguration</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>总结一句话：@EnableWebMvc将WebMvcConfigurationSupport组件导入进来了；</p><p>而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能！</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记07-Thymeleaf模板引擎</title>
    <link href="/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B007-Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <url>/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B007-Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><h3 id="一、模板引擎"><a href="#一、模板引擎" class="headerlink" title="一、模板引擎"></a>一、模板引擎</h3><p>前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。</p><p>jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，像第二，我们用的还是嵌入式的Tomcat，所以呢，<strong>他现在默认是不支持jsp的</strong>。</p><p>那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？</p><p><strong>SpringBoot推荐你可以来使用模板引擎：</strong></p><p>模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B007-Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/template_engine.png" alt="模板引擎"></p><p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。</p><p>我们呢，就来看一下这个模板引擎，那既然要看这个模板引擎。首先，我们来看SpringBoot里边怎么用。</p><h3 id="二、引入Thymeleaf"><a href="#二、引入Thymeleaf" class="headerlink" title="二、引入Thymeleaf"></a>二、引入Thymeleaf</h3><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。这里三个网址：</p><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p><p>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></p><p>Spring官方文档：找到我们对应的版本</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></p><p>找到对应的pom依赖：可以适当点进源码看下本来的包！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三、Thymeleaf分析"><a href="#三、Thymeleaf分析" class="headerlink" title="三、Thymeleaf分析"></a>三、Thymeleaf分析</h3><p>前面呢，我们已经引入了Thymeleaf，那这个要怎么使用呢？</p><p>我们首先得按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则，在按照那个规则，我们进行使用。</p><p>我们去找一下Thymeleaf的自动配置类：ThymeleafProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">    prefix = &quot;spring.thymeleaf&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_ENCODING;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_PREFIX = <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_SUFFIX = <span class="hljs-string">&quot;.html&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> checkTemplate = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> checkTemplateLocation = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">private</span> String prefix = <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br>    <span class="hljs-keyword">private</span> String suffix = <span class="hljs-string">&quot;.html&quot;</span>;<br>    <span class="hljs-keyword">private</span> String mode = <span class="hljs-string">&quot;HTML&quot;</span>;<br>    <span class="hljs-keyword">private</span> Charset encoding;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以在其中看到默认的前缀和后缀！</p><p>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p><p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</p><h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><ol><li><p>编写一个TestController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//classpath:/templates/test.html</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写一个测试页面  test.html 放在 templates 目录下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> xmlns:th=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;测试页面&lt;/h1&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>启动项目请求测试</p></li></ol><h3 id="五、Thymeleaf语法学习"><a href="#五、Thymeleaf语法学习" class="headerlink" title="五、Thymeleaf语法学习"></a>五、Thymeleaf语法学习</h3><p>要学习语法，还是参考官网文档最为准确，我们找到对应的版本看一下；</p><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> ， 简单看一下官网！我们去下载Thymeleaf的官方文档！</p><p><strong>我们做个最简单的练习 ：我们需要查出一些数据，在页面中展示</strong></p><ol><li><p>修改测试请求，增加数据传输；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Model model)</span></span>&#123;<br>    <span class="hljs-comment">//存入数据</span><br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Hello,Thymeleaf&quot;</span>);<br>    <span class="hljs-comment">//classpath:/templates/test.html</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p><p>我们可以去官方文档的#3中看一下命名空间拿来过来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">xmlns:th=&quot;http://www.thymeleaf.org&quot;<br></code></pre></td></tr></table></figure></li><li><p>我们去编写下前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--所有的html元素都可以被 thymeleaf替换接管： th：元素名--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动测试</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B007-Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/test.png" alt="测试结果"></p></li></ol><p><strong>入门搞定，我们来认真研习一下Thymeleaf的使用语法！</strong></p><ol><li><p><strong>我们可以使用任意的 th:attr 来替换Html中原生属性的值！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B007-Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/%E8%AF%AD%E6%B3%95.png" alt="语法"></p></li></ol><ol start="2"><li><p><strong>我们能写哪些表达式呢？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs ABAP">Simple expressions:（表达式语法）<br>Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；<br>    1）、获取对象的属性、调用方法<br>    2）、使用内置的基本对象：#18<br>         #ctx : the context object.<br>         #vars: the context variables.<br>         #locale : the context locale.<br>         #request : (only in Web Contexts) the HttpServletRequest object.<br>         #response : (only in Web Contexts) the HttpServletResponse object.<br>         #session : (only in Web Contexts) the HttpSession object.<br>         #servletContext : (only in Web Contexts) the ServletContext object.<br><br>    3）、内置的一些工具对象：<br>　　　　　　#execInfo : information about the template being processed.<br>　　　　　　#uris : methods for escaping parts of URLs&#x2F;URIs<br>　　　　　　#conversions : methods for executing the configured conversion service (if any).<br>　　　　　　#dates : methods for java.util.Date objects: formatting, component extraction, etc.<br>　　　　　　#calendars : analogous to #dates , but for java.util.Calendar objects.<br>　　　　　　#numbers : methods for formatting numeric objects.<br>　　　　　　#strings : methods for String objects: contains, startsWith, prepending&#x2F;appending, etc.<br>　　　　　　#objects : methods for objects in general.<br>　　　　　　#bools : methods for boolean evaluation.<br>　　　　　　#arrays : methods for arrays.<br>　　　　　　#lists : methods for lists.<br>　　　　　　#sets : methods for sets.<br>　　　　　　#maps : methods for maps.<br>　　　　　　#aggregates : methods for creating aggregates on arrays or collections.<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br><br>  Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；<br>  Message Expressions: #&#123;...&#125;：获取国际化内容<br>  Link URL Expressions: @&#123;...&#125;：定义URL；<br>  Fragment Expressions: ~&#123;...&#125;：片段引用表达式<br><br>Literals（字面量）<br>      Text literals: &#39;one text&#39; , &#39;Another one!&#39; ,…<br>      Number literals: 0 , 34 , 3.0 , 12.3 ,…<br>      Boolean literals: true , false<br>      Null literal: null<br>      Literal tokens: one , sometext , main ,…<br>      <br>Text operations:（文本操作）<br>    String concatenation: +<br>    Literal substitutions: |The name is $&#123;name&#125;|<br>    <br>Arithmetic operations:（数学运算）<br>    Binary operators: + , - , * , &#x2F; , %<br>    Minus sign (unary operator): -<br>    <br>Boolean operations:（布尔运算）<br>    Binary operators: and , or<br>    Boolean negation (unary operator): ! , not<br>    <br>Comparisons and equality:（比较运算）<br>    Comparators: &gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; ( gt , lt , ge , le )<br>    Equality operators: &#x3D;&#x3D; , !&#x3D; ( eq , ne )<br>    <br>Conditional operators:条件运算（三元运算符）<br>    If-then: (if) ? (then)<br>    If-then-else: (if) ? (then) : (else)<br>    Default: (value) ?: (defaultvalue)<br>    <br>Special tokens:<br>    No-Operation: _<br></code></pre></td></tr></table></figure></li></ol><h3 id="六、练习测试"><a href="#六、练习测试" class="headerlink" title="六、练习测试"></a>六、练习测试</h3><ol><li><p>我们编写一个Controller，放一些数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>&#123;<br>    <span class="hljs-comment">//存入数据</span><br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;users&quot;</span>, Arrays.asList(<span class="hljs-string">&quot;qinjiang&quot;</span>,<span class="hljs-string">&quot;kuangshen&quot;</span>));<br>    <span class="hljs-comment">//classpath:/templates/test.html</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试页面取出数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>狂神说<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--不转义--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:utext</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--遍历数据--&gt;</span><br><span class="hljs-comment">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user :$&#123;users&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--行内写法：官网#12--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[$&#123;user&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动项目测试！</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记06-静态资源映射规则</title>
    <link href="/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B006-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/"/>
    <url>/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B006-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h2 id="静态资源导入源码分析"><a href="#静态资源导入源码分析" class="headerlink" title="静态资源导入源码分析"></a>静态资源导入源码分析</h2><blockquote><p>分析静态资源时如何导入的，我们就要分析一波源码了。</p></blockquote><h3 id="一、静态资源映射规则"><a href="#一、静态资源映射规则" class="headerlink" title="一、静态资源映射规则"></a>一、静态资源映射规则</h3><p><strong>首先，我们搭建一个普通的SpringBoot项目，回顾一下HelloWorld程序！</strong></p><p>写请求是比较简单的，那我们要引入前端资源，我们项目中许多的静态资源，比如css，js等文件，这个SpringBoot怎么处理呢？</p><p>之前，我们是一个web应用，我们的main目录下会有一个webapp，我们以前都是把所有的页面导入到这里的。但是我们现在pom，打包方式是打jar包，那这种方式SpringBoot能不能来给我们写页面呢？答案是可以的，但是<strong>SpringBoot对于静态资源放置的位置，是有规定的</strong>。</p><p>在SpringBoot中，SpringMVC的web配置都在<code>WebMvcAutoConfiguration</code>这个配置类里面；</p><p>我们可以去看看这个类里面 <code>WebMvcAutoConfigurationAdapter</code>中有很多配置方法；</p><p>其中有一个方法 <code>addResourcrHandlers</code> ，进行了资源添加处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resourceProperties.isAddMappings()) &#123;<br>        <span class="hljs-comment">// 已禁用默认资源处理</span><br>        logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 缓存控制</span><br>    Duration cachePeriod = <span class="hljs-keyword">this</span>.resourceProperties.getCache().getPeriod();<br>    CacheControl cacheControl = <span class="hljs-keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();<br>    <span class="hljs-comment">// webjars配置</span><br>    <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">&quot;/webjars/**&quot;</span>)) &#123;<br>        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>                                             .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)<br>                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl)<br>                                             .setUseLastModified(<span class="hljs-keyword">this</span>.resourceProperties.getCache().isUseLastModified()));<br>    &#125;<br>    <span class="hljs-comment">// 静态资源配置</span><br>    String staticPathPattern = <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern();<br>    <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;<br>        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)                                        .addResourceLocations(getResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations()))<br>                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl)<br>                                             .setUseLastModified(<span class="hljs-keyword">this</span>.resourceProperties.getCache().isUseLastModified()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好，在这里我们可以看到两种资源处理的方式，下面进行一一解析。</p><h3 id="二、webjars—以jar包方式导入资源"><a href="#二、webjars—以jar包方式导入资源" class="headerlink" title="二、webjars—以jar包方式导入资源"></a>二、webjars—以jar包方式导入资源</h3><p>那什么是webjars呢？</p><p>webjars本质就是<strong>以jar包的方式引入我们的静态资源</strong>，我们以前要导入一个静态资源文件，直接导入即可。</p><p>官网：<a href="https://www.webjars.org/">https://www.webjars.org</a></p><p>比如，我们要使用jquery，我们就只需要引入jquery对应版本的pom依赖即可。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记06-静态资源映射规则/webjars.png" alt="webjars导包" style="zoom:80%;"><p>导入完毕后，查看webjars目录结构，就可以访问到jquery.js文件。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B006-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/webjars_jquery.png" alt="webjars目录下的jquery"></p><p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们在这里访问：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记06-静态资源映射规则/url_jquery.png" alt="网页访问静态资源" style="zoom:80%;"><h3 id="三、-—访问静态资源文件夹"><a href="#三、-—访问静态资源文件夹" class="headerlink" title="三、/**—访问静态资源文件夹"></a>三、/**—访问静态资源文件夹</h3><p>那我们项目中要是使用自己的静态资源该怎么导入呢？我们看下一行代码；</p><p>我们去找staticPathPattern发现第二种映射规则 ：/** ,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String staticPathPattern = <span class="hljs-string">&quot;/**&quot;</span>;<br></code></pre></td></tr></table></figure><p>访问当前的项目任意资源，它会去找 <code>resourceProperties</code> 这个类，在从这个类点进 <code>WebProperties</code>类，我们可以点进去看一下分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 进入方法</span><br><span class="hljs-keyword">public</span> String[] getStaticLocations() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.staticLocations;<br>&#125;<br><span class="hljs-comment">// 找到对应的值</span><br><span class="hljs-keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;<br><span class="hljs-comment">//找到路径</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,<br><span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <span class="hljs-string">&quot;classpath:/static/&quot;</span>, <span class="hljs-string">&quot;classpath:/public/&quot;</span> &#125;;<br></code></pre></td></tr></table></figure><p>ResourceProperties 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p><p>所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;classpath:/META-INF/resources/&quot;<br>&quot;classpath:/resources/&quot;<br>&quot;classpath:/static/&quot;<br>&quot;classpath:/public/&quot;<br></code></pre></td></tr></table></figure><p>我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p><p>比如我们访问 <a href="http://localhost:8080/1.js">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p><h3 id="四、自定义静态资源路径"><a href="#四、自定义静态资源路径" class="headerlink" title="四、自定义静态资源路径"></a>四、自定义静态资源路径</h3><p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/coding/,classpath:/atrox/</span><br></code></pre></td></tr></table></figure><p>一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了！</p><h3 id="五、首页设置"><a href="#五、首页设置" class="headerlink" title="五、首页设置"></a>五、首页设置</h3><p>在<code>WebMvcAutoConfiguration</code>这个类中，我们可以看到<code>WelcomePageHandlerMapping</code>这个欢迎页的映射方法，这就是我们的首页。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> WelcomePageHandlerMapping <span class="hljs-title">welcomePageHandlerMapping</span><span class="hljs-params">(ApplicationContext applicationContext,FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;<br>    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="hljs-keyword">new</span> WelcomePageHandlerMapping(<br>        <span class="hljs-keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),<br>        <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern());<br>    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));<br>    welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());<br>    <span class="hljs-keyword">return</span> welcomePageHandlerMapping;<br>&#125;<br></code></pre></td></tr></table></figure><p>在下面还有两个方法<code>getWelcomePage</code>和<code>getIndexHtml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Optional&lt;Resource&gt; <span class="hljs-title">getWelcomePage</span><span class="hljs-params">()</span> </span>&#123;<br>    String[] locations = getResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations());<br>    <span class="hljs-keyword">return</span> Arrays.stream(locations).map(<span class="hljs-keyword">this</span>::getIndexHtml).filter(<span class="hljs-keyword">this</span>::isReadable).findFirst();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Resource <span class="hljs-title">getIndexHtml</span><span class="hljs-params">(String location)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.resourceLoader.getResource(location + <span class="hljs-string">&quot;index.html&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>欢迎页，静态资源文件夹下的所有 index.html 页面；被 /** 映射。</p><p>比如我访问  <a href="http://localhost:8080/">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p><p>新建一个 index.html ，在我们上面的3个目录中任意一个；</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B006-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/index.png" alt="index.html放在public目录下"></p><p>然后访问测试  <a href="http://localhost:8080/">http://localhost:8080/</a> 看结果。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B006-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/url_index.png" alt="访问测试"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记05-自动配置原理再探</title>
    <link href="/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B005-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E5%86%8D%E6%8E%A2/"/>
    <url>/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B005-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E5%86%8D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><p><strong>Application.yaml</strong>配置文件到底能写什么？怎么写？SpringBoot官方文档中有大量的配置，我们无法全部记住。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B005-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E5%86%8D%E6%8E%A2/properties.png" alt="官网配置说明"></p><h3 id="一、分析自动配置原理"><a href="#一、分析自动配置原理" class="headerlink" title="一、分析自动配置原理"></a>一、分析自动配置原理</h3><p>我们以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span><br><span class="hljs-meta">@Configuration</span> <br><br><span class="hljs-comment">//启动指定类的ConfigurationProperties功能；</span><br>  <span class="hljs-comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span><br>  <span class="hljs-comment">//并把HttpProperties加入到ioc容器中</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span> <br><br><span class="hljs-comment">//Spring底层@Conditional注解</span><br>  <span class="hljs-comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span><br>  <span class="hljs-comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span><br><span class="hljs-meta">@ConditionalOnWebApplication(</span><br><span class="hljs-meta">    type = Type.SERVLET</span><br><span class="hljs-meta">)</span><br><br><span class="hljs-comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><br><span class="hljs-meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span><br><br><span class="hljs-comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span><br>  <span class="hljs-comment">//如果不存在，判断也是成立的</span><br>  <span class="hljs-comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><br><span class="hljs-meta">@ConditionalOnProperty(</span><br><span class="hljs-meta">    prefix = &quot;spring.http.encoding&quot;,</span><br><span class="hljs-meta">    value = &#123;&quot;enabled&quot;&#125;,</span><br><span class="hljs-meta">    matchIfMissing = true</span><br><span class="hljs-meta">)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span> </span>&#123;<br>    <span class="hljs-comment">//他已经和SpringBoot的配置文件映射了</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Encoding properties;<br>    <span class="hljs-comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span><span class="hljs-params">(HttpProperties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.properties = properties.getEncoding();<br>    &#125;<br>    <br>    <span class="hljs-comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">//判断容器没有这个组件？</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title">characterEncodingFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        CharacterEncodingFilter filter = <span class="hljs-keyword">new</span> OrderedCharacterEncodingFilter();<br>        filter.setEncoding(<span class="hljs-keyword">this</span>.properties.getCharset().name());<br>        filter.setForceRequestEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));<br>        filter.setForceResponseEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));<br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br>    <span class="hljs-comment">//。。。。。。。</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li><li>这些组件的属性是从对应的properties类中获取的，这些properties类里面的每一个属性又是和配置文件绑定的；</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从配置文件中获取指定的值和bean的属性进行绑定</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpProperties</span> </span>&#123;<br>    <span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们去配置文件里面试试前缀，看提示！</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B005-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E5%86%8D%E6%8E%A2/http_encoding.png" alt="提示"></p><p><strong>这就是自动装配的原理！</strong></p><h3 id="二、精髓"><a href="#二、精髓" class="headerlink" title="二、精髓"></a>二、精髓</h3><ol><li>SpringBoot启动会加载大量的自动配置类</li><li>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中</li><li>我们再来看这个自动配置类中到底配置了哪些组件</li><li>给容器自动配置类添加组件的时候，会从properties类中获取属性，我们只需要在配置文件中指定这些属性的值就好了。</li></ol><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p><h3 id="三、-Conditional"><a href="#三、-Conditional" class="headerlink" title="三、@Conditional"></a>三、@Conditional</h3><p>了解完自动装配的原理后，我们来关注一个问题，<strong>自动配置类的生效条件</strong>。</p><p><strong>Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器添加组件，配置里面的内容才会生效。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记05-自动配置原理再探/conditional.png" alt="@Conditional扩展注解" style="zoom: 67%;"><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>我们怎么知道哪些自动配置类生效？</p><p><strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#开启springboot的调试类</span><br><span class="hljs-attr">debug</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p><p><strong>Unconditional classes: （没有条件的类）</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记04-JSR303数据校验及多环境切换</title>
    <link href="/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B004-JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C%E5%8F%8A%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/"/>
    <url>/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B004-JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C%E5%8F%8A%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h2><h3 id="一、如何使用"><a href="#一、如何使用" class="headerlink" title="一、如何使用"></a>一、如何使用</h3><p>SpringBoot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-meta">@Validated</span>  <span class="hljs-comment">//数据校验</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    <span class="hljs-meta">@Email(message=&quot;邮箱格式错误&quot;)</span> <span class="hljs-comment">//name必须是邮箱格式</span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：default message [不是一个合法的电子邮箱地址]</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记04-JSR303数据校验及多环境切换/validate.png" alt="JSR303校验" style="zoom:80%;"><p><strong>使用数据校验，可以保持数据的正确性。</strong></p><h3 id="二、常见参数"><a href="#二、常见参数" class="headerlink" title="二、常见参数"></a>二、常见参数</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown">@NotNull(message=&quot;名字不能为空&quot;)<br>private String userName;<br>@Max(value=120,message=&quot;年龄最大不能查过120&quot;)<br>private int age;<br>@Email(message=&quot;邮箱格式错误&quot;)<br>private String email;<br><br>空检查<br>@Null       验证对象是否为null<br>@NotNull    验证对象是否不为null, 无法查检长度为0的字符串<br>@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.<br>@NotEmpty   检查约束元素是否为NULL或者是EMPTY.<br><span class="hljs-code">    </span><br><span class="hljs-code">Booelan检查</span><br><span class="hljs-code">@AssertTrue     验证 Boolean 对象是否为 true  </span><br><span class="hljs-code">@AssertFalse    验证 Boolean 对象是否为 false  </span><br><span class="hljs-code">    </span><br><span class="hljs-code">长度检查</span><br><span class="hljs-code">@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="hljs-code">@Length(min=, max=) string is between min and max included.</span><br><span class="hljs-code"></span><br><span class="hljs-code">日期检查</span><br><span class="hljs-code">@Past       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="hljs-code">@Future     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="hljs-code">@Pattern    验证 String 对象是否符合正则表达式的规则</span><br><span class="hljs-code"></span><br><span class="hljs-code">.......等等</span><br><span class="hljs-code">除此以外，我们还可以自定义一些数据校验规则</span><br></code></pre></td></tr></table></figure><h2 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h2><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境。</p><h3 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h3><p>我们在主配置文件编写的时候，文件名可以是<strong>application-{profile}.properties/yml</strong>，用来指定多个环境版本。</p><p><strong>例如：</strong></p><p>application-test.properties 代表测试环境配置</p><p>application-dev.properties 代表开发环境配置</p><p>但是SpringBoot并不会直接启动这些配置文件，<strong>它默认使用application.properties主配置文件</strong>。</p><p>我们需要通过一个配置来选择需要激活的环境：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span><br><span class="hljs-comment">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span><br><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><h3 id="二、yaml的多文档块"><a href="#二、yaml的多文档块" class="headerlink" title="二、yaml的多文档块"></a>二、yaml的多文档块</h3><p>和properties配置文件中一样，但是使用yaml去实现不需要创建多个配置文件，更加方便了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-comment">#选择要激活那个环境块</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#配置环境的名称</span><br><br><br><span class="hljs-meta">---</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span>  <span class="hljs-comment">#配置环境的名称</span><br></code></pre></td></tr></table></figure><p><strong>注意：如果yaml和properties同时配置了端口，并且没有激活其他环境，默认会使用properties配置文件的。</strong></p><h3 id="三、配置文件加载位置"><a href="#三、配置文件加载位置" class="headerlink" title="三、配置文件加载位置"></a>三、配置文件加载位置</h3><p><strong>外部加载配置文件的方式非常多，我们选择最常用的即可，在开发的资源文件中进行配置。</strong></p><p>官方外部配置文件说明参考文档：</p><ol><li>file:./config/</li><li>file:./</li><li>classpath:/config/</li><li>classpath:/</li></ol><p>springboot启动会扫描一下位置的application.properties或者application.yaml文件作为SpringBoot的默认配置文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">优先级1：项目路径下的config文件夹配置文件<br>优先级2：项目路径下配置文件<br>优先级3：资源路径下的config文件夹配置文件<br>优先级4：资源路径下配置文件<br></code></pre></td></tr></table></figure><p>优先级由高到低，高优先级的配置会覆盖低优先级的配置</p><p><strong>SpringBoot会从这四个位置全部加载主配置文件，互补配置</strong></p><p>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">配置项目的访问路径<br>server.servlet.context-path=/kuang<br></code></pre></td></tr></table></figure><h3 id="四、运维技巧"><a href="#四、运维技巧" class="headerlink" title="四、运维技巧"></a>四、运维技巧</h3><p>指定位置加载配置文件</p><p>我们还可以通过spring.config.location来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">java -jar spring-boot-config.jar --spring.config.location=F:/application.properties<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记03-yaml配置注入</title>
    <link href="/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B003-yaml%E9%85%8D%E7%BD%AE%E6%B3%A8%E5%85%A5/"/>
    <url>/posts/2021/01/08/SpringBoot%E7%AC%94%E8%AE%B003-yaml%E9%85%8D%E7%BD%AE%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="yaml语法学习"><a href="#yaml语法学习" class="headerlink" title="yaml语法学习"></a>yaml语法学习</h2><h3 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h3><p>SpringBoot使用一个全局的配置文件，<strong>配置文件名称是固定的</strong>，有两种写法：</p><ul><li>application.properties<ul><li>语法结构：<strong>key=value</strong></li></ul></li><li>application.yaml<ul><li>语法结构：<strong>key: value</strong></li></ul></li></ul><p><strong>配置文件的作用</strong>：修改SpringBoot自动配置的默认值，因为SpringBoot在底层已经自动配置了这些项。比如我们可以在配置文件中修改Tomcat默认启动的端口号，测试一下！</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081</span><br></code></pre></td></tr></table></figure><h3 id="二、yaml概述"><a href="#二、yaml概述" class="headerlink" title="二、yaml概述"></a>二、yaml概述</h3><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p><p><strong>这种语言以数据作为中心，而不是以标记语言为重点！</strong></p><p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p><p><strong>传统xml配置</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8081<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>yaml配置:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yacas">server:<br>port: 8080<br></code></pre></td></tr></table></figure><h3 id="三、yaml基础语法"><a href="#三、yaml基础语法" class="headerlink" title="三、yaml基础语法"></a>三、yaml基础语法</h3><p>说明：语法要求严格！</p><p>1、空格不能省略</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的。</p><p><strong>字面量：普通的值 [数字， 布尔值， 字符串]</strong></p><p>字面量直接卸载后面就可以，<strong>字符串默认不用加上双引号或单引号</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">k:</span> <span class="hljs-string">v</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><p>“”双引号，不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思。</p><p>比如：name: “atrox \n shen” 输出：atrox 换行 shen</p></li><li><p>‘’单引号，会转义特殊字符，特殊字符最终会变成和普通字符一样输出</p><p>比如：name: ‘atrox \n shen’ 输出：atrox \n shen</p></li></ul><p><strong>对象、Map（键值对）</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#对象、Map格式</span><br><span class="hljs-attr">k:</span><br>    <span class="hljs-attr">v1:</span> <br>    <span class="hljs-attr">v2:</span><br></code></pre></td></tr></table></figure><p>在下一行来写对象的属性和值的关系时，注意缩进。如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">乔威</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">乔威</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>数组（List、Set）</strong></p><p>用 - 值表示数组中的一个元素，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">pig</span><br></code></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]<br></code></pre></td></tr></table></figure><h2 id="注入配置文件"><a href="#注入配置文件" class="headerlink" title="注入配置文件"></a>注入配置文件</h2><p>yaml文件更强大的地方在于，他可以<strong>给我们的实体类注入匹配值</strong>。</p><h3 id="一、yaml注入配置文件"><a href="#一、yaml注入配置文件" class="headerlink" title="一、yaml注入配置文件"></a>一、yaml注入配置文件</h3><ol><li><p>在springboot项目中的resources目录下新建一个文件applicaton.yaml</p></li><li><p>编写一个实体类Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法  </span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>思考，我们原来是如何给bean注入属性值的。@Value，给这个类测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;阿黄&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;18&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在SpringBoot的测试类下注入狗输出一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplicationTests</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//将狗狗自动注入进来</span><br>    Dog dog;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(dog); <span class="hljs-comment">//打印看下狗狗对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果成功输出，@Value注入成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Dog&#123;name=<span class="hljs-string">&#x27;阿黄&#x27;</span>, age=<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p>这是我们原来的办法。</p></li><li><p>我们再编写一个复杂一点的实体类：Person 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法  </span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>我门来使用yaml配置的方式进行注入，大家写的时候注意区别和优势，我们编写一个yaml配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">qiaowei$&#123;random.uuid&#125;</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2001</span><span class="hljs-string">/1/30</span><br>  <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;<br>  <span class="hljs-attr">lists:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">girl</span><br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">旺财</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>我们刚才把这个person这个对象的所有值都写好了，我们现在俩注入到我们的类中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">@ConfigurationProperties作用：</span><br><span class="hljs-comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span><br><span class="hljs-comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span><br><span class="hljs-comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>IDEA提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档。找到一个依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>确认以上配置都OK之后，我们去测试类中测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    Person person; <span class="hljs-comment">//将person自动注入进来</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(person); <span class="hljs-comment">//打印person信息</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>yaml配置注入到实体类完全OK！</strong></p></li></ol><h3 id="二、加载指定的配置文件"><a href="#二、加载指定的配置文件" class="headerlink" title="二、加载指定的配置文件"></a>二、加载指定的配置文件</h3><p><strong>@PropertySource</strong>：加载指定的配置文件</p><p><strong>@ConfigurationProperties</strong>：默认从全局配置文件中获取值</p><ol><li><p>我们在resources目录下新建一个<strong>person.properties</strong>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">乔威</span><br></code></pre></td></tr></table></figure></li><li><p>然后在我们的代码中指定加载person.properties文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    ......  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再次测试输出一下：指定配置文件绑定成功</p></li></ol><h3 id="三、配置文件占位符"><a href="#三、配置文件占位符" class="headerlink" title="三、配置文件占位符"></a>三、配置文件占位符</h3><p>配置文件还可以编写占位符生成随机数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang$&#123;random.uuid&#125;</span> <span class="hljs-comment"># 随机uuid</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-string">$&#123;random.int&#125;</span>  <span class="hljs-comment"># 随机int</span><br>    <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">birth:</span> <span class="hljs-number">2000</span><span class="hljs-string">/01/01</span><br>    <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;<br>    <span class="hljs-attr">lists:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">girl</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>    <span class="hljs-attr">dog:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;person.hello:other&#125;_旺财</span><br>      <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="四、回顾properties配置"><a href="#四、回顾properties配置" class="headerlink" title="四、回顾properties配置"></a>四、回顾properties配置</h3><p>我们上面采用的yaml方法都是最简单的方式，开发中最常用的；也是springboot所推荐的！那我们来唠唠其他的实现方式，道理都是相同的；写还是那样写；配置文件除了yml还有我们之前常用的properties ， 我们没有讲，我们来唠唠！</p><p>【注意】properties配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8；</p><p>settings–&gt;FileEncodings 中配置；</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记03-yaml配置注入/utf.png" alt="配置中文编码" style="zoom: 80%;"><p><strong>测试步骤</strong>：</p><ol><li><p>新建一个实体类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编辑配置文件 user.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">user1.name</span>=<span class="hljs-string">乔威</span><br><span class="hljs-meta">user1.age</span>=<span class="hljs-string">18</span><br><span class="hljs-meta">user1.sex</span>=<span class="hljs-string">男</span><br></code></pre></td></tr></table></figure></li><li><p>我们在User类上使用@Value来注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-comment">//直接使用@value</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span> <span class="hljs-comment">//从配置文件中取值</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;#&#123;9*2&#125;&quot;)</span>  <span class="hljs-comment">// #&#123;SPEL&#125; Spring表达式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-meta">@Value(&quot;男&quot;)</span>  <span class="hljs-comment">// 字面量</span><br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpringBoot测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    User user;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(user);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>程序正常输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User(name=乔威, age=<span class="hljs-number">19</span>, sex=男)<br></code></pre></td></tr></table></figure></li></ol><h3 id="五、对比小结"><a href="#五、对比小结" class="headerlink" title="五、对比小结"></a>五、对比小结</h3><p>@Value这个使用起来并不友好，我们要为每个属性单独注解赋值，比较麻烦，来看下面的功能对比表：</p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定</td><td>支持</td><td>不支持</td></tr><tr><td>SPEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><ol><li>@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</li><li>松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</li><li>JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</li><li>复杂类型封装，yml中可以封装对象 ， 使用value就不支持</li></ol><p><strong>结论</strong>：</p><p>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</p><p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</p><p>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记02-运行原理深入浅出</title>
    <link href="/posts/2021/01/07/SpringBoot%E7%AC%94%E8%AE%B002-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    <url>/posts/2021/01/07/SpringBoot%E7%AC%94%E8%AE%B002-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="运行原理深入浅出"><a href="#运行原理深入浅出" class="headerlink" title="运行原理深入浅出"></a>运行原理深入浅出</h1><hr><blockquote><p> 我们之前写的SpringBoot项目，到底是如何运行的呢？既然它是一个Maven项目，我们从<code>pom.xml</code>文件开始探究。</p></blockquote><hr><h2 id="pom文件解析"><a href="#pom文件解析" class="headerlink" title="pom文件解析"></a>pom文件解析</h2><h3 id="一、父依赖"><a href="#一、父依赖" class="headerlink" title="一、父依赖"></a>一、父依赖</h3><p>在pom.xml中，有<parent></parent>标签，表示它是有父项目<code>spring-boot-starter-parent.xml</code>的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们点击该该父项目，进入<code>spring-boot-starter-parent.xml</code>，它主要是管理项目的资源过滤和插件。在它里面，还是依赖于一个父项目<code>spring-boot-dependencies.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里就是真正管理SpringBoot应用中所有依赖版本的文件，是SpringBoot的版本控制中心。</p><p><strong>我们之后导入依赖是默认不需要写版本的，但如果导入的包在没有在版本控制中心管理着就需要手动配置版本。</strong></p><h3 id="二、启动器"><a href="#二、启动器" class="headerlink" title="二、启动器"></a>二、启动器</h3><p>我们这里说的启动器是<code>spring-boot-starter</code>，在pom文件中以依赖形式存在。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--默认的启动器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--web启动器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>spring-boot-starter-xxx</strong>：spring-boot的场景启动器。例如<strong>spring-boot-starter-web</strong>，它帮我们导入了web项目正常运行所依赖的所有包。</p><p>SpringBoot将所有的功能场景都抽取了出来，做成一个个的starter（启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 。我们未来也可以自己自定义 starter。</p><p>具体参考的启动器在官网有说明：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></p><hr><blockquote><p>分析完pom.xml后我们来看看主启动类有什么名堂。</p></blockquote><hr><h2 id="主启动类解析"><a href="#主启动类解析" class="headerlink" title="主启动类解析"></a>主启动类解析</h2><h3 id="一、默认的主启动类"><a href="#一、默认的主启动类" class="headerlink" title="一、默认的主启动类"></a>一、默认的主启动类</h3><p>默认主启动类的内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@SpringBootApplication 来标注一个主程序类</span><br><span class="hljs-comment">//说明这是一个Spring Boot应用</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>     <span class="hljs-comment">//以为是启动了一个方法，没想到启动了一个服务</span><br>      SpringApplication.run(SpringbootApplication.class, args);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是<strong>一个简单的启动类并不简单！</strong>我们来分析一下这些注解都干了什么.</p><h3 id="二、-SpringBootApplication—项目的基石"><a href="#二、-SpringBootApplication—项目的基石" class="headerlink" title="二、@SpringBootApplication—项目的基石"></a>二、@SpringBootApplication—项目的基石</h3><p>@SpringBootApplication的作用是：<strong>标注在某个类上说明这个类为SpringBoot的主启动类</strong>，SpringBoot需要运行这个类的main方法来启动项目。</p><p>进入这个注解，我们观察到下面的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(excludeFilters = &#123;</span><br><span class="hljs-meta">  @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="hljs-meta">  @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br>   ......<br>&#125;<br></code></pre></td></tr></table></figure><p>在其中 <strong>@SpringBootConfiguration，@EnableAutoConfiguration，@ComponentScan</strong>是我们所关心的3个注解，下面是官网上对它们的解释：</p><ul><li><p>@SpringBootConfiguration：允许在 Spring 上下文中注册额外的 bean 或导入其他配置类</p></li><li><p>@EnableAutoConfiguration：启用 SpringBoot 的自动配置机制</p></li><li><p>@ComponentScan： 扫描被@Component (@Service,@Controller)注解的 bean，注解默认会扫描该类所在的包下所有的类。</p></li></ul><p>下面，我们将对这三个注解底层进行详细探究。</p><h3 id="三、-ComponentScan—扫描包下被装配的类"><a href="#三、-ComponentScan—扫描包下被装配的类" class="headerlink" title="三、@ComponentScan—扫描包下被装配的类"></a>三、@ComponentScan—扫描包下被装配的类</h3><p>使用过 spring 框架的小伙伴都知道，spring中有4个注解可以<strong>定义一个 bean</strong> ，分别是<code>@Service</code>，<code>@Repository</code>，<code>@Component</code>，<code>@Controller</code>。而<code>@Component</code>注解就是用来自动扫描被这些注解标识的类，最终<strong>生成 IOC 容器中的 bean</strong>。</p><p>在<code>@Component</code>中，可以通过设置basePackages，includeFilters，excludeFilters属性来<strong>动态确定自动扫描范围</strong>。默认情况下，它扫描上面的所有的类型，并且扫描范围是<code>@Component</code>注解所在配置类（即默认的主启动类）的<strong>同级目录的类即该目录下的所有子目录的类</strong>。</p><p>所以，使用<code>@SpringBootApplication</code>注解，就说明我们使用了<code>@ComponentScan</code>的默认配置，我们建议把使用<code>@SpringBootApplication</code>注解的类放置在 root package下，其他类都放置在 root package的子包里面，这样 bean 就不会被遗漏扫描。</p><h3 id="四、-SpringBootConfiguration—声明配置类"><a href="#四、-SpringBootConfiguration—声明配置类" class="headerlink" title="四、@SpringBootConfiguration—声明配置类"></a>四、@SpringBootConfiguration—声明配置类</h3><p>这个注解的作用和<code>@Configuration</code>的作用基本相同，其实点进<code>@SpringBootConfiguration</code>里面，它也是一个<code>@Configuration</code>，标注在某个类上，表示这是一个SpringBoot的配置类，配置类对应着可以替换Spring的xml配置文件，被注解的类内部包含一个或多个<code>@Bean</code>注解方法，用于构建bean定义以及初始化Spring容器。</p><h3 id="五、-EnableAutoConfiguration—自动装配"><a href="#五、-EnableAutoConfiguration—自动装配" class="headerlink" title="五、@EnableAutoConfiguration—自动装配"></a>五、@EnableAutoConfiguration—自动装配</h3><p>在这里我们一步步的由浅入深点进注解和方法查看它的运行原理，下面的目录仅代表目录结构。</p><h4 id="1-EnableAutoConfiguration：开启自动配置功能"><a href="#1-EnableAutoConfiguration：开启自动配置功能" class="headerlink" title="1. @EnableAutoConfiguration：开启自动配置功能"></a><strong>1. @EnableAutoConfiguration：开启自动配置功能</strong></h4><p>之前我们需要自己配置的东西，而现在SpringBoot可以帮我们自动配置。@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效。点击进入注解继续查看发现有下面的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>1.1 @AutoConfigurationPackage：自动配置包</strong></p></li><li><p><strong>1.2 @Import(AutoConfigurationImportSelector.class)：给容器导入组件</strong></p></li></ul><p>为了不让结构变得更混乱，我们把1.1和1.2提出来当做2和3来分析。</p><h4 id="2-AutoConfigurationPackage：自动配置包"><a href="#2-AutoConfigurationPackage：自动配置包" class="headerlink" title="2. @AutoConfigurationPackage：自动配置包"></a><strong>2. @AutoConfigurationPackage：自动配置包</strong></h4><p>​    </p><p>在这个注解中，我们可以看到这样的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Import(AutoConfigurationPackages.Registrar.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，它导入了AutoConfigurationPackages.Registrar.class，字面意思为自动注册类。而Registrar.class的作用是：<strong>将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器</strong> 。</p><p><strong>我们点进Registrar这个类来看一看</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Registrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportBeanDefinitionRegistrar</span>, <span class="hljs-title">DeterminableImports</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;<br>        register(registry, <span class="hljs-keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">determineImports</span><span class="hljs-params">(AnnotationMetadata metadata)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.singleton(<span class="hljs-keyword">new</span> PackageImports(metadata));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，我们重点看一下<code>registerBeanDefinitions()</code>方法。方法的第二个参数通过<code>new PackageImports(metadata).getPackageNames()</code>的方法来赋值。</p><p>这里我们看一下<code>PackageImports类</code>的构造器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">PackageImports(AnnotationMetadata metadata) &#123;<br>    AnnotationAttributes attributes = AnnotationAttributes<br>        .fromMap(metadata.getAnnotationAttributes(AutoConfigurationPackage.class.getName(), <span class="hljs-keyword">false</span>));<br>    List&lt;String&gt; packageNames = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(attributes.getStringArray(<span class="hljs-string">&quot;basePackages&quot;</span>)));<br>    <span class="hljs-keyword">for</span> (Class&lt;?&gt; basePackageClass : attributes.getClassArray(<span class="hljs-string">&quot;basePackageClasses&quot;</span>)) &#123;<br>        packageNames.add(basePackageClass.getPackage().getName());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (packageNames.isEmpty()) &#123;<br>        packageNames.add(ClassUtils.getPackageName(metadata.getClassName()));<br>    &#125;<br>    <span class="hljs-keyword">this</span>.packageNames = Collections.unmodifiableList(packageNames);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>metadata：实际上是StandardAnnotationMetadata的实例。</p></li><li><p>metadata.getAnnotationAttributes(AutoConfigurationPackage.class.getName(), false)：这个方法获取了标注<code>@AutoConfigurationPackage</code>注解的类的全限定名</p></li><li><p>packageNames.add(basePackageClass.getPackage().getName())：这个方法获取了其所在的包名。</p></li></ul><p>然后，看这个<code>Registrar</code>类中的<code>register()</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(BeanDefinitionRegistry registry, String... packageNames)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (registry.containsBeanDefinition(BEAN)) &#123;<br>        BasePackagesBeanDefinition beanDefinition = (BasePackagesBeanDefinition) registry.getBeanDefinition(BEAN);<br>        beanDefinition.addBasePackages(packageNames);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        registry.registerBeanDefinition(BEAN, <span class="hljs-keyword">new</span> BasePackagesBeanDefinition(packageNames));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，我们走else的逻辑，其实就是构建了一个实例，进行注册。</p><h4 id="3-Import-AutoConfigurationImportSelector-class-：给容器导入组件"><a href="#3-Import-AutoConfigurationImportSelector-class-：给容器导入组件" class="headerlink" title="3. @Import(AutoConfigurationImportSelector.class)：给容器导入组件"></a>3. @Import(AutoConfigurationImportSelector.class)：给容器导入组件</h4><p>我们首先看这里的<code>AutoConfigurationImportSelector </code>，它是一个自动配置导入选择器，那么它会导入哪些组件的选择器呢？</p><p><strong>我们点进AutoConfigurationImportSelector这个类看一看</strong>：</p><ol><li><p>类中有这样的一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;<br>    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),<br>                                                                         getBeanClassLoader());<br>    Assert.notEmpty(configurations, <span class="hljs-string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br>                    + <span class="hljs-string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);<br>    <span class="hljs-keyword">return</span> configurations;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>这里的<code>getSpringFactoriesLoaderFactoryClass</code>方法，返回的就是我们最开始看到启动类自动导入配置的注解类：<code>EnableAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;<br>    <span class="hljs-keyword">return</span> EnableAutoConfiguration.class;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>   这个方法还调用了<code>SpringFactoriesLoader</code>类的静态方法，我们进入SpringFactoriesLoader类loadFactoryNames() 方法。</p><ol start="2"><li><p><strong>loadFactoryNames方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">loadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryType, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;<br>    ClassLoader classLoaderToUse = classLoader;<br>    <span class="hljs-keyword">if</span> (classLoaderToUse == <span class="hljs-keyword">null</span>) &#123;<br>        classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();<br>    &#125;<br>    String factoryTypeName = factoryType.getName();<br>    <span class="hljs-keyword">return</span> loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>​        在这里，此方法调用了又调用了<code>loadSpringFactories</code>方法，我们依旧继续点击查看。</p><ol start="3"><li><p><strong>loadSpringFactories方法内容如下</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(ClassLoader classLoader) &#123;<br>    Map&lt;String, List&lt;String&gt;&gt; result = cache.get(classLoader);<br>    <span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    result = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">try</span> &#123;<br>        Enumeration&lt;URL&gt; urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);<br>        <span class="hljs-keyword">while</span> (urls.hasMoreElements()) &#123;<br>            URL url = urls.nextElement();<br>            UrlResource resource = <span class="hljs-keyword">new</span> UrlResource(url);<br>            Properties properties = PropertiesLoaderUtils.loadProperties(resource);<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;<br>                String factoryTypeName = ((String) entry.getKey()).trim();<br>                String[] factoryImplementationNames =<br>                    StringUtils.commaDelimitedListToStringArray((String) entry.getValue());<br>                <span class="hljs-keyword">for</span> (String factoryImplementationName : factoryImplementationNames) &#123;<br>                    result.computeIfAbsent(factoryTypeName, key -&gt; <span class="hljs-keyword">new</span> ArrayList&lt;&gt;())<br>                        .add(factoryImplementationName.trim());<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Replace all lists with unmodifiable lists containing unique elements</span><br>        result.replaceAll((factoryType, implementations) -&gt; implementations.stream().distinct()<br>                          .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList)));<br>        cache.put(classLoader, result);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Unable to load factories from location [&quot;</span> +<br>                                           FACTORIES_RESOURCE_LOCATION + <span class="hljs-string">&quot;]&quot;</span>, ex);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在try语句块内，<code>classLoader.getResources(FACTORIES_RESOURCE_LOCATION)</code>首选是获取了一个资源名为：<code>FACTORIES_RESOURCE_LOCATION</code>的文件。而后将读取到的资源进行遍历，封装成一个Properties文件供我们使用。</li></ol><p>​        <strong>点击这个<code>FACTORIES_RESOURCE_LOCATION</code>，我们查到了它的文件名：spring.factories</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>;<br></code></pre></td></tr></table></figure></li></ol><p>   我们全局搜索这个<strong>spring.factories</strong>，找到了它的源头在一个jar包下，我们打开它。看到了很多自动配置的文件；这就是自动配置根源所在！</p><p>   <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B002-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/spring_factories.png" alt="spring.factories文件"></p><h4 id="4-结论"><a href="#4-结论" class="headerlink" title="4.结论"></a>4.结论</h4><ol><li>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li><li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</li><li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</li><li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；</li><li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</li></ol><hr><blockquote><p>下面，我们探究一下主启动类是如何运行的</p></blockquote><hr><h2 id="主启动类运行解析"><a href="#主启动类运行解析" class="headerlink" title="主启动类运行解析"></a>主启动类运行解析</h2><p><code>SpringApplication</code>类用于引导和启动一个Spring应用程序（即SpringBoot开发的应用）。通常用SpringBoot开发一个应用时，在主类的main函数中可以通过如下代码启动一个Spring应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 标注这个类是一个springboot的应用</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Springboot01HelloworldApplication</span> </span>&#123;<br>    <span class="hljs-comment">// 将springboot应用启动</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Springboot01HelloworldApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringApplication的静态方法<code>run(Class&lt;?&gt; primarySource, String... args)</code>的第一个参数接受一个Spring容器配置类，第二个参数是命令行参数。将命令行参数转发给SpringApplication类，就可以在用java命令启动应用时，通过命令行参数对Spring应用做一些配置。</p><p>在SpringApplication.run方法中，分析分为两部分，一部分是SpringApplication的实例化，另一部分是run方法的执行。</p><h3 id="一、构建SpringApplication实例"><a href="#一、构建SpringApplication实例" class="headerlink" title="一、构建SpringApplication实例"></a>一、构建SpringApplication实例</h3><p>下面是SpringApplication类静态run方法的源码。可以看到，当我们调用这个静态run方法时，实际上会<strong>构造一个SpringApplication实例</strong>，然后再调用该实例的run方法完成项目的启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title">run</span><span class="hljs-params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> run(<span class="hljs-keyword">new</span> Class[]&#123;primarySource&#125;, args);<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是SpringApplication的构造函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.sources = <span class="hljs-keyword">new</span> LinkedHashSet();<br>    <span class="hljs-keyword">this</span>.bannerMode = Mode.CONSOLE;<br>    <span class="hljs-keyword">this</span>.logStartupInfo = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">this</span>.addCommandLineProperties = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">this</span>.addConversionService = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">this</span>.headless = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">this</span>.registerShutdownHook = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">this</span>.additionalProfiles = Collections.emptySet();<br>    <span class="hljs-keyword">this</span>.isCustomEnvironment = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">this</span>.lazyInitialization = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">this</span>.applicationContextFactory = ApplicationContextFactory.DEFAULT;<br>    <span class="hljs-keyword">this</span>.applicationStartup = ApplicationStartup.DEFAULT;<br>    <span class="hljs-keyword">this</span>.resourceLoader = resourceLoader;<br>    Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br>    <span class="hljs-keyword">this</span>.primarySources = <span class="hljs-keyword">new</span> LinkedHashSet(Arrays.asList(primarySources));<br>    <span class="hljs-keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>    <span class="hljs-keyword">this</span>.bootstrappers = <span class="hljs-keyword">new</span> ArrayList(<span class="hljs-keyword">this</span>.getSpringFactoriesInstances(Bootstrapper.class));<br>    <span class="hljs-keyword">this</span>.setInitializers(<span class="hljs-keyword">this</span>.getSpringFactoriesInstances(ApplicationContextInitializer.class));<br>    <span class="hljs-keyword">this</span>.setListeners(<span class="hljs-keyword">this</span>.getSpringFactoriesInstances(ApplicationListener.class));<br>    <span class="hljs-keyword">this</span>.mainApplicationClass = <span class="hljs-keyword">this</span>.deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure><p>它主要完成下面的初始化工作：</p><ul><li><p>初始化Spring容器的配置类<strong>primarySources</strong></p></li><li><p><strong>推断应用程序的类型</strong>（webApplicationType），进而根据应用程序的类型创建恰当的ApplicationContext</p></li><li><p>初始化指定的<strong>ApplicaitonContextInitializer</strong>列表</p></li><li><p>初始化所有<strong>可用程序的监听器（ApplicationListener）</strong>列表</p></li><li><p>推断并设置 main 方法的定义类</p></li></ul><p>下面，我们对这些初始化过程进行一一说明。</p><ol><li><p><strong>spring容器配置</strong></p><p>SpringApplication能够从各种不同的配置源读取 bean 的定义。SpringBoot 建议采用 Java 注解配置的方式<strong>提供一个全局唯一的配置类</strong>。但是，我们可以同时使用多种不同的配置源。如果是Java注解的配置方式，会使用<code>AnnotatedBeanDefinitionReader</code>加载配置（通过全类名）。如果是 XML 的配置方式，则会使用 <code>XmlBeanDefinitionReader</code>加载配置（通过 XML 文件地址）。</p></li></ol><ol start="2"><li><p><strong>推断应用程序类型</strong></p><p>SpringApplication默认的应用类型有三种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">WebApplicationType</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    非web类应用，无需内嵌web server</span><br><span class="hljs-comment">    */</span><br>    NONE,<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    servlet类型的web应用，需要启动内嵌的web server</span><br><span class="hljs-comment">    */</span><br>    SERVLET,<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    reactive类型的web应用，需要启动内嵌的reactive web server</span><br><span class="hljs-comment">    */</span><br>    REACTIVE;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>判断的逻辑也比较简单，就是检查 classpath 下是否存在对应的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> WebApplicationType <span class="hljs-title">deduceFromClasspath</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (ClassUtils.isPresent(<span class="hljs-string">&quot;org.springframework.web.reactive.DispatcherHandler&quot;</span>, (ClassLoader)<span class="hljs-keyword">null</span>) &amp;&amp; !ClassUtils.isPresent(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span>, (ClassLoader)<span class="hljs-keyword">null</span>) &amp;&amp; !ClassUtils.isPresent(<span class="hljs-string">&quot;org.glassfish.jersey.servlet.ServletContainer&quot;</span>, (ClassLoader)<span class="hljs-keyword">null</span>)) &#123;<br>        <span class="hljs-keyword">return</span> REACTIVE;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        String[] var0 = SERVLET_INDICATOR_CLASSES;<br>        <span class="hljs-keyword">int</span> var1 = var0.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var2 = <span class="hljs-number">0</span>; var2 &lt; var1; ++var2) &#123;<br>            String className = var0[var2];<br>            <span class="hljs-keyword">if</span> (!ClassUtils.isPresent(className, (ClassLoader)<span class="hljs-keyword">null</span>)) &#123;<br>                <span class="hljs-keyword">return</span> NONE;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> SERVLET;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果 classpath 下存在<code>org.springframework.web.reactive.DispatcherHandler</code>类，则应用类型是REACTIVE</li><li>如果 classpath 下存在<code>org.springframework.web.servlet.DispatcherServlet</code>类，则应用类型是SERVLET</li><li>如果上面两个 DispatcherServlet 类都不存在，则应用类型是NONE</li></ul></li></ol><p>   应用类型直接决定了要创建的 ApplicationContext 类型，下表整理了三种应用类型和所创建的 ApplicationContext 类型之间的对应关系。</p><table><thead><tr><th>应用类型</th><th>ApplicationContext类型</th></tr></thead><tbody><tr><td>NONE</td><td>AnnotationConfigApplicationContext</td></tr><tr><td>SERVLET</td><td>AnnotationConfigServletWebServerApplicationContext</td></tr><tr><td>REACTIVE</td><td>AnnotationConfigReactiveWebServerApplicationContext</td></tr></tbody></table><ol start="3"><li><p><strong>初始化 ApplicationContextInitializer &amp; ApplicationListener</strong></p><p>初始化 ApplicaitonContextInitializer 和 ApplicationListener 的过程比较相似，都是借助于 SpringFactoriesLoader 的方式完成初始化的，所以放到一起分析。</p><p>SpringFactoriesLoader 会 读取 META-INF/spring.factories 文件中的配置。一个工程项目中可以同时有多个 META-INF/spring.factories 文件。</p><p>例如，在 <code>spring-boot-autoconfigure</code>jar 包的 META-INF/spring.factories 文件中，有针对 <code>ApplicationContextInitializer</code> 和 <code>ApplicationListeners</code>的配置。</p><ul><li><p><strong>针对ApplicationContextInitializer 的配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"># Initializers<br>org.springframework.context.ApplicationContextInitializer=\<br>org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\<br>org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener<br></code></pre></td></tr></table></figure></li><li><p><strong>针对于ApplicationListener的配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"># Application Listeners<br>org.springframework.context.ApplicationListener=\<br>org.springframework.boot.ClearCachesApplicationListener,\<br>org.springframework.boot.builder.ParentContextCloserApplicationListener,\<br>org.springframework.boot.context.FileEncodingApplicationListener,\<br>org.springframework.boot.context.config.AnsiOutputApplicationListener,\<br>org.springframework.boot.context.config.DelegatingApplicationListener,\<br>org.springframework.boot.context.logging.LoggingApplicationListener,\<br>org.springframework.boot.env.EnvironmentPostProcessorApplicationListener,\<br>org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener<br></code></pre></td></tr></table></figure></li></ul></li></ol><ol start="4"><li><p><strong>推断主类</strong></p><p>推断主类过程的实现方式很巧妙，通过<strong>遍历异常堆栈</strong>找到方法名为main的类，将其作为主启动类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        StackTraceElement[] stackTrace = (<span class="hljs-keyword">new</span> RuntimeException()).getStackTrace();<br>        StackTraceElement[] var2 = stackTrace;<br>        <span class="hljs-keyword">int</span> var3 = stackTrace.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var4 = <span class="hljs-number">0</span>; var4 &lt; var3; ++var4) &#123;<br>            StackTraceElement stackTraceElement = var2[var4];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;main&quot;</span>.equals(stackTraceElement.getMethodName())) &#123;<br>                <span class="hljs-keyword">return</span> Class.forName(stackTraceElement.getClassName());<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var6) &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="二、run方法运行阶段"><a href="#二、run方法运行阶段" class="headerlink" title="二、run方法运行阶段"></a>二、run方法运行阶段</h3><p>在完成对<code>SpringApplication</code>对象的构建和实例化后，就开始执行 run 方法了。具体代码如下所示，下面将探究其执行过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title">run</span><span class="hljs-params">(String... args)</span> </span>&#123;<br>    StopWatch stopWatch = <span class="hljs-keyword">new</span> StopWatch();<br>    stopWatch.start();<br>    DefaultBootstrapContext bootstrapContext = createBootstrapContext();<br>    ConfigurableApplicationContext context = <span class="hljs-keyword">null</span>;<br>    configureHeadlessProperty();<br>    SpringApplicationRunListeners listeners = getRunListeners(args);<br>    listeners.starting(bootstrapContext, <span class="hljs-keyword">this</span>.mainApplicationClass);<br>    <span class="hljs-keyword">try</span> &#123;<br>        ApplicationArguments applicationArguments = <span class="hljs-keyword">new</span> DefaultApplicationArguments(args);<br>        ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>        configureIgnoreBeanInfo(environment);<br>        Banner printedBanner = printBanner(environment);<br>        context = createApplicationContext();<br>        context.setApplicationStartup(<span class="hljs-keyword">this</span>.applicationStartup);<br>        prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br>        refreshContext(context);<br>        afterRefresh(context, applicationArguments);<br>        stopWatch.stop();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logStartupInfo) &#123;<br>            <span class="hljs-keyword">new</span> StartupInfoLogger(<span class="hljs-keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);<br>        &#125;<br>        listeners.started(context);<br>        callRunners(context, applicationArguments);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        handleRunFailure(context, ex, listeners);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(ex);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        listeners.running(context);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        handleRunFailure(context, ex, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(ex);<br>    &#125;<br>    <span class="hljs-keyword">return</span> context;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>第一准备阶段</p></blockquote><ul><li><p>方法执行伊始，会<strong>先创建和启动一个 <code>StopWatch</code> 对象</strong>，作为计时器。该对象用于统计应用的启动时间。下图中的启动事件日志就是根据 <code>StopWatch</code>对象统计的数据打印的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">StopWatch stopWatch = <span class="hljs-keyword">new</span> StopWatch();<br>stopWatch.start();<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记02-运行原理深入浅出/stop_watch.png" alt="应用启动时间" style="zoom:50%;"></li><li><p>接着，仍然是通过<code>SpringFactoriesLoader</code>的机制<strong>加载所有的<code>SpringApplicationRunListener</code>监听器</strong>。从名字就可以看出，<code>SpringApplicationRunListener</code> 的作用就是监听 SpringApplication.run 方法的各个执行阶段，也可以理解成 <code>SpringApplication</code> 运行的生命周期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SpringApplicationRunListeners listeners = getRunListeners(args);<br></code></pre></td></tr></table></figure></li><li><p>紧接着，<strong>启动已经准备好的监听器</strong>，准备启动应用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">listeners.starting(bootstrapContext, <span class="hljs-keyword">this</span>.mainApplicationClass);<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>第二运行阶段</p></blockquote><ul><li><p>启动应用后，根据<code>ApplicationType类型</code>，<strong>创建并配置<code>SpringApplication</code>需要的环境参数</strong><code>Environment</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationArguments applicationArguments = <span class="hljs-keyword">new</span> DefaultApplicationArguments(args);<br>ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>configureIgnoreBeanInfo(environment);<br></code></pre></td></tr></table></figure></li><li><p>接下来，<strong>打印banner图案</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Banner printedBanner = printBanner(environment);<br></code></pre></td></tr></table></figure></li><li><p>下面，根据初始化时推断的<code>ApplicationType</code>结果，<strong>创建对应类型的<code>AoolicationContext</code>上下文</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">context = createApplicationContext();<br>context.setApplicationStartup(<span class="hljs-keyword">this</span>.applicationStartup);<br></code></pre></td></tr></table></figure></li><li><p>创建好Spring应用上下文后，就进入<strong>准备Spring应用上下文阶段</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepareContext</span><span class="hljs-params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,</span></span><br><span class="hljs-function"><span class="hljs-params">                            ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span><br><span class="hljs-function"><span class="hljs-params">                            ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;<br>    context.setEnvironment(environment);<br>    postProcessApplicationContext(context);<br>    applyInitializers(context);<br>    listeners.contextPrepared(context);<br>    bootstrapContext.close(context);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logStartupInfo) &#123;<br>        logStartupInfo(context.getParent() == <span class="hljs-keyword">null</span>);<br>        logStartupProfileInfo(context);<br>    &#125;<br>    <span class="hljs-comment">// Add boot specific singleton beans</span><br>    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();<br>    beanFactory.registerSingleton(<span class="hljs-string">&quot;springApplicationArguments&quot;</span>, applicationArguments);<br>    <span class="hljs-keyword">if</span> (printedBanner != <span class="hljs-keyword">null</span>) &#123;<br>        beanFactory.registerSingleton(<span class="hljs-string">&quot;springBootBanner&quot;</span>, printedBanner);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> DefaultListableBeanFactory) &#123;<br>        ((DefaultListableBeanFactory) beanFactory)<br>        .setAllowBeanDefinitionOverriding(<span class="hljs-keyword">this</span>.allowBeanDefinitionOverriding);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.lazyInitialization) &#123;<br>        context.addBeanFactoryPostProcessor(<span class="hljs-keyword">new</span> LazyInitializationBeanFactoryPostProcessor());<br>    &#125;<br>    <span class="hljs-comment">// Load the sources</span><br>    Set&lt;Object&gt; sources = getAllSources();<br>    Assert.notEmpty(sources, <span class="hljs-string">&quot;Sources must not be empty&quot;</span>);<br>    load(context, sources.toArray(<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]));<br>    listeners.contextLoaded(context);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>  在这个方法中，我们看看做了哪些操作：</p><ul><li><p>设置spring应用上下文的environment</p></li><li><p>Spring应用上下文后置处理</p></li><li><p>提供类型转换器</p></li><li><p>执行Spring的初始化器 ApplicationContextInitializer </p></li><li><p>触发ApplicationContextInitializedEvent事件</p></li><li><p>注册单例Bean实例</p></li><li><p>加载Spring应用上下文的配置源到BeanDefinitionMap</p></li><li><p>触发ApplicationEvent事件，最后执行 SpringApplicationRunListeners 的 contextLoaded 阶段方法，表示 ApplicationContext 完成加载但还未启动，同时向 Spring Boot 监听器发布 ApplicationPreparedEvent 事件 </p></li></ul><ul><li><p><strong>刷新Spring应用上下文</strong>，这一阶段，做了这三件事：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">refreshContext(context);<br></code></pre></td></tr></table></figure><ul><li>bean工厂加载</li><li>通过工厂shengcahnbean</li><li>刷新生命周期</li></ul></li><li><p>然后，<strong>进行上下文后置结束处理<code>afterRefresh</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">afterRefresh(context, applicationArguments);<br></code></pre></td></tr></table></figure></li><li><p>然后<strong>发布应用，通知所有监听器进行工作。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logStartupInfo) &#123;<br>    <span class="hljs-keyword">new</span> StartupInfoLogger(<span class="hljs-keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);<br>&#125;<br>listeners.started(context);<br></code></pre></td></tr></table></figure></li><li><p>检查当前的Spring容器中是否有<code>ApplicationRunner</code> 和 <code>CommandLineRunner</code>类型的bean，如果有的话就遍历执行它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">callRunners(context, applicationArguments);<br></code></pre></td></tr></table></figure></li><li><p>最后，<strong>启动监听</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">listeners.running(context);<br></code></pre></td></tr></table></figure></li></ul><p>至此，整个run方法执行结束，Spring应用也完成了整个启动流程。</p><p>下面是一张流程图，仅供参考：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B002-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/run.png" alt="run方法流程图"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记01-遇见SpringBoot</title>
    <link href="/posts/2021/01/06/SpringBoot%E7%AC%94%E8%AE%B001-%E9%81%87%E8%A7%81SpringBoot/"/>
    <url>/posts/2021/01/06/SpringBoot%E7%AC%94%E8%AE%B001-%E9%81%87%E8%A7%81SpringBoot/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2><h3 id="一、回顾什么是Spring"><a href="#一、回顾什么是Spring" class="headerlink" title="一、回顾什么是Spring"></a>一、回顾什么是Spring</h3><p>Spring是一个开源框架，2003年兴起的一个<mark>轻量级</mark>的Java开发框架，作者是 <strong>Rod Johnson</strong>。</p><p><strong>Spring是为了解决企业级应用开发的复杂性而创建的，目的是简化开发</strong>。</p><h3 id="二、Spring是如何简化Java开发的"><a href="#二、Spring是如何简化Java开发的" class="headerlink" title="二、Spring是如何简化Java开发的"></a>二、Spring是如何简化Java开发的</h3><p>为了降低 Java开发的复杂性，Spring采用了以下4种关键策略：</p><ul><li>基于POJO（Plain Ordinary Java Object）的<strong>轻量级</strong>和<strong>最小侵入式</strong>编程，所有东西都是Bean</li><li>通过<strong>IOC</strong>（Inversion Of Control—控制反转），<strong>依赖注入</strong>（DI）和<strong>面向接口</strong>实现低耦合</li><li>基于<strong>切面</strong>（AOP——Aspect Oriented Programming）和<strong>惯例</strong>进行<strong>声明式编程</strong></li><li>通过切面和模板减少样式代码，如RedisTemplate，xxxTemplate</li></ul><h3 id="三、什么是SpringBoot"><a href="#三、什么是SpringBoot" class="headerlink" title="三、什么是SpringBoot"></a>三、什么是SpringBoot</h3><p>SpringBoot，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置，  you can “just run”，能<strong>迅速的开发web应用</strong>，几行代码开发一个http<strong>接口</strong>。</p><p>所有的技术框架的发展似乎都遵循了一条主线规律：从一个<strong>复杂应用场景</strong> 衍生 一种<strong>规范框架</strong>，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些<strong>轻量级的框架</strong>；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“<strong>约定大于配置</strong>”，进而衍生出一些一站式的解决方案。</p><p>这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</p><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的<strong>开箱即用</strong>。</p><p>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot 已经当之无愧成为 Java 领域最热门的技术。</p><p><strong>SpringBoot的主要优点</strong>：</p><ul><li>为所有Spring开发者更快的入门</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li><li><strong>内嵌式容器</strong>简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><h2 id="微服务简介"><a href="#微服务简介" class="headerlink" title="微服务简介"></a>微服务简介</h2><h3 id="一、什么是微服务？"><a href="#一、什么是微服务？" class="headerlink" title="一、什么是微服务？"></a>一、什么是微服务？</h3><p>微服务是一种<strong>架构风格</strong>，它要求我们在开发一个应用的时候，这个应用必须构建成<strong>一系列小服务的组合</strong>；可以通过http的方式进行互通。要说<strong>微服务架构</strong>，先得聊聊过去开发使用的<strong>单体应用架构</strong>。</p><h3 id="二、单体应用架构"><a href="#二、单体应用架构" class="headerlink" title="二、单体应用架构"></a>二、单体应用架构</h3><p>所谓单体应用架构（All In One）是指，我们将<strong>所有应用服务都封装在一个应用中</strong>。</p><p>无论是ERP（Enterprise Resource Planning——企业资源管理）、CRM（Customer Relationship Management——客户关系管理）或者其他的系统，我们把数据库访问、web访问等各个功能放到一个war包内。</p><p><strong>单体应用架构的好处</strong>：</p><ul><li>易于开发和测试，部署简单方便</li><li>当需要扩展时，只需将war包复制多份，然后放在多个服务器上，再做负载均衡即可。</li></ul><p><strong>单体应用架构的缺点</strong>：</p><ul><li><p>哪怕需要修改很小的地方，都需要关停服务，重新打包并部署。</p></li><li><p>对于大型应用，不可能把所有内容都放在一个应用里，这样维护、分工与合作都是问题</p></li></ul><h3 id="三、微服务架构"><a href="#三、微服务架构" class="headerlink" title="三、微服务架构"></a>三、微服务架构</h3><p>在单体应用架构的方式，我们把所有的功能单元放在一个应用里面，然后我们把整个应用部署到服务器上。如果负载能力不行，我们将整个应用进行<strong>水平复制</strong>，进行扩展，然后再负载均衡。</p><p>所谓微服务架构，就是打破单体应用架构方式，<strong>把每个功能元素独立出来</strong>。再把独立出来的功能元素进行<strong>动态组合</strong>，需要的功能元素才拿来组合，需要多一些时间可以整合多个功能元素。所以微服务架构是对功能元素进行复制，而不是对整个应用进行复制。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记01-遇见SpringBoot/micro_service.png" alt="微服务架构图解" style="zoom:100%;"><p><strong>微服务架构的优点</strong>：</p><ul><li>节省了调用资源</li><li>每个功能元素的服务都是一个可替换的、可独立升级的软件代码</li></ul><ul><li>原文地址：<a href="http://martinfowler.com/articles/microservices.html">http://martinfowler.com/articles/microservices.html</a></li><li>翻译：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></li></ul><h3 id="四、如何构建微服务"><a href="#四、如何构建微服务" class="headerlink" title="四、如何构建微服务"></a>四、如何构建微服务</h3><p>一个大型系统的微服务架构，就像一个复杂交织的神经网络，每一个神经元就是一个功能元素，它们各自完成自己的功能，然后通过 http 相互请求调用。比如一个电商系统，查缓存、连数据库。浏览页面、结账、支付等服务都是一个个独立的功能服务，都被微化了，它们作为一个个微服务共同构建了一个庞大的系统。如果修改其中的一个功能，只需要更新升级其中一个功能服务单元即可。</p><p>但是，这种庞大的系统架构给部署和运维带来很大的难度。于是，Spring为我们带来了构建大型分布式微服务的全套、全称产品：</p><ul><li><span style="color:darkblue">构建一个个功能独立的微服务应用单元，可以使用SpringBoot，快速构建应用</span></li><li><span style="color:darkblue">大型分布式网络服务的调用，由SpringCloud来完成，实现分布式</span></li><li><span style="color:darkblue">在分布式中间，进行流式数据计算、批处理，我们用到Spring Cloud Data Flow</span></li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot%E7%AC%94%E8%AE%B001-%E9%81%87%E8%A7%81SpringBoot/spring_product.jpg" alt="微服务全套产品"></p><h2 id="SpringBoot快速开始"><a href="#SpringBoot快速开始" class="headerlink" title="SpringBoot快速开始"></a>SpringBoot快速开始</h2><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p>我们将学习如何快速的<strong>搭建一个Spring Boot应用</strong>，并且实<strong>现一个简单的Http请求</strong>。通过这个例子对Spring Boot有一个初步的了解，并体验其<strong>结构简单、开发快速</strong>的特性。</p><p><strong>环境准备</strong>：</p><ul><li>java version：”1.8.0.252”</li><li>Maven：apache-maven-3.6.3</li><li>SpringBoot 2.x 最新版</li></ul><p><strong>开发工具</strong>：</p><ul><li>IDEA</li></ul><h3 id="二、创建基础项目说明"><a href="#二、创建基础项目说明" class="headerlink" title="二、创建基础项目说明"></a>二、创建基础项目说明</h3><p>Spring官方提供了非常方便的工具让我们快速构建应用</p><p>Spring Initializr： <a href="http://start.spring.io/">http://start.spring.io/</a></p><p><strong>项目创建方式一</strong>：使用Spring Initalizr 的 Web 页面创建项目</p><ol><li><p>打开 <a href="http://start.spring.io/">http://start.spring.io/</a></p></li><li><p>填写项目信息</p></li><li><p>点击“Generate”按钮生成项目；下载此项目</p></li><li><p>解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p></li><li><p>如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪</p></li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记01-遇见SpringBoot/spring_initializr.png" alt="创建SpringBoot项目" style="zoom:80%;"><p><strong>项目创建方式二：</strong>使用 IDEA 直接创建项目</p><ol><li>创建一个新项目</li><li>选择 spring initializr， 可以看到默认就是通过官网快速构建工具实现</li><li>填写项目信息</li><li>选择初始化的组件（初学勾选Web即可）</li><li>填写项目路径</li><li>等待项目构建成功</li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记01-遇见SpringBoot/idea_spring_initializr.png" alt="idea构建SpringBoot项目" style="zoom:80%;"><p><strong>项目结构分析</strong>：通过上面步骤完成基础项目的创建，会自动生成以下文件。</p><ol><li>程序的主启动类 xxxApplication（主程序的入口）</li><li>一个 application.properties 配置文件（核心配置文件）</li><li>一个测试类 xxxApplicationTests</li><li>一个pom.xml文件</li></ol><h3 id="三、pom-xml分析"><a href="#三、pom-xml分析" class="headerlink" title="三、pom.xml分析"></a>三、pom.xml分析</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--父依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hellowrorld<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hellowrorld<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--web依赖：tomcat，dispatcherServlet，xml--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--spring-boot-starter所有的springboot依赖都是使用这个开头的--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--单元测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--打jar包插件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="四、编写一个http接口"><a href="#四、编写一个http接口" class="headerlink" title="四、编写一个http接口"></a>四、编写一个http接口</h3><ol><li><p>在主程序的同级目录下，新建一个controller包，一定要在<strong>同级目录</strong>下，否则识别不到。</p></li><li><p>在包中新建一个HelloController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-comment">// 接口：http://localhost:8080/hello</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,world&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写完毕后，从主程序启动项目，浏览器发起请求，查看页面输出。</p></li></ol>   <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记01-遇见SpringBoot/hello_world.png" alt="页面输出" style="zoom: 67%;"><ol start="4"><li>简单几步，就完成了一个web接口的开发，SpringBoot就是这么简单。所以我们常用它来建立我们的微服务项目.</li></ol><h3 id="五、将项目打成jar包运行"><a href="#五、将项目打成jar包运行" class="headerlink" title="五、将项目打成jar包运行"></a>五、将项目打成jar包运行</h3><p>在maven侧边工具栏中点击package，进行打包。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记01-遇见SpringBoot/package.png" alt="项目打包" style="zoom:75%;"><p>打包完后，我们在左侧<code>target</code>目录下就会得到一个jar包。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记01-遇见SpringBoot/package_jar.png" alt="target目录下的jar包" style="zoom: 80%;"><p>找到该jar包所在的文件夹，并在该文件夹下打开命令行，启动服务。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记01-遇见SpringBoot/jar_start.png" alt="在jar包启动服务" style="zoom:75%;"><h3 id="六、更改项目运行端口号"><a href="#六、更改项目运行端口号" class="headerlink" title="六、更改项目运行端口号"></a>六、更改项目运行端口号</h3><p>在<code>resources</code>目录下的<code>application.properties</code>中写入：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081</span><br></code></pre></td></tr></table></figure><p>然后重启项目即可。</p><h3 id="七、更改SpringBoot启动Bnner"><a href="#七、更改SpringBoot启动Bnner" class="headerlink" title="七、更改SpringBoot启动Bnner"></a>七、更改SpringBoot启动Bnner</h3><p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案；</p><p>只需一步：到项目下的 resources 目录下新建一个banner.txt 即可。</p><p>图案可以到：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> 这个网站生成，然后拷贝到文件中即可！</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringBoot笔记01-遇见SpringBoot/springboot_banner.png" alt="更改Banner" style="zoom:50%;">]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习笔记</title>
    <link href="/posts/2021/01/04/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/posts/2021/01/04/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h2><h3 id="1-1-什么是MVC"><a href="#1-1-什么是MVC" class="headerlink" title="1.1 什么是MVC"></a>1.1 什么是MVC</h3><ul><li>MVC是模型（Model）、视图（View）、控制器（Controller）的简写，是一种软件设计规范。</li><li>MVC是使用将<strong>业务逻辑</strong>、<strong>数据</strong>、<strong>显示</strong>分离的方法来组织代码。</li><li>MVC的主要作用是<strong>降低了视图与业务逻辑间的双向耦合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC也存在着差异。</li></ul><p><strong>Model（模型）</strong>：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开： Value Object（数据Dao）和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）</strong>：负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）</strong>：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个<strong>调度员</strong>的工作。</p><p><strong>最典型的MVC就是JSP + Servlet + JavaBean的模式，其架构如下图所示</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC学习笔记/mvc_structure.png" alt="mvc架构" style="zoom: 80%;"><h3 id="1-2-Mdoel1时代"><a href="#1-2-Mdoel1时代" class="headerlink" title="1.2 Mdoel1时代"></a>1.2 Mdoel1时代</h3><ul><li>在web早期的开发中，通常采用的都是Model1。</li><li>Model1中，主要分为两层，视图层和模型层。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/model1.png" alt="model两层架构"></p><p>Model1优点：架构简单，比较适合小型项目开发。</p><p>Model1缺点：JSP职责不单一，职责过重，不便于维护。</p><h3 id="1-3-Model2时代"><a href="#1-3-Model2时代" class="headerlink" title="1.3 Model2时代"></a>1.3 Model2时代</h3><p>Model2把一个项目分成三个部分，包括<strong>视图</strong>、<strong>控制</strong>、<strong>模型</strong>，其架构如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC学习笔记/model2.png" alt="model2架构" style="zoom: 60%;"><p><strong>执行流程</strong>：</p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析</strong>：</p><ul><li><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol></li><li><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol></li><li><p><strong>Controller：控制器</strong></p><ol><li><p>取得表单数据</p></li><li><p>调用业务逻辑</p></li><li><p>转向指定的页面</p></li></ol></li></ul><p>Model2这样不仅提高的代码的<strong>复用率</strong>与项目的<strong>扩展性</strong>，且大大降低了项目的<strong>维护成本</strong>。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-4-回顾Servlet"><a href="#1-4-回顾Servlet" class="headerlink" title="1.4 回顾Servlet"></a>1.4 回顾Servlet</h3><ol><li><p>新建一个Maven工程当做父工程，导入pom依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>建立一个module：springmvc-01-servlet，添加Web app的支持。</p></li><li><p>导入 servlet 和 jsp 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个Servlet类，用来处理用户的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现Servlet接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>       <span class="hljs-comment">// 1.获取前端参数</span><br>        String method = req.getParameter(<span class="hljs-string">&quot;method&quot;</span>);<br>        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;add&quot;</span>))&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了add方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;delete&quot;</span>))&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了delete方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 调用业务层</span><br>        <span class="hljs-comment">// 视图转发或者重定向</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;test.jsp&quot;</span>).forward(req,resp);<br>  &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>       doGet(req,resp);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新建编写test.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>    $&#123;msg&#125;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>在web.xml中注册Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat，并启动测试</p><ul><li>localhost:8080/hello?method=add</li><li>localhost:8080/hello?method=delete</li></ul></li></ol><h3 id="1-5-MVC框架要做哪些事情"><a href="#1-5-MVC框架要做哪些事情" class="headerlink" title="1.5 MVC框架要做哪些事情"></a>1.5 MVC框架要做哪些事情</h3><ol><li>将url映射到java类或java类的方法</li><li>封装用户提交的数据</li><li>处理请求-调用相关的业务处理-封装响应数据</li><li>将相应的数据进行渲染、jsp/html等表示层数据</li></ol><p><strong>说明：</strong></p><p> 常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等…</p><h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springmvc_logo.png" alt="springmvc_logo"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc">https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><ol><li><p>轻量级，简单易学</p></li><li><p>高效 , 基于请求响应的MVC框架</p></li><li><p>与Spring兼容性好，无缝结合</p></li><li><p>约定优于配置</p></li><li><p>功能强大：RESTful、数据验证、格式化、本地化、主题等</p></li><li><p>简洁灵活</p></li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等…所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong></p><h3 id="2-2-中心控制器"><a href="#2-2-中心控制器" class="headerlink" title="2.2 中心控制器"></a>2.2 中心控制器</h3><p>Spring的web框架围绕<strong>DispatcherServlet</strong>设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dispatcher.png" alt="中心控制器"></p><p>SpringMVC的原理如下图所示：</p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springmvc_re.png" alt="springmvc原理图"></p><h3 id="2-3-SpringMVC执行原理"><a href="#2-3-SpringMVC执行原理" class="headerlink" title="2.3 SpringMVC执行原理"></a>2.3 SpringMVC执行原理</h3><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mvc_principle.png" alt="执行原理流程图"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p><strong>简要分析执行流程</strong></p><ol><li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。<ul><li>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></li><li><strong>如上url拆分成三部分：</strong></li><li><a href="http://localhost:8080/">http://localhost:8080</a> ——&gt; 服务器域名</li><li>SpringMVC ——&gt; 部署在服务器上的web站点</li><li>hello ——&gt; 表示控制器</li><li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</li></ul></li><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li><li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ol><h2 id="3、第一个MVC程序"><a href="#3、第一个MVC程序" class="headerlink" title="3、第一个MVC程序"></a>3、第一个MVC程序</h2><h3 id="3-1-配置版"><a href="#3-1-配置版" class="headerlink" title="3.1 配置版"></a>3.1 配置版</h3><ol><li><p>新建一个module，springmvc-02-hello，添加web的支持！</p></li><li><p>确定导入了SpringMVC的依赖</p></li><li><p>配置web.xml，注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--1.注册DispatcherServlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br>   <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写SpringMVC的配置文件！名称：springmvc-servlet.xml，说明，这里的名称要求是按照官方来的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 处理映射器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 处理器适配器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atrox.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">//注意：这里我们先导入Controller接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//ModelAndView 模型和视图</span><br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br><br>        <span class="hljs-comment">//封装对象，放在ModelAndView中。Model</span><br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;HelloSpringMVC!&quot;</span>);<br>        <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span><br>        mv.setViewName(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span><br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将自己的类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Handler--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nuc.ss.controller.HelloController&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Kuangshen&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat 启动测试！</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/firstmvc_test.png" alt="首个mvc程序测试"></p></li></ol><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li><li>重启Tomcat 即可解决！</li></ol><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC学习笔记/no_lib.png" alt="新建lib文件夹，添加所有包" style="zoom:75%;"><p>小结：我们来看个注解版实现，这才是SpringMVC的精髓。</p><h3 id="3-2-注解版"><a href="#3-2-注解版" class="headerlink" title="3.2 注解版"></a>3.2 注解版</h3><ol><li><p>新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！</p></li><li><p>由于Maven可能存在资源过滤的问题，我们将配置完善</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p></li><li><p><strong>配置web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">/ 和 /* 的区别：</span><br><span class="hljs-comment">        &lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。</span><br><span class="hljs-comment">        &lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>添加Spring MVC配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atrox.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    支持mvc注解驱动</span><br><span class="hljs-comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class="hljs-comment">        要想使@RequestMapping注解生效</span><br><span class="hljs-comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class="hljs-comment">        和一个AnnotationMethodHandlerAdapter实例</span><br><span class="hljs-comment">        这两个实例分别在类级别和方法级别处理。</span><br><span class="hljs-comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><ul><li>让IOC的注解生效</li><li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …<ul><li>MVC的注解驱动</li><li>配置视图解析器</li></ul></li></ul></li><li><p><strong>创建controller</strong></p><p>编写一个Java控制类：nuc.ss.controller.HelloController , 注意编码规范</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-comment">// localhost:8080/hello/h1</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>        <span class="hljs-comment">// 封装数据</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Hello,SpringMVC&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 会被视图解析器处理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp</li></ul></li><li><p><strong>创建视图层</strong></p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p><p>可以通过EL表示取出Model中存放的值，或者对象；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;SpringMVC&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat运行</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/firstmvc_annotation.png" alt="注解版mvc程序测试"></p></li></ol><h3 id="3-3-小结"><a href="#3-3-小结" class="headerlink" title="3.3 小结"></a>3.3 小结</h3><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><p>使用springMVC必须配置的三大件</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><h2 id="4、RestFul和控制器"><a href="#4、RestFul和控制器" class="headerlink" title="4、RestFul和控制器"></a>4、RestFul和控制器</h2><h3 id="4-1-控制器Controller"><a href="#4-1-控制器Controller" class="headerlink" title="4.1 控制器Controller"></a>4.1 控制器Controller</h3><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><h3 id="4-2-实现Controller接口"><a href="#4-2-实现Controller接口" class="headerlink" title="4.2 实现Controller接口"></a>4.2 实现Controller接口</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现该接口的类获得控制器功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Controller</span> </span>&#123;<br>   <span class="hljs-comment">//处理请求且返回一个模型与视图对象</span><br>   <span class="hljs-function">ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong>：</p><ol><li><p>新建一个Moudle，springmvc-04-controller！</p></li><li><p>mvc的配置文件只留下 视图解析器！</p></li><li><p>编写一个Controller类，ControllerTest1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义控制器</span><br><span class="hljs-comment">//注意点：不要导错包，实现Controller接口，重写方法；</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//返回一个模型视图对象</span><br>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Test1Controller&quot;</span>);<br>       mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>       <span class="hljs-keyword">return</span> mv;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;/t1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nuc.ss.controller.ControllerTest1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Kuangshen&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ol><p><strong>说明</strong>:</p><ul><li>实现接口Controller定义控制器是较老的办法</li><li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li></ul><h3 id="4-3-使用注解-Controller"><a href="#4-3-使用注解-Controller" class="headerlink" title="4.3 使用注解@Controller"></a>4.3 使用注解@Controller</h3><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;nuc.ss.controller&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>增加一个ControllerTest2类，使用注解实现；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Controller注解的类会自动添加到Spring上下文中</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest2</span></span>&#123;<br><br>   <span class="hljs-comment">//映射访问路径</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>&#123;<br>       <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>       model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;ControllerTest2&quot;</span>);<br>       <span class="hljs-comment">//返回视图位置</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>可以发现，我们的两个请求都可以指向一个视图(test)，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p><p><strong>注解方式是平时使用的最多的方式！</strong></p><h3 id="4-4-注解中的-RequestMapping"><a href="#4-4-注解中的-RequestMapping" class="headerlink" title="4.4 注解中的@RequestMapping"></a>4.4 注解中的@RequestMapping</h3><p><strong>@RequestMapping</strong></p><ul><li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></li><li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p></li><li><p>只注解在方法上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名 / h1</p></li></ul><ul><li><p>同时注解类与方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名/ admin /h1 , 需要先指定类的路径再指定方法的路径；</p></li></ul><h3 id="4-5-RestFul风格"><a href="#4-5-RestFul风格" class="headerlink" title="4.5 RestFul风格"></a>4.5 RestFul风格</h3><p><strong>概念</strong></p><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p><p>分别对应 添加、 删除、修改、查询。</p><p><strong>传统方式操作资源</strong> ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p> <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p> <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p> <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p> <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p> <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p> <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p> <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p><p> <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p><p><strong>学习测试</strong></p><ol><li><p>在新建一个类 RestFulController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>在Spring MVC中可以使用 @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;<br><br>   <span class="hljs-comment">//映射访问路径</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/add/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p2, Model model)</span></span>&#123;<br>       <br>       <span class="hljs-keyword">int</span> result = p1+p2;<br>       <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>       model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);<br>       <span class="hljs-comment">//返回视图位置</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>       &#125;<br></code></pre></td></tr></table></figure></li><li><p>测试请求查看</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/restful_test.png" alt="restful风格"></p></li><li><p>思考：使用路径变量的好处？</p><ul><li>使路径变得更加简洁；</li><li>获得参数更加方便，框架会自动进行类型转换。</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/add/1/a，则路径与方法不匹配，而不会是参数转换失败。</li></ul></li><li><p>我们来修改下对应的参数类型，再次测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径</span><br><span class="hljs-meta">@RequestMapping(&quot;/add/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> String p2, Model model)</span></span>&#123;<br><br>   String result = p1+p2;<br>   <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>   model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);<br>   <span class="hljs-comment">//返回视图位置</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/restful_test2.png" alt="再次测试"></p></li></ol><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p>我们来测试一下：</p><ul><li><p>增加一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是POST请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>   model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/restful_test3.png" alt="405错误"></p></li><li><p>如果将POST修改为GET则正常了；</p></li></ul><p><strong>小结：</strong></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@DeleteMapping</span><br><span class="hljs-meta">@PatchMapping</span><br></code></pre></td></tr></table></figure><p>@GetMapping 是一个组合注解，平时使用的会比较多！</p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p><p>比如下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span><br><span class="hljs-comment">// 这里定义的a和b就是前端传的</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a,<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> res = a + b;<br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;结果为&quot;</span> + res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、结果跳转方式"><a href="#5、结果跳转方式" class="headerlink" title="5、结果跳转方式"></a>5、结果跳转方式</h2><h3 id="5-1-ModelAndView"><a href="#5-1-ModelAndView" class="headerlink" title="5.1 ModelAndView"></a>5.1 ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应的controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//返回一个模型视图对象</span><br>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);<br>       mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>       <span class="hljs-keyword">return</span> mv;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-ServletAPI"><a href="#5-2-ServletAPI" class="headerlink" title="5.2 ServletAPI"></a>5.2 ServletAPI</h3><p>通过设置ServletAPI , 不需要视图解析器 .</p><ol><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultGo</span> </span>&#123;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/result/t1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       rsp.getWriter().println(<span class="hljs-string">&quot;Hello,Spring BY servlet API&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/result/t2&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       rsp.sendRedirect(<span class="hljs-string">&quot;/index.jsp&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/result/t3&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//转发</span><br>       req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;/result/t3&quot;</span>);<br>       req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-SpringMVC"><a href="#5-3-SpringMVC" class="headerlink" title="5.3 SpringMVC"></a>5.3 SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><ul><li>默认为forward转发（也可以加上）</li><li>redirect转发需特别加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/rsm/t1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//转发</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/index.jsp&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/rsm/t2&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//转发二</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/index.jsp&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/rsm/t3&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//重定向</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><ul><li>默认为forward转发（不可以加上）</li><li>redirect转发需特别加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC2</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//转发</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//重定向</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>       <span class="hljs-comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、SpringMVC数据处理"><a href="#6、SpringMVC数据处理" class="headerlink" title="6、SpringMVC数据处理"></a>6、SpringMVC数据处理</h2><h3 id="6-1-处理提交数据"><a href="#6-1-处理提交数据" class="headerlink" title="6.1 处理提交数据"></a>6.1 处理提交数据</h3><h4 id="6-1-1-提交的域名称和处理方法的参数名一致"><a href="#6-1-1-提交的域名称和处理方法的参数名一致" class="headerlink" title="6.1.1 提交的域名称和处理方法的参数名一致"></a>6.1.1 <strong>提交的域名称和处理方法的参数名一致</strong></h4><p>提交数据 : <a href="http://localhost:8080/hello?name=atroxQW">http://localhost:8080/hello?name=atroxQW</a></p><p>处理方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(String name)</span></span>&#123;<br>   System.out.println(name);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后台输出：atroxQW</p><h4 id="6-1-2-提交的域名称和处理方法的参数名不一致"><a href="#6-1-2-提交的域名称和处理方法的参数名不一致" class="headerlink" title="6.1.2 提交的域名称和处理方法的参数名不一致"></a>6.1.2 <strong>提交的域名称和处理方法的参数名不一致</strong></h4><p>提交数据：<a href="http://localhost:8080/hello?username=atroxQW">http://localhost:8080/hello?username=atroxQW</a></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;<br>   System.out.println(name);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后台输出：atroxQW</p><h4 id="6-1-3-提交的是一个对象"><a href="#6-1-3-提交的是一个对象" class="headerlink" title="6.1.3 提交的是一个对象"></a>6.1.3 <strong>提交的是一个对象</strong></h4><p>要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p><ol><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提交数据 : <a href="http://localhost:8080/mvc04/user?name=atroxQW&amp;id=1&amp;age=15">http://localhost:8080/mvc04/user?name=atroxQW&amp;id=1&amp;age=15</a></p></li><li><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/t2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(User user)</span> </span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后台输出 : User { id=1, name=‘atroxQW’, age=15 }</p><p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p></li></ol><h3 id="6-2-数据显示到前端"><a href="#6-2-数据显示到前端" class="headerlink" title="6.2 数据显示到前端"></a>6.2 数据显示到前端</h3><h4 id="6-2-1-通过ModelAndView"><a href="#6-2-1-通过ModelAndView" class="headerlink" title="6.2.1  通过ModelAndView"></a>6.2.1  <strong>通过ModelAndView</strong></h4><p>我们前面一直都是如此 . 就不过多解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//返回一个模型视图对象</span><br>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);<br>       mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>       <span class="hljs-keyword">return</span> mv;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-2-通过ModelMap"><a href="#6-2-2-通过ModelMap" class="headerlink" title="6.2.2 通过ModelMap"></a>6.2.2 <strong>通过ModelMap</strong></h4><p>ModelMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap modelMap)</span></span>&#123;<br>   <span class="hljs-comment">//封装要显示到视图中的数据</span><br>   <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span><br>   modelMap.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);<br>   System.out.println(name);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-3-通过Model"><a href="#6-2-3-通过Model" class="headerlink" title="6.2.3 通过Model"></a>6.2.3 通过Model</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/ct2/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;<br>   <span class="hljs-comment">//封装要显示到视图中的数据</span><br>   <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span><br>   model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);<br>   System.out.println(name);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-对比"><a href="#6-3-对比" class="headerlink" title="6.3 对比"></a>6.3 对比</h3><blockquote><p> Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；<br>        ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；<br>        ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</p></blockquote><h2 id="7、乱码问题"><a href="#7、乱码问题" class="headerlink" title="7、乱码问题"></a>7、乱码问题</h2><p>测试步骤：</p><ol><li><p>我们可以在首页编写一个提交的表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;/e/t&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li><li><p>后台编写对应的处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Encoding</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/e/t&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model,String name)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name); <span class="hljs-comment">//获取表单提交的值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>; <span class="hljs-comment">//跳转到test页面显示输入的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输入中文测试，发现乱码</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/disorderly_code.png" alt="乱码问题"></p></li></ol><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：这里写/*，写/的话过滤不了jsp页面，不能解决乱码</p><p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法 :</p><ol><li><p>修改tomcat配置文件 ：设置编码！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>自定义过滤器（万能解决）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 解决get和post请求 全部乱码的过滤器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">//处理response的字符编码</span><br>        HttpServletResponse myResponse=(HttpServletResponse) response;<br>        myResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        <span class="hljs-comment">// 转型为与协议相关对象</span><br>        HttpServletRequest httpServletRequest = (HttpServletRequest) request;<br>        <span class="hljs-comment">// 对request包装增强</span><br>        HttpServletRequest myrequest = <span class="hljs-keyword">new</span> MyRequest(httpServletRequest);<br>        chain.doFilter(myrequest, response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//自定义request对象，HttpServletRequest的包装类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> HttpServletRequest request;<br>    <span class="hljs-comment">//是否编码的标记</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasEncode;<br>    <span class="hljs-comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRequest</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(request);<span class="hljs-comment">// super必须写</span><br>        <span class="hljs-keyword">this</span>.request = request;<br>    &#125;<br><br>    <span class="hljs-comment">// 对需要增强方法 进行覆盖</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">getParameterMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 先获得请求方式</span><br>        String method = request.getMethod();<br>        <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">&quot;post&quot;</span>)) &#123;<br>            <span class="hljs-comment">// post请求</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 处理post乱码</span><br>                request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>                <span class="hljs-keyword">return</span> request.getParameterMap();<br>            &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">&quot;get&quot;</span>)) &#123;<br>            <span class="hljs-comment">// get请求</span><br>            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>            <span class="hljs-keyword">if</span> (!hasEncode) &#123; <span class="hljs-comment">// 确保get手动编码逻辑只运行一次</span><br>                <span class="hljs-keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;<br>                    String[] values = parameterMap.get(parameterName);<br>                    <span class="hljs-keyword">if</span> (values != <span class="hljs-keyword">null</span>) &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                <span class="hljs-comment">// 处理get乱码</span><br>                                values[i] = <span class="hljs-keyword">new</span> String(values[i]<br>                                                       .getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>                            &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>                                e.printStackTrace();<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                hasEncode = <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> parameterMap;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getParameterMap();<br>    &#125;<br><br>    <span class="hljs-comment">//取一个值</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getParameter</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        Map&lt;String, String[]&gt; parameterMap = getParameterMap();<br>        String[] values = parameterMap.get(name);<br>        <span class="hljs-keyword">if</span> (values == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 取回参数的第一个值</span><br>    &#125;<br><br>    <span class="hljs-comment">//取所有值</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] getParameterValues(String name) &#123;<br>        Map&lt;String, String[]&gt; parameterMap = getParameterMap();<br>        String[] values = parameterMap.get(name);<br>        <span class="hljs-keyword">return</span> values;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p></li></ol><h2 id="8、JSON交互处理"><a href="#8、JSON交互处理" class="headerlink" title="8、JSON交互处理"></a>8、JSON交互处理</h2><h3 id="8-1-什么是JSON？"><a href="#8-1-什么是JSON？" class="headerlink" title="8.1 什么是JSON？"></a>8.1 什么是JSON？</h3><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;QinJiang&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;; <span class="hljs-comment">//这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="hljs-keyword">var</span> json = <span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span><br></code></pre></td></tr></table></figure><h3 id="8-2-JSON和JavaScript对象互转"><a href="#8-2-JSON和JavaScript对象互转" class="headerlink" title="8.2 JSON和JavaScript对象互转"></a>8.2 JSON和JavaScript对象互转</h3><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>);<br><span class="hljs-comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;);<br><span class="hljs-comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>代码测试</strong></p><ol><li><p>新建一个module ，springmvc-05-json ， 添加web的支持</p></li><li><p>在web目录下新建一个 json-1.html ， 编写测试内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON_秦疆<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">   <span class="hljs-comment">//编写一个js的对象</span></span><br><span class="javascript">   <span class="hljs-keyword">var</span> user = &#123;</span><br><span class="javascript">       name:<span class="hljs-string">&quot;秦疆&quot;</span>,</span><br>       age:3,<br><span class="javascript">       sex:<span class="hljs-string">&quot;男&quot;</span></span><br>  &#125;;<br><span class="javascript">   <span class="hljs-comment">//将js对象转换成json字符串</span></span><br><span class="javascript">   <span class="hljs-keyword">var</span> str = <span class="hljs-built_in">JSON</span>.stringify(user);</span><br><span class="javascript">   <span class="hljs-built_in">console</span>.log(str);</span><br>   <br><span class="javascript">   <span class="hljs-comment">//将json字符串转换为js对象</span></span><br><span class="javascript">   <span class="hljs-keyword">var</span> user2 = <span class="hljs-built_in">JSON</span>.parse(str);</span><br><span class="javascript">   <span class="hljs-built_in">console</span>.log(user2.age,user2.name,user2.sex);</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在IDEA中使用浏览器打开，查看控制台输出！</p></li></ol><h3 id="8-3-Controller返回JSON数据"><a href="#8-3-Controller返回JSON数据" class="headerlink" title="8.3 Controller返回JSON数据"></a>8.3 Controller返回JSON数据</h3><ul><li><p>Jackson应该是目前比较好的json解析工具了</p></li><li><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p></li><li><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>配置SpringMVC需要的配置</p><ul><li><p>(web.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>       <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p><p>编写一个Controller；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><span class="hljs-meta">@RequestMapping(&quot;/j1&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><span class="hljs-comment">//他就不会走视图解析器，会直接返回一个 字符串</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>        <span class="hljs-comment">//jackson,ObjectMapper</span><br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>        <span class="hljs-comment">//创建一个对象</span><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;秦疆一号&quot;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-comment">//System.out.println(user);</span><br><br>        String str = mapper.writeValueAsString(user);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>此时输入中文会产生乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//produces:指定响应体返回类型和编码</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/j1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat，测试</p></li></ul><h3 id="8-4-代码优化"><a href="#8-4-代码优化" class="headerlink" title="8.4 代码优化"></a>8.4 代码优化</h3><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>返回json字符串统一解决</strong></p><ul><li><p>@ResponseBody解决（每个方法都得加，不建议使用）</p></li><li><p><strong>@RestController</strong>（直接加到类上即可）</p></li></ul><h3 id="8-5-测试集合输出"><a href="#8-5-测试集合输出" class="headerlink" title="8.5 测试集合输出"></a>8.5 测试集合输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/j2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>    <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    <span class="hljs-comment">//创建一个对象</span><br>   User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">12</span>);<br>    User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;秦疆2号&quot;</span>, <span class="hljs-number">12</span>);<br>    User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;秦疆3号&quot;</span>, <span class="hljs-number">12</span>);<br>    User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;秦疆4号&quot;</span>, <span class="hljs-number">12</span>);<br>    User user5 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;秦疆5号&quot;</span>, <span class="hljs-number">12</span>);<br>    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>    list.add(user1);<br>    list.add(user2);<br>    list.add(user3);<br>    list.add(user4);<br>    list.add(user5);<br>    <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>    String str = mapper.writeValueAsString(list);<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果 : 十分完美，没有任何问题</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/list_json.png" alt="输出结果"></p><h3 id="8-6-输出时间对象"><a href="#8-6-输出时间对象" class="headerlink" title="8.6 输出时间对象"></a>8.6 输出时间对象</h3><ul><li><p>增加一个新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/j3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>   ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>   <span class="hljs-comment">//创建时间一个对象，java.util.Date</span><br>   Date date = <span class="hljs-keyword">new</span> Date();<br>   <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>   String str = mapper.writeValueAsString(date);<br>   <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/date_json1.png" alt="运行结果"></p></li></ul><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/j3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>    <span class="hljs-comment">//不使用时间戳的方式</span><br>    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);<br>    <span class="hljs-comment">//自定义日期格式对象</span><br>    SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-comment">//指定日期格式</span><br>    mapper.setDateFormat(sdf);<br><br>    Date date = <span class="hljs-keyword">new</span> Date();<br>    String str = mapper.writeValueAsString(date);<br><br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果 : 成功的输出了时间！</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/date_json2.png" alt="运行结果"></p><p><strong>抽取为工具类</strong></p><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonUtils</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getJson(object,<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object, String dateFormat)</span> </span>&#123;<br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>        <span class="hljs-comment">//java自定义日期格式</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(dateFormat);<br>        <span class="hljs-comment">//sdf.format(date)</span><br><br>        <span class="hljs-comment">// 使用ObjectMapper 来格式化输出</span><br>        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="hljs-keyword">false</span>);<br>        mapper.setDateFormat(sdf);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//ObjectMapper,时间解析后的默认格式为：TImestamp.时间戳</span><br>            <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用工具类，代码就更加简洁了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/j3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json3</span><span class="hljs-params">()</span></span>&#123;<br><br>    Date date = <span class="hljs-keyword">new</span> Date();<br><br>    <span class="hljs-keyword">return</span> JsonUtils.getJson(date,<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-7-FastJson"><a href="#8-7-FastJson" class="headerlink" title="8.7 FastJson"></a>8.7 FastJson</h3><ul><li>fastjson.jar是阿里开发的一款专门用于Java开发的包，</li><li>实现json对象与JavaBean对象的转换，</li><li>实现JavaBean对象与json字符串的转换，</li><li>实现json对象与json字符串的转换。</li><li>实现json的转换方法很多，最后的实现结果都是一样的。</li></ul><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>fastjson 三个主要的类：</strong></p><ol><li><p>JSONObject 代表 json 对象</p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul></li><li><p>JSONArray 代表 json 对象数组</p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li><p>JSON代表 JSONObject和JSONArray的转化</p><ul><li><p>JSON类源码分析与使用</p></li><li><p>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</p></li></ul></li></ol><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/j4&quot;)</span><br>    <span class="hljs-comment">//@ResponseBody//他就不会走视图解析器，会直接返回一个 字符串</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span></span>&#123;<br><br>        User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">12</span>);<br>        User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;秦疆2号&quot;</span>, <span class="hljs-number">12</span>);<br>        User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;秦疆3号&quot;</span>, <span class="hljs-number">12</span>);<br>        User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;秦疆4号&quot;</span>, <span class="hljs-number">12</span>);<br>        User user5 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;秦疆5号&quot;</span>, <span class="hljs-number">12</span>);<br><br>        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>        list.add(user1);<br>        list.add(user2);<br>        list.add(user3);<br>        list.add(user4);<br>        list.add(user5);<br><br>        System.out.println(<span class="hljs-string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);<br>        String str1 = JSON.toJSONString(list);<br>        System.out.println(<span class="hljs-string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);<br>        String str2 = JSON.toJSONString(user1);<br>        System.out.println(<span class="hljs-string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);<br><br>        System.out.println(<span class="hljs-string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);<br>        User jp_user1=JSON.parseObject(str2,User.class);<br>        System.out.println(<span class="hljs-string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);<br><br>        System.out.println(<span class="hljs-string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);<br>        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);<br>        System.out.println(<span class="hljs-string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);<br>        User to_java_user = JSON.toJavaObject(jsonObject1, User.class);<br>        System.out.println(<span class="hljs-string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);<br><br>        <span class="hljs-keyword">return</span> JSON.toJSONString(list);<br>    &#125;<br></code></pre></td></tr></table></figure><p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p><h2 id="9、SSM整合"><a href="#9、SSM整合" class="headerlink" title="9、SSM整合"></a>9、SSM整合</h2><h3 id="9-1-环境"><a href="#9-1-环境" class="headerlink" title="9.1 环境"></a>9.1 环境</h3><ul><li><p>IDEA+Mysq8.0+Tomca9+Maven3.6</p></li><li><p>数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database &#96;ssmbuild&#96;;<br>use &#96;ssmbuild&#96;;<br>CREATE TABLE &#96;books&#96; (<br>  &#96;bookId&#96; int(10) NOT NULL AUTO_INCREMENT COMMENT &#39;书id&#39;,<br>  &#96;bookName&#96; varchar(100) NOT NULL COMMENT &#39;书名&#39;,<br>  &#96;bookCounts&#96; int(11) NOT NULL COMMENT &#39;数量&#39;,<br>  &#96;detail&#96; varchar(200) NOT NULL COMMENT &#39;描述&#39;,<br>  KEY &#96;bookId&#96; (&#96;bookId&#96;)<br>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;4 DEFAULT CHARSET&#x3D;utf8<br></code></pre></td></tr></table></figure></li><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--依赖：junit、数据库驱动、连接池、servlet、jsp、mybatis-spring、spring--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Servlet-JSP--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--MyBatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--lombok--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Maven资源过滤设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--静态资源导出问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>建立基本结构和配置框架</p><ul><li><p>com.atrox.pojo</p></li><li><p>com.atrox.dao</p></li><li><p>com.atrox.service</p></li><li><p>com.atrox.controller</p></li><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="9-2-整合mybatis"><a href="#9-2-整合mybatis" class="headerlink" title="9.2 整合mybatis"></a>9.2 整合mybatis</h3><ul><li><p>添加实体类Books</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Books</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookCounts;<br>    <span class="hljs-keyword">private</span> String detail;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写BookMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookMapper</span> </span>&#123;<br><br>    <span class="hljs-comment">// 增加一本书</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>    <span class="hljs-comment">// 删除一本书</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bookId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">// 更新一本书</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>    <span class="hljs-comment">// 查询一本书</span><br>    <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bookId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">// 查询全部的书</span><br>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写BookMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atrox.dao.BookMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        insert into ssmbuild.books (bookName, bookCounts, detail)<br>        values (#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBookById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from ssmbuild.books where bookID = #&#123;bookId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        update ssmbuild.books<br>        set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail=#&#123;detail&#125;<br>        where bookID = #&#123;bookID&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBookById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        select * from ssmbuild.books where bookID = #&#123;bookId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryAllBook&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        select * from ssmbuild.books;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在mybatis-config.xml中注册mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置数据源，交给Spring去做--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atrox.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.dao.BookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写service层接口BookService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 增加一本书</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>    <span class="hljs-comment">// 删除一本书</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">// 更新一本书</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>    <span class="hljs-comment">// 查询一本书</span><br>    <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">// 查询全部的书</span><br>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写service实现类BookServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span></span>&#123;<br><br>    <span class="hljs-comment">//service层调用dao层：组合Dao</span><br>    <span class="hljs-keyword">private</span> BookMapper bookMapper;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBookMapper</span><span class="hljs-params">(BookMapper bookMapper)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bookMapper = bookMapper;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.addBook(books);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.deleteBookById(id);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.updateBook(books);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryBookById(id);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryAllBook();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="9-3-整合Spring"><a href="#9-3-整合Spring" class="headerlink" title="9.3 整合Spring"></a>9.3 整合Spring</h3><ol><li><p><strong>spring-dao.xml</strong></p><ul><li>数据库连接读取db.properties有bug，手动连接jdbcurl和user</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.关联数据库配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--2.连接池</span><br><span class="hljs-comment">        dbcp：半自动化操作，不能自动连接</span><br><span class="hljs-comment">        c3p0：自动化操作（自动化的加载配置文件，并且可以自动配置到对象中）</span><br><span class="hljs-comment">        druid：</span><br><span class="hljs-comment">        hikari：</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!--c3p0的私有属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--关闭连接后，不自动commit--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--3.SqlSessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--绑定mybatis的配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置dao接口扫描包，动态地实现了dao接口可以注入到Spring容器中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入 SqlSessionFactory--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--要扫描的dao包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.atrox.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>spring-service.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.扫描service下的包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atrox.service&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--2.将我们的所有业务类，注入到Spring，可以通过配置，或者注解实现--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.service.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--3.声明式事务配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--4.aop事务支持--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>application.xml</strong></p><ul><li>导入其他配置进spring主配置文件</li><li>如果全都在一个spring项目下，则不用导入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:spring-dao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:spring-service.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:spring-mvc.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="9-4-整合SpringMVC"><a href="#9-4-整合SpringMVC" class="headerlink" title="9.4 整合SpringMVC"></a>9.4 整合SpringMVC</h3><ul><li><p>添加web项目的支持</p></li><li><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--SpringMVC配置--&gt;</span><br>    <span class="hljs-comment">&lt;!--1 DispatcherServlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:application.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--2 乱码过滤--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--3 Session过期时间--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>spring-mvc.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc/spring-cache.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--2.静态资源过滤--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--3.扫描包：controller--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atrox.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--4.视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="10、Ajax技术"><a href="#10、Ajax技术" class="headerlink" title="10、Ajax技术"></a>10、Ajax技术</h2><h3 id="9-1、简介"><a href="#9-1、简介" class="headerlink" title="9.1、简介"></a>9.1、简介</h3><ul><li><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></li><li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li><li><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></li><li>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</li><li>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</li><li>就和国内百度的搜索框一样!</li><li>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</li><li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li><li>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</li></ul><h3 id="9-2-伪造Ajax"><a href="#9-2-伪造Ajax" class="headerlink" title="9.2 伪造Ajax"></a>9.2 伪造Ajax</h3><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p><ol><li><p>新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p></li><li><p>编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>kuangshen<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">   <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">       <span class="hljs-keyword">var</span> myDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="javascript">       <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;currentTime&#x27;</span>).innerText = myDate.getTime();</span><br>  &#125;;<br><br><span class="javascript">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LoadPage</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">       <span class="hljs-keyword">var</span> targetUrl =  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;url&#x27;</span>).value;</span><br><span class="javascript">       <span class="hljs-built_in">console</span>.log(targetUrl);</span><br><span class="javascript">       <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;iframePosition&quot;</span>).src = targetUrl;</span><br>  &#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请输入要加载的地址：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;currentTime&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;LoadPage()&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>加载页面位置：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframePosition&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 500px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>…等等</li></ul><h3 id="9-3-jQuery-ajax"><a href="#9-3-jQuery-ajax" class="headerlink" title="9.3 jQuery.ajax"></a>9.3 jQuery.ajax</h3><ul><li>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</li><li>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li><li>jQuery 提供多个与 AJAX 有关的方法。</li><li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li><li>jQuery 不是生产者，而是大自然搬运工。</li><li>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">jQuery.ajax(...)<br>      部分参数：<br>            url：请求地址<br>            type：请求方式，GET、POST（<span class="hljs-number">1.9</span><span class="hljs-number">.0</span>之后用method）<br>        headers：请求头<br>            data：要发送的数据<br>    contentType：即将发送信息至服务器的内容编码类型(默认: <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)<br>          <span class="hljs-keyword">async</span>：是否异步<br>        timeout：设置请求超时时间（毫秒）<br>      beforeSend：发送请求前执行的函数(全局)<br>        complete：完成之后执行的回调函数(全局)<br>        success：成功之后执行的回调函数(全局)<br>          error：失败之后执行的回调函数(全局)<br>        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>        dataType：将服务器端返回的数据转换成指定类型<br>          <span class="hljs-string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式<br>          <span class="hljs-string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式<br>          <span class="hljs-string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>        <span class="hljs-string">&quot;script&quot;</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>          <span class="hljs-string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的JavaScript对象<br>        <span class="hljs-string">&quot;jsonp&quot;</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="hljs-string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数<br></code></pre></td></tr></table></figure><p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p><ol><li><p>配置web.xml 和 springmvc的配置文件【记得静态资源过滤和注解驱动配置上】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--静态资源过滤--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--注解驱动配--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>       <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个AjaxController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AjaxController</span> </span>&#123;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/a1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ajax1</span><span class="hljs-params">(String name , HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(name))&#123;<br>           response.getWriter().print(<span class="hljs-string">&quot;true&quot;</span>);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>           response.getWriter().print(<span class="hljs-string">&quot;false&quot;</span>);<br>      &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;<br>&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>编写index.jsp测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br> &lt;head&gt;<br>   &lt;title&gt;$Title$&lt;/title&gt;<br>  &lt;%--&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;--%&gt;<br>   &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;<br>   &lt;script&gt;<br>       <span class="hljs-function">function <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>&#123;<br>           $.post(&#123;<br>               url:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,<br>               data:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#txtName&quot;</span>).val()&#125;,<br>               success:function (data,status) &#123;<br>                   alert(data);<br>                   alert(status);<br>              &#125;<br>          &#125;);<br>      &#125;<br>   &lt;/script&gt;<br> &lt;/head&gt;<br> &lt;body&gt;<br><br>&lt;%--onblur：失去焦点触发事件--%&gt;<br>用户名:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;txtName&quot;</span> onblur=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;<br><br> &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5学习笔记</title>
    <link href="/posts/2021/01/02/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/posts/2021/01/02/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>Spring意为春天，也意味着它给软件行业带来了春天。在2002年，Rod Johnson首次推出了Spring框架的雏形—interface21。2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，并不断丰富其内涵，，正式发布了1.0正式版。</p><p>Rod Johnson是Spring Framework的创始人，注明作者。很难想象Rod Johnson的学历，真的让好多人大吃一惊，他是悉尼大学的博士，然而他的专业并不是计算机，而是音乐学。</p><p>Sppring的设计理念是使现有的技术更加容易使用，Spring本身也是一个大杂烩，整合了现有的技术框架。</p><ul><li>SSH：Struct2 + Spring + Hibernate</li><li>SSM：SpringMVC + Spring + MyBatis</li></ul><p>Spring官网：<a href="Spring%E5%AE%98%E7%BD%91">https://spring.io</a></p><p>Spring下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a></p><p>Github下载地址：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p><p>Maven仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-Spring框架的优点"><a href="#1-2-Spring框架的优点" class="headerlink" title="1.2 Spring框架的优点"></a>1.2 Spring框架的优点</h3><ul><li>Spring是一个开源的免费的框架（容器）！</li><li>Spring是一个<strong>轻量级的</strong>、<strong>非入侵式的</strong>框架。</li><li>最重要的特性：<strong>控制反转（IOC），面向切面编程（AOP）</strong></li><li>支持事务的处理，对框架整合的支持。</li></ul><p><mark>总结：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架。</mark></p><h3 id="1-3-Spring的组成"><a href="#1-3-Spring的组成" class="headerlink" title="1.3 Spring的组成"></a>1.3 Spring的组成</h3><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/Spring七大模块.png" alt="Spring七大模块" style="zoom:85%;"><h3 id="1-4-拓展"><a href="#1-4-拓展" class="headerlink" title="1.4 拓展"></a>1.4 拓展</h3><p>在Spring的官网有如下的介绍：现代化的java开发，就是基于Spring的开发</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/Spring_path.png" alt="Spring学习路线" style="zoom:75%;"><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>SpringCloud是基于SpringBoot实现的</li></ul></li></ul><p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring框架和SpringMVC。是承上启下的作用。</p><p>Spring在发展了太久之后，也体现了一些弊端，违背了原来的一些设计理念。配置十分繁琐，人称：配置地域</p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><h3 id="2-1-IOC原型"><a href="#2-1-IOC原型" class="headerlink" title="2.1 IOC原型"></a>2.1 IOC原型</h3><p>我们之前做业务的流程，是下面这样的，先用我们原来的方式写一段代码</p><ol><li><p>UserDao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>UserDaoImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;获取用户数据&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>UserService业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>UserServiceImpl业务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>那这是我们最简单的实现方式，现在修改一下，把UserDao的实现类增加一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoMysqlImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Mysql获取用户数据！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>紧接着按照原来的方式，如果我们想要去使用MySql的话，既需要在service实现类里面修改对应的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao = <span class="hljs-keyword">new</span> UserDaoMysqlImpl();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>那如果还有Oracle实现类、SQLServer实现类，要怎么办？</p></li></ol><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求，来修改源代码。</p><p>如果程序代码量很大，修改一次的成本代价十分昂贵。</p><p>这时候，我们使用一个Set接口实现，已经发生了革命性的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-comment">// 利用set进行动态实现值的注入</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>之前，程序是主动创建对象，控制权在程序猿手上。</p></li><li><p>使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 用户实际调用的是业务层，dao层他么不需要接触</span><br>    UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>    <span class="hljs-comment">// 控制反转，被动接受</span><br>    userService.setUserDao(<span class="hljs-keyword">new</span> UserDaoMysqlImpl());<br>    userService.getUser();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>这种思想，从本质上解决了问题，我们程序猿不用再去管理对象的创建了。<strong>系统的耦合性大大降低</strong>，程序猿可以更加专注业务的实现，这就是IOC—控制反转的原型。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/IOC图解.png" alt="IOC原理图解" style="zoom:75%;"><h3 id="2-2-IOC本质"><a href="#2-2-IOC本质" class="headerlink" title="2.2 IOC本质"></a>2.2 IOC本质</h3><p>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/IOC_pro.png" alt="IOC的作用" style="zoom:80%;"><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><h2 id="3、helloSpring"><a href="#3、helloSpring" class="headerlink" title="3、helloSpring"></a>3、helloSpring</h2><p>下面，我们进行第一个Spring程序的编写。</p><h3 id="3-1-导入jar包"><a href="#3-1-导入jar包" class="headerlink" title="3.1 导入jar包"></a>3.1 导入jar包</h3><p>在maven项目的pom.xml中导入相关的依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>    &lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;<br>    &lt;version&gt;5.3.2&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><h3 id="3-2-编写demo"><a href="#3-2-编写demo" class="headerlink" title="3.2 编写demo"></a>3.2 编写demo</h3><ol><li><p>编写一个Hello实体类，这里必须要有get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStr</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStr</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.str = str;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;str=&#x27;&quot;</span> + str + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写我们的spring文件，这里我们命名为beans.xml放在resources目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--使用Spring来创建对象，在Spring中这些都成称为Bean</span><br><span class="hljs-comment">    类型 变量名 = new 类型();</span><br><span class="hljs-comment">    Hello hello = new Hello();</span><br><span class="hljs-comment">    id = 变量名</span><br><span class="hljs-comment">    class = new 的对象</span><br><span class="hljs-comment">    properties 相当于给对象的属性设置一个值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.Hello&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>最后进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 获取Spring的上下文对象</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-comment">// 我们的对象现在都在Spring中管理了。我们要使用，直接去取出来就可以了</span><br>        Hello hello = (Hello) context.getBean(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(hello.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Hello&#123;str=<span class="hljs-string">&#x27;Spring&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-3-优化2-1"><a href="#3-3-优化2-1" class="headerlink" title="3.3 优化2.1"></a>3.3 优化2.1</h3><p>我们对2.1中出现的问题，可以做一些优化</p><p>在beans.xml中新建用户可能会用到的对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysqlImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.dao.UserDaoMysqlImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;oracleImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.dao.UserDaoOracleImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.service.UserServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--ref:引用Spring容器中创建好的对象</span><br><span class="hljs-comment">        value：具体的值，基本数据类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mysqlImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里，我们先把用户可能会选择的mysqImpl、oracleImpl的对象先创建出来，然后新建UserServiceImpl的对象，因为UserService的userDao是<strong>利用set实现动态注入的</strong>，所以可以给它设置属性的值，这里用ref，可以直接饮用Spring容器中创建好的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-comment">// 利用set进行动态实现值的注入</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，我们进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 获取ApplicationContext:拿到Spring的容器</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><br>    <span class="hljs-comment">// 容器在手，天下我有。需要什么，就直接get什么</span><br><br>    UserServiceImpl userServiceImpl = (UserServiceImpl) context.getBean(<span class="hljs-string">&quot;UserServiceImpl&quot;</span>);<br><br>    userServiceImpl.getUser();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-思考问题"><a href="#3-4-思考问题" class="headerlink" title="3.4 思考问题"></a>3.4 思考问题</h3><ul><li><p>Hello 对象是谁创建的 ?</p><p>hello 对象是由Spring创建的</p></li><li><p>Hello 对象的属性是怎么设置的 ?</p><p>hello 对象的属性是由Spring容器设置的</p></li></ul><p>这个过程就叫控制反转 :</p><ul><li>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</li><li>反转 : 程序本身不创建对象 , 而变成被动的接收对象</li><li>依赖注入 : 就是利用set方法来进行注入的.</li></ul><p>IOC是一种编程思想，由主动的编程变成被动的接收</p><p>可以通过new ClassPathXmlApplicationContext去浏览一下底层源码</p><p>**OK , 到了现在 , 我们彻底不用再程序中去改动了 , 要实现不同的操作 , 只需要在xml配置文件中进行修改 , 所谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 ! **</p><h2 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h2><ol><li><p>使用无参构造创建对象，默认的实现方式。</p></li><li><p>假设我们需要使用有参构造创建对象，可以使用下面几种方式：</p><ul><li><p>下标赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--第一种方式，下标赋值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乔威&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>通过类型创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--第二种方式，通过类型创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乔威&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>直接通过参数名来设置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--第三种方式，直接通过参数名来设置--&gt;<br>&lt;bean id=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span><br>    &lt;constructor-arg name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;乔威&quot;</span>/&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure></li></ul><p>总结：在配置文件加载的时候，<strong>容器中管理的对象就已经全部初始化了</strong>。</p></li></ol><h2 id="5、Spring配置说明"><a href="#5、Spring配置说明" class="headerlink" title="5、Spring配置说明"></a>5、Spring配置说明</h2><h3 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--别名，如果添加了别名，可以使用别名获取到对象getBean(别名)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;userNew&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2 Bean的配置"></a>5.2 Bean的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    id：bean的唯一标识符，也就是相当于我们的对象名</span><br><span class="hljs-comment">    class：bean对象所对应的全限定名：报名+类型</span><br><span class="hljs-comment">    name：也是别名，而且name可以同时取多个别名，可以通过逗号、空格、分号分隔</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.UserT&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userTT,u2 u3&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乔威&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h3><p>这个import，一般用于团队开发使用，他可以将多个配置文件，导入合并为一个。</p><p>假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的。</p><ul><li>张三</li><li>李四</li><li>王五</li></ul><p>总的applicationContext.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans2.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans3.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6、DI依赖注入"><a href="#6、DI依赖注入" class="headerlink" title="6、DI依赖注入"></a>6、DI依赖注入</h2><h3 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h3><p>前面已经讲过了</p><h3 id="6-2-Set方式注入【重点】"><a href="#6-2-Set方式注入【重点】" class="headerlink" title="6.2 Set方式注入【重点】"></a>6.2 Set方式注入【重点】</h3><ul><li>依赖注入：Set注入<ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性由容器来注入</li></ul></li></ul><p>【环境搭建】</p><ol><li><p>复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>真实测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Address address;<br>    <span class="hljs-keyword">private</span> String[] books;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; card;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<br>    <span class="hljs-keyword">private</span> String wife;<br>    <span class="hljs-keyword">private</span> Properties info;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Address <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(Address address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String[] getBooks() &#123;<br>        <span class="hljs-keyword">return</span> books;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBooks</span><span class="hljs-params">(String[] books)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.books = books;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getHobbys</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hobbys;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHobbys</span><span class="hljs-params">(List&lt;String&gt; hobbys)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.hobbys = hobbys;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getCard</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> card;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCard</span><span class="hljs-params">(Map&lt;String, String&gt; card)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.card = card;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">getGames</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> games;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGames</span><span class="hljs-params">(Set&lt;String&gt; games)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.games = games;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getWife</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> wife;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWife</span><span class="hljs-params">(String wife)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.wife = wife;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Properties <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setInfo</span><span class="hljs-params">(Properties info)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&quot;</span> + address +<br>                <span class="hljs-string">&quot;, books=&quot;</span> + Arrays.toString(books) +<br>                <span class="hljs-string">&quot;, hobbys=&quot;</span> + hobbys +<br>                <span class="hljs-string">&quot;, card=&quot;</span> + card +<br>                <span class="hljs-string">&quot;, games=&quot;</span> + games +<br>                <span class="hljs-string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, info=&quot;</span> + info +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>beans.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.pojo.Student&quot;</span>&gt;<br>        &lt;!--第一种，普通值注入，value--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;乔威&quot;</span>/&gt;<br>    &lt;/bean&gt;<br><br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        Student student = (Student) context.getBean(<span class="hljs-string">&quot;student&quot;</span>);<br>        String name = student.getName();<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>完善注入信息</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.pojo.Address&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;address&quot;</span> value=<span class="hljs-string">&quot;河北&quot;</span>/&gt;<br>    &lt;/bean&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.pojo.Student&quot;</span>&gt;<br>        &lt;!--第一种，普通值注入，value--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;乔威&quot;</span>/&gt;<br>        &lt;!--第二种，Bean注入，rf--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;address&quot;</span> ref=<span class="hljs-string">&quot;address&quot;</span>/&gt;<br>        &lt;!--数组--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;books&quot;</span>&gt;<br>            &lt;array&gt;<br>                &lt;value&gt;红楼梦&lt;/value&gt;<br>                &lt;value&gt;西游记&lt;/value&gt;<br>                &lt;value&gt;水浒传&lt;/value&gt;<br>                &lt;value&gt;三国演义&lt;/value&gt;<br>            &lt;/array&gt;<br>        &lt;/property&gt;<br>        &lt;!--List--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;<br>            &lt;list&gt;<br>                &lt;value&gt;听歌&lt;/value&gt;<br>                &lt;value&gt;敲代码&lt;/value&gt;<br>                &lt;value&gt;看电影&lt;/value&gt;<br>            &lt;/list&gt;<br>        &lt;/property&gt;<br>        &lt;!--Map--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;card&quot;</span>&gt;<br>            &lt;map&gt;<br>                &lt;entry key=<span class="hljs-string">&quot;身份证&quot;</span> value=<span class="hljs-string">&quot;111111111142142141&quot;</span> /&gt;<br>                &lt;entry key=<span class="hljs-string">&quot;银行卡&quot;</span> value=<span class="hljs-string">&quot;231231242412414&quot;</span> /&gt;<br>            &lt;/map&gt;<br>        &lt;/property&gt;<br>        &lt;!--Set--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;games&quot;</span>&gt;<br>            &lt;set&gt;<br>                &lt;value&gt;LOL&lt;/value&gt;<br>                &lt;value&gt;COC&lt;/value&gt;<br>                &lt;value&gt;BOB&lt;/value&gt;<br>            &lt;/set&gt;<br>        &lt;/property&gt;<br>        &lt;!--<span class="hljs-keyword">null</span>--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;wife&quot;</span>&gt;<br>            &lt;<span class="hljs-keyword">null</span>/&gt;<br>        &lt;/property&gt;<br>        &lt;!--Properties<br>        key=value<br>        key=value--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>            &lt;props&gt;<br>                &lt;prop key=&quot;学号&quot;&gt;185286&lt;/prop&gt;<br>                &lt;prop key=&quot;性别&quot;&gt;男&lt;/prop&gt;<br>                &lt;prop key=&quot;姓名&quot;&gt;小明&lt;/prop&gt;<br>            &lt;/props&gt;<br>        &lt;/property&gt;<br>    &lt;/bean&gt;<br><br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>    Student student = (Student) context.getBean(<span class="hljs-string">&quot;student&quot;</span>);<br>    System.out.println(student);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Student&#123;name=<span class="hljs-string">&#x27;乔威&#x27;</span>, address=Address&#123;address=<span class="hljs-string">&#x27;河北&#x27;</span>&#125;, books=[红楼梦, 西游记, 水浒传, 三国演义], hobbys=[听歌, 敲代码, 看电影], card=&#123;身份证=<span class="hljs-number">111111111142142141</span>, 银行卡=<span class="hljs-number">231231242412414</span>&#125;, games=[LOL, COC, BOB], wife=<span class="hljs-string">&#x27;null&#x27;</span>, info=&#123;学号=<span class="hljs-number">185286</span>, 性别=男, 姓名=小明&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-拓展方式注入"><a href="#6-3-拓展方式注入" class="headerlink" title="6.3 拓展方式注入"></a>6.3 拓展方式注入</h3><p>我们可以使用p命令空间和c命令空间进行注入：</p><p>官方解释：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/p_namespace.png" alt="p命名空间" style="zoom:75%;"><p>使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--p命名空间注入，可以直接注入属性的值：properties--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;乔威&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--c命名空间注入，可以通过构造器注入：constructor--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;18&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;乔威&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;userbeans.xml&quot;</span>);<br>    User user = context.getBean(<span class="hljs-string">&quot;user2&quot;</span>, User.class);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：p命名和c命名空间不能直接使用，需要导入xml约束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">xmlns:c=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span><br>xmlns:p=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6-4-Bean作用域"><a href="#6-4-Bean作用域" class="headerlink" title="6.4 Bean作用域"></a>6.4 Bean作用域</h3><table><thead><tr><th align="left">Scope</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-singleton">singleton</a></td><td align="left">(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-prototype">prototype</a></td><td align="left">Scopes a single bean definition to any number of object instances.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-request">request</a></td><td align="left">Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-session">session</a></td><td align="left">Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-application">application</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-stomp-websocket-scope">websocket</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><p>1.单例模式（Spring的默认机制）</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/bean_scope.png" alt="单例模式图解" style="zoom:75%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> c:age=<span class="hljs-string">&quot;18&quot;</span> c:name=<span class="hljs-string">&quot;乔威&quot;</span> scope=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>2.原型模式:每次从容器中get的时候，都会产生一个新对象</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/prototype_scope.png" alt="原型模式图解" style="zoom:75%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> c:age=<span class="hljs-string">&quot;18&quot;</span> c:name=<span class="hljs-string">&quot;乔威&quot;</span> scope=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>3.其余的request、session、application，这些只能在web开发中使用到。</p><h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul><li><p>自动装配是Spring满足bean依赖的一种方式！</p></li><li><p>Spring会在上下文中自动寻找，并自动给bean装配属性。</p></li></ul><p>在Spring中有三种装配的方式</p><ol><li>在xml中显式的配置</li><li>在java中显式配置</li><li>隐式的自动装配bean【重要】</li></ol><h3 id="7-1-测试"><a href="#7-1-测试" class="headerlink" title="7.1 测试"></a>7.1 测试</h3><ol><li>环境搭建<ul><li>一个人有两个宠物</li></ul></li></ol><h3 id="7-2-byName自动装配"><a href="#7-2-byName自动装配" class="headerlink" title="7.2 byName自动装配"></a>7.2 byName自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--byName：会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乔威&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-3-byType自动装配"><a href="#7-3-byType自动装配" class="headerlink" title="7.3 byType自动装配"></a>7.3 byType自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--byType：会自动在容器上下文中查找，和自己对象属性类型相同的beanid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乔威&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>小结：</p><ul><li>byname的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致。</li><li>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</li></ul><h3 id="7-4-使用注解实现自动装配"><a href="#7-4-使用注解实现自动装配" class="headerlink" title="7.4 使用注解实现自动装配"></a>7.4 使用注解实现自动装配</h3><p>jdk1.5支持的注解，Spring2.5就支持</p><p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML。</p><p>要使用的注解须知：</p><ol><li>导入约束，context约束</li><li>配置注解的支持：<a href="context:annotation-config/">context:annotation-config/</a></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>@AutoWired</strong></p><p>直接在属性上使用即可，也可以在set方式上使用。</p><p>是用@autowired，我们可以不用编写set方法了，前提是这个自动装配的属性在IOC（Spring）容器中存在，且符合名字byname。</p><p>科普：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">@Nullable 字段标记了这个注解，说明这个字段可以为null<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Autowired &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注释@Autowired完成的时候，我们可以使用@Quailifier(value=”xxx”)去配置@Autowired的使用，指定一个<strong>惟一的bean对象</strong>注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">ublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 如果显式地定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span><br>    <span class="hljs-meta">@Autowired()</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;cat1&quot;)</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;dog1&quot;)</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Resource注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 如果显式地定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span><br><br>    <span class="hljs-meta">@Resource(name = &quot;cat1&quot;)</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-meta">@Resource()</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小结</strong>：</p><p>@Resource和@Autowired的异同：</p><ul><li><p>都是用来自动装配的，都可以放在属性字段上</p></li><li><p>@Autowired通过byType的方式实现，而且要求这个对象必须存在 【常用】</p></li><li><p>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到对象的情况下，才报错。</p></li><li><p>执行顺序不同。</p></li></ul><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证<strong>aop的包</strong>导入了。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/aop.png" alt="aop导包"></p><p>使用注解使用导入context约束，增加注解的支持！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-1-bean"><a href="#8-1-bean" class="headerlink" title="8.1 bean"></a>8.1 bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br> ...<br>&#125;<br></code></pre></td></tr></table></figure><p>@Component：组件，放在类上，说明这个类被Spring管理了，就是bean</p><h3 id="8-2-属性如何注入"><a href="#8-2-属性如何注入" class="headerlink" title="8.2 属性如何注入"></a>8.2 属性如何注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 等价于&lt;bean id=&quot;user&quot; class=&quot;com.atrox.pojo.User&quot;/&gt;</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-comment">// 相当于</span><br>    <span class="hljs-comment">// &lt;bean id=&quot;user&quot; class=&quot;com.atrox.pojo.User&quot;&gt;</span><br>    <span class="hljs-comment">//    &lt;property name=&quot;name&quot; value=&quot;乔威&quot;/&gt;</span><br>    <span class="hljs-comment">// &lt;/bean&gt;</span><br>    <span class="hljs-meta">@Value(&quot;乔威&quot;)</span><br>    <span class="hljs-keyword">public</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-衍生的注解"><a href="#8-3-衍生的注解" class="headerlink" title="8.3 衍生的注解"></a>8.3 衍生的注解</h3><p>@Component 有几个衍生注解，我们在web开发中，会按照mvc三层架构分层</p><ul><li>dao【@Repository】</li><li>service【@Service】</li><li>controller【@Controller】</li></ul><p>这四个注解功能都是一样的，都是代表将某个类注册到Spring容器中，装配Bean</p><h3 id="8-4-自动装配"><a href="#8-4-自动装配" class="headerlink" title="8.4 自动装配"></a>8.4 自动装配</h3><ul><li>@Autowired：自动装配通过类型、名字<ul><li>如果Autowired不能唯一自动装配上属性，则需要通过@Qualifilter(value=”xxx”)</li></ul></li><li>@Nullable：字段标记了这个注解，说明这个字段可以为null</li><li>@Resource：自动装配通过名字、类型</li></ul><h3 id="8-5-作用域"><a href="#8-5-作用域" class="headerlink" title="8.5 作用域"></a>8.5 作用域</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-comment">// 相当于</span><br>    <span class="hljs-comment">// &lt;bean id=&quot;user&quot; class=&quot;com.atrox.pojo.User&quot;&gt;</span><br>    <span class="hljs-comment">//    &lt;property name=&quot;name&quot; value=&quot;乔威&quot;/&gt;</span><br>    <span class="hljs-comment">// &lt;/bean&gt;</span><br>    <span class="hljs-meta">@Value(&quot;乔威&quot;)</span><br>    <span class="hljs-keyword">public</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-6-小结"><a href="#8-6-小结" class="headerlink" title="8.6 小结"></a>8.6 小结</h3><p>xml与注解：</p><ul><li>xml更加万能，适用于任何场合，维护简单方便</li><li>注解不是自己的类使用不了，维护相对复杂。</li></ul><p>xml与注解的最佳实践：</p><ul><li><p>xml 用来管理bean；</p></li><li><p>注解只负责完成属性的注入</p></li><li><p>我们在使用的过程中，只需要注意一个问题：必须让注解生效，就需要开启注解的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atrox.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="9、使用java的方式配置Spring"><a href="#9、使用java的方式配置Spring" class="headerlink" title="9、使用java的方式配置Spring"></a>9、使用java的方式配置Spring</h2><p>我们现在要完全不使用Spring的xml配置了，全权交给java来做。</p><p>JavaConfig是Spring的一个子项目，咋iSpring4之后，它成为了一个核心功能</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/annotation_context.png" alt="注解实现上下文"></p><p>我们先写一个实体类User：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里这个注解的意思，就是说明这个类被Spring接管了，注册到了容器中</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">// 属性注入值</span><br>    <span class="hljs-meta">@Value(&quot;乔威&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后以java的方式配置Spring</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这个也会被Spring容器托管，注册到容器中，因为他本来就是一个@Component</span><br><span class="hljs-comment">// @Configuration代表这是一个配置类，就和我们之前看的beans.xml是一样的</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atrox.pojo&quot;)</span><br><span class="hljs-meta">@Import(AtroxConfig2.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtroxConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">// 注册一个bean，就相当于我们之前写的一个bean标签</span><br>    <span class="hljs-comment">// 这个方法的名字，就相当于bean标签中的id属性</span><br>    <span class="hljs-comment">// 这个方法的返回值，就相当于bean标签的class属性</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 如果完全使用了配置类方式去做，我们就只能通过 AnnotationConfigApplicationContext 来获取容器</span><br>    <span class="hljs-comment">// 通过配置类的class对象加载</span><br>    AnnotationConfigApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(AtroxConfig.class);<br>    User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    System.out.println(user);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这种纯java的配置方式，在Springboot中到处可见</p><h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层！【SpringAOP 和 SpringMVC】</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt="代理模式图解"></p><h3 id="10-1-静态代理"><a href="#10-1-静态代理" class="headerlink" title="10.1 静态代理"></a>10.1 静态代理</h3><p>角色分析：</p><ul><li><p>抽象角色：一般会使用接口或者抽象类来解决</p></li><li><p>真实角色：被代理的角色</p></li><li><p>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</p></li><li><p>客户：访问代理对象的人</p></li></ul><p>代码步骤：</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 租房：抽象角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 房东：真实角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东要出租房子&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Host host;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;<br>        host.rent();<br>    &#125;<br><br>    <span class="hljs-comment">// 看房</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;中介带你看房&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 收中介费</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fare</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 签合同</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hetong</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;签租赁合同&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 房东要租房子</span><br>        Host host = <span class="hljs-keyword">new</span> Host();<br>        <span class="hljs-comment">// 代理，中介帮房东租房子。但是，代理一般会有一些附属操作</span><br>        Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);<br>        <span class="hljs-comment">// 客户不用面对房东，直接面向中介租房</span><br>        proxy.rent();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共业务就交给了代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色；如果有几十个真实角色，代码量会翻倍，开发效率会变低。</li></ul><h3 id="10-2-静态代理再理解"><a href="#10-2-静态代理再理解" class="headerlink" title="10.2 静态代理再理解"></a>10.2 静态代理再理解</h3><p>代码：</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>真实角色：在这里改动原有的业务代码，是公司大忌！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 真实对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>需求来了，现在我们需要增加一个日志功能，如何实现？</p><ul><li>思路1：在实现类上增加代码【麻烦！】</li><li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！</li></ul></li><li><p>设置一个代理类来处理日志！代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> UserServiceImpl userService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserServiceImpl userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.log(<span class="hljs-string">&quot;add&quot;</span>);<br>        userService.add();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.log(<span class="hljs-string">&quot;delete&quot;</span>);<br>        userService.delete();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.log(<span class="hljs-string">&quot;update&quot;</span>);<br>        userService.update();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.log(<span class="hljs-string">&quot;query&quot;</span>);<br>        userService.query();<br>    &#125;<br><br>    <span class="hljs-comment">// 日志方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;使用了&quot;</span> + msg + <span class="hljs-string">&quot;方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br><br>        UserServiceProxy proxy = <span class="hljs-keyword">new</span> UserServiceProxy();<br>        proxy.setUserService(userService);<br><br>        proxy.add();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</strong></p><p>聊聊AOP：纵向开发，横向开发</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/AOP机制.png" alt="AOP实现机制" style="zoom:75%;"><h3 id="10-3-动态代理"><a href="#10-3-动态代理" class="headerlink" title="10.3 动态代理"></a>10.3 动态代理</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是我们直接写好的</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<ul><li>基于接口—JDK动态代理【我们在这里使用】</li><li>基于类—cglib</li><li>java字节码实现：javasist</li></ul></li></ul><p>需要了解两个类：Proxy：代理、invocationHandler：调用处理程序</p><p>动态代理的好处：</p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共也就交给代理角色！实现了业务的分工！</li><li>公共业务发生扩展的时候，方便集中管理！</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可【核心】</li></ul><p><strong>代码</strong>:</p><ol><li><p>万能代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 我们会用这个类，自动生成代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">// 被代理的接口</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">// 生成得到代理类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 处理代理实例的方法，并返回结果</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        log(method.getName());<br>        <span class="hljs-comment">// 动态代理的本质，就是使用反射机制实现</span><br>        <span class="hljs-keyword">return</span> method.invoke(target, args);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了&quot;</span> + msg + <span class="hljs-string">&quot;方法&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Client端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 真实角色</span><br>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>        <span class="hljs-comment">// 代理角色,不存在</span><br>        ProxyInvocationHandler pih = <span class="hljs-keyword">new</span> ProxyInvocationHandler();<br>        <span class="hljs-comment">// 设置要代理的对象</span><br>        pih.setTarget(userService);<br>        <span class="hljs-comment">// 动态生成代理类</span><br>        UserService proxy = (UserService) pih.getProxy();<br><br>        proxy.delete();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">执行了delete方法<br>删除了一个用户<br></code></pre></td></tr></table></figure></li></ol><h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h3 id="11-1-什么是AOP"><a href="#11-1-什么是AOP" class="headerlink" title="11.1 什么是AOP"></a>11.1 什么是AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/aop_log.png" alt="AOP图解" style="zoom:75%;"><h3 id="11-2-Aop在Spring中的作用"><a href="#11-2-Aop在Spring中的作用" class="headerlink" title="11.2 Aop在Spring中的作用"></a>11.2 Aop在Spring中的作用</h3><p><strong>提供声明式事务；允许用户自定义切面</strong></p><p>以下名词需要了解下：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。Log</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。Log方法</li><li>目标（Target）：被通知对象。接口</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。代理类</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。method</li><li>连接点（JointPoint）：与切入点匹配的执行点。invoke</li></ul><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5学习笔记/aop_diy.png" alt="面向切面编程" style="zoom:80%;"><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><table><thead><tr><th>通知类型</th><th>连接点</th><th>实现接口</th></tr></thead><tbody><tr><td>前置通知</td><td>方法前</td><td>org.springframework.aop.MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td>方法后</td><td>org.springframework.aop.AfterReturningAdvice</td></tr><tr><td>环绕通知</td><td>方法前后</td><td>org.aopalliance.intercept.MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td>方法抛出异常</td><td>org.springframework.aop.ThrowsAdvice</td></tr><tr><td>引介通知</td><td>类中增加新的方法属性</td><td>org.springframework.aop.IntroductionInterceptor</td></tr></tbody></table><p>即 Aop 在 不改变原有代码的情况下 , 去增加新的功能 .</p><h3 id="11-3-使用Spring实现AOP"><a href="#11-3-使用Spring实现AOP" class="headerlink" title="11.3 使用Spring实现AOP"></a>11.3 使用Spring实现AOP</h3><p>【重点】使用AOP织入，需要导入一个依赖包！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式一：使用Spring的API接口</strong></p><ol><li><p>首先编写我们的业务接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;更新了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>&#123;<br><br>    <span class="hljs-comment">// method：要执行的目标对象的方法</span><br>    <span class="hljs-comment">// args：参数</span><br>    <span class="hljs-comment">// target：目标对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(target.getClass().getName() + <span class="hljs-string">&quot;的&quot;</span> + method.getName() + <span class="hljs-string">&quot;被执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AfterLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AfterReturningAdvice</span> </span>&#123;<br><br>    <span class="hljs-comment">// returnValue：返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了&quot;</span> + method.getName() + <span class="hljs-string">&quot;返回结果为：&quot;</span> + returnValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 .</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xmlns:aop=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="hljs-string">       http://www.springframework.org/schema/aop</span><br><span class="hljs-string">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;<br><br>    &lt;!--注册bean--&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.service.UserServiceImpl&quot;</span>/&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.log.Log&quot;</span>/&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.log.AfterLog&quot;</span>/&gt;<br><br>    &lt;!--方式一：使用元是哪个Spring API接口--&gt;<br>    &lt;!--配置AOP:需要导入AOP的约束--&gt;<br>    &lt;aop:config&gt;<br>        &lt;!--切入点:expression:表达式 execution(要执行的位置！* * *)--&gt;<br>        &lt;aop:pointcut id=<span class="hljs-string">&quot;pointcut&quot;</span> expression=<span class="hljs-string">&quot;execution(* com.atrox.service.UserServiceImpl.*(..))&quot;</span>/&gt;<br>        &lt;!--执行环绕增强--&gt;<br>        &lt;aop:advisor advice-ref=<span class="hljs-string">&quot;log&quot;</span> pointcut-ref=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;<br>        &lt;aop:advisor advice-ref=<span class="hljs-string">&quot;afterLog&quot;</span> pointcut-ref=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;<br>    &lt;/aop:config&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-comment">// 动态代理代理的是接口:注意点</span><br>    UserService userService = context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>    <span class="hljs-comment">//</span><br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>方式二：自定义来实现AOP</strong></p><p>目标业务类不变依旧是userServiceImpl</p><ol><li><p>写我们自己的一个切入类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointCut</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==========方法执行前============&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==========方法执行后============&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>去spring中配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--方式二：自定义类--&gt;<br>&lt;!--注册bean--&gt;<br>&lt;bean id=<span class="hljs-string">&quot;diy&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;nuc.ss.diy.DiyPointCut&quot;</span>/&gt;<br><br>&lt;!--aop的配置--&gt;<br>&lt;aop:config&gt;<br>    &lt;!--自定义切面，ref要引用的类--&gt;<br>    &lt;aop:aspect ref=<span class="hljs-string">&quot;diy&quot;</span>&gt;<br>        &lt;!--切入点--&gt;<br>        &lt;aop:pointcut id=<span class="hljs-string">&quot;point&quot;</span> expression=<span class="hljs-string">&quot;execution(* nuc.ss.service.UserServiceImpl.*(..))&quot;</span>/&gt;<br>        &lt;aop:before method=<span class="hljs-string">&quot;before&quot;</span> pointcut-ref=<span class="hljs-string">&quot;point&quot;</span>/&gt;<br>        &lt;aop:after method=<span class="hljs-string">&quot;after&quot;</span> pointcut-ref=<span class="hljs-string">&quot;point&quot;</span>/&gt;<br>        &lt;!--通知--&gt;<br>    &lt;/aop:aspect&gt;<br>&lt;/aop:config&gt;<br></code></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>    UserService userService = (UserService)context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br><br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>方式三：使用注解实现AOP</strong></p><ol><li><p>编写一个注解实现的增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用注解方式实现AOP</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 标注这个类是一个切面</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationPointCut</span> </span>&#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(* com.atrox.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====方法执行前=====&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(* com.atrox.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====方法执行后=====&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 在环绕增强中，我们可以给定一个参数，代表我们要处理切入的点</span><br>    <span class="hljs-meta">@Around(&quot;execution(* com.atrox.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint jp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕前&quot;</span>);<br>        Signature signature = jp.getSignature();<span class="hljs-comment">//获得签名</span><br>        System.out.println(<span class="hljs-string">&quot;signature:&quot;</span> + signature);<br>        <span class="hljs-comment">//执行方法</span><br>        Object proceed = jp.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕后&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在Spring配置文件中，注册bean，并增加支持注解的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--方式三--&gt; <br>&lt;bean id=<span class="hljs-string">&quot;annotationPointCut&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.diy.AnnotationPointCut&quot;</span>/&gt;<br>    &lt;!--开启注解支持 JDK(默认) cglib--&gt;<br>&lt;aop:aspectj-autoproxy/&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="12、整合MyBatis"><a href="#12、整合MyBatis" class="headerlink" title="12、整合MyBatis"></a>12、整合MyBatis</h2><p>步骤：</p><ol><li><p>导入相关jar包</p><ul><li><p>junit</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>mybatis</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>        &lt;version&gt;3.5.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>mysql数据库：mysql-connector-java</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;8.0.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>spring相关：spring-webmvc</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;<br>    &lt;version&gt;5.3.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>aspectJ AOP 织入器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;<br>    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;<br>    &lt;version&gt;1.9.4&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>mybatis-spring【new】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;<br>    &lt;version&gt;2.0.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置Maven静态资源过滤问题</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;build&gt;<br>    &lt;resources&gt;<br>    &lt;resource&gt;<br>    &lt;directory&gt;src/main/resources&lt;/directory&gt;<br>    &lt;includes&gt;<br>    &lt;include&gt;**<span class="hljs-comment">/*.properties&lt;/include&gt;</span><br>                    &lt;include&gt;**/*.xml&lt;/include&gt;<br>    &lt;/includes&gt;<br>    &lt;filtering&gt;false&lt;/filtering&gt;<br>    &lt;/resource&gt;<br>    &lt;resource&gt;<br>    &lt;directory&gt;src/main/java&lt;/directory&gt;<br>    &lt;includes&gt;<br>    &lt;include&gt;**<span class="hljs-comment">/*.properties&lt;/include&gt;</span><br>                    &lt;include&gt;**/*.xml&lt;/include&gt;<br>    &lt;/includes&gt;<br>    &lt;filtering&gt;false&lt;/filtering&gt;<br>    &lt;/resource&gt;<br>    &lt;/resources&gt;<br>&lt;/build&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编写配置文件</p></li><li><p>测试</p></li></ol><h3 id="12-1-回忆mybatis"><a href="#12-1-回忆mybatis" class="headerlink" title="12.1 回忆mybatis"></a>12.1 回忆mybatis</h3><ol><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写核心配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE configuration<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;<br>&lt;!--configuration核心配置文件--&gt;<br>&lt;configuration&gt;<br><br>    &lt;typeAliases&gt;<br>        &lt;<span class="hljs-keyword">package</span> name=<span class="hljs-string">&quot;com.atrox.pojo&quot;</span>/&gt;<br>    &lt;/typeAliases&gt;<br><br>    &lt;!--可以配置多套环境 <span class="hljs-keyword">default</span>为默认选择的环境--&gt;<br>    &lt;environments <span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;<br>        &lt;environment id=<span class="hljs-string">&quot;development&quot;</span>&gt;<br>            &lt;!--事务管理方式选择JDBC的事务管理--&gt;<br>            &lt;transactionManager type=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;<br>            &lt;!--连接数据库的配置，改为自己的--&gt;<br>            &lt;dataSource type=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;<br>                &lt;property name=<span class="hljs-string">&quot;driver&quot;</span> value=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;<br>                &lt;!--&amp;amp;为&amp;的转义符--&gt;<br>                &lt;property name=<span class="hljs-string">&quot;url&quot;</span> value=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8&amp;amp;serverTimezone=GMT&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;root&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;zuiweizhiming666&quot;</span>/&gt;<br>            &lt;/dataSource&gt;<br>        &lt;/environment&gt;<br>    &lt;/environments&gt;<br><br>    &lt;mappers&gt;<br>        &lt;mapper <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.atrox.mapper.UserMapper&quot;</span>/&gt;<br>    &lt;/mappers&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure></li><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Mapper.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.atrox.mapper.UserMapper&quot;</span>&gt;<br><br>    &lt;select id=<span class="hljs-string">&quot;selectUser&quot;</span> resultType=<span class="hljs-string">&quot;user&quot;</span>&gt;<br>        select * from mybatis.user;<br>    &lt;/select&gt;<br><br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>    String resources = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    InputStream in = Resources.getResourceAsStream(resources);<br>    SqlSessionFactory sessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(in);<br>    SqlSession sqlSession = sessionFactory.openSession(<span class="hljs-keyword">true</span>);<br><br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    List&lt;User&gt; users = mapper.selectUser();<br>    <span class="hljs-keyword">for</span> (User user : users) &#123;<br>        System.out.println(user);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="12-2-mybatis-spring"><a href="#12-2-mybatis-spring" class="headerlink" title="12.2 mybatis-spring"></a>12.2 mybatis-spring</h3><p><strong>什么是 MyBatis-Spring？</strong></p><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。</p><p><strong>知识基础</strong></p><p>在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis 这两个框架和有关它们的术语。这很重要</p><p>MyBatis-Spring 需要以下版本：</p><table><thead><tr><th>MyBatis-Spring</th><th>MyBatis</th><th>Spring 框架</th><th>Spring Batch</th><th>Java</th></tr></thead><tbody><tr><td>2.0</td><td>3.5+</td><td>5.0+</td><td>4.0+</td><td>Java 8+</td></tr><tr><td>1.3</td><td>3.4+</td><td>3.2.2+</td><td>2.1+</td><td>Java 6+</td></tr></tbody></table><p>如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>整合方式一</strong>：</p><ol><li><p>引入配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--DataSource:使用Spring的数据源替换MyBatis的配置 c3p0 dbcp druid</span><br><span class="hljs-comment">    我们这里使用Spring提供的JDBC--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=GMT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zuiweizhiming666&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>sqlessionFactory</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--绑定mybatis配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/atrox/mapper/*.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>sqlSessionTemplate</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SqlSrssionTemplate:就是我们使用的sqlSession--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为它没有set方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>需要给接口加实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>&#123;<br><br>    <span class="hljs-comment">// 之前所有的代码都是在测试类里写的，现在挪到这里</span><br>    <span class="hljs-comment">// 在原来，我们的所有操作，都使用sqlSession来执行。现在都使用SqlSessionTemplate</span><br>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSession;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSqlSession</span><span class="hljs-params">(SqlSessionTemplate sqlSession)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sqlSession = sqlSession;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>&#123;<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-keyword">return</span> mapper.selectUser();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将自己写的实现类，注入到Spring中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.mapper.UserMapperImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring-dao.xml&quot;</span>);<br><br>    UserMapper userMapper = context.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>, UserMapper.class);<br>    <span class="hljs-keyword">for</span> (User user : userMapper.selectUser()) &#123;<br>        System.out.println(user);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果成功输出！现在我们的Mybatis配置文件的状态！发现都可以被Spring整合！</p><p>为了给mybatis-config.xml留点面子(使用方便)，在其中将别名和设置留下来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nuc.ss.pojo&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- &lt;settings&gt;</span><br><span class="hljs-comment"> &lt;setting&gt;&lt;/setting&gt;</span><br><span class="hljs-comment"> &lt;/settings&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>整合方式二</strong></p><p>官方文档截图 :</p><p>dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起方式1 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SqlSessionDaoSupport.png" alt="第二种整合方式"></p><p>测试：</p><ol><li><p>将我们上面写的UserDaoImpl修改一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>&#123;<br>       UserMapper mapper = getSqlSession().getMapper(UserMapper.class);<br>       <span class="hljs-keyword">return</span> mapper.selectUser();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改bean的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nuc.ss.dao.UserDaoImpl&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>   ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>   UserMapper mapper = (UserMapper) context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>   List&lt;User&gt; user = mapper.selectUser();<br>   System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>总结 : 整合到spring以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，我们还可以使用注解来实现，这个等我们后面学习SpringBoot的时候还会测试整合！</strong></p><h2 id="13、声明式事务"><a href="#13、声明式事务" class="headerlink" title="13、声明式事务"></a>13、声明式事务</h2><h3 id="13-1-回顾事务"><a href="#13-1-回顾事务" class="headerlink" title="13.1 回顾事务"></a>13.1 回顾事务</h3><ul><li>把一组业务当成一个业务来做；要么都成功，要么都失败</li><li>事务在项目开发中，十分的重要，涉及到数据的一致性问题，不能马虎</li><li>确保完整性和一致性；</li></ul><p>事务ACID原则：</p><ul><li>原子性</li><li>一致性</li><li>隔离性<ul><li>多个业务可能操作同一个资源，防止数据损坏</li></ul></li><li>持久性<ul><li>事务一旦提交，无论系统发生什么问题，结果都不会再影响，被持久化的写到存储器中。</li></ul></li></ul><h3 id="13-2-spring中的事务管理"><a href="#13-2-spring中的事务管理" class="headerlink" title="13.2 spring中的事务管理"></a>13.2 spring中的事务管理</h3><ul><li><p><strong>声明式事务：AOP</strong></p><ul><li>一般情况下比编程式事务好用。</li><li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</li><li>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理</li></ul></li><li><p>编程式事务：需要在代码中，进行事务的管理</p><ul><li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚</li><li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li></ul></li><li><p><strong>使用Spring管理事务，注意头文件的约束导入 : tx</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">xmlns:tx=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span><br><br>http:<span class="hljs-comment">//www.springframework.org/schema/tx</span><br>http:<span class="hljs-comment">//www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>事务管理器</strong></p><ul><li>无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。</li><li>就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。</li></ul></li><li><p><strong>JDBC事务</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>配置事务的通知</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结合AOP实现事务的织入--&gt;</span><br><span class="hljs-comment">&lt;!--配置事务通知--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--要给哪些方法配置事务--&gt;</span><br>    <span class="hljs-comment">&lt;!--配置事务的传播特性：新特性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>spring事务传播特性</strong></p><ul><li><strong>propagation_requierd</strong>：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li><strong>propagation_nested</strong>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul></li><li><p><strong>配置AOP</strong>（导入aop的头文件！）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置aop织入事务--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* nuc.ss.dao.*.*(..))&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointcut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>思考：</p><p>为什么需要事务？</p><ul><li>如果不配置，可能存在数据提交不一致的情况；</li><li>如果我们不在Spring中去配置声明式事务，我们需要在代码中手动配置事务！</li><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超市管理系统-JSP版本</title>
    <link href="/posts/2020/12/31/%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-JSP%E7%89%88%E6%9C%AC/"/>
    <url>/posts/2020/12/31/%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-JSP%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="SMBMS"><a href="#SMBMS" class="headerlink" title="SMBMS"></a>SMBMS</h1><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-JSP%E7%89%88%E6%9C%AC/SMBMS.png" alt="SMBMS整体架构"></p><p><strong>项目如何搭建</strong>？</p><p>考虑适用不适用Maven？依赖，jar</p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><ol><li><p>搭建一个mavenweb项目</p></li><li><p>配置Tomcat</p></li><li><p>测试项目是否能够跑起来</p></li><li><p>导入项目中会遇到的jar包</p><p>jsp，Servlet，mysql驱动，jstl，standard</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建项目包结构</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-JSP%E7%89%88%E6%9C%AC/project_directory_structure.png" alt="项目包结构"></p></li><li><p>实体类</p><p><strong>ORM映射</strong>：表—类映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// User 类</span><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> String userCode; <span class="hljs-comment">//用户编码</span><br>    <span class="hljs-keyword">private</span> String userName; <span class="hljs-comment">//用户名称</span><br>    <span class="hljs-keyword">private</span> String userPassword; <span class="hljs-comment">//用户密码</span><br>    <span class="hljs-keyword">private</span> Integer gender;  <span class="hljs-comment">//性别</span><br>    <span class="hljs-keyword">private</span> Date birthday;  <span class="hljs-comment">//出生日期</span><br>    <span class="hljs-keyword">private</span> String phone;   <span class="hljs-comment">//电话</span><br>    <span class="hljs-keyword">private</span> String address; <span class="hljs-comment">//地址</span><br>    <span class="hljs-keyword">private</span> Integer userRole;    <span class="hljs-comment">//用户角色</span><br>    <span class="hljs-keyword">private</span> Integer createdBy;   <span class="hljs-comment">//创建者</span><br>    <span class="hljs-keyword">private</span> Date creationDate; <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> Integer modifyBy;     <span class="hljs-comment">//更新者</span><br>    <span class="hljs-keyword">private</span> Date modifyDate;   <span class="hljs-comment">//更新时间</span><br><br>    <span class="hljs-keyword">private</span> Integer age;<span class="hljs-comment">//年龄</span><br><br>    <span class="hljs-keyword">private</span> String userRoleName;    <span class="hljs-comment">//用户角色名称</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserRoleName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userRoleName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserRoleName</span><span class="hljs-params">(String userRoleName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userRoleName = userRoleName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">/*long time = System.currentTimeMillis()-birthday.getTime();</span><br><span class="hljs-comment">Integer age = Long.valueOf(time/365/24/60/60/1000).IntegerValue();*/</span><br>        Date date = <span class="hljs-keyword">new</span> Date();<br>        Integer age = date.getYear()-birthday.getYear();<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userCode;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserCode</span><span class="hljs-params">(String userCode)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userCode = userCode;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserName</span><span class="hljs-params">(String userName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userName = userName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userPassword;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserPassword</span><span class="hljs-params">(String userPassword)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userPassword = userPassword;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(Integer gender)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(Date birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPhone</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPhone</span><span class="hljs-params">(String phone)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.phone = phone;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getUserRole</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userRole;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserRole</span><span class="hljs-params">(Integer userRole)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userRole = userRole;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCreatedBy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> createdBy;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreatedBy</span><span class="hljs-params">(Integer createdBy)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.createdBy = createdBy;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreationDate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> creationDate;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreationDate</span><span class="hljs-params">(Date creationDate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.creationDate = creationDate;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getModifyBy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> modifyBy;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyBy</span><span class="hljs-params">(Integer modifyBy)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.modifyBy = modifyBy;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getModifyDate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> modifyDate;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyDate</span><span class="hljs-params">(Date modifyDate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.modifyDate = modifyDate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Bill类</span><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bill</span> </span>&#123;<br><span class="hljs-keyword">private</span> Integer id;   <span class="hljs-comment">//id </span><br><span class="hljs-keyword">private</span> String billCode; <span class="hljs-comment">//账单编码 </span><br><span class="hljs-keyword">private</span> String productName; <span class="hljs-comment">//商品名称 </span><br><span class="hljs-keyword">private</span> String productDesc; <span class="hljs-comment">//商品描述 </span><br><span class="hljs-keyword">private</span> String productUnit; <span class="hljs-comment">//商品单位</span><br><span class="hljs-keyword">private</span> BigDecimal productCount; <span class="hljs-comment">//商品数量 </span><br><span class="hljs-keyword">private</span> BigDecimal totalPrice; <span class="hljs-comment">//总金额</span><br><span class="hljs-keyword">private</span> Integer isPayment; <span class="hljs-comment">//是否支付 </span><br><span class="hljs-keyword">private</span> Integer providerId; <span class="hljs-comment">//供应商ID </span><br><span class="hljs-keyword">private</span> Integer createdBy; <span class="hljs-comment">//创建者</span><br><span class="hljs-keyword">private</span> Date creationDate; <span class="hljs-comment">//创建时间</span><br><span class="hljs-keyword">private</span> Integer modifyBy; <span class="hljs-comment">//更新者</span><br><span class="hljs-keyword">private</span> Date modifyDate;<span class="hljs-comment">//更新时间</span><br><br><span class="hljs-keyword">private</span> String providerName;<span class="hljs-comment">//供应商名称</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProviderName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> providerName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProviderName</span><span class="hljs-params">(String providerName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.providerName = providerName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBillCode</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> billCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBillCode</span><span class="hljs-params">(String billCode)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.billCode = billCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProductName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> productName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProductName</span><span class="hljs-params">(String productName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.productName = productName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProductDesc</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> productDesc;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProductDesc</span><span class="hljs-params">(String productDesc)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.productDesc = productDesc;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProductUnit</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> productUnit;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProductUnit</span><span class="hljs-params">(String productUnit)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.productUnit = productUnit;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getProductCount</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> productCount;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProductCount</span><span class="hljs-params">(BigDecimal productCount)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.productCount = productCount;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getTotalPrice</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> totalPrice;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalPrice</span><span class="hljs-params">(BigDecimal totalPrice)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.totalPrice = totalPrice;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getIsPayment</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> isPayment;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIsPayment</span><span class="hljs-params">(Integer isPayment)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.isPayment = isPayment;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getProviderId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> providerId;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProviderId</span><span class="hljs-params">(Integer providerId)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.providerId = providerId;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCreatedBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreatedBy</span><span class="hljs-params">(Integer createdBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.createdBy = createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreationDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreationDate</span><span class="hljs-params">(Date creationDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.creationDate = creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getModifyBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyBy</span><span class="hljs-params">(Integer modifyBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyBy = modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getModifyDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyDate</span><span class="hljs-params">(Date modifyDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyDate = modifyDate;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Role类</span><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Integer id;   <span class="hljs-comment">//id</span><br><span class="hljs-keyword">private</span> String roleCode; <span class="hljs-comment">//角色编码</span><br><span class="hljs-keyword">private</span> String roleName; <span class="hljs-comment">//角色名称</span><br><span class="hljs-keyword">private</span> Integer createdBy; <span class="hljs-comment">//创建者</span><br><span class="hljs-keyword">private</span> Date creationDate; <span class="hljs-comment">//创建时间</span><br><span class="hljs-keyword">private</span> Integer modifyBy; <span class="hljs-comment">//更新者</span><br><span class="hljs-keyword">private</span> Date modifyDate;<span class="hljs-comment">//更新时间</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoleCode</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> roleCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleCode</span><span class="hljs-params">(String roleCode)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.roleCode = roleCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoleName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> roleName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleName</span><span class="hljs-params">(String roleName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.roleName = roleName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCreatedBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreatedBy</span><span class="hljs-params">(Integer createdBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.createdBy = createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreationDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreationDate</span><span class="hljs-params">(Date creationDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.creationDate = creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getModifyBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyBy</span><span class="hljs-params">(Integer modifyBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyBy = modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getModifyDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyDate</span><span class="hljs-params">(Date modifyDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyDate = modifyDate;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Provider类</span><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Integer id;   <span class="hljs-comment">//id</span><br><span class="hljs-keyword">private</span> String proCode; <span class="hljs-comment">//供应商编码</span><br><span class="hljs-keyword">private</span> String proName; <span class="hljs-comment">//供应商名称</span><br><span class="hljs-keyword">private</span> String proDesc; <span class="hljs-comment">//供应商描述</span><br><span class="hljs-keyword">private</span> String proContact; <span class="hljs-comment">//供应商联系人</span><br><span class="hljs-keyword">private</span> String proPhone; <span class="hljs-comment">//供应商电话</span><br><span class="hljs-keyword">private</span> String proAddress; <span class="hljs-comment">//供应商地址</span><br><span class="hljs-keyword">private</span> String proFax; <span class="hljs-comment">//供应商传真</span><br><span class="hljs-keyword">private</span> Integer createdBy; <span class="hljs-comment">//创建者</span><br><span class="hljs-keyword">private</span> Date creationDate; <span class="hljs-comment">//创建时间</span><br><span class="hljs-keyword">private</span> Integer modifyBy; <span class="hljs-comment">//更新者</span><br><span class="hljs-keyword">private</span> Date modifyDate;<span class="hljs-comment">//更新时间</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProCode</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProCode</span><span class="hljs-params">(String proCode)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proCode = proCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProName</span><span class="hljs-params">(String proName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proName = proName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProDesc</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proDesc;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProDesc</span><span class="hljs-params">(String proDesc)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proDesc = proDesc;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProContact</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proContact;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProContact</span><span class="hljs-params">(String proContact)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proContact = proContact;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProPhone</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proPhone;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProPhone</span><span class="hljs-params">(String proPhone)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proPhone = proPhone;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProAddress</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proAddress;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProAddress</span><span class="hljs-params">(String proAddress)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proAddress = proAddress;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProFax</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proFax;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProFax</span><span class="hljs-params">(String proFax)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proFax = proFax;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCreatedBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreatedBy</span><span class="hljs-params">(Integer createdBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.createdBy = createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreationDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreationDate</span><span class="hljs-params">(Date creationDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.creationDate = creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getModifyBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyBy</span><span class="hljs-params">(Integer modifyBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyBy = modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getModifyDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyDate</span><span class="hljs-params">(Date modifyDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyDate = modifyDate;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li><p>编写基础公共类</p><ol><li><p>数据库配置文件 db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">zuiweizhiming666</span><br></code></pre></td></tr></table></figure></li><li><p>编写操作数据库的公共类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">// 操作数据库的公共类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;<br><br>    <span class="hljs-comment">// 静态代码块，类加载的时候就初始化了</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">// 通过类加载器读取对应的资源</span><br>        InputStream is = BaseDao.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(is);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        url= properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取数据库的连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(driver);<br>            connection = DriverManager.getConnection(url, username, password);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> connection;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 编写查询公共方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultSet <span class="hljs-title">executeSelect</span><span class="hljs-params">(Connection connection,String sql,Object[] params,PreparedStatement preparedStatement)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        <span class="hljs-comment">// 预编译的sql，灾后main直接执行就可以了</span><br>        preparedStatement = connection.prepareStatement(sql);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>            <span class="hljs-comment">//setObject，占位符从1开始，但是我们的数组是从0开始！</span><br>            preparedStatement.setObject(i+<span class="hljs-number">1</span>,params[i]);<br>        &#125;<br><br>        ResultSet resultSet = preparedStatement.executeQuery();<br>        <span class="hljs-keyword">return</span> resultSet;<br>    &#125;<br><br>    <span class="hljs-comment">// 编写增删改公共方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">executeUpdate</span><span class="hljs-params">(Connection connection,String sql,Object[] params,PreparedStatement preparedStatement)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        preparedStatement = connection.prepareStatement(sql);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>            <span class="hljs-comment">//setObject，占位符从1开始，但是我们的数组是从0开始！</span><br>            preparedStatement.setObject(i+<span class="hljs-number">1</span>,params[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> updateRows = preparedStatement.executeUpdate();<br>        <span class="hljs-keyword">return</span> updateRows;<br>    &#125;<br><br>    <span class="hljs-comment">// 释放资源</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">closeResources</span><span class="hljs-params">(Connection connection, PreparedStatement preparedStatement, ResultSet resultSet)</span> </span>&#123;<br><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                resultSet.close();<br>                <span class="hljs-comment">// GC回收</span><br>                resultSet = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>                flag = <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (preparedStatement != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                preparedStatement.close();<br>                <span class="hljs-comment">// GC回收</span><br>                preparedStatement = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>                flag = <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>                <span class="hljs-comment">// GC回收</span><br>                connection = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>                flag = <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> flag;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写字符编码过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>导入静态资源</p></li></ol><h3 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h3><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-JSP%E7%89%88%E6%9C%AC/login_process.png" alt="登录功能流程图"></p><ol><li><p>编写前端页面</p></li><li><p>设置首页</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置欢迎页面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>login.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写dao层登录用户登录的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getLoginUser</span><span class="hljs-params">(Connection connection,String userCode)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写dao接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getLoginUser</span><span class="hljs-params">(Connection connection, String userCode)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        PreparedStatement pstm = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        User user = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (connection == <span class="hljs-keyword">null</span>) &#123;<br>        String sql = <span class="hljs-string">&quot;select * from smbms_user where userCode = ?&quot;</span>;<br>        Object[] params = &#123;userCode&#125;;<br><br><br>            BaseDao.executeSelect(connection,pstm, rs,sql,params);<br><br>            <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>                user = <span class="hljs-keyword">new</span> User();<br>                user.setId(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>                user.setUserCode(rs.getString(<span class="hljs-string">&quot;userCode&quot;</span>));<br>                user.setUserName(rs.getString(<span class="hljs-string">&quot;userName&quot;</span>));<br>                user.setUserPassword(rs.getString(<span class="hljs-string">&quot;userPassword&quot;</span>));<br>                user.setGender(rs.getInt(<span class="hljs-string">&quot;gender&quot;</span>));<br>                user.setBirthday(rs.getDate(<span class="hljs-string">&quot;birthday&quot;</span>));<br>                user.setPhone(rs.getString(<span class="hljs-string">&quot;phone&quot;</span>));<br>                user.setAddress(rs.getString(<span class="hljs-string">&quot;address&quot;</span>));<br>                user.setUserRole(rs.getInt(<span class="hljs-string">&quot;userRole&quot;</span>));<br>                user.setCreatedBy(rs.getInt(<span class="hljs-string">&quot;createdBy&quot;</span>));<br>                user.setCreationDate(rs.getTimestamp(<span class="hljs-string">&quot;creationDate&quot;</span>));<br>                user.setModifyBy(rs.getInt(<span class="hljs-string">&quot;modifyBy&quot;</span>));<br>                user.setModifyDate(rs.getTimestamp(<span class="hljs-string">&quot;modifyDate&quot;</span>));<br>            &#125;<br>            BaseDao.closeResources(<span class="hljs-keyword">null</span>,pstm,rs);<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>业务层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用户登录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">login</span><span class="hljs-params">(String userCode,String password)</span></span><br></code></pre></td></tr></table></figure></li><li><p>业务层实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br><br>    <span class="hljs-comment">// 业务层都会调用dao层，所以我们要引入dao层</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceImpl</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">login</span><span class="hljs-params">(String userCode, String password)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        User user = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = BaseDao.getConnection();<br>            <span class="hljs-comment">// 通过业务层调用对应的具体的数据库操作</span><br>            user = userDao.getLoginUser(connection, userCode);<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            BaseDao.closeResources(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> user;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>编写Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-comment">//Servlet：控制层，调用业务层代码</span><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;LoginServlet--start...&quot;</span>);<br><br>        <span class="hljs-comment">// 获取用户名和密码</span><br>        String userCode = req.getParameter(<span class="hljs-string">&quot;userCode&quot;</span>);<br>        String userPassword = req.getParameter(<span class="hljs-string">&quot;userPassword&quot;</span>);<br><br>        <span class="hljs-comment">// 和数据库中的密码进行对比，调用业务层</span><br>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>        User user = userService.login(userCode, userPassword);<span class="hljs-comment">// 这里已经把登录的人查了出来</span><br><br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 查有此人，可以登录</span><br>            <span class="hljs-comment">// 将用户的信息放到Session中</span><br>            req.getSession().setAttribute(Constant.USER_SESSION,user);<br>            <span class="hljs-comment">// 跳转到主页</span><br>            resp.sendRedirect(req.getContextPath() + <span class="hljs-string">&quot;/jsp/frame.jsp&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 查无此人，无法登录</span><br>            <span class="hljs-comment">//转发回登录页面,顺带提示它，用户名或者密码不正确</span><br>            req.setAttribute(<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;用户名或密码不正确&quot;</span>);<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;login.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="8"><li><p>注册Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>.login.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><ol start="9"><li>测试访问，确保以上共嗯那个成功</li></ol><h3 id="登录功能优化"><a href="#登录功能优化" class="headerlink" title="登录功能优化"></a>登录功能优化</h3><p>注销功能：</p><p>思路：移除Session，返回登录页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 移除用户的Session</span><br>        req.getSession().removeAttribute(Constant.USER_SESSION);<br>        resp.sendRedirect(<span class="hljs-string">&quot;login.jsp&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注册xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LogoutServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.LogoutServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LogoutServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/jsp/logout.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>登录拦截优化</strong></p><p>编写一个过滤器，并注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>        HttpServletRequest request = (HttpServletRequest) servletRequest;<br>        HttpServletResponse response = (HttpServletResponse) servletResponse;<br><br>        <span class="hljs-comment">// 过滤器，从Session中获取用户</span><br>        User user = (User) request.getSession().getAttribute(Constant.USER_SESSION);<br><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 已经被移除或者注销了，或者未登录</span><br>            response.sendRedirect(<span class="hljs-string">&quot;error.jsp&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h3><ol><li><p>导入前端素材</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;li&gt;&lt;a href=&quot;$&#123;pageContext.request.contextPath &#125;/jsp/pwdmodify.jsp&quot;&gt;密码修改&lt;/a&gt;&lt;/li&gt;<br></code></pre></td></tr></table></figure></li><li><p>userDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改当前用户密码</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(Connection connection,<span class="hljs-keyword">int</span> id,<span class="hljs-keyword">int</span> password)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br></code></pre></td></tr></table></figure></li><li><p>userDao接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改当前用户密码</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(Connection connection, <span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> password)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>    PreparedStatement pstm = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">int</span> updateRows = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>        String sql = <span class="hljs-string">&quot;update smbms_user set userPassword = ? where id = ?&quot;</span>;<br>        Object params[] = &#123;password,id&#125;;<br>        updateRows = BaseDao.executeUpdate(connection, pstm, sql, params);<br><br>        BaseDao.closeResources(connection,pstm,<span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> updateRows;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>UserService层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据用户ID修改密码</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id,<span class="hljs-keyword">int</span> pwd)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>UserService实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> pwd)</span> </span>&#123;<br>   <br>      Connection connection = <span class="hljs-keyword">null</span>;<br>      connection = BaseDao.getConnection();<br>   <br>      <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>   <br>      <span class="hljs-comment">// 修改密码</span><br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">if</span> (userDao.updatePwd(connection,id,pwd) &gt; <span class="hljs-number">0</span>) &#123;<br>              flag = <span class="hljs-keyword">true</span>;<br>          &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>          throwables.printStackTrace();<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>          BaseDao.closeResources(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>      &#125;<br>      <span class="hljs-keyword">return</span> flag;<br>   <br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>记得实现复用，需要提取出方法！</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    String method = req.getParameter(<span class="hljs-string">&quot;method&quot;</span>);<br>    <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;savepwd&quot;</span>) &amp;&amp; method != <span class="hljs-keyword">null</span>)) &#123;<br>        <span class="hljs-keyword">this</span>.updatePwd(req,resp);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <span class="hljs-comment">// 从Session里面拿ID;</span><br>    Object o = req.getSession().getAttribute(Constant.USER_SESSION);<br>    <span class="hljs-comment">// 拿表单提交的参数</span><br>    String newpassword = req.getParameter(<span class="hljs-string">&quot;newpassword&quot;</span>);<br><br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-keyword">if</span> (o != <span class="hljs-keyword">null</span> &amp;&amp; !StringUtils.isNullOrEmpty(newpassword)) &#123;<br>        UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>        flag = userService.updatePwd(((User) o).getId(), newpassword);<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            req.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;修改密码成功，请退出，使用新密码登录&quot;</span>);<br>            <span class="hljs-comment">// 密码修改成功，移除当前Session</span><br>            req.getSession().removeAttribute(Constant.USER_SESSION);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;密码修改失败&quot;</span>);<br><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        req.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;新密码有问题&quot;</span>);<br>    &#125;<br><br>    req.getRequestDispatcher(req.getContextPath() + <span class="hljs-string">&quot;/jsp/pwdmodify.jsp&quot;</span>).forward(req,resp);<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>注册Servlet</li></ol><p><strong>优化密码使用Ajax</strong></p><ol><li><p>阿里巴巴的fastjson</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.75<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>后台代码修改(旧密码验证)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 验证旧密码,session中有用户的密码</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pwdModify</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;<br><br>        Object o = req.getSession().getAttribute(Constant.USER_SESSION);<br>        String oldpassword = req.getParameter(<span class="hljs-string">&quot;oldpassword&quot;</span>);<br><br>        <span class="hljs-comment">// 万能的Map:结果集</span><br>        HashMap&lt;String, String&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// Session失效了，session过期了</span><br>            resultMap.put(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-string">&quot;sessionError&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isNullOrEmpty(oldpassword)) &#123; <span class="hljs-comment">// 输入的密码为空</span><br>            resultMap.put(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            String userPassword = ((User) o).getUserPassword(); <span class="hljs-comment">//Session中用户的密码</span><br>            <span class="hljs-keyword">if</span> (oldpassword.equals(userPassword)) &#123;<br>                resultMap.put(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(oldpassword);<br>                System.out.println(userPassword);<br>                resultMap.put(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-string">&quot;false&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        PrintWriter writer = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            resp.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>            writer = resp.getWriter();<br>            <span class="hljs-comment">// JSONArray 阿里巴巴的JSON工具类，转换格式</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            resultMap = [&quot;result&quot;:&quot;sessionError&quot;,&quot;result&quot;:&quot;true&quot;]</span><br><span class="hljs-comment">            Json格式 = &#123;key：value&#125;</span><br><span class="hljs-comment">             */</span><br>            writer.write(JSONArray.toJSONString(resultMap));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            writer.flush();<br>            writer.close();<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="用户管理实现"><a href="#用户管理实现" class="headerlink" title="用户管理实现"></a>用户管理实现</h3><p>思路：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-JSP%E7%89%88%E6%9C%AC/user_manage.png" alt="用户管理流程"></p><ol><li><p>导入分页的工具类</p></li><li><p>用户列表页面导入</p><ul><li><blockquote><p>userlist.jsp</p></blockquote></li></ul></li></ol><h4 id="1-获取用户数量"><a href="#1-获取用户数量" class="headerlink" title="1. 获取用户数量"></a>1. 获取用户数量</h4><ol><li><p>UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据用户名或角色查询用户数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getUserCount</span><span class="hljs-params">(Connection connection,String username, <span class="hljs-keyword">int</span> userRole)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br></code></pre></td></tr></table></figure></li><li><p>UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据用户名或角色查询用户数量 </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getUserCount</span><span class="hljs-params">(Connection connection,String username, <span class="hljs-keyword">int</span> userRole)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>            StringBuffer sql = <span class="hljs-keyword">new</span> StringBuffer();<br>            sql.append(<span class="hljs-string">&quot;select count(1) as count from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);<br><br>            ArrayList&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<span class="hljs-comment">// 存放我们的参数</span><br><br>            <span class="hljs-keyword">if</span> (!StringUtils.isNullOrEmpty(username)) &#123;<br>                sql.append(<span class="hljs-string">&quot; and u.userName like ?&quot;</span>);<br>                list.add(<span class="hljs-string">&quot;%&quot;</span>+username+<span class="hljs-string">&quot;%&quot;</span>); <span class="hljs-comment">// index:0</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (userRole &gt; <span class="hljs-number">0</span>) &#123;<br>                sql.append(<span class="hljs-string">&quot; and u.userRole = ?&quot;</span>);<br>                list.add(userRole); <span class="hljs-comment">// index:1</span><br>            &#125;<br><br>            <span class="hljs-comment">// 怎么把list转换为数组</span><br>            Object[] params = list.toArray();<br>            System.out.println(<span class="hljs-string">&quot;UserDaoImpl-&gt;getUserCount &quot;</span>+sql.toString()); <span class="hljs-comment">// 输出最后完整的SQL语句</span><br>            rs = BaseDao.executeSelect(connection, preparedStatement, rs, sql.toString(), params);<br><br>            <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>                count = rs.getInt(<span class="hljs-string">&quot;count&quot;</span>);<span class="hljs-comment">// 从结果集中获取最终数量</span><br><br>            &#125;<br><br>            BaseDao.closeResources(connection,preparedStatement,rs);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询记录数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getUserCount</span><span class="hljs-params">(String username,<span class="hljs-keyword">int</span> userRole)</span></span>;<br></code></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getUserCount</span><span class="hljs-params">(String username, <span class="hljs-keyword">int</span> userRole)</span> </span>&#123;<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = BaseDao.getConnection();<br>            count = userDao.getUserCount(connection, username, userRole);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            BaseDao.closeResources(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-获取用户列表"><a href="#2-获取用户列表" class="headerlink" title="2.获取用户列表"></a>2.获取用户列表</h4><ol><li><p>UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据条件查询获取用户列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">(Connection connection, String userName, <span class="hljs-keyword">int</span> userRole, <span class="hljs-keyword">int</span> currentPageNo, <span class="hljs-keyword">int</span> pageSize)</span><span class="hljs-keyword">throws</span> Exception</span>;<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">(Connection connection, String userName, <span class="hljs-keyword">int</span> userRole, <span class="hljs-keyword">int</span> currentPageNo, <span class="hljs-keyword">int</span> pageSize)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        PreparedStatement pstm = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>        <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>            StringBuffer sql = <span class="hljs-keyword">new</span> StringBuffer();<br>            sql.append(<span class="hljs-string">&quot;select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);<br>            List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br>            <span class="hljs-keyword">if</span>(!StringUtils.isNullOrEmpty(userName))&#123;<br>                sql.append(<span class="hljs-string">&quot; and u.userName like ?&quot;</span>);<br>                list.add(<span class="hljs-string">&quot;%&quot;</span>+userName+<span class="hljs-string">&quot;%&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(userRole &gt; <span class="hljs-number">0</span>)&#123;<br>                sql.append(<span class="hljs-string">&quot; and u.userRole = ?&quot;</span>);<br>                list.add(userRole);<br>            &#125;<br>            sql.append(<span class="hljs-string">&quot; order by creationDate DESC limit ?,?&quot;</span>);<br>            currentPageNo = (currentPageNo-<span class="hljs-number">1</span>)*pageSize;<br>            list.add(currentPageNo);<br>            list.add(pageSize);<br><br>            Object[] params = list.toArray();<br>            System.out.println(<span class="hljs-string">&quot;sql ----&gt; &quot;</span> + sql.toString());<br>            rs = BaseDao.executeSelect(connection, pstm, rs, sql.toString(), params);<br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                User _user = <span class="hljs-keyword">new</span> User();<br>                _user.setId(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>                _user.setUserCode(rs.getString(<span class="hljs-string">&quot;userCode&quot;</span>));<br>                _user.setUserName(rs.getString(<span class="hljs-string">&quot;userName&quot;</span>));<br>                _user.setGender(rs.getInt(<span class="hljs-string">&quot;gender&quot;</span>));<br>                _user.setBirthday(rs.getDate(<span class="hljs-string">&quot;birthday&quot;</span>));<br>                _user.setPhone(rs.getString(<span class="hljs-string">&quot;phone&quot;</span>));<br>                _user.setUserRole(rs.getInt(<span class="hljs-string">&quot;userRole&quot;</span>));<br>                _user.setUserRoleName(rs.getString(<span class="hljs-string">&quot;userRoleName&quot;</span>));<br>                userList.add(_user);<br>            &#125;<br>            BaseDao.closeResources(<span class="hljs-keyword">null</span>, pstm, rs);<br>        &#125;<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据条件查询用户列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">(String queryUserName, <span class="hljs-keyword">int</span> queryUserRole, <span class="hljs-keyword">int</span> currentPageNo, <span class="hljs-keyword">int</span> pageSize)</span></span>;<br></code></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">(String queryUserName, <span class="hljs-keyword">int</span> queryUserRole, <span class="hljs-keyword">int</span> currentPageNo, <span class="hljs-keyword">int</span> pageSize)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;queryUserName ---- &gt; &quot;</span> + queryUserName);<br>        System.out.println(<span class="hljs-string">&quot;queryUserRole ---- &gt; &quot;</span> + queryUserRole);<br>        System.out.println(<span class="hljs-string">&quot;currentPageNo ---- &gt; &quot;</span> + currentPageNo);<br>        System.out.println(<span class="hljs-string">&quot;pageSize ---- &gt; &quot;</span> + pageSize);<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = BaseDao.getConnection();<br>            userList = userDao.getUserList(connection, queryUserName,queryUserRole,currentPageNo,pageSize);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            BaseDao.closeResources(connection, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-获取角色操作"><a href="#3-获取角色操作" class="headerlink" title="3.获取角色操作"></a>3.获取角色操作</h4><p>为了我们职责统一，可以把角色的操作单独放在一个包中，和pojo类对应</p><p>RoleDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取角色列表</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRoleList</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br></code></pre></td></tr></table></figure><p>RoleDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取角色列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRoleList</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        PreparedStatement pstm = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        ArrayList&lt;Role&gt; roleList = <span class="hljs-keyword">new</span> ArrayList&lt;Role&gt;();<br><br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>            String sql = <span class="hljs-string">&quot;select * from smbms_role&quot;</span>;<br>            Object[] params = &#123;&#125;;<br>            rs = BaseDao.executeSelect(connection,pstm,rs,sql,params);<br><br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                Role _role = <span class="hljs-keyword">new</span> Role();<br>                _role.setId( rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>                _role.setRoleCode(rs.getString(<span class="hljs-string">&quot;roleCode&quot;</span>));<br>                _role.setRoleName(rs.getString(<span class="hljs-string">&quot;roleName&quot;</span>));<br>                roleList.add(_role);<br>            &#125;<br>            BaseDao.closeResources(connection,pstm,rs);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> roleList;<br>    &#125;<br></code></pre></td></tr></table></figure><p>RoleService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取用户角色列表</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRoleList</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>RoleServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRoleList</span><span class="hljs-params">()</span> </span>&#123;<br><br>    Connection connection = <span class="hljs-keyword">null</span>;<br>    List&lt;Role&gt; roleList = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        connection = BaseDao.getConnection();<br>        roleList = roleDao.getRoleList(connection);<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>        throwables.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        BaseDao.closeResources(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> roleList;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-用户显示的Servlet"><a href="#4-用户显示的Servlet" class="headerlink" title="4.用户显示的Servlet"></a>4.用户显示的Servlet</h4><ol><li>获取用户前端的数据（查询）</li><li>判断请求是否需要执行，看参数的值判断</li><li>为了实现分页，需要计算出当前页面和总页面，页面大小等</li><li>用户列表展示</li><li>返回前端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 查询用户列表</span><br>        <span class="hljs-comment">// 从前端获取数据</span><br>        String queryUserName = req.getParameter(<span class="hljs-string">&quot;queryname&quot;</span>);<br>        String temp = req.getParameter(<span class="hljs-string">&quot;queryUserRole&quot;</span>);<br>        String pageIndex = req.getParameter(<span class="hljs-string">&quot;pageIndex&quot;</span>);<br>        <span class="hljs-keyword">int</span> queryUserRole = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 获取用户列表</span><br>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>        List&lt;User&gt; userList = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">// 第一次走这个请求，一定是第一页，页面大小固定</span><br>        <span class="hljs-keyword">int</span> pageSize = <span class="hljs-number">5</span>; <span class="hljs-comment">// 可以把这个写到配置文件中，方便后期修改</span><br>        <span class="hljs-keyword">int</span> currentPageNo = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> (queryUserName == <span class="hljs-keyword">null</span>) &#123;<br>            queryUserName = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp != <span class="hljs-keyword">null</span> &amp;&amp; !temp.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            queryUserRole = Integer.parseInt(temp); <span class="hljs-comment">//给查询赋值</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (pageIndex != <span class="hljs-keyword">null</span>) &#123;<br>            currentPageNo = Integer.parseInt(pageIndex);<br>        &#125;<br>        <span class="hljs-comment">// 获取用户的总数(分页：上一页、下一页的情况)</span><br>        <span class="hljs-keyword">int</span> totalCount = userService.getUserCount(queryUserName, queryUserRole);<br>        <span class="hljs-comment">// 总页数支持</span><br>        PageSupport pageSupport = <span class="hljs-keyword">new</span> PageSupport();<br>        pageSupport.setCurrentPageNo(currentPageNo);<br>        pageSupport.setPageSize(pageSize);<br>        pageSupport.setTotalCount(totalCount);<br><br>        <span class="hljs-comment">// 控制首页和尾页</span><br>        <span class="hljs-keyword">int</span> totalPageCount = pageSupport.getTotalPageCount();<br>        <span class="hljs-keyword">if</span> (totalPageCount &lt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 如果页面要小于1了，就取第一页的列表</span><br>            currentPageNo = <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentPageNo &gt; totalPageCount) &#123; <span class="hljs-comment">// 当前页面大于了最后一页</span><br>            currentPageNo = totalPageCount;<br>        &#125;<br><br>        <span class="hljs-comment">// 获取用户列表展示</span><br>        userList = userService.getUserList(queryUserName, queryUserRole, currentPageNo, pageSize);<br>        req.setAttribute(<span class="hljs-string">&quot;userList&quot;</span>,userList);<br><br>        <span class="hljs-comment">// 获取角色列表</span><br>        RoleServiceImpl roleService = <span class="hljs-keyword">new</span> RoleServiceImpl();<br>        List&lt;Role&gt; roleList = roleService.getRoleList();<br>        req.setAttribute(<span class="hljs-string">&quot;roleList&quot;</span>,roleList);<br>        req.setAttribute(<span class="hljs-string">&quot;totalCount&quot;</span>,totalCount);<br>        req.setAttribute(<span class="hljs-string">&quot;currentPageNo&quot;</span>,currentPageNo);<br>        req.setAttribute(<span class="hljs-string">&quot;totalPageCount&quot;</span>,totalPageCount);<br>        req.setAttribute(<span class="hljs-string">&quot;queryUserName&quot;</span>,queryUserName);<br>        req.setAttribute(<span class="hljs-string">&quot;queryUserRole&quot;</span>,queryUserRole);<br><br>        <span class="hljs-comment">// 返回前端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;userlist.jsp&quot;</span>).forward(req,resp);<br>        &#125; <span class="hljs-keyword">catch</span> (ServletException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jsp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid主题配置</title>
    <link href="/posts/2020/12/31/fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <url>/posts/2020/12/31/fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Fluid博客美化"><a href="#Fluid博客美化" class="headerlink" title="Fluid博客美化"></a>Fluid博客美化</h1><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>Hexo 5.0.0版本以上，通过npm直接安装，进入博客目录执行命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后再博客目录下创建<code>_config.fluid.yml</code>文件，将hexo-theme-fluid主题的<code>_config.yml</code>内容复制进去。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br></pre></td><td class="code"><pre><code class="hljs xml">#---------------------------<br># Hexo Theme Fluid<br># Author: Fluid-dev<br># Github: https://github.com/fluid-dev/hexo-theme-fluid<br>#<br># 配置指南: https://hexo.fluid-dev.com/docs/guide/<br># 你可以从指南中获得更详细的说明<br>#<br># Guide: https://hexo.fluid-dev.com/docs/en/guide/<br># You can get more detailed help from the guide<br>#---------------------------<br><br><br>#---------------------------<br># 全局<br># Global<br>#---------------------------<br><br># 用于浏览器标签的图标<br># Icon for browser tab<br>favicon: /img/favicon.png<br><br># 用于苹果设备的图标<br># Icon for Apple touch<br>apple_touch_icon: /img/favicon.png<br><br># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名<br># Title separator in browser tab, eg: article - site<br>title_join_string: &quot; - &quot;<br><br># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）<br># Force all links to be HTTPS (applicable to HTTP mixed error)<br>force_https: false<br><br># 代码块的增强配置<br># Enhancements to code blocks<br>code:<br>  # 是否开启复制代码的按钮<br>  # Enable copy code button<br>  copy_btn: true<br><br>  # 代码高亮<br>  # Code highlight<br>  highlight:<br>    enable: true<br><br>    # 代码块是否显示行号<br>    # If true, the code block display line numbers<br>    line_number: true<br><br>    # 实现高亮的库，对应下面的设置<br>    # Highlight library<br>    # Options: highlightjs | prismjs<br>    lib: &quot;highlightjs&quot;<br><br>    highlightjs:<br>      # 在链接中挑选 style 填入<br>      # Select a style in the link<br>      # See: https://highlightjs.org/static/demo/<br>      style: &quot;Github Gist&quot;<br><br>      # 是否根据 style 改变代码背景色（如果 style 是深色背景别忘了开启此项）<br>      # If true, the code background will change color based on the style (If style has a dark background, don&#x27;t forget to true)<br>      bg_color: false<br><br>    prismjs:<br>      # 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接<br>      # Select the style button on the right side of the link page, you can also set the CSS link<br>      # See: https://prismjs.com/<br>      style: &quot;default&quot;<br><br>      # 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成<br>      # If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser<br>      preprocess: true<br><br># 一些好玩的功能<br># Some fun features<br>fun_features:<br>  # 为 subtitle 添加打字机效果<br>  # Typing animation for subtitle<br>  typing:<br>    enable: true<br><br>    # 打印速度，数字越大越慢<br>    # Typing speed, the larger the number, the slower<br>    typeSpeed: 70<br><br>    # 游标字符<br>    # Cursor character<br>    cursorChar: &quot;_&quot;<br><br>    # 是否循环播放效果<br>    # If true, loop animation<br>    loop: false<br><br>  # 为文章内容中的标题添加锚图标<br>  # Add an anchor icon to the title on the post page<br>  anchorjs:<br>    enable: true<br>    element: h1,h2,h3,h4,h5,h6<br>    placement: right<br>    # Options: hover | always | touch<br>    visible: hover<br>    # Option：§ | # | ❡<br>    icon: &quot;&quot;<br><br>  # 加载进度条<br>  # Progress bar when loading<br>  progressbar:<br>    enable: true<br>    height_px: 3<br>    color: &quot;#29d&quot;<br>    # See: https://github.com/rstacruz/nprogress<br>    options: &#123; showSpinner: false, trickleSpeed: 100 &#125;<br><br># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换<br># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option<br>dark_mode:<br>  enable: true<br>  # 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式<br>  # Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time<br>  # Options: auto | light | dark<br>  default: auto<br><br># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发<br># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below<br># See: https://www.webdesignrankings.com/resources/lolcolors/<br>color:<br>  # body 背景色<br>  # Color of body background<br>  body_bg_color: &quot;#eee&quot;<br>  # 暗色模式下的 body 背景色，下同<br>  # Color in dark mode, the same below<br>  body_bg_color_dark: &quot;#181c27&quot;<br><br>  # 顶部菜单背景色<br>  # Color of navigation bar background<br>  navbar_bg_color: &quot;#2f4154&quot;<br>  navbar_bg_color_dark: &quot;#1f3144&quot;<br><br>  # 顶部菜单字体色<br>  # Color of navigation bar text<br>  navbar_text_color: &quot;#fff&quot;<br>  navbar_text_color_dark: &quot;#d0d0d0&quot;<br><br>  # 全局字体色<br>  # Color of global text<br>  text_color: &quot;#3c4858&quot;<br>  text_color_dark: &quot;#c4c6c9&quot;<br><br>  # 全局次级字体色（摘要、简介等位置）<br>  # Color of global secondary text (excerpt, introduction, etc.)<br>  sec_text_color: &quot;#718096&quot;<br>  sec_text_color_dark: &quot;#a7a9ad&quot;<br><br>  # 文章正文字体色<br>  # Color of post text<br>  post_text_color: &quot;#2c3e50&quot;<br>  post_text_color_dark: &quot;#c4c6c9&quot;<br><br>  # 文章正文字体色（h1 h2 h3...）<br>  # Color of Article heading (h1 h2 h3...)<br>  post_heading_color: &quot;#1a202c&quot;<br>  post_heading_color_dark: &quot;#c4c6c9&quot;<br><br>  # 文章超链接字体色<br>  # Color of post link<br>  post_link_color: &quot;#0366d6&quot;<br>  post_link_color_dark: &quot;#1589e9&quot;<br><br>  # 超链接悬浮时字体色<br>  # Color of link when hovering<br>  link_hover_color: &quot;#30a9de&quot;<br>  link_hover_color_dark: &quot;#30a9de&quot;<br><br>  # 超链接悬浮背景色<br>  # Color of link background when hovering<br>  link_hover_bg_color: &quot;#f8f9fa&quot;<br>  link_hover_bg_color_dark: &quot;#364151&quot;<br><br>  # 主面板背景色<br>  # Color of main board<br>  board_color: &quot;#fff&quot;<br>  board_color_dark: &quot;#252d38&quot;<br><br># 主题字体配置<br># Font<br>font:<br>  font_size: 16px<br>  font_family:<br>  code_font_size: 85%<br><br># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js<br># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`<br>custom_js:<br><br># 指定自定义 .css 文件路径，用法和 custom_js 相同<br># The usage is the same as custom_js<br>custom_css:<br><br># 自定义底部 HTML 内容（位于 footer 上方），注意不要和 `post: custom` 配置冲突<br># Customize the HTML content at the bottom (located above the footer), be careful not to conflict with `post: custom`<br>custom_html: &#x27;&#x27;<br><br># 网页访问统计<br># Analysis of website visitors<br>web_analytics:  # 网页访问统计<br>  enable: false<br><br>  # 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串<br>  # Baidu analytics, get the string behind `hm.js?`<br>  # See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376<br>  baidu:<br><br>  # Google 统计的 Tracking ID<br>  # Google analytics, set Tracking ID<br>  # See: https://developers.google.com/analytics/devguides/collection/analyticsjs<br>  google:<br><br>  # Google gtag.js 的媒体资源 ID<br>  # Google gtag.js GA_MEASUREMENT_ID<br>  # See: https://developers.google.com/analytics/devguides/collection/gtagjs/<br>  gtag:<br><br>  # 腾讯统计的 H5 App ID，开启高级功能才有cid<br>  # Tencent analytics, set APP ID<br>  # See: https://mta.qq.com/h5/manage/ctr_app_manage<br>  tencent:<br>    sid:<br>    cid:<br><br>  # 51.la 站点统计 ID<br>  # 51.la analytics<br>  # See: https://www.51.la/user/site/index<br>  woyaola:  # 51.la 站点统计 ID，参见<br><br>  # 友盟/cnzz 站点统计 web_id<br>  # cnzz analytics<br>  # See: https://web.umeng.com/main.php?c=site&amp;a=show<br>  cnzz:<br><br>  # LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加<br>  # LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase<br>  leancloud:<br>    app_id:<br>    app_key:<br>    # REST API 服务器地址，国际版不填<br>    # Only the Chinese mainland users need to set<br>    server_url:<br><br># 对页面中的图片进行懒加载处理，可见范围外的图片不会加载<br># Lazy loading of images on the page<br>lazyload:<br>  enable: true<br>  # 懒加载仅对文章页生效，开启后如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`<br>  # If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter<br>  onlypost: false<br><br># 主题版本相关<br># Theme version<br>version:<br>  # 每次生成页面后，检测主题是否为最新版本<br>  # If true, check whether Fluid is the latest version after hexo generate<br>  check: false<br><br><br>#---------------------------<br># 页头<br># Header<br>#---------------------------<br><br># 导航栏的相关配置<br># Navigation bar<br>navbar:<br>  # 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示<br>  # The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config<br>  blog_title: &quot;Fluid&quot;<br><br>  # 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效<br>  # Navigation bar frosted glass special animation. It is an experimental feature<br>  ground_glass:<br>    enable: false<br><br>    # 模糊像素，只能为数字，数字越大模糊度越高<br>    # Number of blurred pixel. the larger the number, the higher the blur<br>    px: 3<br><br>    # 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体<br>    # Ratio of opacity, 1.0 is completely opaque<br>    # available: 0 - 1.0<br>    alpha: 0.7<br><br>  # 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称<br>  # Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name<br>  menu:<br>    - &#123; key: &quot;home&quot;, link: &quot;/&quot;, icon: &quot;iconfont icon-home-fill&quot; &#125;<br>    - &#123; key: &quot;archive&quot;, link: &quot;/archives/&quot;, icon: &quot;iconfont icon-archive-fill&quot; &#125;<br>    - &#123; key: &quot;category&quot;, link: &quot;/categories/&quot;, icon: &quot;iconfont icon-category-fill&quot; &#125;<br>    - &#123; key: &quot;tag&quot;, link: &quot;/tags/&quot;, icon: &quot;iconfont icon-tags-fill&quot; &#125;<br>    - &#123; key: &quot;about&quot;, link: &quot;/about/&quot;, icon: &quot;iconfont icon-user-fill&quot; &#125;<br>    #- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;<br><br># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件<br># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files<br>search:<br>  enable: true<br>  # 搜索索引文件的路径，可以是相对路径或外站的绝对路径<br>  # Path for search index file, it can be a relative path or an absolute path<br>  path: /local-search.xml<br><br>  # 文件生成在本地的位置，必须是相对路径<br>  # The location where the index file is generated locally, it must be a relative location<br>  generate_path: /local-search.xml<br><br>  # 搜索的范围<br>  # Search field<br>  # Options: post | page | all<br>  field: post<br><br>  # 搜索是否扫描正文<br>  # If true, search will scan the post content<br>  content: true<br><br># 首屏图片的相关配置<br># Config of the big image on the first screen<br>banner:<br>  # 视差滚动，图片与板块会随着屏幕滚动产生视差效果<br>  # Scrolling parallax<br>  parallax: true<br><br>  # 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0<br>  # Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0<br>  width_height_ratio: 1.0<br><br># 向下滚动的箭头<br># Scroll down arrow<br>scroll_down_arrow:<br>  enable: true<br><br>  # 头图高度不小于指定比例，才显示箭头<br>  # Only the height of the banner image is greater than the ratio, the arrow is displayed<br>  # Available: 0 - 100<br>  banner_height_limit: 80<br><br>  # 翻页后自动滚动<br>  # Auto scroll after page turning<br>  scroll_after_turning_page: true<br><br># 向顶部滚动的箭头<br># Scroll top arrow<br>scroll_top_arrow:<br>  enable: true<br><br><br>#---------------------------<br># 页脚<br># Footer<br>#---------------------------<br>footer:<br>  # 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题<br>  # HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people<br>  content: &#x27;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://hexo.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-love&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fluid<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  &#x27;<br><br>  # 展示网站的 PV、UV 统计数<br>  # Display website PV and UV statistics<br>  statistics:<br>    enable: false<br><br>    # 统计数据来源，如果使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；如果使用 busuanzi 可能会有请求失败的情况<br>    # Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`<br>    # Options: busuanzi | leancloud<br>    source: &quot;busuanzi&quot;<br><br>    # 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同<br>    # Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below<br>    pv_format: &quot;总访问量 &#123;&#125; 次&quot;<br>    uv_format: &quot;总访客数 &#123;&#125; 人&quot;<br><br>  # 国内大陆服务器的备案信息<br>  # For Chinese mainland website policy, other areas keep disable<br>  beian:<br>    enable: false<br>    # ICP证号<br>    icp_text: 京ICP证123456号<br>    # 公安备案号，不填则只显示ICP<br>    police_text: 京公网安备12345678号<br>    # 公安备案的编号，用于URL跳转查询<br>    police_code: 12345678<br>    # 公安备案的图片. 为空时不显示备案图片<br>    police_icon: /img/police_beian.png<br><br><br>#---------------------------<br># 首页<br># Home Page<br>#---------------------------<br>index:<br>  # 首页 Banner 头图，可以是相对路径或绝对路径，以下相同<br>  # Path of Banner image, can be a relative path or an absolute path, the same on other pages<br>  banner_img: /img/default.png<br><br>  # 头图高度，屏幕百分比<br>  # Height ratio of banner image<br>  # Available: 0 - 100<br>  banner_img_height: 100<br><br>  # 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明<br>  # Opacity of the banner mask, 1.0 is completely opaque<br>  # Available: 0 - 1.0<br>  banner_mask_alpha: 0.3<br><br>  # 首页副标题的独立设置<br>  # Independent config of home page subtitle<br>  slogan:<br>    enable: true<br><br>    # 为空则按 hexo config.subtitle 显示<br>    # If empty, text based on `subtitle` in hexo config<br>    text: &quot;An elegant Material-Design theme for Hexo&quot;<br><br>    # 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能<br>    # Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation<br>    api:<br>      enable: false<br><br>      # 请求地址<br>      # Request url<br>      url: &quot;&quot;<br><br>      # 请求方法<br>      # Request method<br>      # Available: GET | POST | PUT<br>      method: &quot;GET&quot;<br><br>      # 请求头<br>      # Request headers<br>      headers: &#123;&#125;<br><br>      # 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项<br>      # The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected<br>      keys: []<br><br>  # 自动截取文章摘要<br>  # Auto extract post<br>  auto_excerpt:<br>    enable: true<br><br>  # 打开文章的标签方式<br>  # The browser tag to open the post<br>  # Available: _blank | _self<br>  post_url_target: _self<br><br>  # 是否显示文章信息（时间、分类、标签）<br>  # Meta information of post<br>  post_meta:<br>    date: true<br>    category: true<br>    tag: true<br><br>  # 文章通过 sticky 排序后，在首页文章标题前显示图标<br>  # If the posts are sorted by `sticky`, an icon is displayed in front of the post title<br>  post_sticky:<br>    enable: true<br>    icon: &quot;iconfont icon-top&quot;<br><br><br>#---------------------------<br># 文章页<br># Post Page<br>#---------------------------<br>post:<br>  banner_img: /img/default.png<br>  banner_img_height: 70<br>  banner_mask_alpha: 0.3<br><br>  # 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片<br>  # Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed<br>  default_index_img:<br><br>  # 文章标题下方的元信息<br>  # Meta information below title<br>  meta:<br>    # 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值<br>    # Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config<br>    author:<br>      enable: false<br><br>    # 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期<br>    # Post date, based on `date` field in front-matter, if not set, based on create date of .md file<br>    date:<br>      enable: true<br>      # 格式参照 ISO-8601 日期格式化<br>      # ISO-8601 date format<br>      # See: http://momentjs.cn/docs/#/parsing/string-format/<br>      format: &quot;LL a&quot;<br><br>    # 字数统计<br>    # Word count<br>    wordcount:<br>      enable: true<br>      # 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同<br>      # Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below<br>      format: &quot;&#123;&#125; 字&quot;<br><br>    # 估计阅读全文需要的时长<br>    # Estimate the time required to read the full text<br>    min2read:<br>      enable: true<br>      format: &quot;&#123;&#125; 分钟&quot;<br>      # 每分钟阅读多少字，如果是技术文章，建议降低<br>      # Words read per minute<br>      words: 100<br><br>    # 浏览量计数<br>    # Number of visits<br>    views:<br>      enable: false<br>      # 统计数据来源<br>      # Data Source<br>      # Options: busuanzi | leancloud<br>      source: &quot;busuanzi&quot;<br>      format: &quot;&#123;&#125; 次&quot;<br><br>  # 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）<br>  # Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)<br>  updated:<br>    enable: false<br><br>    # 描述文字<br>    # Descriptive text before date<br>    content: 本文最后更新于：<br><br>    # 是否使用相对时间表示，比如：&quot;3 天前&quot;<br>    # If true, it will be a relative time, such as: &quot;3 days ago&quot;<br>    relative: false<br><br>  # 文章右侧目录<br>  # Table of contents (TOC)<br>  toc:<br>    enable: true<br>    # 目录会选择这些节点作为标题<br>    # TOC will select these nodes as headings<br>    headingSelector: &quot;h1,h2,h3,h4,h5,h6&quot;<br>    # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开<br>    # Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings<br>    collapseDepth: 0<br><br>  # 版权声明，会显示在每篇文章的结尾<br>  # Copyright, will be displayed at the end of each post<br>  copyright:<br>    enable: true<br>    content: &#x27;本博客所有文章除特别声明外，均采用 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.zh&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span>CC BY-SA 4.0 协议<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> ，转载请注明出处！&#x27;<br><br>  # 文章底部上一篇下一篇功能<br>  # Link to previous/next post<br>  prev_next:<br>    enable: true<br><br>  # 文章底部自定义区域（位于 footer 上方），支持 HTML，可插入赞赏码、公众号这类内容内容<br>  # Custom content at the bottom of the post page (located above the footer)<br>  custom:<br>    enable: false<br>    content: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://octodex.github.com/images/jetpacktocat.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rounded mx-auto d-block mt-5&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:150px; height:150px;&quot;</span>&gt;</span>&#x27;<br><br>  # 文章图片可点击放大<br>  # Zoom feature of images<br>  image_zoom:<br>    enable: true<br><br>  # 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突<br>  # Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict<br>  footnote:<br>    enable: true<br>    # 脚注的节标题，也可以在 front-matter 中通过 `footnote: <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Reference<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>` 这种形式修改单独页面的 header<br>    # The section title of the footnote, you can also modify the header of a single page in the form of `footnote: <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Reference<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>` in front-matter<br>    header: &#x27;&#x27;<br><br>  # 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式<br>  # Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math<br>  math:<br>    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`<br>    # If you want to use math on the custom page, you need to set `math: true` in Front-matter<br>    enable: false<br><br>    # 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度<br>    # If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math<br>    specific: false<br><br>    # Options: mathjax | katex<br>    engine: mathjax<br><br>  # 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图<br>  # Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid<br>  mermaid:<br>    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`<br>    # If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter<br>    enable: false<br><br>    # 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度<br>    # If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid<br>    specific: false<br><br>    # See: http://mermaid-js.github.io/mermaid/<br>    options: &#123; theme: &#x27;default&#x27; &#125;<br><br>  # 评论插件<br>  # Comment plugin<br>  comments:<br>    enable: false<br>    # 指定的插件，需要同时设置对应插件的必要参数<br>    # The specified plugin needs to set the necessary parameters at the same time<br>    # Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo<br>    type: disqus<br><br><br>#---------------------------<br># 评论插件<br># Comment plugins<br>#<br># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数<br># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`<br>#---------------------------<br><br># Utterances<br># 基于 GitHub Issues<br># Based on GitHub Issues<br># See: https://utteranc.es<br>utterances:<br>  repo:<br>  issue_term: pathname<br>  label: utterances<br>  theme: github-light<br>  theme_dark: github-dark<br>  crossorigin: anonymous<br><br># Disqus<br># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs<br># Based on third-party service<br># See: https://disqus.com<br>disqus:<br>  shortname:<br>  # 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用<br>  # The following are Disqusjs configurations, please ignore if DisqusJS is not required<br>  # See: https://github.com/SukkaW/DisqusJS<br>  disqusjs: false<br>  apikey:<br><br># Gitalk<br># 基于 GitHub Issues<br># Based on GitHub Issues<br># See: https://github.com/gitalk/gitalk#options<br>gitalk:<br>  clientID:<br>  clientSecret:<br>  repo:<br>  owner:<br>  admin: [&#x27;name&#x27;]<br>  language: zh-CN<br>  labels: [&#x27;Gitalk&#x27;]<br>  perPage: 10<br>  pagerDirection: last<br>  distractionFreeMode: false<br>  createIssueManually: true<br><br># Valine<br># 基于 LeanCloud<br># Based on LeanCloud<br># See: https://valine.js.org/configuration.html<br>valine:<br>  appid:<br>  appkey:<br>  placeholder: 说点什么<br>  path: window.location.pathname<br>  avatar: retro<br>  meta: [&#x27;nick&#x27;, &#x27;mail&#x27;, &#x27;link&#x27;]<br>  pageSize: 10<br>  lang: zh-CN<br>  highlight: false<br>  recordIP: false<br>  serverURLs:<br><br># Waline<br># 一款从 Valine 衍生的带后端的评论插件<br># A comment plugin with backend derived from Valine<br># See: https://waline.js.org/<br>waline:<br>  serverURL: &#x27;&#x27;<br>  placeholder: 说点什么<br>  path: window.location.pathname<br>  avatar: retro<br>  meta: [&#x27;nick&#x27;, &#x27;mail&#x27;, &#x27;link&#x27;]<br>  pageSize: 10<br>  lang: zh-CN<br>  highlight: true<br>  avatarForce: false<br>  requiredFields: []<br>  emojiCDN: &#x27;&#x27;<br>  emojiMaps: &#123;&#125;<br><br># 畅言 Changyan<br># 基于第三方的服务<br># Based on third-party service, insufficient support for regions outside China<br># http://changyan.kuaizhan.com<br>changyan:<br>  appid: &#x27;&#x27;<br>  appkey: &#x27;&#x27;<br><br># 来必力 Livere<br># 基于第三方的服务<br># Based on third-party service<br># See: https://www.livere.com<br>livere:<br>  uid: &#x27;&#x27;<br><br># Remark42<br># 需要自己运行后端服务<br># Need to run the backend service yourself<br># See: https://remark42.com<br>remark42:<br>  host:<br>  site_id:<br>  max_shown_comments: 10<br>  locale: zh<br><br># Twikoo<br># 基于腾讯云开发<br># Based on Tencent CloudBase<br># See: https://twikoo.js.org<br>twikoo:<br>  env_id:<br><br><br>#---------------------------<br># 归档页<br># Archive Page<br>#---------------------------<br>archive:<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:<br><br><br>#---------------------------<br># 分类页<br># Category Page<br>#---------------------------<br>category:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:<br><br>  # 单个分类中折叠展示文章数的最大值，超过限制会显示 More<br>  # The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More<br>  post_limit: 10<br><br>  # 排序字段，前面带减号是倒序，不带减号是正序，可选项：name | length<br>  # Sort field, with a minus sign is reverse order<br>  # Options: name | length<br>  order_by: &quot;-length&quot;<br><br>  # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开<br>  # Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories<br>  collapse_depth: 0<br><br><br>#---------------------------<br># 标签页<br># Tag Page<br>#---------------------------<br>tag:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 80<br>  banner_mask_alpha: 0.3<br>  subtitle:<br>  tagcloud:<br>    min_font: 15<br>    max_font: 30<br>    unit: px<br>    start_color: &quot;#BBBBEE&quot;<br>    end_color: &quot;#337ab7&quot;<br><br><br>#---------------------------<br># 关于页<br># About Page<br>#---------------------------<br>about:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:  # 打字机内容<br>  avatar: /img/avatar.png<br>  name: &quot;Fluid&quot;<br>  introduce: &quot;An elegant theme for Hexo&quot;<br>  # 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码<br>  # More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code<br>  icons:<br>    - &#123; class: &quot;iconfont icon-github-fill&quot;, link: &quot;https://github.com&quot;, tip: &quot;GitHub&quot; &#125;<br>    - &#123; class: &quot;iconfont icon-douban-fill&quot;, link: &quot;https://douban.com&quot;, tip: &quot;豆瓣&quot; &#125;<br>    - &#123; class: &quot;iconfont icon-wechat-fill&quot;, qrcode: &quot;/img/favicon.png&quot; &#125;<br><br><br>#---------------------------<br># 自定义页<br># Custom Page<br>#<br># 通过 hexo new page 命令创建的页面<br># Custom Page through `hexo new page`<br>#---------------------------<br>page:<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br><br><br>#---------------------------<br># 404页<br># 404 Page<br>#---------------------------<br>page404:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 85<br>  banner_mask_alpha: 0.3<br>  subtitle: &quot;Page not found&quot;<br><br><br>#---------------------------<br># 友链页<br># Links Page<br>#---------------------------<br>links:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:<br>  # 友链的成员项<br>  # Member item of page<br>  items:<br>    - &#123;<br>      title: &quot;Fluid Blog&quot;,<br>      intro: &quot;主题博客&quot;,<br>      link: &quot;https://hexo.fluid-dev.com/&quot;,<br>      image: &quot;/img/favicon.png&quot;<br>    &#125;<br>    - &#123;<br>      title: &quot;Fluid Docs&quot;,<br>      intro: &quot;主题使用指南&quot;,<br>      link: &quot;https://hexo.fluid-dev.com/docs/&quot;,<br>      image: &quot;/img/favicon.png&quot;<br>    &#125;<br>    - &#123;<br>      title: &quot;Fluid Repo&quot;,<br>      intro: &quot;主题 GitHub 仓库&quot;,<br>      link: &quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;,<br>      image: &quot;/img/favicon.png&quot;<br>    &#125;<br><br><br>#---------------------------<br># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，<br># 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，<br># ** 如果你不知道如何设置，请不要做任何改动 **<br>#<br># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.<br># Be aware that you would better use the same version as default ones to avoid potential problems.<br># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING<br>#---------------------------<br><br>static_prefix:<br>  # 内部静态<br>  # Internal static<br>  internal_js: /js<br>  internal_css: /css<br>  internal_img: /img<br><br>  # 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/<br>  # Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/<br>  iconfont: //at.alicdn.com/t/font_1736178_kmeydafke9r.css<br><br>  anchor: https://cdn.jsdelivr.net/npm/anchor-js@4.3.0/<br><br>  github_markdown: https://cdn.jsdelivr.net/npm/github-markdown-css@4.0.0/<br><br>  jquery: https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/<br><br>  bootstrap: https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/<br><br>  highlightjs: https://cdn.jsdelivr.net/npm/highlight.js@10.4.0/<br><br>  prismjs: https://cdn.jsdelivr.net/npm/prismjs@1.22.0/<br><br>  tocbot: https://cdn.jsdelivr.net/npm/tocbot@4.12.0/dist/<br><br>  typed: https://cdn.jsdelivr.net/npm/typed.js@2.0.11/lib/<br><br>  fancybox: https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/<br><br>  nprogress: https://cdn.jsdelivr.net/npm/nprogress@0.2.0/<br><br>  mathjax: https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/<br><br>  katex: https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/<br><br>  busuanzi: https://busuanzi.ibruce.info/busuanzi/2.3/<br><br>  clipboard: https://cdn.jsdelivr.net/npm/clipboard@2.0.6/dist/<br><br>  mermaid: https://cdn.jsdelivr.net/npm/mermaid@8.8.3/dist/<br><br>  valine: https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/<br><br>  waline: https://cdn.jsdelivr.net/npm/@waline/client@0.4.2/dist/<br><br>  gitalk: https://cdn.jsdelivr.net/npm/gitalk@1.7.0/dist/<br><br>  disqusjs: https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/<br><br>  twikoo: https://cdn.jsdelivr.net/npm/twikoo@0.1.15/dist/<br><br>  hint: /lib/hint/<br></code></pre></td></tr></table></figure><h3 id="2-配置页面顶部大图"><a href="#2-配置页面顶部大图" class="headerlink" title="2. 配置页面顶部大图"></a>2. 配置页面顶部大图</h3><p><strong>快速开始后的空白效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置\empty_demo.png" alt="初始页面" style="zoom: 67%;"><p>在<strong>博客目录</strong>下的<strong>source文件夹</strong>下建立img文件夹，img文件夹下建立bg文件夹表示背景图片，在里面存入自定义的图片。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/atrox_bg.png" alt="Hexo-https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置背景图"></p><p>修改<code>_config.fluid.yml</code>文件中的<code>banner_img</code>属性，使用本地图片的相对路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/example/atrox1.jpg</span>  <span class="hljs-comment">#对应放在/source/img/bg/atrox1.jpg</span><br></code></pre></td></tr></table></figure><p>在每个页面都有<code>banner_img</code>属性，各个修改即可。</p><p><strong>修改完成后的效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置\bg_img.png" alt="完成效果" style="zoom:50%;"><h3 id="3-设置博客标题"><a href="#3-设置博客标题" class="headerlink" title="3. 设置博客标题"></a>3. 设置博客标题</h3><p>页面左上角的博客标题，默认使用<strong>博客配置</strong>中的 <code>title</code>，这个配置同时控制着网页在浏览器标签中的标题。</p><p>我们在<code>_config.fluid.yml</code>主题配置中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;AtroxQW&quot;</span><br></code></pre></td></tr></table></figure><p>效果图：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置\blog_title.png" alt="博客标题设置" style="zoom: 50%;"><h3 id="4-自定义导航菜单"><a href="#4-自定义导航菜单" class="headerlink" title="4. 自定义导航菜单"></a>4. 自定义导航菜单</h3><p>笔者的导航菜单设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;首页&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;归档&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;分类&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;标签&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;关于我&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><ul><li><code>key</code>: 用于关联有<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%A4%9A%E8%AF%AD%E8%A8%80">多语言</a>，如不存在关联则显示 key 本身的值</li><li><code>link</code>: 跳转链接</li><li><code>icon</code>: 图标的 css class，可以省略（即没有图标）</li><li><code>name</code>: 强制使用此名称显示（不再按多语言显示），可省略</li></ul><p><strong>完成效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/nav_bar.png" alt="自定义导航菜单" style="zoom: 80%;"><h3 id="5-开启图片懒加载"><a href="#5-开启图片懒加载" class="headerlink" title="5. 开启图片懒加载"></a>5. 开启图片懒加载</h3><p>在<code>_config.fluid.yml</code>中设置<code>lazyload</code>属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>开启后，当图片滚动到可见范围内才会加载，可以大幅提高网页整体加载速度。<code>onlypost</code> 为 true 时，仅在文章页才使用懒加载.</p><h3 id="6-设置博客封面"><a href="#6-设置博客封面" class="headerlink" title="6. 设置博客封面"></a>6. 设置博客封面</h3><p>如果想统一给文章设置一个默认图片，可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/blog/Hexo-Fluid博客配置.jpg</span><br></code></pre></td></tr></table></figure><p>也可以对单篇博客设置封面，在文章开头 <code>Front-matter</code>中配置 <code>index_img</code> 属性。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">title: Hexoxo<span class="hljs-emphasis">_Fluid主题配置</span><br><span class="hljs-emphasis">date: 2020-12-30 09:18:36</span><br><span class="hljs-emphasis">tags: [Fluid,Hexo]</span><br><span class="hljs-emphasis">index_</span>img:/img/blog/Hexo-Fluid博客配置.jpg<br></code></pre></td></tr></table></figure><p><strong>效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置\index_img.png" alt="博客封面" style="zoom:75%;"><h3 id="7-集成评论功能-gitalk"><a href="#7-集成评论功能-gitalk" class="headerlink" title="7. 集成评论功能(gitalk)"></a>7. 集成评论功能(gitalk)</h3><h4 id="7-1-注册OAuth-Application"><a href="#7-1-注册OAuth-Application" class="headerlink" title="7.1 注册OAuth Application"></a>7.1 注册OAuth Application</h4><p><a href="https://github.com/settings/applications/new">官方入口</a>，点击进入来<strong>注册一个新的OAuth Application</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/new_application.png" alt="注册OAuth Application" style="zoom:100%;"><h4 id="7-2-注册后获取秘钥"><a href="#7-2-注册后获取秘钥" class="headerlink" title="7.2 注册后获取秘钥"></a>7.2 注册后获取秘钥</h4><p>点击注册后，会进入新页面。显示我们的OAuth <strong>Application</strong>的 <strong>Client ID</strong> 和 尚未生成的 <strong>Client secrets</strong></p><p>，点击 <strong>Generate a new client secret</strong> 按钮生成秘钥即可。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/Client_id_secrets.png" alt="获取秘钥"></p><h4 id="7-3-博客集成gitalk"><a href="#7-3-博客集成gitalk" class="headerlink" title="7.3 博客集成gitalk"></a>7.3 博客集成gitalk</h4><p>在<code>_config.fluid.yml</code>中<strong>开启并指定评论模块</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">gitalk</span><br></code></pre></td></tr></table></figure><p>然后在下方还要设<strong>置对应评论模块的参数</strong>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span> <span class="hljs-string">af550312a411b96c64b9</span>     <span class="hljs-comment">#刚才的ClientID</span><br>  <span class="hljs-attr">clientSecret:</span> <span class="hljs-string">f11934265fd18324cb2d9fd605d7d445207a3e52</span>   <span class="hljs-comment">#刚才的clientSecret</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&#x27;gitalk&#x27;</span>                                     <span class="hljs-comment">#刚才取的名</span><br>  <span class="hljs-attr">owner:</span> <span class="hljs-string">&#x27;AtroxQW&#x27;</span>                            <span class="hljs-comment">#github的用户名</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;AtroxQW&#x27;</span>]<br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="7-4-初始化issue"><a href="#7-4-初始化issue" class="headerlink" title="7.4 初始化issue"></a>7.4 初始化issue</h4><p>每次发表一篇博客，都需要我们作者<strong>初始化issue</strong>，初始化后评论就会在github上看到。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/init_issue.png" alt="初始化issue" style="zoom:65%;"><h3 id="8-关于页配置"><a href="#8-关于页配置" class="headerlink" title="8. 关于页配置"></a>8. 关于页配置</h3><p>在关于页，Fluid主题自动帮我初始化了空白的，我们只需要在<code>about</code>文件夹下其中的<code>index.md</code>追加内容即可。下面是笔者的关于页部分配置。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## 简介</span><br>欢迎大家来到 AtroxQW 的主页，我是一名河北工业大学在读大学生，专注于开发技术与机器学习。接下来，我会在这个独立的个人博客上，发布一些关于框架学习、机器学习和生活杂谈的文章。<br><br><span class="hljs-section">## 转载</span><br>如果您认为我的博客文章对您有些许帮助，想要引用文章中的部分段落或者图片，您可以在该文章下的评论区留言让我看到或者留下自己的原文链接。<br><br><span class="hljs-section">## 沟通</span><br>如果您想要和笔者沟通的话，评论区留言是个不错的选择，我每天都会翻阅评论区留言。如过您强烈想要和我深层次沟通（狗头），请加我下面的QQ或者Wechat，并备注：<span class="hljs-strong">**博客沟通**</span>，我会尽快通过各位的请求。<br></code></pre></td></tr></table></figure><h3 id="9-分类页配置"><a href="#9-分类页配置" class="headerlink" title="9. 分类页配置"></a>9. 分类页配置</h3><p>分类页配置，可以在博客文章的 <strong>Front-matter</strong> 中设置。分类和之前的标签虽然听起来很接近，但是在 Hexo中两者有明显的区别：<strong>分类</strong> 具有顺序性和层次性，也就是说[foo,bar] 不等于 [bar,foo];</p><p>写法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories: [Diary,Life]<br>tags: [PS3,Games]<br></code></pre></td></tr></table></figure><h3 id="10-使用LaTex数学公式"><a href="#10-使用LaTex数学公式" class="headerlink" title="10. 使用LaTex数学公式"></a>10. 使用LaTex数学公式</h3><p>在<code>_config.fluid.yml</code>中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当为 true 时，只有在文章 Front-matter (opens new window)里指定 math: true 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure><h3 id="11-友链设置"><a href="#11-友链设置" class="headerlink" title="11. 友链设置"></a>11. 友链设置</h3><p>友情链接页用于展示好友的博客入口，默认关闭，开启需要先在 <code>navbar</code> 项中将 <code>links</code> 的注释(#号)删掉。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;links&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/links/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-link-fill&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>然后找到 <code>links</code> 的配置项，对页面内容进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Fluid Docs&#x27;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&#x27;主题使用指南&#x27;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/&#x27;</span>,<br>      <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span><br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><code>title</code>: 友链站的标题</li><li><code>intro</code>: 站点或博主的简介，可省略</li><li><code>link</code>: 跳转链接</li><li><code>image</code>: 头像图片，可省略</li></ul><h3 id="12-压缩生成文件"><a href="#12-压缩生成文件" class="headerlink" title="12. 压缩生成文件"></a>12. 压缩生成文件</h3><p>我们使用 <a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier</a>。之所以使用这个插件，是因为博客中较大的css，js文件上加载速度不尽人意。而这款插件不仅高效易用，而且效果显著。</p><p>首先，使用cnpm安装该插件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">cnpm <span class="hljs-keyword">install</span> hexo-<span class="hljs-keyword">all</span>-minifier <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后，在博客目录下<code>config.yml</code>中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">all_minifier:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="13-生成唯一永久文章链接"><a href="#13-生成唯一永久文章链接" class="headerlink" title="13. 生成唯一永久文章链接"></a>13. 生成唯一永久文章链接</h3><p>在做此优化之前，hexo文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。</p><p>比如：<code>/2020/12/30/Hexo-https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/</code>.这样，如果文章标题是中文的话，URL链接是也会是中文，复制后的链接会是一长串，可读性极差，也不够简洁。</p><p>这里，我推荐使用Fluid官网提供的 <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件。</p><p>首先，使用cnpm安装该插件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-abbrlink <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后，修改 <code>config.yml</code> 中的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink/</span><br></code></pre></td></tr></table></figure><p>在其中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span>  <span class="hljs-comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="hljs-attr">abbrlink:</span><br>    <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>   <span class="hljs-comment">#算法： crc16(default) and crc32</span><br>    <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>     <span class="hljs-comment">#进制： dec(default) and hex</span><br></code></pre></td></tr></table></figure><h3 id="14-播放器插件-hexo-tag-dplayer"><a href="#14-播放器插件-hexo-tag-dplayer" class="headerlink" title="14. 播放器插件 hexo-tag-dplayer"></a>14. 播放器插件 hexo-tag-dplayer</h3><p>此插件可以在博客中插入音乐或视频，分分钟提高博客格调</p><p>首先，安装此插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-tag-dplayer <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>bad asset path... <p>使用代码如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span> dplayer <span class="hljs-string">&quot;url=http://www.nenu.edu.cn/_upload/article/videos/03/5f/7c999eed42e3aadc413d7f851f0e/0f50b3eb-9285-41d2-ac4d-6cc363651aad_B.mp4&quot;</span>  <span class="hljs-string">&quot;autoplay=true&quot;</span> <span class="hljs-string">&quot;preload=metadata&quot;</span> <span class="hljs-string">&quot;hotkey=true&quot;</span> <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="15-Hexo后台"><a href="#15-Hexo后台" class="headerlink" title="15. Hexo后台"></a>15. Hexo后台</h3><p><strong>hexo使用编辑文章时，若用其原生方式，则不便利，还好官网提供了一款插件hexo-admin界面化了markdown编辑器，只需要访问：<a href="http://127.0.0.1:4000/admin">http://127.0.0.1:4000/admin</a> 即可方便快捷的进行博文编辑了，效果如下：</strong></p><p>第一步，安装hexo-admin插件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save hexo-admin</span><br></code></pre></td></tr></table></figure><p>第二步，启动服务器。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span> -d<br></code></pre></td></tr></table></figure><p>第三步，在url栏输入地址，编辑博文</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">localhost:<span class="hljs-number">4000</span><span class="hljs-regexp">/admin/</span><br></code></pre></td></tr></table></figure><p><strong>最终效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/hexo_admin.png" alt="Hexo后台" style="zoom:75%;"><h3 id="16-使用hexo5注入器引入instantclick-js"><a href="#16-使用hexo5注入器引入instantclick-js" class="headerlink" title="16. 使用hexo5注入器引入instantclick.js"></a>16. 使用hexo5注入器引入instantclick.js</h3><h4 id="16-1-Hexo5注入器"><a href="#16-1-Hexo5注入器" class="headerlink" title="16.1 Hexo5注入器"></a>16.1 Hexo5注入器</h4><p>Hexo注入器是Hexo 5版本加入的一项新功能，注入器可以将静态代码片段注入生成的HTML的<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>中。</p><p>编写注入代码，需要在博客的根目录下创建<code>script</code>文件夹，然后在里面创建injector.js文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, <span class="hljs-string">&#x27;&lt;script src=&quot;/jquery.js&quot;&gt;&lt;/script&gt;&#x27;</span>, <span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><p>上述代码会在生成的页面 <code>&lt;/body&gt;</code> 注入加载 <code>jquery.js</code> 的代码。</p><p><code>register</code> 函数可接受三个参数，第一个参数是代码片段注入的位置，接受以下值：</p><ul><li><code>head_begin</code>: 注入在 <code>&lt;head&gt;</code> 之后（默认）</li><li><code>head_end</code>: 注入在 <code>&lt;/head&gt;</code> 之前</li><li><code>body_begin</code>: 注入在 <code>&lt;body&gt;</code> 之后</li><li><code>body_end</code>: 注入在 <code>&lt;/body&gt;</code> 之前</li></ul><p>第二个参数是注入的片段，可以是字符串，也可以是一个返回值为字符串的函数。</p><p>第三个参数是注入的页面类型，接受以下值：</p><ul><li><code>default</code>: 注入到每个页面（默认值）</li><li><code>home</code>: 只注入到主页（<code>is_home()</code> 为 <code>true</code> 的页面）</li><li><code>post</code>: 只注入到文章页面（<code>is_post()</code> 为 <code>true</code> 的页面）</li><li><code>page</code>: 只注入到独立页面（<code>is_page()</code> 为 <code>true</code> 的页面）</li><li><code>archive</code>: 只注入到归档页面（<code>is_archive()</code> 为 <code>true</code> 的页面）</li><li><code>category</code>: 只注入到分类页面（<code>is_category()</code> 为 <code>true</code> 的页面）</li><li><code>tag</code>: 只注入到标签页面（<code>is_tag()</code> 为 <code>true</code> 的页面）</li><li>或是其他自定义 layout 名称</li></ul><h4 id="16-2-instantclick-js"><a href="#16-2-instantclick-js" class="headerlink" title="16.2 instantclick.js"></a>16.2 instantclick.js</h4><p>尽管网络带宽不断增加，但网站并没有更快很多。这是因为最大的瓶颈在于页面加载的延迟。InstantClick 是一个很小的js库，大大加速你的网站响应速度。</p><p>在访问者点击一个链接之前，鼠标会悬停在链接上面，这两个事件之间通常有200ms~300ms的间隔，InstantClick 利用这个时间间隔预加载页面。这样当你点击页面的时候，其实页面已经加载到本地了，呈现当然也就会很快。</p><p>InstantClick 使用了 <strong>pushState</strong> 和 <strong>Ajax</strong> 技术，这个组合被称为 <strong>Pjax</strong>。</p><p>instantclick.js的使用方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src = <span class="hljs-string">&#x27;https://libs.xiaoz.top/instantclick/instantclick.min.js&#x27;</span> data-no-instant&gt;&lt;/script&gt;<br>&lt;script data-no-instant&gt;InstantClick.init();&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="16-3-整合"><a href="#16-3-整合" class="headerlink" title="16.3 整合"></a>16.3 整合</h4><p>在博客目录下的script文件夹下，创建injector.js文件，在里面写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.extend.injector.register(<span class="hljs-string">`body_end`</span>, <span class="hljs-string">`&lt;script src = &#x27;https://libs.xiaoz.top/instantclick/instantclick.min.js&#x27; data-no-instant&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script data-no-instant&gt;InstantClick.init();&lt;/script&gt;`</span> )<br></code></pre></td></tr></table></figure><p>如此重新启动hexo博客即可查看。</p><h3 id="17-Hexo博客支持emoji标签"><a href="#17-Hexo博客支持emoji标签" class="headerlink" title="17.Hexo博客支持emoji标签"></a>17.Hexo博客支持emoji标签</h3><p>Hexo 默认的<code>markdown</code> 渲染引擎不支持将 Github emoji 渲染到静态的 html 页面中，我们换一个支持 emoji 的引擎，再增加一个 emoji 插件即可。</p><h4 id="17-1-安装"><a href="#17-1-安装" class="headerlink" title="17.1 安装"></a>17.1 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm un hexo-renderer-marked --save<br>npm i hexo-renderer-markdown-it --save<br>npm install markdown-it-emoji --save<br></code></pre></td></tr></table></figure><p>Tips：据说 <a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a> 的速度要比 Hexo 原装插件要快，而且功能更多</p><h4 id="17-2-配置"><a href="#17-2-配置" class="headerlink" title="17.2 配置"></a>17.2 配置</h4><p>完成插件安装后还需要修改 Hexo 站点配置文件 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## markdown 渲染引擎配置，默认是hexo-renderer-marked，这个插件渲染速度更快，且有新特性</span><br><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">linkify:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">quotes:</span> <span class="hljs-string">&#x27;“”‘’&#x27;</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-footnote</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sup</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sub</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-abbr</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-emoji</span><br>  <span class="hljs-attr">anchors:</span><br>    <span class="hljs-attr">level:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">collisionSuffix:</span> <span class="hljs-string">&#x27;v&#x27;</span><br>    <span class="hljs-attr">permalink:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">permalinkClass:</span> <span class="hljs-string">header-anchor</span><br>    <span class="hljs-attr">permalinkSymbol:</span> <span class="hljs-string">¶</span><br></code></pre></td></tr></table></figure><p>这里需要注意 <code>render:</code> 下的 <code>html:</code> 配置项，它的作用是控制 <code>Markdown</code> 渲染引擎是否转义文档中出现的 <code>html</code> 标签，默认为 <code>false</code> ，这里要设置为 <code>true</code>，否则回导致 <code>&lt;!--more--&gt;</code> 渲染失败。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 不转义 HTML 内容，即允许 HTML</span><br>    <span class="hljs-comment">## OR</span><br><span class="hljs-attr">html:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 转义 HTML，&lt; &gt; 尖括号会被转义成 &amp;lt; &amp;gt;等</span><br></code></pre></td></tr></table></figure><p><code>plugins:</code> 中的最后一项 <code>- markdown-it-emoji</code> 是手动添加的，官方 Github Wiki 中给出的配置不包含这一项，其他配置参照的 Github Wiki 中的默认配置，hexo-renderer-markdown-it 提供的其他新特性还没有一一尝试，暂时只想用它的 emoji 功能。✌️</p><h4 id="17-3-使用"><a href="#17-3-使用" class="headerlink" title="17.3 使用"></a>17.3 使用</h4><p>输入对应的emoji编码就行了<br>        例如：输入笑脸对应的 emoji 编码 <code>:zap:</code> 就可以得到 :zap:</p><h4 id="17-4-emoji编码合集"><a href="#17-4-emoji编码合集" class="headerlink" title="17.4 emoji编码合集"></a>17.4 emoji编码合集</h4><p><strong>People</strong></p><table><thead><tr><th align="left">😐 <code>:neutral_face:</code></th><th align="left">😄 <code>:smile:</code></th><th align="left">😆 <code>:laughing:</code></th></tr></thead><tbody><tr><td align="left">😊 <code>:blush:</code></td><td align="left">😃 <code>:smiley:</code></td><td align="left">☺️ <code>:relaxed:</code></td></tr><tr><td align="left">😏 <code>:smirk:</code></td><td align="left">😍 <code>:heart_eyes:</code></td><td align="left">😘 <code>:kissing_heart:</code></td></tr><tr><td align="left">😚 <code>:kissing_closed_eyes:</code></td><td align="left">😳 <code>:flushed:</code></td><td align="left">😌 <code>:relieved:</code></td></tr><tr><td align="left">😆 <code>:satisfied:</code></td><td align="left">😁 <code>:grin:</code></td><td align="left">😉 <code>:wink:</code></td></tr><tr><td align="left">😜 <code>:stuck_out_tongue_winking_eye:</code></td><td align="left">😝 <code>:stuck_out_tongue_closed_eyes:</code></td><td align="left">😀 <code>:grinning:</code></td></tr><tr><td align="left">😗 <code>:kissing:</code></td><td align="left">😙 <code>:kissing_smiling_eyes:</code></td><td align="left">😛 <code>:stuck_out_tongue:</code></td></tr><tr><td align="left">😴 <code>:sleeping:</code></td><td align="left">😟 <code>:worried:</code></td><td align="left">😦 <code>:frowning:</code></td></tr><tr><td align="left">😧 <code>:anguished:</code></td><td align="left">😮 <code>:open_mouth:</code></td><td align="left">😬 <code>:grimacing:</code></td></tr><tr><td align="left">😕 <code>:confused:</code></td><td align="left">😯 <code>:hushed:</code></td><td align="left">😑 <code>:expressionless:</code></td></tr><tr><td align="left">😒 <code>:unamused:</code></td><td align="left">😅 <code>:sweat_smile:</code></td><td align="left">😓 <code>:sweat:</code></td></tr><tr><td align="left">😥 <code>:disappointed_relieved:</code></td><td align="left">😩 <code>:weary:</code></td><td align="left">😔 <code>:pensive:</code></td></tr><tr><td align="left">😞 <code>:disappointed:</code></td><td align="left">😖 <code>:confounded:</code></td><td align="left">😨 <code>:fearful:</code></td></tr><tr><td align="left">😰 <code>:cold_sweat:</code></td><td align="left">😣 <code>:persevere:</code></td><td align="left">😢 <code>:cry:</code></td></tr><tr><td align="left">😭 <code>:sob:</code></td><td align="left">😂 <code>:joy:</code></td><td align="left">😲 <code>:astonished:</code></td></tr><tr><td align="left">😱 <code>:scream:</code></td><td align="left">💭 <code>:thought_balloon:</code></td><td align="left">😫 <code>:tired_face:</code></td></tr><tr><td align="left">😠 <code>:angry:</code></td><td align="left">😡 <code>:rage:</code></td><td align="left">😤 <code>:triumph:</code></td></tr><tr><td align="left">😪 <code>:sleepy:</code></td><td align="left">😋 <code>:yum:</code></td><td align="left">😷 <code>:mask:</code></td></tr><tr><td align="left">😎 <code>:sunglasses:</code></td><td align="left">😵 <code>:dizzy_face:</code></td><td align="left">👿 <code>:imp:</code></td></tr><tr><td align="left">😈 <code>:smiling_imp:</code></td><td align="left">💬 <code>:speech_balloon:</code></td><td align="left">😶 <code>:no_mouth:</code></td></tr><tr><td align="left">😇 <code>:innocent:</code></td><td align="left">👽 <code>:alien:</code></td><td align="left">💛 <code>:yellow_heart:</code></td></tr><tr><td align="left">💙 <code>:blue_heart:</code></td><td align="left">💜 <code>:purple_heart:</code></td><td align="left">❤️ <code>:heart:</code></td></tr><tr><td align="left">💚 <code>:green_heart:</code></td><td align="left">💔 <code>:broken_heart:</code></td><td align="left">💓 <code>:heartbeat:</code></td></tr><tr><td align="left">💗 <code>:heartpulse:</code></td><td align="left">💕 <code>:two_hearts:</code></td><td align="left">💞 <code>:revolving_hearts:</code></td></tr><tr><td align="left">💘 <code>:cupid:</code></td><td align="left">💖 <code>:sparkling_heart:</code></td><td align="left">✨ <code>:sparkles:</code></td></tr><tr><td align="left">⭐️ <code>:star:</code></td><td align="left">🌟 <code>:star2:</code></td><td align="left">💫 <code>:dizzy:</code></td></tr><tr><td align="left">💥 <code>:boom:</code></td><td align="left">💥 <code>:collision:</code></td><td align="left">💢 <code>:anger:</code></td></tr><tr><td align="left">❗️ <code>:exclamation:</code></td><td align="left">❓ <code>:question:</code></td><td align="left">❕ <code>:grey_exclamation:</code></td></tr><tr><td align="left">❔ <code>:grey_question:</code></td><td align="left">💤 <code>:zzz:</code></td><td align="left">💨 <code>:dash:</code></td></tr><tr><td align="left">💦 <code>:sweat_drops:</code></td><td align="left">🎶 <code>:notes:</code></td><td align="left">🎵 <code>:musical_note:</code></td></tr><tr><td align="left">🔥 <code>:fire:</code></td><td align="left">💩 <code>:hankey:</code></td><td align="left">💩 <code>:poop:</code></td></tr><tr><td align="left">💩 <code>:shit:</code></td><td align="left">👍 <code>:+1:</code></td><td align="left">👍 <code>:thumbsup:</code></td></tr><tr><td align="left">👎 <code>:-1:</code></td><td align="left">👎 <code>:thumbsdown:</code></td><td align="left">👌 <code>:ok_hand:</code></td></tr><tr><td align="left">👊 <code>:punch:</code></td><td align="left">👊 <code>:facepunch:</code></td><td align="left">✊ <code>:fist:</code></td></tr><tr><td align="left">✌️ <code>:v:</code></td><td align="left">👋 <code>:wave:</code></td><td align="left">✋ <code>:hand:</code></td></tr><tr><td align="left">✋ <code>:raised_hand:</code></td><td align="left">👐 <code>:open_hands:</code></td><td align="left">☝️ <code>:point_up:</code></td></tr><tr><td align="left">👇 <code>:point_down:</code></td><td align="left">👈 <code>:point_left:</code></td><td align="left">👉 <code>:point_right:</code></td></tr><tr><td align="left">🙌 <code>:raised_hands:</code></td><td align="left">🙏 <code>:pray:</code></td><td align="left">👆 <code>:point_up_2:</code></td></tr><tr><td align="left">👏 <code>:clap:</code></td><td align="left">💪 <code>:muscle:</code></td><td align="left">🤘 <code>:metal:</code></td></tr><tr><td align="left">🖕 <code>:fu:</code></td><td align="left">🚶 <code>:walking:</code></td><td align="left">🏃 <code>:runner:</code></td></tr><tr><td align="left">🏃 <code>:running:</code></td><td align="left">👫 <code>:couple:</code></td><td align="left">👪 <code>:family:</code></td></tr><tr><td align="left">👬 <code>:two_men_holding_hands:</code></td><td align="left">👭 <code>:two_women_holding_hands:</code></td><td align="left">💃 <code>:dancer:</code></td></tr><tr><td align="left">👯 <code>:dancers:</code></td><td align="left">🙆 <code>:ok_woman:</code></td><td align="left">🙅 <code>:no_good:</code></td></tr><tr><td align="left">💁 <code>:information_desk_person:</code></td><td align="left">🙋 <code>:raising_hand:</code></td><td align="left">👰 <code>:bride_with_veil:</code></td></tr><tr><td align="left">🙎 <code>:person_with_pouting_face:</code></td><td align="left">🙍 <code>:person_frowning:</code></td><td align="left">🙇 <code>:bow:</code></td></tr><tr><td align="left">:couplekiss: <code>:couplekiss:</code></td><td align="left">💑 <code>:couple_with_heart:</code></td><td align="left">💆 <code>:massage:</code></td></tr><tr><td align="left">💇 <code>:haircut:</code></td><td align="left">💅 <code>:nail_care:</code></td><td align="left">👦 <code>:boy:</code></td></tr><tr><td align="left">👧 <code>:girl:</code></td><td align="left">👩 <code>:woman:</code></td><td align="left">👨 <code>:man:</code></td></tr><tr><td align="left">👶 <code>:baby:</code></td><td align="left">👵 <code>:older_woman:</code></td><td align="left">👴 <code>:older_man:</code></td></tr><tr><td align="left">👱 <code>:person_with_blond_hair:</code></td><td align="left">👲 <code>:man_with_gua_pi_mao:</code></td><td align="left">👳 <code>:man_with_turban:</code></td></tr><tr><td align="left">👷 <code>:construction_worker:</code></td><td align="left">👮 <code>:cop:</code></td><td align="left">👼 <code>:angel:</code></td></tr><tr><td align="left">👸 <code>:princess:</code></td><td align="left">😺 <code>:smiley_cat:</code></td><td align="left">😸 <code>:smile_cat:</code></td></tr><tr><td align="left">😻 <code>:heart_eyes_cat:</code></td><td align="left">😽 <code>:kissing_cat:</code></td><td align="left">😼 <code>:smirk_cat:</code></td></tr><tr><td align="left">🙀 <code>:scream_cat:</code></td><td align="left">😿 <code>:crying_cat_face:</code></td><td align="left">😹 <code>:joy_cat:</code></td></tr><tr><td align="left">😾 <code>:pouting_cat:</code></td><td align="left">👹 <code>:japanese_ogre:</code></td><td align="left">👺 <code>:japanese_goblin:</code></td></tr><tr><td align="left">🙈 <code>:see_no_evil:</code></td><td align="left">🙉 <code>:hear_no_evil:</code></td><td align="left">🙊 <code>:speak_no_evil:</code></td></tr><tr><td align="left">💂 <code>:guardsman:</code></td><td align="left">💀 <code>:skull:</code></td><td align="left">🐾 <code>:feet:</code></td></tr><tr><td align="left">👄 <code>:lips:</code></td><td align="left">💋 <code>:kiss:</code></td><td align="left">💧 <code>:droplet:</code></td></tr><tr><td align="left">👂 <code>:ear:</code></td><td align="left">👀 <code>:eyes:</code></td><td align="left">👃 <code>:nose:</code></td></tr><tr><td align="left">👅 <code>:tongue:</code></td><td align="left">💌 <code>:love_letter:</code></td><td align="left">👤 <code>:bust_in_silhouette:</code></td></tr><tr><td align="left">👥 <code>:busts_in_silhouette:</code></td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>Nature</strong></p><table><thead><tr><th align="left">☀️ <code>:sunny:</code></th><th align="left">☔️ <code>:umbrella:</code></th><th align="left">☁️ <code>:cloud:</code></th></tr></thead><tbody><tr><td align="left">❄️ <code>:snowflake:</code></td><td align="left">⛄️ <code>:snowman:</code></td><td align="left">⚡️ <code>:zap:</code></td></tr><tr><td align="left">🌀 <code>:cyclone:</code></td><td align="left">🌁 <code>:foggy:</code></td><td align="left">🌊 <code>:ocean:</code></td></tr><tr><td align="left">🐱 <code>:cat:</code></td><td align="left">🐶 <code>:dog:</code></td><td align="left">🐭 <code>:mouse:</code></td></tr><tr><td align="left">🐹 <code>:hamster:</code></td><td align="left">🐰 <code>:rabbit:</code></td><td align="left">🐺 <code>:wolf:</code></td></tr><tr><td align="left">🐸 <code>:frog:</code></td><td align="left">🐯 <code>:tiger:</code></td><td align="left">🐨 <code>:koala:</code></td></tr><tr><td align="left">🐻 <code>:bear:</code></td><td align="left">🐷 <code>:pig:</code></td><td align="left">🐽 <code>:pig_nose:</code></td></tr><tr><td align="left">🐮 <code>:cow:</code></td><td align="left">🐗 <code>:boar:</code></td><td align="left">🐵 <code>:monkey_face:</code></td></tr><tr><td align="left">🐒 <code>:monkey:</code></td><td align="left">🐴 <code>:horse:</code></td><td align="left">🐎 <code>:racehorse:</code></td></tr><tr><td align="left">🐫 <code>:camel:</code></td><td align="left">🐑 <code>:sheep:</code></td><td align="left">🐘 <code>:elephant:</code></td></tr><tr><td align="left">🐼 <code>:panda_face:</code></td><td align="left">🐍 <code>:snake:</code></td><td align="left">🐦 <code>:bird:</code></td></tr><tr><td align="left">🐤 <code>:baby_chick:</code></td><td align="left">🐥 <code>:hatched_chick:</code></td><td align="left">🐣 <code>:hatching_chick:</code></td></tr><tr><td align="left">🐔 <code>:chicken:</code></td><td align="left">🐧 <code>:penguin:</code></td><td align="left">🐢 <code>:turtle:</code></td></tr><tr><td align="left">🐛 <code>:bug:</code></td><td align="left">🐝 <code>:honeybee:</code></td><td align="left">🐜 <code>:ant:</code></td></tr><tr><td align="left">🐞 <code>:beetle:</code></td><td align="left">🐌 <code>:snail:</code></td><td align="left">🐙 <code>:octopus:</code></td></tr><tr><td align="left">🐠 <code>:tropical_fish:</code></td><td align="left">🐟 <code>:fish:</code></td><td align="left">🐳 <code>:whale:</code></td></tr><tr><td align="left">🐋 <code>:whale2:</code></td><td align="left">🐬 <code>:dolphin:</code></td><td align="left">🐄 <code>:cow2:</code></td></tr><tr><td align="left">🐏 <code>:ram:</code></td><td align="left">🐀 <code>:rat:</code></td><td align="left">🐃 <code>:water_buffalo:</code></td></tr><tr><td align="left">🐅 <code>:tiger2:</code></td><td align="left">🐇 <code>:rabbit2:</code></td><td align="left">🐉 <code>:dragon:</code></td></tr><tr><td align="left">🐐 <code>:goat:</code></td><td align="left">🐓 <code>:rooster:</code></td><td align="left">🐕 <code>:dog2:</code></td></tr><tr><td align="left">🐖 <code>:pig2:</code></td><td align="left">🐁 <code>:mouse2:</code></td><td align="left">🐂 <code>:ox:</code></td></tr><tr><td align="left">🐲 <code>:dragon_face:</code></td><td align="left">🐡 <code>:blowfish:</code></td><td align="left">🐊 <code>:crocodile:</code></td></tr><tr><td align="left">🐪 <code>:dromedary_camel:</code></td><td align="left">🐆 <code>:leopard:</code></td><td align="left">🐈 <code>:cat2:</code></td></tr><tr><td align="left">🐩 <code>:poodle:</code></td><td align="left">🐾 <code>:paw_prints:</code></td><td align="left">💐 <code>:bouquet:</code></td></tr><tr><td align="left">🌸 <code>:cherry_blossom:</code></td><td align="left">🌷 <code>:tulip:</code></td><td align="left">🍀 <code>:four_leaf_clover:</code></td></tr><tr><td align="left">🌹 <code>:rose:</code></td><td align="left">🌻 <code>:sunflower:</code></td><td align="left">🌺 <code>:hibiscus:</code></td></tr><tr><td align="left">🍁 <code>:maple_leaf:</code></td><td align="left">🍃 <code>:leaves:</code></td><td align="left">🍂 <code>:fallen_leaf:</code></td></tr><tr><td align="left">🌿 <code>:herb:</code></td><td align="left">🍄 <code>:mushroom:</code></td><td align="left">🌵 <code>:cactus:</code></td></tr><tr><td align="left">🌴 <code>:palm_tree:</code></td><td align="left">🌲 <code>:evergreen_tree:</code></td><td align="left">🌳 <code>:deciduous_tree:</code></td></tr><tr><td align="left">🌰 <code>:chestnut:</code></td><td align="left">🌱 <code>:seedling:</code></td><td align="left">🌼 <code>:blossom:</code></td></tr><tr><td align="left">🌾 <code>:ear_of_rice:</code></td><td align="left">🐚 <code>:shell:</code></td><td align="left">🌐 <code>:globe_with_meridians:</code></td></tr><tr><td align="left">🌞 <code>:sun_with_face:</code></td><td align="left">🌝 <code>:full_moon_with_face:</code></td><td align="left">🌚 <code>:new_moon_with_face:</code></td></tr><tr><td align="left">🌑 <code>:new_moon:</code></td><td align="left">🌒 <code>:waxing_crescent_moon:</code></td><td align="left">🌓 <code>:first_quarter_moon:</code></td></tr><tr><td align="left">🌔 <code>:waxing_gibbous_moon:</code></td><td align="left">🌕 <code>:full_moon:</code></td><td align="left">🌖 <code>:waning_gibbous_moon:</code></td></tr><tr><td align="left">🌗 <code>:last_quarter_moon:</code></td><td align="left">🌘 <code>:waning_crescent_moon:</code></td><td align="left">🌜 <code>:last_quarter_moon_with_face:</code></td></tr><tr><td align="left">🌛 <code>:first_quarter_moon_with_face:</code></td><td align="left">🌔 <code>:moon:</code></td><td align="left">🌍 <code>:earth_africa:</code></td></tr><tr><td align="left">🌎 <code>:earth_americas:</code></td><td align="left">🌏 <code>:earth_asia:</code></td><td align="left">🌋 <code>:volcano:</code></td></tr><tr><td align="left">🌌 <code>:milky_way:</code></td><td align="left">⛅️ <code>:partly_sunny:</code></td><td align="left"></td></tr></tbody></table><p><strong>Objects</strong></p><table><thead><tr><th align="left">🎍 <code>:bamboo:</code></th><th align="left">💝 <code>:gift_heart:</code></th><th align="left">🎎 <code>:dolls:</code></th></tr></thead><tbody><tr><td align="left">🎒 <code>:school_satchel:</code></td><td align="left">🎓 <code>:mortar_board:</code></td><td align="left">🎏 <code>:flags:</code></td></tr><tr><td align="left">🎆 <code>:fireworks:</code></td><td align="left">🎇 <code>:sparkler:</code></td><td align="left">🎐 <code>:wind_chime:</code></td></tr><tr><td align="left">🎑 <code>:rice_scene:</code></td><td align="left">🎃 <code>:jack_o_lantern:</code></td><td align="left">👻 <code>:ghost:</code></td></tr><tr><td align="left">🎅 <code>:santa:</code></td><td align="left">🎄 <code>:christmas_tree:</code></td><td align="left">🎁 <code>:gift:</code></td></tr><tr><td align="left">🔔 <code>:bell:</code></td><td align="left">🔕 <code>:no_bell:</code></td><td align="left">🎋 <code>:tanabata_tree:</code></td></tr><tr><td align="left">🎉 <code>:tada:</code></td><td align="left">🎊 <code>:confetti_ball:</code></td><td align="left">🎈 <code>:balloon:</code></td></tr><tr><td align="left">🔮 <code>:crystal_ball:</code></td><td align="left">💿 <code>:cd:</code></td><td align="left">📀 <code>:dvd:</code></td></tr><tr><td align="left">💾 <code>:floppy_disk:</code></td><td align="left">📷 <code>:camera:</code></td><td align="left">📹 <code>:video_camera:</code></td></tr><tr><td align="left">🎥 <code>:movie_camera:</code></td><td align="left">💻 <code>:computer:</code></td><td align="left">📺 <code>:tv:</code></td></tr><tr><td align="left">📱 <code>:iphone:</code></td><td align="left">☎️ <code>:phone:</code></td><td align="left">☎️ <code>:telephone:</code></td></tr><tr><td align="left">📞 <code>:telephone_receiver:</code></td><td align="left">📟 <code>:pager:</code></td><td align="left">📠 <code>:fax:</code></td></tr><tr><td align="left">💽 <code>:minidisc:</code></td><td align="left">📼 <code>:vhs:</code></td><td align="left">🔉 <code>:sound:</code></td></tr><tr><td align="left">🔈 <code>:speaker:</code></td><td align="left">🔇 <code>:mute:</code></td><td align="left">📢 <code>:loudspeaker:</code></td></tr><tr><td align="left">📣 <code>:mega:</code></td><td align="left">⌛️ <code>:hourglass:</code></td><td align="left">⏳ <code>:hourglass_flowing_sand:</code></td></tr><tr><td align="left">⏰ <code>:alarm_clock:</code></td><td align="left">⌚️ <code>:watch:</code></td><td align="left">📻 <code>:radio:</code></td></tr><tr><td align="left">📡 <code>:satellite:</code></td><td align="left">➿ <code>:loop:</code></td><td align="left">🔍 <code>:mag:</code></td></tr><tr><td align="left">🔎 <code>:mag_right:</code></td><td align="left">🔓 <code>:unlock:</code></td><td align="left">🔒 <code>:lock:</code></td></tr><tr><td align="left">🔏 <code>:lock_with_ink_pen:</code></td><td align="left">🔐 <code>:closed_lock_with_key:</code></td><td align="left">🔑 <code>:key:</code></td></tr><tr><td align="left">💡 <code>:bulb:</code></td><td align="left">🔦 <code>:flashlight:</code></td><td align="left">🔆 <code>:high_brightness:</code></td></tr><tr><td align="left">🔅 <code>:low_brightness:</code></td><td align="left">🔌 <code>:electric_plug:</code></td><td align="left">🔋 <code>:battery:</code></td></tr><tr><td align="left">📲 <code>:calling:</code></td><td align="left">✉️ <code>:email:</code></td><td align="left">📫 <code>:mailbox:</code></td></tr><tr><td align="left">📮 <code>:postbox:</code></td><td align="left">🛀 <code>:bath:</code></td><td align="left">🛁 <code>:bathtub:</code></td></tr><tr><td align="left">🚿 <code>:shower:</code></td><td align="left">🚽 <code>:toilet:</code></td><td align="left">🔧 <code>:wrench:</code></td></tr><tr><td align="left">🔩 <code>:nut_and_bolt:</code></td><td align="left">🔨 <code>:hammer:</code></td><td align="left">💺 <code>:seat:</code></td></tr><tr><td align="left">💰 <code>:moneybag:</code></td><td align="left">💴 <code>:yen:</code></td><td align="left">💵 <code>:dollar:</code></td></tr><tr><td align="left">💷 <code>:pound:</code></td><td align="left">💶 <code>:euro:</code></td><td align="left">💳 <code>:credit_card:</code></td></tr><tr><td align="left">💸 <code>:money_with_wings:</code></td><td align="left">📧 <code>:e-mail:</code></td><td align="left">📥 <code>:inbox_tray:</code></td></tr><tr><td align="left">📤 <code>:outbox_tray:</code></td><td align="left">✉️ <code>:envelope:</code></td><td align="left">📨 <code>:incoming_envelope:</code></td></tr><tr><td align="left">📯 <code>:postal_horn:</code></td><td align="left">📪 <code>:mailbox_closed:</code></td><td align="left">📬 <code>:mailbox_with_mail:</code></td></tr><tr><td align="left">📭 <code>:mailbox_with_no_mail:</code></td><td align="left">🚪 <code>:door:</code></td><td align="left">🚬 <code>:smoking:</code></td></tr><tr><td align="left">💣 <code>:bomb:</code></td><td align="left">🔫 <code>:gun:</code></td><td align="left">🔪 <code>:hocho:</code></td></tr><tr><td align="left">💊 <code>:pill:</code></td><td align="left">💉 <code>:syringe:</code></td><td align="left">📄 <code>:page_facing_up:</code></td></tr><tr><td align="left">📃 <code>:page_with_curl:</code></td><td align="left">📑 <code>:bookmark_tabs:</code></td><td align="left">📊 <code>:bar_chart:</code></td></tr><tr><td align="left">📈 <code>:chart_with_upwards_trend:</code></td><td align="left">📉 <code>:chart_with_downwards_trend:</code></td><td align="left">📜 <code>:scroll:</code></td></tr><tr><td align="left">📋 <code>:clipboard:</code></td><td align="left">📆 <code>:calendar:</code></td><td align="left">📅 <code>:date:</code></td></tr><tr><td align="left">📇 <code>:card_index:</code></td><td align="left">📁 <code>:file_folder:</code></td><td align="left">📂 <code>:open_file_folder:</code></td></tr><tr><td align="left">✂️ <code>:scissors:</code></td><td align="left">📌 <code>:pushpin:</code></td><td align="left">📎 <code>:paperclip:</code></td></tr><tr><td align="left">✒️ <code>:black_nib:</code></td><td align="left">✏️ <code>:pencil2:</code></td><td align="left">📏 <code>:straight_ruler:</code></td></tr><tr><td align="left">📐 <code>:triangular_ruler:</code></td><td align="left">📕 <code>:closed_book:</code></td><td align="left">📗 <code>:green_book:</code></td></tr><tr><td align="left">📘 <code>:blue_book:</code></td><td align="left">📙 <code>:orange_book:</code></td><td align="left">📓 <code>:notebook:</code></td></tr><tr><td align="left">📔 <code>:notebook_with_decorative_cover:</code></td><td align="left">📒 <code>:ledger:</code></td><td align="left">📚 <code>:books:</code></td></tr><tr><td align="left">🔖 <code>:bookmark:</code></td><td align="left">📛 <code>:name_badge:</code></td><td align="left">🔬 <code>:microscope:</code></td></tr><tr><td align="left">🔭 <code>:telescope:</code></td><td align="left">📰 <code>:newspaper:</code></td><td align="left">🏈 <code>:football:</code></td></tr><tr><td align="left">🏀 <code>:basketball:</code></td><td align="left">⚽️ <code>:soccer:</code></td><td align="left">⚾️ <code>:baseball:</code></td></tr><tr><td align="left">🎾 <code>:tennis:</code></td><td align="left">🎱 <code>:8ball:</code></td><td align="left">🏉 <code>:rugby_football:</code></td></tr><tr><td align="left">🎳 <code>:bowling:</code></td><td align="left">⛳️ <code>:golf:</code></td><td align="left">🚵 <code>:mountain_bicyclist:</code></td></tr><tr><td align="left">🚴 <code>:bicyclist:</code></td><td align="left">🏇 <code>:horse_racing:</code></td><td align="left">🏂 <code>:snowboarder:</code></td></tr><tr><td align="left">🏊 <code>:swimmer:</code></td><td align="left">🏄 <code>:surfer:</code></td><td align="left">🎿 <code>:ski:</code></td></tr><tr><td align="left">♠️ <code>:spades:</code></td><td align="left">♥️ <code>:hearts:</code></td><td align="left">♣️ <code>:clubs:</code></td></tr><tr><td align="left">♦️ <code>:diamonds:</code></td><td align="left">💎 <code>:gem:</code></td><td align="left">💍 <code>:ring:</code></td></tr><tr><td align="left">🏆 <code>:trophy:</code></td><td align="left">🎼 <code>:musical_score:</code></td><td align="left">🎹 <code>:musical_keyboard:</code></td></tr><tr><td align="left">🎻 <code>:violin:</code></td><td align="left">👾 <code>:space_invader:</code></td><td align="left">🎮 <code>:video_game:</code></td></tr><tr><td align="left">🃏 <code>:black_joker:</code></td><td align="left">🎴 <code>:flower_playing_cards:</code></td><td align="left">🎲 <code>:game_die:</code></td></tr><tr><td align="left">🎯 <code>:dart:</code></td><td align="left">🀄️ <code>:mahjong:</code></td><td align="left">🎬 <code>:clapper:</code></td></tr><tr><td align="left">📝 <code>:memo:</code></td><td align="left">📝 <code>:pencil:</code></td><td align="left">📖 <code>:book:</code></td></tr><tr><td align="left">🎨 <code>:art:</code></td><td align="left">🎤 <code>:microphone:</code></td><td align="left">🎧 <code>:headphones:</code></td></tr><tr><td align="left">🎺 <code>:trumpet:</code></td><td align="left">🎷 <code>:saxophone:</code></td><td align="left">🎸 <code>:guitar:</code></td></tr><tr><td align="left">👞 <code>:shoe:</code></td><td align="left">👡 <code>:sandal:</code></td><td align="left">👠 <code>:high_heel:</code></td></tr><tr><td align="left">💄 <code>:lipstick:</code></td><td align="left">👢 <code>:boot:</code></td><td align="left">👕 <code>:shirt:</code></td></tr><tr><td align="left">👕 <code>:tshirt:</code></td><td align="left">👔 <code>:necktie:</code></td><td align="left">👚 <code>:womans_clothes:</code></td></tr><tr><td align="left">👗 <code>:dress:</code></td><td align="left">🎽 <code>:running_shirt_with_sash:</code></td><td align="left">👖 <code>:jeans:</code></td></tr><tr><td align="left">👘 <code>:kimono:</code></td><td align="left">👙 <code>:bikini:</code></td><td align="left">🎀 <code>:ribbon:</code></td></tr><tr><td align="left">🎩 <code>:tophat:</code></td><td align="left">👑 <code>:crown:</code></td><td align="left">👒 <code>:womans_hat:</code></td></tr><tr><td align="left">👞 <code>:mans_shoe:</code></td><td align="left">🌂 <code>:closed_umbrella:</code></td><td align="left">💼 <code>:briefcase:</code></td></tr><tr><td align="left">👜 <code>:handbag:</code></td><td align="left">👝 <code>:pouch:</code></td><td align="left">👛 <code>:purse:</code></td></tr><tr><td align="left">👓 <code>:eyeglasses:</code></td><td align="left">🎣 <code>:fishing_pole_and_fish:</code></td><td align="left">☕️ <code>:coffee:</code></td></tr><tr><td align="left">🍵 <code>:tea:</code></td><td align="left">🍶 <code>:sake:</code></td><td align="left">🍼 <code>:baby_bottle:</code></td></tr><tr><td align="left">🍺 <code>:beer:</code></td><td align="left">🍻 <code>:beers:</code></td><td align="left">🍸 <code>:cocktail:</code></td></tr><tr><td align="left">🍹 <code>:tropical_drink:</code></td><td align="left">🍷 <code>:wine_glass:</code></td><td align="left">🍴 <code>:fork_and_knife:</code></td></tr><tr><td align="left">🍕 <code>:pizza:</code></td><td align="left">🍔 <code>:hamburger:</code></td><td align="left">🍟 <code>:fries:</code></td></tr><tr><td align="left">🍗 <code>:poultry_leg:</code></td><td align="left">🍖 <code>:meat_on_bone:</code></td><td align="left">🍝 <code>:spaghetti:</code></td></tr><tr><td align="left">🍛 <code>:curry:</code></td><td align="left">🍤 <code>:fried_shrimp:</code></td><td align="left">🍱 <code>:bento:</code></td></tr><tr><td align="left">🍣 <code>:sushi:</code></td><td align="left">🍥 <code>:fish_cake:</code></td><td align="left">🍙 <code>:rice_ball:</code></td></tr><tr><td align="left">🍘 <code>:rice_cracker:</code></td><td align="left">🍚 <code>:rice:</code></td><td align="left">🍜 <code>:ramen:</code></td></tr><tr><td align="left">🍲 <code>:stew:</code></td><td align="left">🍢 <code>:oden:</code></td><td align="left">🍡 <code>:dango:</code></td></tr><tr><td align="left">🥚 <code>:egg:</code></td><td align="left">🍞 <code>:bread:</code></td><td align="left">🍩 <code>:doughnut:</code></td></tr><tr><td align="left">🍮 <code>:custard:</code></td><td align="left">🍦 <code>:icecream:</code></td><td align="left">🍨 <code>:ice_cream:</code></td></tr><tr><td align="left">🍧 <code>:shaved_ice:</code></td><td align="left">🎂 <code>:birthday:</code></td><td align="left">🍰 <code>:cake:</code></td></tr><tr><td align="left">🍪 <code>:cookie:</code></td><td align="left">🍫 <code>:chocolate_bar:</code></td><td align="left">🍬 <code>:candy:</code></td></tr><tr><td align="left">🍭 <code>:lollipop:</code></td><td align="left">🍯 <code>:honey_pot:</code></td><td align="left">🍎 <code>:apple:</code></td></tr><tr><td align="left">🍏 <code>:green_apple:</code></td><td align="left">🍊 <code>:tangerine:</code></td><td align="left">🍋 <code>:lemon:</code></td></tr><tr><td align="left">🍒 <code>:cherries:</code></td><td align="left">🍇 <code>:grapes:</code></td><td align="left">🍉 <code>:watermelon:</code></td></tr><tr><td align="left">🍓 <code>:strawberry:</code></td><td align="left">🍑 <code>:peach:</code></td><td align="left">🍈 <code>:melon:</code></td></tr><tr><td align="left">🍌 <code>:banana:</code></td><td align="left">🍐 <code>:pear:</code></td><td align="left">🍍 <code>:pineapple:</code></td></tr><tr><td align="left">🍠 <code>:sweet_potato:</code></td><td align="left">🍆 <code>:eggplant:</code></td><td align="left">🍅 <code>:tomato:</code></td></tr><tr><td align="left">🌽 <code>:corn:</code></td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>Places</strong></p><table><thead><tr><th align="left">🏠 <code>:house:</code></th><th align="left">🏡 <code>:house_with_garden:</code></th><th align="left">🏫 <code>:school:</code></th></tr></thead><tbody><tr><td align="left">🏢 <code>:office:</code></td><td align="left">🏣 <code>:post_office:</code></td><td align="left">🏥 <code>:hospital:</code></td></tr><tr><td align="left">🏦 <code>:bank:</code></td><td align="left">🏪 <code>:convenience_store:</code></td><td align="left">🏩 <code>:love_hotel:</code></td></tr><tr><td align="left">🏨 <code>:hotel:</code></td><td align="left">💒 <code>:wedding:</code></td><td align="left">⛪️ <code>:church:</code></td></tr><tr><td align="left">🏬 <code>:department_store:</code></td><td align="left">🏤 <code>:european_post_office:</code></td><td align="left">🌇 <code>:city_sunrise:</code></td></tr><tr><td align="left">🌆 <code>:city_sunset:</code></td><td align="left">🏯 <code>:japanese_castle:</code></td><td align="left">🏰 <code>:european_castle:</code></td></tr><tr><td align="left">⛺️ <code>:tent:</code></td><td align="left">🏭 <code>:factory:</code></td><td align="left">🗼 <code>:tokyo_tower:</code></td></tr><tr><td align="left">🗾 <code>:japan:</code></td><td align="left">🗻 <code>:mount_fuji:</code></td><td align="left">🌄 <code>:sunrise_over_mountains:</code></td></tr><tr><td align="left">🌅 <code>:sunrise:</code></td><td align="left">🌠 <code>:stars:</code></td><td align="left">🗽 <code>:statue_of_liberty:</code></td></tr><tr><td align="left">🌉 <code>:bridge_at_night:</code></td><td align="left">🎠 <code>:carousel_horse:</code></td><td align="left">🌈 <code>:rainbow:</code></td></tr><tr><td align="left">🎡 <code>:ferris_wheel:</code></td><td align="left">⛲️ <code>:fountain:</code></td><td align="left">🎢 <code>:roller_coaster:</code></td></tr><tr><td align="left">🚢 <code>:ship:</code></td><td align="left">🚤 <code>:speedboat:</code></td><td align="left">⛵️ <code>:boat:</code></td></tr><tr><td align="left">⛵️ <code>:sailboat:</code></td><td align="left">🚣 <code>:rowboat:</code></td><td align="left">⚓️ <code>:anchor:</code></td></tr><tr><td align="left">🚀 <code>:rocket:</code></td><td align="left">✈️ <code>:airplane:</code></td><td align="left">🚁 <code>:helicopter:</code></td></tr><tr><td align="left">🚂 <code>:steam_locomotive:</code></td><td align="left">🚊 <code>:tram:</code></td><td align="left">🚞 <code>:mountain_railway:</code></td></tr><tr><td align="left">🚲 <code>:bike:</code></td><td align="left">🚡 <code>:aerial_tramway:</code></td><td align="left">🚟 <code>:suspension_railway:</code></td></tr><tr><td align="left">🚠 <code>:mountain_cableway:</code></td><td align="left">🚜 <code>:tractor:</code></td><td align="left">🚙 <code>:blue_car:</code></td></tr><tr><td align="left">🚘 <code>:oncoming_automobile:</code></td><td align="left">🚗 <code>:car:</code></td><td align="left">🚗 <code>:red_car:</code></td></tr><tr><td align="left">🚕 <code>:taxi:</code></td><td align="left">🚖 <code>:oncoming_taxi:</code></td><td align="left">🚛 <code>:articulated_lorry:</code></td></tr><tr><td align="left">🚌 <code>:bus:</code></td><td align="left">🚍 <code>:oncoming_bus:</code></td><td align="left">🚨 <code>:rotating_light:</code></td></tr><tr><td align="left">🚓 <code>:police_car:</code></td><td align="left">🚔 <code>:oncoming_police_car:</code></td><td align="left">🚒 <code>:fire_engine:</code></td></tr><tr><td align="left">🚑 <code>:ambulance:</code></td><td align="left">🚐 <code>:minibus:</code></td><td align="left">🚚 <code>:truck:</code></td></tr><tr><td align="left">🚋 <code>:train:</code></td><td align="left">🚉 <code>:station:</code></td><td align="left">🚆 <code>:train2:</code></td></tr><tr><td align="left">🚅 <code>:bullettrain_front:</code></td><td align="left">🚄 <code>:bullettrain_side:</code></td><td align="left">🚈 <code>:light_rail:</code></td></tr><tr><td align="left">🚝 <code>:monorail:</code></td><td align="left">🚃 <code>:railway_car:</code></td><td align="left">🚎 <code>:trolleybus:</code></td></tr><tr><td align="left">🎫 <code>:ticket:</code></td><td align="left">⛽️ <code>:fuelpump:</code></td><td align="left">🚦 <code>:vertical_traffic_light:</code></td></tr><tr><td align="left">🚥 <code>:traffic_light:</code></td><td align="left">⚠️ <code>:warning:</code></td><td align="left">🚧 <code>:construction:</code></td></tr><tr><td align="left">🔰 <code>:beginner:</code></td><td align="left">🏧 <code>:atm:</code></td><td align="left">🎰 <code>:slot_machine:</code></td></tr><tr><td align="left">🚏 <code>:busstop:</code></td><td align="left">💈 <code>:barber:</code></td><td align="left">♨️ <code>:hotsprings:</code></td></tr><tr><td align="left">🏁 <code>:checkered_flag:</code></td><td align="left">🎌 <code>:crossed_flags:</code></td><td align="left">🏮 <code>:izakaya_lantern:</code></td></tr><tr><td align="left">🗿 <code>:moyai:</code></td><td align="left">🎪 <code>:circus_tent:</code></td><td align="left">🎭 <code>:performing_arts:</code></td></tr><tr><td align="left">📍 <code>:round_pushpin:</code></td><td align="left">🚩 <code>:triangular_flag_on_post:</code></td><td align="left"></td></tr></tbody></table><p><strong>Symbols</strong></p><table><thead><tr><th align="left">1️⃣ <code>:one:</code></th><th align="left">2️⃣ <code>:two:</code></th><th align="left">3️⃣ <code>:three:</code></th></tr></thead><tbody><tr><td align="left">4️⃣ <code>:four:</code></td><td align="left">5️⃣ <code>:five:</code></td><td align="left">6️⃣ <code>:six:</code></td></tr><tr><td align="left">7️⃣ <code>:seven:</code></td><td align="left">8️⃣ <code>:eight:</code></td><td align="left">9️⃣ <code>:nine:</code></td></tr><tr><td align="left">🔟 <code>:keycap_ten:</code></td><td align="left">🔢 <code>:1234:</code></td><td align="left">0️⃣ <code>:zero:</code></td></tr><tr><td align="left">#️⃣ <code>:hash:</code></td><td align="left">🔣 <code>:symbols:</code></td><td align="left">◀️ <code>:arrow_backward:</code></td></tr><tr><td align="left">⬇️ <code>:arrow_down:</code></td><td align="left">▶️ <code>:arrow_forward:</code></td><td align="left">⬅️ <code>:arrow_left:</code></td></tr><tr><td align="left">🔠 <code>:capital_abcd:</code></td><td align="left">🔡 <code>:abcd:</code></td><td align="left">🔤 <code>:abc:</code></td></tr><tr><td align="left">↙️ <code>:arrow_lower_left:</code></td><td align="left">↘️ <code>:arrow_lower_right:</code></td><td align="left">➡️ <code>:arrow_right:</code></td></tr><tr><td align="left">⬆️ <code>:arrow_up:</code></td><td align="left">↖️ <code>:arrow_upper_left:</code></td><td align="left">↗️ <code>:arrow_upper_right:</code></td></tr><tr><td align="left">⏬ <code>:arrow_double_down:</code></td><td align="left">⏫ <code>:arrow_double_up:</code></td><td align="left">🔽 <code>:arrow_down_small:</code></td></tr><tr><td align="left">⤵️ <code>:arrow_heading_down:</code></td><td align="left">⤴️ <code>:arrow_heading_up:</code></td><td align="left">↩️ <code>:leftwards_arrow_with_hook:</code></td></tr><tr><td align="left">↪️ <code>:arrow_right_hook:</code></td><td align="left">↔️ <code>:left_right_arrow:</code></td><td align="left">↕️ <code>:arrow_up_down:</code></td></tr><tr><td align="left">🔼 <code>:arrow_up_small:</code></td><td align="left">🔃 <code>:arrows_clockwise:</code></td><td align="left">🔄 <code>:arrows_counterclockwise:</code></td></tr><tr><td align="left">⏪ <code>:rewind:</code></td><td align="left">⏩ <code>:fast_forward:</code></td><td align="left">ℹ️ <code>:information_source:</code></td></tr><tr><td align="left">🆗 <code>:ok:</code></td><td align="left">🔀 <code>:twisted_rightwards_arrows:</code></td><td align="left">🔁 <code>:repeat:</code></td></tr><tr><td align="left">🔂 <code>:repeat_one:</code></td><td align="left">🆕 <code>:new:</code></td><td align="left">🔝 <code>:top:</code></td></tr><tr><td align="left">🆙 <code>:up:</code></td><td align="left">🆒 <code>:cool:</code></td><td align="left">🆓 <code>:free:</code></td></tr><tr><td align="left">🆖 <code>:ng:</code></td><td align="left">🎦 <code>:cinema:</code></td><td align="left">🈁 <code>:koko:</code></td></tr><tr><td align="left">📶 <code>:signal_strength:</code></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">🈂️ <code>:sa:</code></td><td align="left">🚻 <code>:restroom:</code></td><td align="left">🚹 <code>:mens:</code></td></tr><tr><td align="left">🚺 <code>:womens:</code></td><td align="left">🚼 <code>:baby_symbol:</code></td><td align="left">🚭 <code>:no_smoking:</code></td></tr><tr><td align="left">🅿️ <code>:parking:</code></td><td align="left">♿️ <code>:wheelchair:</code></td><td align="left">🚇 <code>:metro:</code></td></tr><tr><td align="left">🛄 <code>:baggage_claim:</code></td><td align="left">🉑 <code>:accept:</code></td><td align="left">🚾 <code>:wc:</code></td></tr><tr><td align="left">🚰 <code>:potable_water:</code></td><td align="left">🚮 <code>:put_litter_in_its_place:</code></td><td align="left">㊙️ <code>:secret:</code></td></tr><tr><td align="left">㊗️ <code>:congratulations:</code></td><td align="left">Ⓜ️ <code>:m:</code></td><td align="left">🛂 <code>:passport_control:</code></td></tr><tr><td align="left">🛅 <code>:left_luggage:</code></td><td align="left">🛃 <code>:customs:</code></td><td align="left">🉐 <code>:ideograph_advantage:</code></td></tr><tr><td align="left">🆑 <code>:cl:</code></td><td align="left">🆘 <code>:sos:</code></td><td align="left">🆔 <code>:id:</code></td></tr><tr><td align="left">🚫 <code>:no_entry_sign:</code></td><td align="left">🔞 <code>:underage:</code></td><td align="left">📵 <code>:no_mobile_phones:</code></td></tr><tr><td align="left">🚯 <code>:do_not_litter:</code></td><td align="left">🚱 <code>:non-potable_water:</code></td><td align="left">🚳 <code>:no_bicycles:</code></td></tr><tr><td align="left">🚷 <code>:no_pedestrians:</code></td><td align="left">🚸 <code>:children_crossing:</code></td><td align="left">⛔️ <code>:no_entry:</code></td></tr><tr><td align="left">✳️ <code>:eight_spoked_asterisk:</code></td><td align="left">✴️ <code>:eight_pointed_black_star:</code></td><td align="left">💟 <code>:heart_decoration:</code></td></tr><tr><td align="left">🆚 <code>:vs:</code></td><td align="left">📳 <code>:vibration_mode:</code></td><td align="left">📴 <code>:mobile_phone_off:</code></td></tr><tr><td align="left">💹 <code>:chart:</code></td><td align="left">💱 <code>:currency_exchange:</code></td><td align="left">♈️ <code>:aries:</code></td></tr><tr><td align="left">♉️ <code>:taurus:</code></td><td align="left">♊️ <code>:gemini:</code></td><td align="left">♋️ <code>:cancer:</code></td></tr><tr><td align="left">♌️ <code>:leo:</code></td><td align="left">♍️ <code>:virgo:</code></td><td align="left">♎️ <code>:libra:</code></td></tr><tr><td align="left">♏️ <code>:scorpius:</code></td><td align="left">♐️ <code>:sagittarius:</code></td><td align="left">♑️ <code>:capricorn:</code></td></tr><tr><td align="left">♒️ <code>:aquarius:</code></td><td align="left">♓️ <code>:pisces:</code></td><td align="left">⛎ <code>:ophiuchus:</code></td></tr><tr><td align="left">🔯 <code>:six_pointed_star:</code></td><td align="left">❎ <code>:negative_squared_cross_mark:</code></td><td align="left">🅰️ <code>:a:</code></td></tr><tr><td align="left">🅱️ <code>:b:</code></td><td align="left">🆎 <code>:ab:</code></td><td align="left">🅾️ <code>:o2:</code></td></tr><tr><td align="left">💠 <code>:diamond_shape_with_a_dot_inside:</code></td><td align="left">♻️ <code>:recycle:</code></td><td align="left">🔚 <code>:end:</code></td></tr><tr><td align="left">🔛 <code>:on:</code></td><td align="left">🔜 <code>:soon:</code></td><td align="left">🕐 <code>:clock1:</code></td></tr><tr><td align="left">🕜 <code>:clock130:</code></td><td align="left">🕙 <code>:clock10:</code></td><td align="left">🕥 <code>:clock1030:</code></td></tr><tr><td align="left">🕚 <code>:clock11:</code></td><td align="left">🕦 <code>:clock1130:</code></td><td align="left">🕛 <code>:clock12:</code></td></tr><tr><td align="left">🕧 <code>:clock1230:</code></td><td align="left">🕑 <code>:clock2:</code></td><td align="left">🕝 <code>:clock230:</code></td></tr><tr><td align="left">🕒 <code>:clock3:</code></td><td align="left">🕞 <code>:clock330:</code></td><td align="left">🕓 <code>:clock4:</code></td></tr><tr><td align="left">🕟 <code>:clock430:</code></td><td align="left">🕔 <code>:clock5:</code></td><td align="left">🕠 <code>:clock530:</code></td></tr><tr><td align="left">🕕 <code>:clock6:</code></td><td align="left">🕡 <code>:clock630:</code></td><td align="left">🕖 <code>:clock7:</code></td></tr><tr><td align="left">🕢 <code>:clock730:</code></td><td align="left">🕗 <code>:clock8:</code></td><td align="left">🕣 <code>:clock830:</code></td></tr><tr><td align="left">🕘 <code>:clock9:</code></td><td align="left">🕤 <code>:clock930:</code></td><td align="left">💲 <code>:heavy_dollar_sign:</code></td></tr><tr><td align="left">©️ <code>:copyright:</code></td><td align="left">®️ <code>:registered:</code></td><td align="left">™️ <code>:tm:</code></td></tr><tr><td align="left">❌ <code>:x:</code></td><td align="left">❗️ <code>:heavy_exclamation_mark:</code></td><td align="left">‼️ <code>:bangbang:</code></td></tr><tr><td align="left">⁉️ <code>:interrobang:</code></td><td align="left">⭕️ <code>:o:</code></td><td align="left">✖️ <code>:heavy_multiplication_x:</code></td></tr><tr><td align="left">➕ <code>:heavy_plus_sign:</code></td><td align="left">➖ <code>:heavy_minus_sign:</code></td><td align="left">➗ <code>:heavy_division_sign:</code></td></tr><tr><td align="left">💮 <code>:white_flower:</code></td><td align="left">💯 <code>:100:</code></td><td align="left">✔️ <code>:heavy_check_mark:</code></td></tr><tr><td align="left">☑️ <code>:ballot_box_with_check:</code></td><td align="left">🔘 <code>:radio_button:</code></td><td align="left">🔗 <code>:link:</code></td></tr><tr><td align="left">➰ <code>:curly_loop:</code></td><td align="left">〰️ <code>:wavy_dash:</code></td><td align="left">〽️ <code>:part_alternation_mark:</code></td></tr><tr><td align="left">🔱 <code>:trident:</code></td><td align="left">🔻 <code>:small_red_triangle_down:</code></td><td align="left">🔺 <code>:small_red_triangle:</code></td></tr><tr><td align="left">✅ <code>:white_check_mark:</code></td><td align="left">🔲 <code>:black_square_button:</code></td><td align="left">🔳 <code>:white_square_button:</code></td></tr><tr><td align="left">⚫️ <code>:black_circle:</code></td><td align="left">⚪️ <code>:white_circle:</code></td><td align="left">🔴 <code>:red_circle:</code></td></tr><tr><td align="left">🔵 <code>:large_blue_circle:</code></td><td align="left">🔷 <code>:large_blue_diamond:</code></td><td align="left">🔶 <code>:large_orange_diamond:</code></td></tr><tr><td align="left">🔹 <code>:small_blue_diamond:</code></td><td align="left">🔸 <code>:small_orange_diamond:</code></td><td align="left"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>博客配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid主题配置</title>
    <link href="/posts/2020/12/31/IDEA%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%B8%A9%E5%9D%91/"/>
    <url>/posts/2020/12/31/IDEA%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Fluid博客美化"><a href="#Fluid博客美化" class="headerlink" title="Fluid博客美化"></a>Fluid博客美化</h1><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>Hexo 5.0.0版本以上，通过npm直接安装，进入博客目录执行命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后再博客目录下创建<code>_config.fluid.yml</code>文件，将hexo-theme-fluid主题的<code>_config.yml</code>内容复制进去。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br></pre></td><td class="code"><pre><code class="hljs xml">#---------------------------<br># Hexo Theme Fluid<br># Author: Fluid-dev<br># Github: https://github.com/fluid-dev/hexo-theme-fluid<br>#<br># 配置指南: https://hexo.fluid-dev.com/docs/guide/<br># 你可以从指南中获得更详细的说明<br>#<br># Guide: https://hexo.fluid-dev.com/docs/en/guide/<br># You can get more detailed help from the guide<br>#---------------------------<br><br><br>#---------------------------<br># 全局<br># Global<br>#---------------------------<br><br># 用于浏览器标签的图标<br># Icon for browser tab<br>favicon: /img/favicon.png<br><br># 用于苹果设备的图标<br># Icon for Apple touch<br>apple_touch_icon: /img/favicon.png<br><br># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名<br># Title separator in browser tab, eg: article - site<br>title_join_string: &quot; - &quot;<br><br># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）<br># Force all links to be HTTPS (applicable to HTTP mixed error)<br>force_https: false<br><br># 代码块的增强配置<br># Enhancements to code blocks<br>code:<br>  # 是否开启复制代码的按钮<br>  # Enable copy code button<br>  copy_btn: true<br><br>  # 代码高亮<br>  # Code highlight<br>  highlight:<br>    enable: true<br><br>    # 代码块是否显示行号<br>    # If true, the code block display line numbers<br>    line_number: true<br><br>    # 实现高亮的库，对应下面的设置<br>    # Highlight library<br>    # Options: highlightjs | prismjs<br>    lib: &quot;highlightjs&quot;<br><br>    highlightjs:<br>      # 在链接中挑选 style 填入<br>      # Select a style in the link<br>      # See: https://highlightjs.org/static/demo/<br>      style: &quot;Github Gist&quot;<br><br>      # 是否根据 style 改变代码背景色（如果 style 是深色背景别忘了开启此项）<br>      # If true, the code background will change color based on the style (If style has a dark background, don&#x27;t forget to true)<br>      bg_color: false<br><br>    prismjs:<br>      # 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接<br>      # Select the style button on the right side of the link page, you can also set the CSS link<br>      # See: https://prismjs.com/<br>      style: &quot;default&quot;<br><br>      # 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成<br>      # If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser<br>      preprocess: true<br><br># 一些好玩的功能<br># Some fun features<br>fun_features:<br>  # 为 subtitle 添加打字机效果<br>  # Typing animation for subtitle<br>  typing:<br>    enable: true<br><br>    # 打印速度，数字越大越慢<br>    # Typing speed, the larger the number, the slower<br>    typeSpeed: 70<br><br>    # 游标字符<br>    # Cursor character<br>    cursorChar: &quot;_&quot;<br><br>    # 是否循环播放效果<br>    # If true, loop animation<br>    loop: false<br><br>  # 为文章内容中的标题添加锚图标<br>  # Add an anchor icon to the title on the post page<br>  anchorjs:<br>    enable: true<br>    element: h1,h2,h3,h4,h5,h6<br>    placement: right<br>    # Options: hover | always | touch<br>    visible: hover<br>    # Option：§ | # | ❡<br>    icon: &quot;&quot;<br><br>  # 加载进度条<br>  # Progress bar when loading<br>  progressbar:<br>    enable: true<br>    height_px: 3<br>    color: &quot;#29d&quot;<br>    # See: https://github.com/rstacruz/nprogress<br>    options: &#123; showSpinner: false, trickleSpeed: 100 &#125;<br><br># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换<br># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option<br>dark_mode:<br>  enable: true<br>  # 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式<br>  # Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time<br>  # Options: auto | light | dark<br>  default: auto<br><br># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发<br># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below<br># See: https://www.webdesignrankings.com/resources/lolcolors/<br>color:<br>  # body 背景色<br>  # Color of body background<br>  body_bg_color: &quot;#eee&quot;<br>  # 暗色模式下的 body 背景色，下同<br>  # Color in dark mode, the same below<br>  body_bg_color_dark: &quot;#181c27&quot;<br><br>  # 顶部菜单背景色<br>  # Color of navigation bar background<br>  navbar_bg_color: &quot;#2f4154&quot;<br>  navbar_bg_color_dark: &quot;#1f3144&quot;<br><br>  # 顶部菜单字体色<br>  # Color of navigation bar text<br>  navbar_text_color: &quot;#fff&quot;<br>  navbar_text_color_dark: &quot;#d0d0d0&quot;<br><br>  # 全局字体色<br>  # Color of global text<br>  text_color: &quot;#3c4858&quot;<br>  text_color_dark: &quot;#c4c6c9&quot;<br><br>  # 全局次级字体色（摘要、简介等位置）<br>  # Color of global secondary text (excerpt, introduction, etc.)<br>  sec_text_color: &quot;#718096&quot;<br>  sec_text_color_dark: &quot;#a7a9ad&quot;<br><br>  # 文章正文字体色<br>  # Color of post text<br>  post_text_color: &quot;#2c3e50&quot;<br>  post_text_color_dark: &quot;#c4c6c9&quot;<br><br>  # 文章正文字体色（h1 h2 h3...）<br>  # Color of Article heading (h1 h2 h3...)<br>  post_heading_color: &quot;#1a202c&quot;<br>  post_heading_color_dark: &quot;#c4c6c9&quot;<br><br>  # 文章超链接字体色<br>  # Color of post link<br>  post_link_color: &quot;#0366d6&quot;<br>  post_link_color_dark: &quot;#1589e9&quot;<br><br>  # 超链接悬浮时字体色<br>  # Color of link when hovering<br>  link_hover_color: &quot;#30a9de&quot;<br>  link_hover_color_dark: &quot;#30a9de&quot;<br><br>  # 超链接悬浮背景色<br>  # Color of link background when hovering<br>  link_hover_bg_color: &quot;#f8f9fa&quot;<br>  link_hover_bg_color_dark: &quot;#364151&quot;<br><br>  # 主面板背景色<br>  # Color of main board<br>  board_color: &quot;#fff&quot;<br>  board_color_dark: &quot;#252d38&quot;<br><br># 主题字体配置<br># Font<br>font:<br>  font_size: 16px<br>  font_family:<br>  code_font_size: 85%<br><br># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js<br># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`<br>custom_js:<br><br># 指定自定义 .css 文件路径，用法和 custom_js 相同<br># The usage is the same as custom_js<br>custom_css:<br><br># 自定义底部 HTML 内容（位于 footer 上方），注意不要和 `post: custom` 配置冲突<br># Customize the HTML content at the bottom (located above the footer), be careful not to conflict with `post: custom`<br>custom_html: &#x27;&#x27;<br><br># 网页访问统计<br># Analysis of website visitors<br>web_analytics:  # 网页访问统计<br>  enable: false<br><br>  # 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串<br>  # Baidu analytics, get the string behind `hm.js?`<br>  # See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376<br>  baidu:<br><br>  # Google 统计的 Tracking ID<br>  # Google analytics, set Tracking ID<br>  # See: https://developers.google.com/analytics/devguides/collection/analyticsjs<br>  google:<br><br>  # Google gtag.js 的媒体资源 ID<br>  # Google gtag.js GA_MEASUREMENT_ID<br>  # See: https://developers.google.com/analytics/devguides/collection/gtagjs/<br>  gtag:<br><br>  # 腾讯统计的 H5 App ID，开启高级功能才有cid<br>  # Tencent analytics, set APP ID<br>  # See: https://mta.qq.com/h5/manage/ctr_app_manage<br>  tencent:<br>    sid:<br>    cid:<br><br>  # 51.la 站点统计 ID<br>  # 51.la analytics<br>  # See: https://www.51.la/user/site/index<br>  woyaola:  # 51.la 站点统计 ID，参见<br><br>  # 友盟/cnzz 站点统计 web_id<br>  # cnzz analytics<br>  # See: https://web.umeng.com/main.php?c=site&amp;a=show<br>  cnzz:<br><br>  # LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加<br>  # LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase<br>  leancloud:<br>    app_id:<br>    app_key:<br>    # REST API 服务器地址，国际版不填<br>    # Only the Chinese mainland users need to set<br>    server_url:<br><br># 对页面中的图片进行懒加载处理，可见范围外的图片不会加载<br># Lazy loading of images on the page<br>lazyload:<br>  enable: true<br>  # 懒加载仅对文章页生效，开启后如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`<br>  # If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter<br>  onlypost: false<br><br># 主题版本相关<br># Theme version<br>version:<br>  # 每次生成页面后，检测主题是否为最新版本<br>  # If true, check whether Fluid is the latest version after hexo generate<br>  check: false<br><br><br>#---------------------------<br># 页头<br># Header<br>#---------------------------<br><br># 导航栏的相关配置<br># Navigation bar<br>navbar:<br>  # 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示<br>  # The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config<br>  blog_title: &quot;Fluid&quot;<br><br>  # 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效<br>  # Navigation bar frosted glass special animation. It is an experimental feature<br>  ground_glass:<br>    enable: false<br><br>    # 模糊像素，只能为数字，数字越大模糊度越高<br>    # Number of blurred pixel. the larger the number, the higher the blur<br>    px: 3<br><br>    # 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体<br>    # Ratio of opacity, 1.0 is completely opaque<br>    # available: 0 - 1.0<br>    alpha: 0.7<br><br>  # 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称<br>  # Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name<br>  menu:<br>    - &#123; key: &quot;home&quot;, link: &quot;/&quot;, icon: &quot;iconfont icon-home-fill&quot; &#125;<br>    - &#123; key: &quot;archive&quot;, link: &quot;/archives/&quot;, icon: &quot;iconfont icon-archive-fill&quot; &#125;<br>    - &#123; key: &quot;category&quot;, link: &quot;/categories/&quot;, icon: &quot;iconfont icon-category-fill&quot; &#125;<br>    - &#123; key: &quot;tag&quot;, link: &quot;/tags/&quot;, icon: &quot;iconfont icon-tags-fill&quot; &#125;<br>    - &#123; key: &quot;about&quot;, link: &quot;/about/&quot;, icon: &quot;iconfont icon-user-fill&quot; &#125;<br>    #- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;<br><br># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件<br># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files<br>search:<br>  enable: true<br>  # 搜索索引文件的路径，可以是相对路径或外站的绝对路径<br>  # Path for search index file, it can be a relative path or an absolute path<br>  path: /local-search.xml<br><br>  # 文件生成在本地的位置，必须是相对路径<br>  # The location where the index file is generated locally, it must be a relative location<br>  generate_path: /local-search.xml<br><br>  # 搜索的范围<br>  # Search field<br>  # Options: post | page | all<br>  field: post<br><br>  # 搜索是否扫描正文<br>  # If true, search will scan the post content<br>  content: true<br><br># 首屏图片的相关配置<br># Config of the big image on the first screen<br>banner:<br>  # 视差滚动，图片与板块会随着屏幕滚动产生视差效果<br>  # Scrolling parallax<br>  parallax: true<br><br>  # 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0<br>  # Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0<br>  width_height_ratio: 1.0<br><br># 向下滚动的箭头<br># Scroll down arrow<br>scroll_down_arrow:<br>  enable: true<br><br>  # 头图高度不小于指定比例，才显示箭头<br>  # Only the height of the banner image is greater than the ratio, the arrow is displayed<br>  # Available: 0 - 100<br>  banner_height_limit: 80<br><br>  # 翻页后自动滚动<br>  # Auto scroll after page turning<br>  scroll_after_turning_page: true<br><br># 向顶部滚动的箭头<br># Scroll top arrow<br>scroll_top_arrow:<br>  enable: true<br><br><br>#---------------------------<br># 页脚<br># Footer<br>#---------------------------<br>footer:<br>  # 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题<br>  # HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people<br>  content: &#x27;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://hexo.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-love&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fluid<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  &#x27;<br><br>  # 展示网站的 PV、UV 统计数<br>  # Display website PV and UV statistics<br>  statistics:<br>    enable: false<br><br>    # 统计数据来源，如果使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；如果使用 busuanzi 可能会有请求失败的情况<br>    # Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`<br>    # Options: busuanzi | leancloud<br>    source: &quot;busuanzi&quot;<br><br>    # 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同<br>    # Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below<br>    pv_format: &quot;总访问量 &#123;&#125; 次&quot;<br>    uv_format: &quot;总访客数 &#123;&#125; 人&quot;<br><br>  # 国内大陆服务器的备案信息<br>  # For Chinese mainland website policy, other areas keep disable<br>  beian:<br>    enable: false<br>    # ICP证号<br>    icp_text: 京ICP证123456号<br>    # 公安备案号，不填则只显示ICP<br>    police_text: 京公网安备12345678号<br>    # 公安备案的编号，用于URL跳转查询<br>    police_code: 12345678<br>    # 公安备案的图片. 为空时不显示备案图片<br>    police_icon: /img/police_beian.png<br><br><br>#---------------------------<br># 首页<br># Home Page<br>#---------------------------<br>index:<br>  # 首页 Banner 头图，可以是相对路径或绝对路径，以下相同<br>  # Path of Banner image, can be a relative path or an absolute path, the same on other pages<br>  banner_img: /img/default.png<br><br>  # 头图高度，屏幕百分比<br>  # Height ratio of banner image<br>  # Available: 0 - 100<br>  banner_img_height: 100<br><br>  # 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明<br>  # Opacity of the banner mask, 1.0 is completely opaque<br>  # Available: 0 - 1.0<br>  banner_mask_alpha: 0.3<br><br>  # 首页副标题的独立设置<br>  # Independent config of home page subtitle<br>  slogan:<br>    enable: true<br><br>    # 为空则按 hexo config.subtitle 显示<br>    # If empty, text based on `subtitle` in hexo config<br>    text: &quot;An elegant Material-Design theme for Hexo&quot;<br><br>    # 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能<br>    # Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation<br>    api:<br>      enable: false<br><br>      # 请求地址<br>      # Request url<br>      url: &quot;&quot;<br><br>      # 请求方法<br>      # Request method<br>      # Available: GET | POST | PUT<br>      method: &quot;GET&quot;<br><br>      # 请求头<br>      # Request headers<br>      headers: &#123;&#125;<br><br>      # 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项<br>      # The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected<br>      keys: []<br><br>  # 自动截取文章摘要<br>  # Auto extract post<br>  auto_excerpt:<br>    enable: true<br><br>  # 打开文章的标签方式<br>  # The browser tag to open the post<br>  # Available: _blank | _self<br>  post_url_target: _self<br><br>  # 是否显示文章信息（时间、分类、标签）<br>  # Meta information of post<br>  post_meta:<br>    date: true<br>    category: true<br>    tag: true<br><br>  # 文章通过 sticky 排序后，在首页文章标题前显示图标<br>  # If the posts are sorted by `sticky`, an icon is displayed in front of the post title<br>  post_sticky:<br>    enable: true<br>    icon: &quot;iconfont icon-top&quot;<br><br><br>#---------------------------<br># 文章页<br># Post Page<br>#---------------------------<br>post:<br>  banner_img: /img/default.png<br>  banner_img_height: 70<br>  banner_mask_alpha: 0.3<br><br>  # 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片<br>  # Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed<br>  default_index_img:<br><br>  # 文章标题下方的元信息<br>  # Meta information below title<br>  meta:<br>    # 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值<br>    # Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config<br>    author:<br>      enable: false<br><br>    # 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期<br>    # Post date, based on `date` field in front-matter, if not set, based on create date of .md file<br>    date:<br>      enable: true<br>      # 格式参照 ISO-8601 日期格式化<br>      # ISO-8601 date format<br>      # See: http://momentjs.cn/docs/#/parsing/string-format/<br>      format: &quot;LL a&quot;<br><br>    # 字数统计<br>    # Word count<br>    wordcount:<br>      enable: true<br>      # 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同<br>      # Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below<br>      format: &quot;&#123;&#125; 字&quot;<br><br>    # 估计阅读全文需要的时长<br>    # Estimate the time required to read the full text<br>    min2read:<br>      enable: true<br>      format: &quot;&#123;&#125; 分钟&quot;<br>      # 每分钟阅读多少字，如果是技术文章，建议降低<br>      # Words read per minute<br>      words: 100<br><br>    # 浏览量计数<br>    # Number of visits<br>    views:<br>      enable: false<br>      # 统计数据来源<br>      # Data Source<br>      # Options: busuanzi | leancloud<br>      source: &quot;busuanzi&quot;<br>      format: &quot;&#123;&#125; 次&quot;<br><br>  # 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）<br>  # Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)<br>  updated:<br>    enable: false<br><br>    # 描述文字<br>    # Descriptive text before date<br>    content: 本文最后更新于：<br><br>    # 是否使用相对时间表示，比如：&quot;3 天前&quot;<br>    # If true, it will be a relative time, such as: &quot;3 days ago&quot;<br>    relative: false<br><br>  # 文章右侧目录<br>  # Table of contents (TOC)<br>  toc:<br>    enable: true<br>    # 目录会选择这些节点作为标题<br>    # TOC will select these nodes as headings<br>    headingSelector: &quot;h1,h2,h3,h4,h5,h6&quot;<br>    # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开<br>    # Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings<br>    collapseDepth: 0<br><br>  # 版权声明，会显示在每篇文章的结尾<br>  # Copyright, will be displayed at the end of each post<br>  copyright:<br>    enable: true<br>    content: &#x27;本博客所有文章除特别声明外，均采用 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.zh&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span>CC BY-SA 4.0 协议<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> ，转载请注明出处！&#x27;<br><br>  # 文章底部上一篇下一篇功能<br>  # Link to previous/next post<br>  prev_next:<br>    enable: true<br><br>  # 文章底部自定义区域（位于 footer 上方），支持 HTML，可插入赞赏码、公众号这类内容内容<br>  # Custom content at the bottom of the post page (located above the footer)<br>  custom:<br>    enable: false<br>    content: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://octodex.github.com/images/jetpacktocat.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rounded mx-auto d-block mt-5&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:150px; height:150px;&quot;</span>&gt;</span>&#x27;<br><br>  # 文章图片可点击放大<br>  # Zoom feature of images<br>  image_zoom:<br>    enable: true<br><br>  # 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突<br>  # Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict<br>  footnote:<br>    enable: true<br>    # 脚注的节标题，也可以在 front-matter 中通过 `footnote: <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Reference<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>` 这种形式修改单独页面的 header<br>    # The section title of the footnote, you can also modify the header of a single page in the form of `footnote: <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Reference<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>` in front-matter<br>    header: &#x27;&#x27;<br><br>  # 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式<br>  # Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math<br>  math:<br>    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`<br>    # If you want to use math on the custom page, you need to set `math: true` in Front-matter<br>    enable: false<br><br>    # 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度<br>    # If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math<br>    specific: false<br><br>    # Options: mathjax | katex<br>    engine: mathjax<br><br>  # 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图<br>  # Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid<br>  mermaid:<br>    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`<br>    # If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter<br>    enable: false<br><br>    # 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度<br>    # If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid<br>    specific: false<br><br>    # See: http://mermaid-js.github.io/mermaid/<br>    options: &#123; theme: &#x27;default&#x27; &#125;<br><br>  # 评论插件<br>  # Comment plugin<br>  comments:<br>    enable: false<br>    # 指定的插件，需要同时设置对应插件的必要参数<br>    # The specified plugin needs to set the necessary parameters at the same time<br>    # Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo<br>    type: disqus<br><br><br>#---------------------------<br># 评论插件<br># Comment plugins<br>#<br># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数<br># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`<br>#---------------------------<br><br># Utterances<br># 基于 GitHub Issues<br># Based on GitHub Issues<br># See: https://utteranc.es<br>utterances:<br>  repo:<br>  issue_term: pathname<br>  label: utterances<br>  theme: github-light<br>  theme_dark: github-dark<br>  crossorigin: anonymous<br><br># Disqus<br># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs<br># Based on third-party service<br># See: https://disqus.com<br>disqus:<br>  shortname:<br>  # 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用<br>  # The following are Disqusjs configurations, please ignore if DisqusJS is not required<br>  # See: https://github.com/SukkaW/DisqusJS<br>  disqusjs: false<br>  apikey:<br><br># Gitalk<br># 基于 GitHub Issues<br># Based on GitHub Issues<br># See: https://github.com/gitalk/gitalk#options<br>gitalk:<br>  clientID:<br>  clientSecret:<br>  repo:<br>  owner:<br>  admin: [&#x27;name&#x27;]<br>  language: zh-CN<br>  labels: [&#x27;Gitalk&#x27;]<br>  perPage: 10<br>  pagerDirection: last<br>  distractionFreeMode: false<br>  createIssueManually: true<br><br># Valine<br># 基于 LeanCloud<br># Based on LeanCloud<br># See: https://valine.js.org/configuration.html<br>valine:<br>  appid:<br>  appkey:<br>  placeholder: 说点什么<br>  path: window.location.pathname<br>  avatar: retro<br>  meta: [&#x27;nick&#x27;, &#x27;mail&#x27;, &#x27;link&#x27;]<br>  pageSize: 10<br>  lang: zh-CN<br>  highlight: false<br>  recordIP: false<br>  serverURLs:<br><br># Waline<br># 一款从 Valine 衍生的带后端的评论插件<br># A comment plugin with backend derived from Valine<br># See: https://waline.js.org/<br>waline:<br>  serverURL: &#x27;&#x27;<br>  placeholder: 说点什么<br>  path: window.location.pathname<br>  avatar: retro<br>  meta: [&#x27;nick&#x27;, &#x27;mail&#x27;, &#x27;link&#x27;]<br>  pageSize: 10<br>  lang: zh-CN<br>  highlight: true<br>  avatarForce: false<br>  requiredFields: []<br>  emojiCDN: &#x27;&#x27;<br>  emojiMaps: &#123;&#125;<br><br># 畅言 Changyan<br># 基于第三方的服务<br># Based on third-party service, insufficient support for regions outside China<br># http://changyan.kuaizhan.com<br>changyan:<br>  appid: &#x27;&#x27;<br>  appkey: &#x27;&#x27;<br><br># 来必力 Livere<br># 基于第三方的服务<br># Based on third-party service<br># See: https://www.livere.com<br>livere:<br>  uid: &#x27;&#x27;<br><br># Remark42<br># 需要自己运行后端服务<br># Need to run the backend service yourself<br># See: https://remark42.com<br>remark42:<br>  host:<br>  site_id:<br>  max_shown_comments: 10<br>  locale: zh<br><br># Twikoo<br># 基于腾讯云开发<br># Based on Tencent CloudBase<br># See: https://twikoo.js.org<br>twikoo:<br>  env_id:<br><br><br>#---------------------------<br># 归档页<br># Archive Page<br>#---------------------------<br>archive:<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:<br><br><br>#---------------------------<br># 分类页<br># Category Page<br>#---------------------------<br>category:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:<br><br>  # 单个分类中折叠展示文章数的最大值，超过限制会显示 More<br>  # The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More<br>  post_limit: 10<br><br>  # 排序字段，前面带减号是倒序，不带减号是正序，可选项：name | length<br>  # Sort field, with a minus sign is reverse order<br>  # Options: name | length<br>  order_by: &quot;-length&quot;<br><br>  # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开<br>  # Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories<br>  collapse_depth: 0<br><br><br>#---------------------------<br># 标签页<br># Tag Page<br>#---------------------------<br>tag:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 80<br>  banner_mask_alpha: 0.3<br>  subtitle:<br>  tagcloud:<br>    min_font: 15<br>    max_font: 30<br>    unit: px<br>    start_color: &quot;#BBBBEE&quot;<br>    end_color: &quot;#337ab7&quot;<br><br><br>#---------------------------<br># 关于页<br># About Page<br>#---------------------------<br>about:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:  # 打字机内容<br>  avatar: /img/avatar.png<br>  name: &quot;Fluid&quot;<br>  introduce: &quot;An elegant theme for Hexo&quot;<br>  # 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码<br>  # More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code<br>  icons:<br>    - &#123; class: &quot;iconfont icon-github-fill&quot;, link: &quot;https://github.com&quot;, tip: &quot;GitHub&quot; &#125;<br>    - &#123; class: &quot;iconfont icon-douban-fill&quot;, link: &quot;https://douban.com&quot;, tip: &quot;豆瓣&quot; &#125;<br>    - &#123; class: &quot;iconfont icon-wechat-fill&quot;, qrcode: &quot;/img/favicon.png&quot; &#125;<br><br><br>#---------------------------<br># 自定义页<br># Custom Page<br>#<br># 通过 hexo new page 命令创建的页面<br># Custom Page through `hexo new page`<br>#---------------------------<br>page:<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br><br><br>#---------------------------<br># 404页<br># 404 Page<br>#---------------------------<br>page404:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 85<br>  banner_mask_alpha: 0.3<br>  subtitle: &quot;Page not found&quot;<br><br><br>#---------------------------<br># 友链页<br># Links Page<br>#---------------------------<br>links:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:<br>  # 友链的成员项<br>  # Member item of page<br>  items:<br>    - &#123;<br>      title: &quot;Fluid Blog&quot;,<br>      intro: &quot;主题博客&quot;,<br>      link: &quot;https://hexo.fluid-dev.com/&quot;,<br>      image: &quot;/img/favicon.png&quot;<br>    &#125;<br>    - &#123;<br>      title: &quot;Fluid Docs&quot;,<br>      intro: &quot;主题使用指南&quot;,<br>      link: &quot;https://hexo.fluid-dev.com/docs/&quot;,<br>      image: &quot;/img/favicon.png&quot;<br>    &#125;<br>    - &#123;<br>      title: &quot;Fluid Repo&quot;,<br>      intro: &quot;主题 GitHub 仓库&quot;,<br>      link: &quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;,<br>      image: &quot;/img/favicon.png&quot;<br>    &#125;<br><br><br>#---------------------------<br># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，<br># 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，<br># ** 如果你不知道如何设置，请不要做任何改动 **<br>#<br># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.<br># Be aware that you would better use the same version as default ones to avoid potential problems.<br># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING<br>#---------------------------<br><br>static_prefix:<br>  # 内部静态<br>  # Internal static<br>  internal_js: /js<br>  internal_css: /css<br>  internal_img: /img<br><br>  # 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/<br>  # Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/<br>  iconfont: //at.alicdn.com/t/font_1736178_kmeydafke9r.css<br><br>  anchor: https://cdn.jsdelivr.net/npm/anchor-js@4.3.0/<br><br>  github_markdown: https://cdn.jsdelivr.net/npm/github-markdown-css@4.0.0/<br><br>  jquery: https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/<br><br>  bootstrap: https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/<br><br>  highlightjs: https://cdn.jsdelivr.net/npm/highlight.js@10.4.0/<br><br>  prismjs: https://cdn.jsdelivr.net/npm/prismjs@1.22.0/<br><br>  tocbot: https://cdn.jsdelivr.net/npm/tocbot@4.12.0/dist/<br><br>  typed: https://cdn.jsdelivr.net/npm/typed.js@2.0.11/lib/<br><br>  fancybox: https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/<br><br>  nprogress: https://cdn.jsdelivr.net/npm/nprogress@0.2.0/<br><br>  mathjax: https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/<br><br>  katex: https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/<br><br>  busuanzi: https://busuanzi.ibruce.info/busuanzi/2.3/<br><br>  clipboard: https://cdn.jsdelivr.net/npm/clipboard@2.0.6/dist/<br><br>  mermaid: https://cdn.jsdelivr.net/npm/mermaid@8.8.3/dist/<br><br>  valine: https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/<br><br>  waline: https://cdn.jsdelivr.net/npm/@waline/client@0.4.2/dist/<br><br>  gitalk: https://cdn.jsdelivr.net/npm/gitalk@1.7.0/dist/<br><br>  disqusjs: https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/<br><br>  twikoo: https://cdn.jsdelivr.net/npm/twikoo@0.1.15/dist/<br><br>  hint: /lib/hint/<br></code></pre></td></tr></table></figure><h3 id="2-配置页面顶部大图"><a href="#2-配置页面顶部大图" class="headerlink" title="2. 配置页面顶部大图"></a>2. 配置页面顶部大图</h3><p><strong>快速开始后的空白效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置\empty_demo.png" alt="初始页面" style="zoom: 67%;"><p>在<strong>博客目录</strong>下的<strong>source文件夹</strong>下建立img文件夹，img文件夹下建立bg文件夹表示背景图片，在里面存入自定义的图片。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/atrox_bg.png" alt="Hexo-https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置背景图"></p><p>修改<code>_config.fluid.yml</code>文件中的<code>banner_img</code>属性，使用本地图片的相对路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/example/atrox1.jpg</span>  <span class="hljs-comment">#对应放在/source/img/bg/atrox1.jpg</span><br></code></pre></td></tr></table></figure><p>在每个页面都有<code>banner_img</code>属性，各个修改即可。</p><p><strong>修改完成后的效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置\bg_img.png" alt="完成效果" style="zoom:50%;"><h3 id="3-设置博客标题"><a href="#3-设置博客标题" class="headerlink" title="3. 设置博客标题"></a>3. 设置博客标题</h3><p>页面左上角的博客标题，默认使用<strong>博客配置</strong>中的 <code>title</code>，这个配置同时控制着网页在浏览器标签中的标题。</p><p>我们在<code>_config.fluid.yml</code>主题配置中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;AtroxQW&quot;</span><br></code></pre></td></tr></table></figure><p>效果图：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置\blog_title.png" alt="博客标题设置" style="zoom: 50%;"><h3 id="4-自定义导航菜单"><a href="#4-自定义导航菜单" class="headerlink" title="4. 自定义导航菜单"></a>4. 自定义导航菜单</h3><p>笔者的导航菜单设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;首页&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;归档&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;分类&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;标签&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;关于我&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><ul><li><code>key</code>: 用于关联有<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%A4%9A%E8%AF%AD%E8%A8%80">多语言</a>，如不存在关联则显示 key 本身的值</li><li><code>link</code>: 跳转链接</li><li><code>icon</code>: 图标的 css class，可以省略（即没有图标）</li><li><code>name</code>: 强制使用此名称显示（不再按多语言显示），可省略</li></ul><p><strong>完成效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/nav_bar.png" alt="自定义导航菜单" style="zoom: 80%;"><h3 id="5-开启图片懒加载"><a href="#5-开启图片懒加载" class="headerlink" title="5. 开启图片懒加载"></a>5. 开启图片懒加载</h3><p>在<code>_config.fluid.yml</code>中设置<code>lazyload</code>属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>开启后，当图片滚动到可见范围内才会加载，可以大幅提高网页整体加载速度。<code>onlypost</code> 为 true 时，仅在文章页才使用懒加载.</p><h3 id="6-设置博客封面"><a href="#6-设置博客封面" class="headerlink" title="6. 设置博客封面"></a>6. 设置博客封面</h3><p>如果想统一给文章设置一个默认图片，可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/blog/Hexo-Fluid博客配置.jpg</span><br></code></pre></td></tr></table></figure><p>也可以对单篇博客设置封面，在文章开头 <code>Front-matter</code>中配置 <code>index_img</code> 属性。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">title: Hexoxo<span class="hljs-emphasis">_Fluid主题配置</span><br><span class="hljs-emphasis">date: 2020-12-30 09:18:36</span><br><span class="hljs-emphasis">tags: [Fluid,Hexo]</span><br><span class="hljs-emphasis">index_</span>img:/img/blog/Hexo-Fluid博客配置.jpg<br></code></pre></td></tr></table></figure><p><strong>效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置\index_img.png" alt="博客封面" style="zoom:75%;"><h3 id="7-集成评论功能-gitalk"><a href="#7-集成评论功能-gitalk" class="headerlink" title="7. 集成评论功能(gitalk)"></a>7. 集成评论功能(gitalk)</h3><h4 id="7-1-注册OAuth-Application"><a href="#7-1-注册OAuth-Application" class="headerlink" title="7.1 注册OAuth Application"></a>7.1 注册OAuth Application</h4><p><a href="https://github.com/settings/applications/new">官方入口</a>，点击进入来<strong>注册一个新的OAuth Application</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/new_application.png" alt="注册OAuth Application" style="zoom:100%;"><h4 id="7-2-注册后获取秘钥"><a href="#7-2-注册后获取秘钥" class="headerlink" title="7.2 注册后获取秘钥"></a>7.2 注册后获取秘钥</h4><p>点击注册后，会进入新页面。显示我们的OAuth <strong>Application</strong>的 <strong>Client ID</strong> 和 尚未生成的 <strong>Client secrets</strong></p><p>，点击 <strong>Generate a new client secret</strong> 按钮生成秘钥即可。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/Client_id_secrets.png" alt="获取秘钥"></p><h4 id="7-3-博客集成gitalk"><a href="#7-3-博客集成gitalk" class="headerlink" title="7.3 博客集成gitalk"></a>7.3 博客集成gitalk</h4><p>在<code>_config.fluid.yml</code>中<strong>开启并指定评论模块</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">gitalk</span><br></code></pre></td></tr></table></figure><p>然后在下方还要设<strong>置对应评论模块的参数</strong>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span> <span class="hljs-string">af550312a411b96c64b9</span>     <span class="hljs-comment">#刚才的ClientID</span><br>  <span class="hljs-attr">clientSecret:</span> <span class="hljs-string">f11934265fd18324cb2d9fd605d7d445207a3e52</span>   <span class="hljs-comment">#刚才的clientSecret</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&#x27;gitalk&#x27;</span>                                     <span class="hljs-comment">#刚才取的名</span><br>  <span class="hljs-attr">owner:</span> <span class="hljs-string">&#x27;AtroxQW&#x27;</span>                            <span class="hljs-comment">#github的用户名</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;AtroxQW&#x27;</span>]<br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="7-4-初始化issue"><a href="#7-4-初始化issue" class="headerlink" title="7.4 初始化issue"></a>7.4 初始化issue</h4><p>每次发表一篇博客，都需要我们作者<strong>初始化issue</strong>，初始化后评论就会在github上看到。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/init_issue.png" alt="初始化issue" style="zoom:65%;"><h3 id="8-关于页配置"><a href="#8-关于页配置" class="headerlink" title="8. 关于页配置"></a>8. 关于页配置</h3><p>在关于页，Fluid主题自动帮我初始化了空白的，我们只需要在<code>about</code>文件夹下其中的<code>index.md</code>追加内容即可。下面是笔者的关于页部分配置。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## 简介</span><br>欢迎大家来到 AtroxQW 的主页，我是一名河北工业大学在读大学生，专注于开发技术与机器学习。接下来，我会在这个独立的个人博客上，发布一些关于框架学习、机器学习和生活杂谈的文章。<br><br><span class="hljs-section">## 转载</span><br>如果您认为我的博客文章对您有些许帮助，想要引用文章中的部分段落或者图片，您可以在该文章下的评论区留言让我看到或者留下自己的原文链接。<br><br><span class="hljs-section">## 沟通</span><br>如果您想要和笔者沟通的话，评论区留言是个不错的选择，我每天都会翻阅评论区留言。如过您强烈想要和我深层次沟通（狗头），请加我下面的QQ或者Wechat，并备注：<span class="hljs-strong">**博客沟通**</span>，我会尽快通过各位的请求。<br></code></pre></td></tr></table></figure><h3 id="9-分类页配置"><a href="#9-分类页配置" class="headerlink" title="9. 分类页配置"></a>9. 分类页配置</h3><p>分类页配置，可以在博客文章的 <strong>Front-matter</strong> 中设置。分类和之前的标签虽然听起来很接近，但是在 Hexo中两者有明显的区别：<strong>分类</strong> 具有顺序性和层次性，也就是说[foo,bar] 不等于 [bar,foo];</p><p>写法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories: [Diary,Life]<br>tags: [PS3,Games]<br></code></pre></td></tr></table></figure><h3 id="10-使用LaTex数学公式"><a href="#10-使用LaTex数学公式" class="headerlink" title="10. 使用LaTex数学公式"></a>10. 使用LaTex数学公式</h3><p>在<code>_config.fluid.yml</code>中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当为 true 时，只有在文章 Front-matter (opens new window)里指定 math: true 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure><h3 id="11-友链设置"><a href="#11-友链设置" class="headerlink" title="11. 友链设置"></a>11. 友链设置</h3><p>友情链接页用于展示好友的博客入口，默认关闭，开启需要先在 <code>navbar</code> 项中将 <code>links</code> 的注释(#号)删掉。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;links&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/links/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-link-fill&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>然后找到 <code>links</code> 的配置项，对页面内容进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Fluid Docs&#x27;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&#x27;主题使用指南&#x27;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/&#x27;</span>,<br>      <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span><br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><code>title</code>: 友链站的标题</li><li><code>intro</code>: 站点或博主的简介，可省略</li><li><code>link</code>: 跳转链接</li><li><code>image</code>: 头像图片，可省略</li></ul><h3 id="12-压缩生成文件"><a href="#12-压缩生成文件" class="headerlink" title="12. 压缩生成文件"></a>12. 压缩生成文件</h3><p>我们使用 <a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier</a>。之所以使用这个插件，是因为博客中较大的css，js文件上加载速度不尽人意。而这款插件不仅高效易用，而且效果显著。</p><p>首先，使用cnpm安装该插件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">cnpm <span class="hljs-keyword">install</span> hexo-<span class="hljs-keyword">all</span>-minifier <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后，在博客目录下<code>config.yml</code>中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">all_minifier:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="13-生成唯一永久文章链接"><a href="#13-生成唯一永久文章链接" class="headerlink" title="13. 生成唯一永久文章链接"></a>13. 生成唯一永久文章链接</h3><p>在做此优化之前，hexo文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。</p><p>比如：<code>/2020/12/30/Hexo-https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/</code>.这样，如果文章标题是中文的话，URL链接是也会是中文，复制后的链接会是一长串，可读性极差，也不够简洁。</p><p>这里，我推荐使用Fluid官网提供的 <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件。</p><p>首先，使用cnpm安装该插件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-abbrlink <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后，修改 <code>config.yml</code> 中的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink/</span><br></code></pre></td></tr></table></figure><p>在其中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span>  <span class="hljs-comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="hljs-attr">abbrlink:</span><br>    <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>   <span class="hljs-comment">#算法： crc16(default) and crc32</span><br>    <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>     <span class="hljs-comment">#进制： dec(default) and hex</span><br></code></pre></td></tr></table></figure><h3 id="14-播放器插件-hexo-tag-dplayer"><a href="#14-播放器插件-hexo-tag-dplayer" class="headerlink" title="14. 播放器插件 hexo-tag-dplayer"></a>14. 播放器插件 hexo-tag-dplayer</h3><p>此插件可以在博客中插入音乐或视频，分分钟提高博客格调</p><p>首先，安装此插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-tag-dplayer <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>bad asset path... <p>使用代码如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span> dplayer <span class="hljs-string">&quot;url=http://www.nenu.edu.cn/_upload/article/videos/03/5f/7c999eed42e3aadc413d7f851f0e/0f50b3eb-9285-41d2-ac4d-6cc363651aad_B.mp4&quot;</span>  <span class="hljs-string">&quot;autoplay=true&quot;</span> <span class="hljs-string">&quot;preload=metadata&quot;</span> <span class="hljs-string">&quot;hotkey=true&quot;</span> <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="15-Hexo后台"><a href="#15-Hexo后台" class="headerlink" title="15. Hexo后台"></a>15. Hexo后台</h3><p><strong>hexo使用编辑文章时，若用其原生方式，则不便利，还好官网提供了一款插件hexo-admin界面化了markdown编辑器，只需要访问：<a href="http://127.0.0.1:4000/admin">http://127.0.0.1:4000/admin</a> 即可方便快捷的进行博文编辑了，效果如下：</strong></p><p>第一步，安装hexo-admin插件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save hexo-admin</span><br></code></pre></td></tr></table></figure><p>第二步，启动服务器。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span> -d<br></code></pre></td></tr></table></figure><p>第三步，在url栏输入地址，编辑博文</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">localhost:<span class="hljs-number">4000</span><span class="hljs-regexp">/admin/</span><br></code></pre></td></tr></table></figure><p><strong>最终效果</strong>：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/fluid主题配置/hexo_admin.png" alt="Hexo后台" style="zoom:75%;"><h3 id="16-使用hexo5注入器引入instantclick-js"><a href="#16-使用hexo5注入器引入instantclick-js" class="headerlink" title="16. 使用hexo5注入器引入instantclick.js"></a>16. 使用hexo5注入器引入instantclick.js</h3><h4 id="16-1-Hexo5注入器"><a href="#16-1-Hexo5注入器" class="headerlink" title="16.1 Hexo5注入器"></a>16.1 Hexo5注入器</h4><p>Hexo注入器是Hexo 5版本加入的一项新功能，注入器可以将静态代码片段注入生成的HTML的<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>中。</p><p>编写注入代码，需要在博客的根目录下创建<code>script</code>文件夹，然后在里面创建injector.js文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, <span class="hljs-string">&#x27;&lt;script src=&quot;/jquery.js&quot;&gt;&lt;/script&gt;&#x27;</span>, <span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><p>上述代码会在生成的页面 <code>&lt;/body&gt;</code> 注入加载 <code>jquery.js</code> 的代码。</p><p><code>register</code> 函数可接受三个参数，第一个参数是代码片段注入的位置，接受以下值：</p><ul><li><code>head_begin</code>: 注入在 <code>&lt;head&gt;</code> 之后（默认）</li><li><code>head_end</code>: 注入在 <code>&lt;/head&gt;</code> 之前</li><li><code>body_begin</code>: 注入在 <code>&lt;body&gt;</code> 之后</li><li><code>body_end</code>: 注入在 <code>&lt;/body&gt;</code> 之前</li></ul><p>第二个参数是注入的片段，可以是字符串，也可以是一个返回值为字符串的函数。</p><p>第三个参数是注入的页面类型，接受以下值：</p><ul><li><code>default</code>: 注入到每个页面（默认值）</li><li><code>home</code>: 只注入到主页（<code>is_home()</code> 为 <code>true</code> 的页面）</li><li><code>post</code>: 只注入到文章页面（<code>is_post()</code> 为 <code>true</code> 的页面）</li><li><code>page</code>: 只注入到独立页面（<code>is_page()</code> 为 <code>true</code> 的页面）</li><li><code>archive</code>: 只注入到归档页面（<code>is_archive()</code> 为 <code>true</code> 的页面）</li><li><code>category</code>: 只注入到分类页面（<code>is_category()</code> 为 <code>true</code> 的页面）</li><li><code>tag</code>: 只注入到标签页面（<code>is_tag()</code> 为 <code>true</code> 的页面）</li><li>或是其他自定义 layout 名称</li></ul><h4 id="16-2-instantclick-js"><a href="#16-2-instantclick-js" class="headerlink" title="16.2 instantclick.js"></a>16.2 instantclick.js</h4><p>尽管网络带宽不断增加，但网站并没有更快很多。这是因为最大的瓶颈在于页面加载的延迟。InstantClick 是一个很小的js库，大大加速你的网站响应速度。</p><p>在访问者点击一个链接之前，鼠标会悬停在链接上面，这两个事件之间通常有200ms~300ms的间隔，InstantClick 利用这个时间间隔预加载页面。这样当你点击页面的时候，其实页面已经加载到本地了，呈现当然也就会很快。</p><p>InstantClick 使用了 <strong>pushState</strong> 和 <strong>Ajax</strong> 技术，这个组合被称为 <strong>Pjax</strong>。</p><p>instantclick.js的使用方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src = <span class="hljs-string">&#x27;https://libs.xiaoz.top/instantclick/instantclick.min.js&#x27;</span> data-no-instant&gt;&lt;/script&gt;<br>&lt;script data-no-instant&gt;InstantClick.init();&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="16-3-整合"><a href="#16-3-整合" class="headerlink" title="16.3 整合"></a>16.3 整合</h4><p>在博客目录下的script文件夹下，创建injector.js文件，在里面写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.extend.injector.register(<span class="hljs-string">`body_end`</span>, <span class="hljs-string">`&lt;script src = &#x27;https://libs.xiaoz.top/instantclick/instantclick.min.js&#x27; data-no-instant&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script data-no-instant&gt;InstantClick.init();&lt;/script&gt;`</span> )<br></code></pre></td></tr></table></figure><p>如此重新启动hexo博客即可查看。</p><h3 id="17-Hexo博客支持emoji标签"><a href="#17-Hexo博客支持emoji标签" class="headerlink" title="17.Hexo博客支持emoji标签"></a>17.Hexo博客支持emoji标签</h3><p>Hexo 默认的<code>markdown</code> 渲染引擎不支持将 Github emoji 渲染到静态的 html 页面中，我们换一个支持 emoji 的引擎，再增加一个 emoji 插件即可。</p><h4 id="17-1-安装"><a href="#17-1-安装" class="headerlink" title="17.1 安装"></a>17.1 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm un hexo-renderer-marked --save<br>npm i hexo-renderer-markdown-it --save<br>npm install markdown-it-emoji --save<br></code></pre></td></tr></table></figure><p>Tips：据说 <a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a> 的速度要比 Hexo 原装插件要快，而且功能更多</p><h4 id="17-2-配置"><a href="#17-2-配置" class="headerlink" title="17.2 配置"></a>17.2 配置</h4><p>完成插件安装后还需要修改 Hexo 站点配置文件 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## markdown 渲染引擎配置，默认是hexo-renderer-marked，这个插件渲染速度更快，且有新特性</span><br><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">linkify:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">quotes:</span> <span class="hljs-string">&#x27;“”‘’&#x27;</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-footnote</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sup</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sub</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-abbr</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-emoji</span><br>  <span class="hljs-attr">anchors:</span><br>    <span class="hljs-attr">level:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">collisionSuffix:</span> <span class="hljs-string">&#x27;v&#x27;</span><br>    <span class="hljs-attr">permalink:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">permalinkClass:</span> <span class="hljs-string">header-anchor</span><br>    <span class="hljs-attr">permalinkSymbol:</span> <span class="hljs-string">¶</span><br></code></pre></td></tr></table></figure><p>这里需要注意 <code>render:</code> 下的 <code>html:</code> 配置项，它的作用是控制 <code>Markdown</code> 渲染引擎是否转义文档中出现的 <code>html</code> 标签，默认为 <code>false</code> ，这里要设置为 <code>true</code>，否则回导致 <code>&lt;!--more--&gt;</code> 渲染失败。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 不转义 HTML 内容，即允许 HTML</span><br>    <span class="hljs-comment">## OR</span><br><span class="hljs-attr">html:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 转义 HTML，&lt; &gt; 尖括号会被转义成 &amp;lt; &amp;gt;等</span><br></code></pre></td></tr></table></figure><p><code>plugins:</code> 中的最后一项 <code>- markdown-it-emoji</code> 是手动添加的，官方 Github Wiki 中给出的配置不包含这一项，其他配置参照的 Github Wiki 中的默认配置，hexo-renderer-markdown-it 提供的其他新特性还没有一一尝试，暂时只想用它的 emoji 功能。✌️</p><h4 id="17-3-使用"><a href="#17-3-使用" class="headerlink" title="17.3 使用"></a>17.3 使用</h4><p>输入对应的emoji编码就行了<br>        例如：输入笑脸对应的 emoji 编码 <code>:zap:</code> 就可以得到 :zap:</p><h4 id="17-4-emoji编码合集"><a href="#17-4-emoji编码合集" class="headerlink" title="17.4 emoji编码合集"></a>17.4 emoji编码合集</h4><p><strong>People</strong></p><table><thead><tr><th align="left">😐 <code>:neutral_face:</code></th><th align="left">😄 <code>:smile:</code></th><th align="left">😆 <code>:laughing:</code></th></tr></thead><tbody><tr><td align="left">😊 <code>:blush:</code></td><td align="left">😃 <code>:smiley:</code></td><td align="left">☺️ <code>:relaxed:</code></td></tr><tr><td align="left">😏 <code>:smirk:</code></td><td align="left">😍 <code>:heart_eyes:</code></td><td align="left">😘 <code>:kissing_heart:</code></td></tr><tr><td align="left">😚 <code>:kissing_closed_eyes:</code></td><td align="left">😳 <code>:flushed:</code></td><td align="left">😌 <code>:relieved:</code></td></tr><tr><td align="left">😆 <code>:satisfied:</code></td><td align="left">😁 <code>:grin:</code></td><td align="left">😉 <code>:wink:</code></td></tr><tr><td align="left">😜 <code>:stuck_out_tongue_winking_eye:</code></td><td align="left">😝 <code>:stuck_out_tongue_closed_eyes:</code></td><td align="left">😀 <code>:grinning:</code></td></tr><tr><td align="left">😗 <code>:kissing:</code></td><td align="left">😙 <code>:kissing_smiling_eyes:</code></td><td align="left">😛 <code>:stuck_out_tongue:</code></td></tr><tr><td align="left">😴 <code>:sleeping:</code></td><td align="left">😟 <code>:worried:</code></td><td align="left">😦 <code>:frowning:</code></td></tr><tr><td align="left">😧 <code>:anguished:</code></td><td align="left">😮 <code>:open_mouth:</code></td><td align="left">😬 <code>:grimacing:</code></td></tr><tr><td align="left">😕 <code>:confused:</code></td><td align="left">😯 <code>:hushed:</code></td><td align="left">😑 <code>:expressionless:</code></td></tr><tr><td align="left">😒 <code>:unamused:</code></td><td align="left">😅 <code>:sweat_smile:</code></td><td align="left">😓 <code>:sweat:</code></td></tr><tr><td align="left">😥 <code>:disappointed_relieved:</code></td><td align="left">😩 <code>:weary:</code></td><td align="left">😔 <code>:pensive:</code></td></tr><tr><td align="left">😞 <code>:disappointed:</code></td><td align="left">😖 <code>:confounded:</code></td><td align="left">😨 <code>:fearful:</code></td></tr><tr><td align="left">😰 <code>:cold_sweat:</code></td><td align="left">😣 <code>:persevere:</code></td><td align="left">😢 <code>:cry:</code></td></tr><tr><td align="left">😭 <code>:sob:</code></td><td align="left">😂 <code>:joy:</code></td><td align="left">😲 <code>:astonished:</code></td></tr><tr><td align="left">😱 <code>:scream:</code></td><td align="left">💭 <code>:thought_balloon:</code></td><td align="left">😫 <code>:tired_face:</code></td></tr><tr><td align="left">😠 <code>:angry:</code></td><td align="left">😡 <code>:rage:</code></td><td align="left">😤 <code>:triumph:</code></td></tr><tr><td align="left">😪 <code>:sleepy:</code></td><td align="left">😋 <code>:yum:</code></td><td align="left">😷 <code>:mask:</code></td></tr><tr><td align="left">😎 <code>:sunglasses:</code></td><td align="left">😵 <code>:dizzy_face:</code></td><td align="left">👿 <code>:imp:</code></td></tr><tr><td align="left">😈 <code>:smiling_imp:</code></td><td align="left">💬 <code>:speech_balloon:</code></td><td align="left">😶 <code>:no_mouth:</code></td></tr><tr><td align="left">😇 <code>:innocent:</code></td><td align="left">👽 <code>:alien:</code></td><td align="left">💛 <code>:yellow_heart:</code></td></tr><tr><td align="left">💙 <code>:blue_heart:</code></td><td align="left">💜 <code>:purple_heart:</code></td><td align="left">❤️ <code>:heart:</code></td></tr><tr><td align="left">💚 <code>:green_heart:</code></td><td align="left">💔 <code>:broken_heart:</code></td><td align="left">💓 <code>:heartbeat:</code></td></tr><tr><td align="left">💗 <code>:heartpulse:</code></td><td align="left">💕 <code>:two_hearts:</code></td><td align="left">💞 <code>:revolving_hearts:</code></td></tr><tr><td align="left">💘 <code>:cupid:</code></td><td align="left">💖 <code>:sparkling_heart:</code></td><td align="left">✨ <code>:sparkles:</code></td></tr><tr><td align="left">⭐️ <code>:star:</code></td><td align="left">🌟 <code>:star2:</code></td><td align="left">💫 <code>:dizzy:</code></td></tr><tr><td align="left">💥 <code>:boom:</code></td><td align="left">💥 <code>:collision:</code></td><td align="left">💢 <code>:anger:</code></td></tr><tr><td align="left">❗️ <code>:exclamation:</code></td><td align="left">❓ <code>:question:</code></td><td align="left">❕ <code>:grey_exclamation:</code></td></tr><tr><td align="left">❔ <code>:grey_question:</code></td><td align="left">💤 <code>:zzz:</code></td><td align="left">💨 <code>:dash:</code></td></tr><tr><td align="left">💦 <code>:sweat_drops:</code></td><td align="left">🎶 <code>:notes:</code></td><td align="left">🎵 <code>:musical_note:</code></td></tr><tr><td align="left">🔥 <code>:fire:</code></td><td align="left">💩 <code>:hankey:</code></td><td align="left">💩 <code>:poop:</code></td></tr><tr><td align="left">💩 <code>:shit:</code></td><td align="left">👍 <code>:+1:</code></td><td align="left">👍 <code>:thumbsup:</code></td></tr><tr><td align="left">👎 <code>:-1:</code></td><td align="left">👎 <code>:thumbsdown:</code></td><td align="left">👌 <code>:ok_hand:</code></td></tr><tr><td align="left">👊 <code>:punch:</code></td><td align="left">👊 <code>:facepunch:</code></td><td align="left">✊ <code>:fist:</code></td></tr><tr><td align="left">✌️ <code>:v:</code></td><td align="left">👋 <code>:wave:</code></td><td align="left">✋ <code>:hand:</code></td></tr><tr><td align="left">✋ <code>:raised_hand:</code></td><td align="left">👐 <code>:open_hands:</code></td><td align="left">☝️ <code>:point_up:</code></td></tr><tr><td align="left">👇 <code>:point_down:</code></td><td align="left">👈 <code>:point_left:</code></td><td align="left">👉 <code>:point_right:</code></td></tr><tr><td align="left">🙌 <code>:raised_hands:</code></td><td align="left">🙏 <code>:pray:</code></td><td align="left">👆 <code>:point_up_2:</code></td></tr><tr><td align="left">👏 <code>:clap:</code></td><td align="left">💪 <code>:muscle:</code></td><td align="left">🤘 <code>:metal:</code></td></tr><tr><td align="left">🖕 <code>:fu:</code></td><td align="left">🚶 <code>:walking:</code></td><td align="left">🏃 <code>:runner:</code></td></tr><tr><td align="left">🏃 <code>:running:</code></td><td align="left">👫 <code>:couple:</code></td><td align="left">👪 <code>:family:</code></td></tr><tr><td align="left">👬 <code>:two_men_holding_hands:</code></td><td align="left">👭 <code>:two_women_holding_hands:</code></td><td align="left">💃 <code>:dancer:</code></td></tr><tr><td align="left">👯 <code>:dancers:</code></td><td align="left">🙆 <code>:ok_woman:</code></td><td align="left">🙅 <code>:no_good:</code></td></tr><tr><td align="left">💁 <code>:information_desk_person:</code></td><td align="left">🙋 <code>:raising_hand:</code></td><td align="left">👰 <code>:bride_with_veil:</code></td></tr><tr><td align="left">🙎 <code>:person_with_pouting_face:</code></td><td align="left">🙍 <code>:person_frowning:</code></td><td align="left">🙇 <code>:bow:</code></td></tr><tr><td align="left">:couplekiss: <code>:couplekiss:</code></td><td align="left">💑 <code>:couple_with_heart:</code></td><td align="left">💆 <code>:massage:</code></td></tr><tr><td align="left">💇 <code>:haircut:</code></td><td align="left">💅 <code>:nail_care:</code></td><td align="left">👦 <code>:boy:</code></td></tr><tr><td align="left">👧 <code>:girl:</code></td><td align="left">👩 <code>:woman:</code></td><td align="left">👨 <code>:man:</code></td></tr><tr><td align="left">👶 <code>:baby:</code></td><td align="left">👵 <code>:older_woman:</code></td><td align="left">👴 <code>:older_man:</code></td></tr><tr><td align="left">👱 <code>:person_with_blond_hair:</code></td><td align="left">👲 <code>:man_with_gua_pi_mao:</code></td><td align="left">👳 <code>:man_with_turban:</code></td></tr><tr><td align="left">👷 <code>:construction_worker:</code></td><td align="left">👮 <code>:cop:</code></td><td align="left">👼 <code>:angel:</code></td></tr><tr><td align="left">👸 <code>:princess:</code></td><td align="left">😺 <code>:smiley_cat:</code></td><td align="left">😸 <code>:smile_cat:</code></td></tr><tr><td align="left">😻 <code>:heart_eyes_cat:</code></td><td align="left">😽 <code>:kissing_cat:</code></td><td align="left">😼 <code>:smirk_cat:</code></td></tr><tr><td align="left">🙀 <code>:scream_cat:</code></td><td align="left">😿 <code>:crying_cat_face:</code></td><td align="left">😹 <code>:joy_cat:</code></td></tr><tr><td align="left">😾 <code>:pouting_cat:</code></td><td align="left">👹 <code>:japanese_ogre:</code></td><td align="left">👺 <code>:japanese_goblin:</code></td></tr><tr><td align="left">🙈 <code>:see_no_evil:</code></td><td align="left">🙉 <code>:hear_no_evil:</code></td><td align="left">🙊 <code>:speak_no_evil:</code></td></tr><tr><td align="left">💂 <code>:guardsman:</code></td><td align="left">💀 <code>:skull:</code></td><td align="left">🐾 <code>:feet:</code></td></tr><tr><td align="left">👄 <code>:lips:</code></td><td align="left">💋 <code>:kiss:</code></td><td align="left">💧 <code>:droplet:</code></td></tr><tr><td align="left">👂 <code>:ear:</code></td><td align="left">👀 <code>:eyes:</code></td><td align="left">👃 <code>:nose:</code></td></tr><tr><td align="left">👅 <code>:tongue:</code></td><td align="left">💌 <code>:love_letter:</code></td><td align="left">👤 <code>:bust_in_silhouette:</code></td></tr><tr><td align="left">👥 <code>:busts_in_silhouette:</code></td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>Nature</strong></p><table><thead><tr><th align="left">☀️ <code>:sunny:</code></th><th align="left">☔️ <code>:umbrella:</code></th><th align="left">☁️ <code>:cloud:</code></th></tr></thead><tbody><tr><td align="left">❄️ <code>:snowflake:</code></td><td align="left">⛄️ <code>:snowman:</code></td><td align="left">⚡️ <code>:zap:</code></td></tr><tr><td align="left">🌀 <code>:cyclone:</code></td><td align="left">🌁 <code>:foggy:</code></td><td align="left">🌊 <code>:ocean:</code></td></tr><tr><td align="left">🐱 <code>:cat:</code></td><td align="left">🐶 <code>:dog:</code></td><td align="left">🐭 <code>:mouse:</code></td></tr><tr><td align="left">🐹 <code>:hamster:</code></td><td align="left">🐰 <code>:rabbit:</code></td><td align="left">🐺 <code>:wolf:</code></td></tr><tr><td align="left">🐸 <code>:frog:</code></td><td align="left">🐯 <code>:tiger:</code></td><td align="left">🐨 <code>:koala:</code></td></tr><tr><td align="left">🐻 <code>:bear:</code></td><td align="left">🐷 <code>:pig:</code></td><td align="left">🐽 <code>:pig_nose:</code></td></tr><tr><td align="left">🐮 <code>:cow:</code></td><td align="left">🐗 <code>:boar:</code></td><td align="left">🐵 <code>:monkey_face:</code></td></tr><tr><td align="left">🐒 <code>:monkey:</code></td><td align="left">🐴 <code>:horse:</code></td><td align="left">🐎 <code>:racehorse:</code></td></tr><tr><td align="left">🐫 <code>:camel:</code></td><td align="left">🐑 <code>:sheep:</code></td><td align="left">🐘 <code>:elephant:</code></td></tr><tr><td align="left">🐼 <code>:panda_face:</code></td><td align="left">🐍 <code>:snake:</code></td><td align="left">🐦 <code>:bird:</code></td></tr><tr><td align="left">🐤 <code>:baby_chick:</code></td><td align="left">🐥 <code>:hatched_chick:</code></td><td align="left">🐣 <code>:hatching_chick:</code></td></tr><tr><td align="left">🐔 <code>:chicken:</code></td><td align="left">🐧 <code>:penguin:</code></td><td align="left">🐢 <code>:turtle:</code></td></tr><tr><td align="left">🐛 <code>:bug:</code></td><td align="left">🐝 <code>:honeybee:</code></td><td align="left">🐜 <code>:ant:</code></td></tr><tr><td align="left">🐞 <code>:beetle:</code></td><td align="left">🐌 <code>:snail:</code></td><td align="left">🐙 <code>:octopus:</code></td></tr><tr><td align="left">🐠 <code>:tropical_fish:</code></td><td align="left">🐟 <code>:fish:</code></td><td align="left">🐳 <code>:whale:</code></td></tr><tr><td align="left">🐋 <code>:whale2:</code></td><td align="left">🐬 <code>:dolphin:</code></td><td align="left">🐄 <code>:cow2:</code></td></tr><tr><td align="left">🐏 <code>:ram:</code></td><td align="left">🐀 <code>:rat:</code></td><td align="left">🐃 <code>:water_buffalo:</code></td></tr><tr><td align="left">🐅 <code>:tiger2:</code></td><td align="left">🐇 <code>:rabbit2:</code></td><td align="left">🐉 <code>:dragon:</code></td></tr><tr><td align="left">🐐 <code>:goat:</code></td><td align="left">🐓 <code>:rooster:</code></td><td align="left">🐕 <code>:dog2:</code></td></tr><tr><td align="left">🐖 <code>:pig2:</code></td><td align="left">🐁 <code>:mouse2:</code></td><td align="left">🐂 <code>:ox:</code></td></tr><tr><td align="left">🐲 <code>:dragon_face:</code></td><td align="left">🐡 <code>:blowfish:</code></td><td align="left">🐊 <code>:crocodile:</code></td></tr><tr><td align="left">🐪 <code>:dromedary_camel:</code></td><td align="left">🐆 <code>:leopard:</code></td><td align="left">🐈 <code>:cat2:</code></td></tr><tr><td align="left">🐩 <code>:poodle:</code></td><td align="left">🐾 <code>:paw_prints:</code></td><td align="left">💐 <code>:bouquet:</code></td></tr><tr><td align="left">🌸 <code>:cherry_blossom:</code></td><td align="left">🌷 <code>:tulip:</code></td><td align="left">🍀 <code>:four_leaf_clover:</code></td></tr><tr><td align="left">🌹 <code>:rose:</code></td><td align="left">🌻 <code>:sunflower:</code></td><td align="left">🌺 <code>:hibiscus:</code></td></tr><tr><td align="left">🍁 <code>:maple_leaf:</code></td><td align="left">🍃 <code>:leaves:</code></td><td align="left">🍂 <code>:fallen_leaf:</code></td></tr><tr><td align="left">🌿 <code>:herb:</code></td><td align="left">🍄 <code>:mushroom:</code></td><td align="left">🌵 <code>:cactus:</code></td></tr><tr><td align="left">🌴 <code>:palm_tree:</code></td><td align="left">🌲 <code>:evergreen_tree:</code></td><td align="left">🌳 <code>:deciduous_tree:</code></td></tr><tr><td align="left">🌰 <code>:chestnut:</code></td><td align="left">🌱 <code>:seedling:</code></td><td align="left">🌼 <code>:blossom:</code></td></tr><tr><td align="left">🌾 <code>:ear_of_rice:</code></td><td align="left">🐚 <code>:shell:</code></td><td align="left">🌐 <code>:globe_with_meridians:</code></td></tr><tr><td align="left">🌞 <code>:sun_with_face:</code></td><td align="left">🌝 <code>:full_moon_with_face:</code></td><td align="left">🌚 <code>:new_moon_with_face:</code></td></tr><tr><td align="left">🌑 <code>:new_moon:</code></td><td align="left">🌒 <code>:waxing_crescent_moon:</code></td><td align="left">🌓 <code>:first_quarter_moon:</code></td></tr><tr><td align="left">🌔 <code>:waxing_gibbous_moon:</code></td><td align="left">🌕 <code>:full_moon:</code></td><td align="left">🌖 <code>:waning_gibbous_moon:</code></td></tr><tr><td align="left">🌗 <code>:last_quarter_moon:</code></td><td align="left">🌘 <code>:waning_crescent_moon:</code></td><td align="left">🌜 <code>:last_quarter_moon_with_face:</code></td></tr><tr><td align="left">🌛 <code>:first_quarter_moon_with_face:</code></td><td align="left">🌔 <code>:moon:</code></td><td align="left">🌍 <code>:earth_africa:</code></td></tr><tr><td align="left">🌎 <code>:earth_americas:</code></td><td align="left">🌏 <code>:earth_asia:</code></td><td align="left">🌋 <code>:volcano:</code></td></tr><tr><td align="left">🌌 <code>:milky_way:</code></td><td align="left">⛅️ <code>:partly_sunny:</code></td><td align="left"></td></tr></tbody></table><p><strong>Objects</strong></p><table><thead><tr><th align="left">🎍 <code>:bamboo:</code></th><th align="left">💝 <code>:gift_heart:</code></th><th align="left">🎎 <code>:dolls:</code></th></tr></thead><tbody><tr><td align="left">🎒 <code>:school_satchel:</code></td><td align="left">🎓 <code>:mortar_board:</code></td><td align="left">🎏 <code>:flags:</code></td></tr><tr><td align="left">🎆 <code>:fireworks:</code></td><td align="left">🎇 <code>:sparkler:</code></td><td align="left">🎐 <code>:wind_chime:</code></td></tr><tr><td align="left">🎑 <code>:rice_scene:</code></td><td align="left">🎃 <code>:jack_o_lantern:</code></td><td align="left">👻 <code>:ghost:</code></td></tr><tr><td align="left">🎅 <code>:santa:</code></td><td align="left">🎄 <code>:christmas_tree:</code></td><td align="left">🎁 <code>:gift:</code></td></tr><tr><td align="left">🔔 <code>:bell:</code></td><td align="left">🔕 <code>:no_bell:</code></td><td align="left">🎋 <code>:tanabata_tree:</code></td></tr><tr><td align="left">🎉 <code>:tada:</code></td><td align="left">🎊 <code>:confetti_ball:</code></td><td align="left">🎈 <code>:balloon:</code></td></tr><tr><td align="left">🔮 <code>:crystal_ball:</code></td><td align="left">💿 <code>:cd:</code></td><td align="left">📀 <code>:dvd:</code></td></tr><tr><td align="left">💾 <code>:floppy_disk:</code></td><td align="left">📷 <code>:camera:</code></td><td align="left">📹 <code>:video_camera:</code></td></tr><tr><td align="left">🎥 <code>:movie_camera:</code></td><td align="left">💻 <code>:computer:</code></td><td align="left">📺 <code>:tv:</code></td></tr><tr><td align="left">📱 <code>:iphone:</code></td><td align="left">☎️ <code>:phone:</code></td><td align="left">☎️ <code>:telephone:</code></td></tr><tr><td align="left">📞 <code>:telephone_receiver:</code></td><td align="left">📟 <code>:pager:</code></td><td align="left">📠 <code>:fax:</code></td></tr><tr><td align="left">💽 <code>:minidisc:</code></td><td align="left">📼 <code>:vhs:</code></td><td align="left">🔉 <code>:sound:</code></td></tr><tr><td align="left">🔈 <code>:speaker:</code></td><td align="left">🔇 <code>:mute:</code></td><td align="left">📢 <code>:loudspeaker:</code></td></tr><tr><td align="left">📣 <code>:mega:</code></td><td align="left">⌛️ <code>:hourglass:</code></td><td align="left">⏳ <code>:hourglass_flowing_sand:</code></td></tr><tr><td align="left">⏰ <code>:alarm_clock:</code></td><td align="left">⌚️ <code>:watch:</code></td><td align="left">📻 <code>:radio:</code></td></tr><tr><td align="left">📡 <code>:satellite:</code></td><td align="left">➿ <code>:loop:</code></td><td align="left">🔍 <code>:mag:</code></td></tr><tr><td align="left">🔎 <code>:mag_right:</code></td><td align="left">🔓 <code>:unlock:</code></td><td align="left">🔒 <code>:lock:</code></td></tr><tr><td align="left">🔏 <code>:lock_with_ink_pen:</code></td><td align="left">🔐 <code>:closed_lock_with_key:</code></td><td align="left">🔑 <code>:key:</code></td></tr><tr><td align="left">💡 <code>:bulb:</code></td><td align="left">🔦 <code>:flashlight:</code></td><td align="left">🔆 <code>:high_brightness:</code></td></tr><tr><td align="left">🔅 <code>:low_brightness:</code></td><td align="left">🔌 <code>:electric_plug:</code></td><td align="left">🔋 <code>:battery:</code></td></tr><tr><td align="left">📲 <code>:calling:</code></td><td align="left">✉️ <code>:email:</code></td><td align="left">📫 <code>:mailbox:</code></td></tr><tr><td align="left">📮 <code>:postbox:</code></td><td align="left">🛀 <code>:bath:</code></td><td align="left">🛁 <code>:bathtub:</code></td></tr><tr><td align="left">🚿 <code>:shower:</code></td><td align="left">🚽 <code>:toilet:</code></td><td align="left">🔧 <code>:wrench:</code></td></tr><tr><td align="left">🔩 <code>:nut_and_bolt:</code></td><td align="left">🔨 <code>:hammer:</code></td><td align="left">💺 <code>:seat:</code></td></tr><tr><td align="left">💰 <code>:moneybag:</code></td><td align="left">💴 <code>:yen:</code></td><td align="left">💵 <code>:dollar:</code></td></tr><tr><td align="left">💷 <code>:pound:</code></td><td align="left">💶 <code>:euro:</code></td><td align="left">💳 <code>:credit_card:</code></td></tr><tr><td align="left">💸 <code>:money_with_wings:</code></td><td align="left">📧 <code>:e-mail:</code></td><td align="left">📥 <code>:inbox_tray:</code></td></tr><tr><td align="left">📤 <code>:outbox_tray:</code></td><td align="left">✉️ <code>:envelope:</code></td><td align="left">📨 <code>:incoming_envelope:</code></td></tr><tr><td align="left">📯 <code>:postal_horn:</code></td><td align="left">📪 <code>:mailbox_closed:</code></td><td align="left">📬 <code>:mailbox_with_mail:</code></td></tr><tr><td align="left">📭 <code>:mailbox_with_no_mail:</code></td><td align="left">🚪 <code>:door:</code></td><td align="left">🚬 <code>:smoking:</code></td></tr><tr><td align="left">💣 <code>:bomb:</code></td><td align="left">🔫 <code>:gun:</code></td><td align="left">🔪 <code>:hocho:</code></td></tr><tr><td align="left">💊 <code>:pill:</code></td><td align="left">💉 <code>:syringe:</code></td><td align="left">📄 <code>:page_facing_up:</code></td></tr><tr><td align="left">📃 <code>:page_with_curl:</code></td><td align="left">📑 <code>:bookmark_tabs:</code></td><td align="left">📊 <code>:bar_chart:</code></td></tr><tr><td align="left">📈 <code>:chart_with_upwards_trend:</code></td><td align="left">📉 <code>:chart_with_downwards_trend:</code></td><td align="left">📜 <code>:scroll:</code></td></tr><tr><td align="left">📋 <code>:clipboard:</code></td><td align="left">📆 <code>:calendar:</code></td><td align="left">📅 <code>:date:</code></td></tr><tr><td align="left">📇 <code>:card_index:</code></td><td align="left">📁 <code>:file_folder:</code></td><td align="left">📂 <code>:open_file_folder:</code></td></tr><tr><td align="left">✂️ <code>:scissors:</code></td><td align="left">📌 <code>:pushpin:</code></td><td align="left">📎 <code>:paperclip:</code></td></tr><tr><td align="left">✒️ <code>:black_nib:</code></td><td align="left">✏️ <code>:pencil2:</code></td><td align="left">📏 <code>:straight_ruler:</code></td></tr><tr><td align="left">📐 <code>:triangular_ruler:</code></td><td align="left">📕 <code>:closed_book:</code></td><td align="left">📗 <code>:green_book:</code></td></tr><tr><td align="left">📘 <code>:blue_book:</code></td><td align="left">📙 <code>:orange_book:</code></td><td align="left">📓 <code>:notebook:</code></td></tr><tr><td align="left">📔 <code>:notebook_with_decorative_cover:</code></td><td align="left">📒 <code>:ledger:</code></td><td align="left">📚 <code>:books:</code></td></tr><tr><td align="left">🔖 <code>:bookmark:</code></td><td align="left">📛 <code>:name_badge:</code></td><td align="left">🔬 <code>:microscope:</code></td></tr><tr><td align="left">🔭 <code>:telescope:</code></td><td align="left">📰 <code>:newspaper:</code></td><td align="left">🏈 <code>:football:</code></td></tr><tr><td align="left">🏀 <code>:basketball:</code></td><td align="left">⚽️ <code>:soccer:</code></td><td align="left">⚾️ <code>:baseball:</code></td></tr><tr><td align="left">🎾 <code>:tennis:</code></td><td align="left">🎱 <code>:8ball:</code></td><td align="left">🏉 <code>:rugby_football:</code></td></tr><tr><td align="left">🎳 <code>:bowling:</code></td><td align="left">⛳️ <code>:golf:</code></td><td align="left">🚵 <code>:mountain_bicyclist:</code></td></tr><tr><td align="left">🚴 <code>:bicyclist:</code></td><td align="left">🏇 <code>:horse_racing:</code></td><td align="left">🏂 <code>:snowboarder:</code></td></tr><tr><td align="left">🏊 <code>:swimmer:</code></td><td align="left">🏄 <code>:surfer:</code></td><td align="left">🎿 <code>:ski:</code></td></tr><tr><td align="left">♠️ <code>:spades:</code></td><td align="left">♥️ <code>:hearts:</code></td><td align="left">♣️ <code>:clubs:</code></td></tr><tr><td align="left">♦️ <code>:diamonds:</code></td><td align="left">💎 <code>:gem:</code></td><td align="left">💍 <code>:ring:</code></td></tr><tr><td align="left">🏆 <code>:trophy:</code></td><td align="left">🎼 <code>:musical_score:</code></td><td align="left">🎹 <code>:musical_keyboard:</code></td></tr><tr><td align="left">🎻 <code>:violin:</code></td><td align="left">👾 <code>:space_invader:</code></td><td align="left">🎮 <code>:video_game:</code></td></tr><tr><td align="left">🃏 <code>:black_joker:</code></td><td align="left">🎴 <code>:flower_playing_cards:</code></td><td align="left">🎲 <code>:game_die:</code></td></tr><tr><td align="left">🎯 <code>:dart:</code></td><td align="left">🀄️ <code>:mahjong:</code></td><td align="left">🎬 <code>:clapper:</code></td></tr><tr><td align="left">📝 <code>:memo:</code></td><td align="left">📝 <code>:pencil:</code></td><td align="left">📖 <code>:book:</code></td></tr><tr><td align="left">🎨 <code>:art:</code></td><td align="left">🎤 <code>:microphone:</code></td><td align="left">🎧 <code>:headphones:</code></td></tr><tr><td align="left">🎺 <code>:trumpet:</code></td><td align="left">🎷 <code>:saxophone:</code></td><td align="left">🎸 <code>:guitar:</code></td></tr><tr><td align="left">👞 <code>:shoe:</code></td><td align="left">👡 <code>:sandal:</code></td><td align="left">👠 <code>:high_heel:</code></td></tr><tr><td align="left">💄 <code>:lipstick:</code></td><td align="left">👢 <code>:boot:</code></td><td align="left">👕 <code>:shirt:</code></td></tr><tr><td align="left">👕 <code>:tshirt:</code></td><td align="left">👔 <code>:necktie:</code></td><td align="left">👚 <code>:womans_clothes:</code></td></tr><tr><td align="left">👗 <code>:dress:</code></td><td align="left">🎽 <code>:running_shirt_with_sash:</code></td><td align="left">👖 <code>:jeans:</code></td></tr><tr><td align="left">👘 <code>:kimono:</code></td><td align="left">👙 <code>:bikini:</code></td><td align="left">🎀 <code>:ribbon:</code></td></tr><tr><td align="left">🎩 <code>:tophat:</code></td><td align="left">👑 <code>:crown:</code></td><td align="left">👒 <code>:womans_hat:</code></td></tr><tr><td align="left">👞 <code>:mans_shoe:</code></td><td align="left">🌂 <code>:closed_umbrella:</code></td><td align="left">💼 <code>:briefcase:</code></td></tr><tr><td align="left">👜 <code>:handbag:</code></td><td align="left">👝 <code>:pouch:</code></td><td align="left">👛 <code>:purse:</code></td></tr><tr><td align="left">👓 <code>:eyeglasses:</code></td><td align="left">🎣 <code>:fishing_pole_and_fish:</code></td><td align="left">☕️ <code>:coffee:</code></td></tr><tr><td align="left">🍵 <code>:tea:</code></td><td align="left">🍶 <code>:sake:</code></td><td align="left">🍼 <code>:baby_bottle:</code></td></tr><tr><td align="left">🍺 <code>:beer:</code></td><td align="left">🍻 <code>:beers:</code></td><td align="left">🍸 <code>:cocktail:</code></td></tr><tr><td align="left">🍹 <code>:tropical_drink:</code></td><td align="left">🍷 <code>:wine_glass:</code></td><td align="left">🍴 <code>:fork_and_knife:</code></td></tr><tr><td align="left">🍕 <code>:pizza:</code></td><td align="left">🍔 <code>:hamburger:</code></td><td align="left">🍟 <code>:fries:</code></td></tr><tr><td align="left">🍗 <code>:poultry_leg:</code></td><td align="left">🍖 <code>:meat_on_bone:</code></td><td align="left">🍝 <code>:spaghetti:</code></td></tr><tr><td align="left">🍛 <code>:curry:</code></td><td align="left">🍤 <code>:fried_shrimp:</code></td><td align="left">🍱 <code>:bento:</code></td></tr><tr><td align="left">🍣 <code>:sushi:</code></td><td align="left">🍥 <code>:fish_cake:</code></td><td align="left">🍙 <code>:rice_ball:</code></td></tr><tr><td align="left">🍘 <code>:rice_cracker:</code></td><td align="left">🍚 <code>:rice:</code></td><td align="left">🍜 <code>:ramen:</code></td></tr><tr><td align="left">🍲 <code>:stew:</code></td><td align="left">🍢 <code>:oden:</code></td><td align="left">🍡 <code>:dango:</code></td></tr><tr><td align="left">🥚 <code>:egg:</code></td><td align="left">🍞 <code>:bread:</code></td><td align="left">🍩 <code>:doughnut:</code></td></tr><tr><td align="left">🍮 <code>:custard:</code></td><td align="left">🍦 <code>:icecream:</code></td><td align="left">🍨 <code>:ice_cream:</code></td></tr><tr><td align="left">🍧 <code>:shaved_ice:</code></td><td align="left">🎂 <code>:birthday:</code></td><td align="left">🍰 <code>:cake:</code></td></tr><tr><td align="left">🍪 <code>:cookie:</code></td><td align="left">🍫 <code>:chocolate_bar:</code></td><td align="left">🍬 <code>:candy:</code></td></tr><tr><td align="left">🍭 <code>:lollipop:</code></td><td align="left">🍯 <code>:honey_pot:</code></td><td align="left">🍎 <code>:apple:</code></td></tr><tr><td align="left">🍏 <code>:green_apple:</code></td><td align="left">🍊 <code>:tangerine:</code></td><td align="left">🍋 <code>:lemon:</code></td></tr><tr><td align="left">🍒 <code>:cherries:</code></td><td align="left">🍇 <code>:grapes:</code></td><td align="left">🍉 <code>:watermelon:</code></td></tr><tr><td align="left">🍓 <code>:strawberry:</code></td><td align="left">🍑 <code>:peach:</code></td><td align="left">🍈 <code>:melon:</code></td></tr><tr><td align="left">🍌 <code>:banana:</code></td><td align="left">🍐 <code>:pear:</code></td><td align="left">🍍 <code>:pineapple:</code></td></tr><tr><td align="left">🍠 <code>:sweet_potato:</code></td><td align="left">🍆 <code>:eggplant:</code></td><td align="left">🍅 <code>:tomato:</code></td></tr><tr><td align="left">🌽 <code>:corn:</code></td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>Places</strong></p><table><thead><tr><th align="left">🏠 <code>:house:</code></th><th align="left">🏡 <code>:house_with_garden:</code></th><th align="left">🏫 <code>:school:</code></th></tr></thead><tbody><tr><td align="left">🏢 <code>:office:</code></td><td align="left">🏣 <code>:post_office:</code></td><td align="left">🏥 <code>:hospital:</code></td></tr><tr><td align="left">🏦 <code>:bank:</code></td><td align="left">🏪 <code>:convenience_store:</code></td><td align="left">🏩 <code>:love_hotel:</code></td></tr><tr><td align="left">🏨 <code>:hotel:</code></td><td align="left">💒 <code>:wedding:</code></td><td align="left">⛪️ <code>:church:</code></td></tr><tr><td align="left">🏬 <code>:department_store:</code></td><td align="left">🏤 <code>:european_post_office:</code></td><td align="left">🌇 <code>:city_sunrise:</code></td></tr><tr><td align="left">🌆 <code>:city_sunset:</code></td><td align="left">🏯 <code>:japanese_castle:</code></td><td align="left">🏰 <code>:european_castle:</code></td></tr><tr><td align="left">⛺️ <code>:tent:</code></td><td align="left">🏭 <code>:factory:</code></td><td align="left">🗼 <code>:tokyo_tower:</code></td></tr><tr><td align="left">🗾 <code>:japan:</code></td><td align="left">🗻 <code>:mount_fuji:</code></td><td align="left">🌄 <code>:sunrise_over_mountains:</code></td></tr><tr><td align="left">🌅 <code>:sunrise:</code></td><td align="left">🌠 <code>:stars:</code></td><td align="left">🗽 <code>:statue_of_liberty:</code></td></tr><tr><td align="left">🌉 <code>:bridge_at_night:</code></td><td align="left">🎠 <code>:carousel_horse:</code></td><td align="left">🌈 <code>:rainbow:</code></td></tr><tr><td align="left">🎡 <code>:ferris_wheel:</code></td><td align="left">⛲️ <code>:fountain:</code></td><td align="left">🎢 <code>:roller_coaster:</code></td></tr><tr><td align="left">🚢 <code>:ship:</code></td><td align="left">🚤 <code>:speedboat:</code></td><td align="left">⛵️ <code>:boat:</code></td></tr><tr><td align="left">⛵️ <code>:sailboat:</code></td><td align="left">🚣 <code>:rowboat:</code></td><td align="left">⚓️ <code>:anchor:</code></td></tr><tr><td align="left">🚀 <code>:rocket:</code></td><td align="left">✈️ <code>:airplane:</code></td><td align="left">🚁 <code>:helicopter:</code></td></tr><tr><td align="left">🚂 <code>:steam_locomotive:</code></td><td align="left">🚊 <code>:tram:</code></td><td align="left">🚞 <code>:mountain_railway:</code></td></tr><tr><td align="left">🚲 <code>:bike:</code></td><td align="left">🚡 <code>:aerial_tramway:</code></td><td align="left">🚟 <code>:suspension_railway:</code></td></tr><tr><td align="left">🚠 <code>:mountain_cableway:</code></td><td align="left">🚜 <code>:tractor:</code></td><td align="left">🚙 <code>:blue_car:</code></td></tr><tr><td align="left">🚘 <code>:oncoming_automobile:</code></td><td align="left">🚗 <code>:car:</code></td><td align="left">🚗 <code>:red_car:</code></td></tr><tr><td align="left">🚕 <code>:taxi:</code></td><td align="left">🚖 <code>:oncoming_taxi:</code></td><td align="left">🚛 <code>:articulated_lorry:</code></td></tr><tr><td align="left">🚌 <code>:bus:</code></td><td align="left">🚍 <code>:oncoming_bus:</code></td><td align="left">🚨 <code>:rotating_light:</code></td></tr><tr><td align="left">🚓 <code>:police_car:</code></td><td align="left">🚔 <code>:oncoming_police_car:</code></td><td align="left">🚒 <code>:fire_engine:</code></td></tr><tr><td align="left">🚑 <code>:ambulance:</code></td><td align="left">🚐 <code>:minibus:</code></td><td align="left">🚚 <code>:truck:</code></td></tr><tr><td align="left">🚋 <code>:train:</code></td><td align="left">🚉 <code>:station:</code></td><td align="left">🚆 <code>:train2:</code></td></tr><tr><td align="left">🚅 <code>:bullettrain_front:</code></td><td align="left">🚄 <code>:bullettrain_side:</code></td><td align="left">🚈 <code>:light_rail:</code></td></tr><tr><td align="left">🚝 <code>:monorail:</code></td><td align="left">🚃 <code>:railway_car:</code></td><td align="left">🚎 <code>:trolleybus:</code></td></tr><tr><td align="left">🎫 <code>:ticket:</code></td><td align="left">⛽️ <code>:fuelpump:</code></td><td align="left">🚦 <code>:vertical_traffic_light:</code></td></tr><tr><td align="left">🚥 <code>:traffic_light:</code></td><td align="left">⚠️ <code>:warning:</code></td><td align="left">🚧 <code>:construction:</code></td></tr><tr><td align="left">🔰 <code>:beginner:</code></td><td align="left">🏧 <code>:atm:</code></td><td align="left">🎰 <code>:slot_machine:</code></td></tr><tr><td align="left">🚏 <code>:busstop:</code></td><td align="left">💈 <code>:barber:</code></td><td align="left">♨️ <code>:hotsprings:</code></td></tr><tr><td align="left">🏁 <code>:checkered_flag:</code></td><td align="left">🎌 <code>:crossed_flags:</code></td><td align="left">🏮 <code>:izakaya_lantern:</code></td></tr><tr><td align="left">🗿 <code>:moyai:</code></td><td align="left">🎪 <code>:circus_tent:</code></td><td align="left">🎭 <code>:performing_arts:</code></td></tr><tr><td align="left">📍 <code>:round_pushpin:</code></td><td align="left">🚩 <code>:triangular_flag_on_post:</code></td><td align="left"></td></tr></tbody></table><p><strong>Symbols</strong></p><table><thead><tr><th align="left">1️⃣ <code>:one:</code></th><th align="left">2️⃣ <code>:two:</code></th><th align="left">3️⃣ <code>:three:</code></th></tr></thead><tbody><tr><td align="left">4️⃣ <code>:four:</code></td><td align="left">5️⃣ <code>:five:</code></td><td align="left">6️⃣ <code>:six:</code></td></tr><tr><td align="left">7️⃣ <code>:seven:</code></td><td align="left">8️⃣ <code>:eight:</code></td><td align="left">9️⃣ <code>:nine:</code></td></tr><tr><td align="left">🔟 <code>:keycap_ten:</code></td><td align="left">🔢 <code>:1234:</code></td><td align="left">0️⃣ <code>:zero:</code></td></tr><tr><td align="left">#️⃣ <code>:hash:</code></td><td align="left">🔣 <code>:symbols:</code></td><td align="left">◀️ <code>:arrow_backward:</code></td></tr><tr><td align="left">⬇️ <code>:arrow_down:</code></td><td align="left">▶️ <code>:arrow_forward:</code></td><td align="left">⬅️ <code>:arrow_left:</code></td></tr><tr><td align="left">🔠 <code>:capital_abcd:</code></td><td align="left">🔡 <code>:abcd:</code></td><td align="left">🔤 <code>:abc:</code></td></tr><tr><td align="left">↙️ <code>:arrow_lower_left:</code></td><td align="left">↘️ <code>:arrow_lower_right:</code></td><td align="left">➡️ <code>:arrow_right:</code></td></tr><tr><td align="left">⬆️ <code>:arrow_up:</code></td><td align="left">↖️ <code>:arrow_upper_left:</code></td><td align="left">↗️ <code>:arrow_upper_right:</code></td></tr><tr><td align="left">⏬ <code>:arrow_double_down:</code></td><td align="left">⏫ <code>:arrow_double_up:</code></td><td align="left">🔽 <code>:arrow_down_small:</code></td></tr><tr><td align="left">⤵️ <code>:arrow_heading_down:</code></td><td align="left">⤴️ <code>:arrow_heading_up:</code></td><td align="left">↩️ <code>:leftwards_arrow_with_hook:</code></td></tr><tr><td align="left">↪️ <code>:arrow_right_hook:</code></td><td align="left">↔️ <code>:left_right_arrow:</code></td><td align="left">↕️ <code>:arrow_up_down:</code></td></tr><tr><td align="left">🔼 <code>:arrow_up_small:</code></td><td align="left">🔃 <code>:arrows_clockwise:</code></td><td align="left">🔄 <code>:arrows_counterclockwise:</code></td></tr><tr><td align="left">⏪ <code>:rewind:</code></td><td align="left">⏩ <code>:fast_forward:</code></td><td align="left">ℹ️ <code>:information_source:</code></td></tr><tr><td align="left">🆗 <code>:ok:</code></td><td align="left">🔀 <code>:twisted_rightwards_arrows:</code></td><td align="left">🔁 <code>:repeat:</code></td></tr><tr><td align="left">🔂 <code>:repeat_one:</code></td><td align="left">🆕 <code>:new:</code></td><td align="left">🔝 <code>:top:</code></td></tr><tr><td align="left">🆙 <code>:up:</code></td><td align="left">🆒 <code>:cool:</code></td><td align="left">🆓 <code>:free:</code></td></tr><tr><td align="left">🆖 <code>:ng:</code></td><td align="left">🎦 <code>:cinema:</code></td><td align="left">🈁 <code>:koko:</code></td></tr><tr><td align="left">📶 <code>:signal_strength:</code></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">🈂️ <code>:sa:</code></td><td align="left">🚻 <code>:restroom:</code></td><td align="left">🚹 <code>:mens:</code></td></tr><tr><td align="left">🚺 <code>:womens:</code></td><td align="left">🚼 <code>:baby_symbol:</code></td><td align="left">🚭 <code>:no_smoking:</code></td></tr><tr><td align="left">🅿️ <code>:parking:</code></td><td align="left">♿️ <code>:wheelchair:</code></td><td align="left">🚇 <code>:metro:</code></td></tr><tr><td align="left">🛄 <code>:baggage_claim:</code></td><td align="left">🉑 <code>:accept:</code></td><td align="left">🚾 <code>:wc:</code></td></tr><tr><td align="left">🚰 <code>:potable_water:</code></td><td align="left">🚮 <code>:put_litter_in_its_place:</code></td><td align="left">㊙️ <code>:secret:</code></td></tr><tr><td align="left">㊗️ <code>:congratulations:</code></td><td align="left">Ⓜ️ <code>:m:</code></td><td align="left">🛂 <code>:passport_control:</code></td></tr><tr><td align="left">🛅 <code>:left_luggage:</code></td><td align="left">🛃 <code>:customs:</code></td><td align="left">🉐 <code>:ideograph_advantage:</code></td></tr><tr><td align="left">🆑 <code>:cl:</code></td><td align="left">🆘 <code>:sos:</code></td><td align="left">🆔 <code>:id:</code></td></tr><tr><td align="left">🚫 <code>:no_entry_sign:</code></td><td align="left">🔞 <code>:underage:</code></td><td align="left">📵 <code>:no_mobile_phones:</code></td></tr><tr><td align="left">🚯 <code>:do_not_litter:</code></td><td align="left">🚱 <code>:non-potable_water:</code></td><td align="left">🚳 <code>:no_bicycles:</code></td></tr><tr><td align="left">🚷 <code>:no_pedestrians:</code></td><td align="left">🚸 <code>:children_crossing:</code></td><td align="left">⛔️ <code>:no_entry:</code></td></tr><tr><td align="left">✳️ <code>:eight_spoked_asterisk:</code></td><td align="left">✴️ <code>:eight_pointed_black_star:</code></td><td align="left">💟 <code>:heart_decoration:</code></td></tr><tr><td align="left">🆚 <code>:vs:</code></td><td align="left">📳 <code>:vibration_mode:</code></td><td align="left">📴 <code>:mobile_phone_off:</code></td></tr><tr><td align="left">💹 <code>:chart:</code></td><td align="left">💱 <code>:currency_exchange:</code></td><td align="left">♈️ <code>:aries:</code></td></tr><tr><td align="left">♉️ <code>:taurus:</code></td><td align="left">♊️ <code>:gemini:</code></td><td align="left">♋️ <code>:cancer:</code></td></tr><tr><td align="left">♌️ <code>:leo:</code></td><td align="left">♍️ <code>:virgo:</code></td><td align="left">♎️ <code>:libra:</code></td></tr><tr><td align="left">♏️ <code>:scorpius:</code></td><td align="left">♐️ <code>:sagittarius:</code></td><td align="left">♑️ <code>:capricorn:</code></td></tr><tr><td align="left">♒️ <code>:aquarius:</code></td><td align="left">♓️ <code>:pisces:</code></td><td align="left">⛎ <code>:ophiuchus:</code></td></tr><tr><td align="left">🔯 <code>:six_pointed_star:</code></td><td align="left">❎ <code>:negative_squared_cross_mark:</code></td><td align="left">🅰️ <code>:a:</code></td></tr><tr><td align="left">🅱️ <code>:b:</code></td><td align="left">🆎 <code>:ab:</code></td><td align="left">🅾️ <code>:o2:</code></td></tr><tr><td align="left">💠 <code>:diamond_shape_with_a_dot_inside:</code></td><td align="left">♻️ <code>:recycle:</code></td><td align="left">🔚 <code>:end:</code></td></tr><tr><td align="left">🔛 <code>:on:</code></td><td align="left">🔜 <code>:soon:</code></td><td align="left">🕐 <code>:clock1:</code></td></tr><tr><td align="left">🕜 <code>:clock130:</code></td><td align="left">🕙 <code>:clock10:</code></td><td align="left">🕥 <code>:clock1030:</code></td></tr><tr><td align="left">🕚 <code>:clock11:</code></td><td align="left">🕦 <code>:clock1130:</code></td><td align="left">🕛 <code>:clock12:</code></td></tr><tr><td align="left">🕧 <code>:clock1230:</code></td><td align="left">🕑 <code>:clock2:</code></td><td align="left">🕝 <code>:clock230:</code></td></tr><tr><td align="left">🕒 <code>:clock3:</code></td><td align="left">🕞 <code>:clock330:</code></td><td align="left">🕓 <code>:clock4:</code></td></tr><tr><td align="left">🕟 <code>:clock430:</code></td><td align="left">🕔 <code>:clock5:</code></td><td align="left">🕠 <code>:clock530:</code></td></tr><tr><td align="left">🕕 <code>:clock6:</code></td><td align="left">🕡 <code>:clock630:</code></td><td align="left">🕖 <code>:clock7:</code></td></tr><tr><td align="left">🕢 <code>:clock730:</code></td><td align="left">🕗 <code>:clock8:</code></td><td align="left">🕣 <code>:clock830:</code></td></tr><tr><td align="left">🕘 <code>:clock9:</code></td><td align="left">🕤 <code>:clock930:</code></td><td align="left">💲 <code>:heavy_dollar_sign:</code></td></tr><tr><td align="left">©️ <code>:copyright:</code></td><td align="left">®️ <code>:registered:</code></td><td align="left">™️ <code>:tm:</code></td></tr><tr><td align="left">❌ <code>:x:</code></td><td align="left">❗️ <code>:heavy_exclamation_mark:</code></td><td align="left">‼️ <code>:bangbang:</code></td></tr><tr><td align="left">⁉️ <code>:interrobang:</code></td><td align="left">⭕️ <code>:o:</code></td><td align="left">✖️ <code>:heavy_multiplication_x:</code></td></tr><tr><td align="left">➕ <code>:heavy_plus_sign:</code></td><td align="left">➖ <code>:heavy_minus_sign:</code></td><td align="left">➗ <code>:heavy_division_sign:</code></td></tr><tr><td align="left">💮 <code>:white_flower:</code></td><td align="left">💯 <code>:100:</code></td><td align="left">✔️ <code>:heavy_check_mark:</code></td></tr><tr><td align="left">☑️ <code>:ballot_box_with_check:</code></td><td align="left">🔘 <code>:radio_button:</code></td><td align="left">🔗 <code>:link:</code></td></tr><tr><td align="left">➰ <code>:curly_loop:</code></td><td align="left">〰️ <code>:wavy_dash:</code></td><td align="left">〽️ <code>:part_alternation_mark:</code></td></tr><tr><td align="left">🔱 <code>:trident:</code></td><td align="left">🔻 <code>:small_red_triangle_down:</code></td><td align="left">🔺 <code>:small_red_triangle:</code></td></tr><tr><td align="left">✅ <code>:white_check_mark:</code></td><td align="left">🔲 <code>:black_square_button:</code></td><td align="left">🔳 <code>:white_square_button:</code></td></tr><tr><td align="left">⚫️ <code>:black_circle:</code></td><td align="left">⚪️ <code>:white_circle:</code></td><td align="left">🔴 <code>:red_circle:</code></td></tr><tr><td align="left">🔵 <code>:large_blue_circle:</code></td><td align="left">🔷 <code>:large_blue_diamond:</code></td><td align="left">🔶 <code>:large_orange_diamond:</code></td></tr><tr><td align="left">🔹 <code>:small_blue_diamond:</code></td><td align="left">🔸 <code>:small_orange_diamond:</code></td><td align="left"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>博客配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb学习笔记</title>
    <link href="/posts/2020/12/31/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/posts/2020/12/31/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><h3 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h3><p>web开发：</p><ul><li>web，网页的意思，<a href="http://www.baidu.com/">www.baidu.com</a></li><li>静态web<ul><li>html、css</li><li>提供给所有人看的数据始终不会发生变化</li></ul></li><li>动态web<ul><li>淘宝，几乎是所有的网站</li><li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同</li><li>技术栈：Servlet/JSP，ASP，PHP</li></ul></li></ul><p>在java中，动态web资源开发的技术统称为JavaWeb。</p><h3 id="1-2-web应用程序"><a href="#1-2-web应用程序" class="headerlink" title="1.2 web应用程序"></a>1.2 web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序</p><ul><li>a.html、b.html ……多个web资源，这些web资源可以被外界访问，对外界提供服务</li><li>你们能访问到的任何一个页面和资源，都存在于某个角落的计算机上</li><li>URL：统一资源定位符</li><li>这些统一的web资源会被放在同一个文件夹下，web应用程序—&gt;Tomcat：服务器</li><li>一个web应用由多部分组成（静态web，动态web）<ul><li>html，css，js</li><li>jsp，servlet</li><li>java程序</li><li>jar包</li><li>配置文件（Properties）</li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理</p><h3 id="1-3-静态web"><a href="#1-3-静态web" class="headerlink" title="1.3 静态web"></a>1.3 静态web</h3><ul><li>.htm，.html，这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%9D%99%E6%80%81web.png" alt="静态web流程"></p><ul><li>静态web存在的缺点<ul><li>web页面无法动态更新，所有用户看到的都是同一个页面<ul><li>轮播图，点击特效：伪动态</li><li>JavaScript[实际开发中，它用的最多]</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="1-4-动态web"><a href="#1-4-动态web" class="headerlink" title="1.4 动态web"></a>1.4 动态web</h3><p>页面会动态展示：“web的页面展示的效果因人而异”</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81web.png" alt="动态web流程"></p><p>缺点：</p><ul><li>假如服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>，重新发布<ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li>web页面可以动态更新，所有用户看到的都不是同一个页面</li><li>它可以和数据库交互（数据持久化：注册，[商品信息，用户信息]）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81web%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%A4%E4%BA%92.png" alt="动态web与数据库交互"></p><h2 id="2-web服务器"><a href="#2-web服务器" class="headerlink" title="2. web服务器"></a>2. web服务器</h2><h3 id="2-1-技术讲解"><a href="#2-1-技术讲解" class="headerlink" title="2.1 技术讲解"></a>2.1 技术讲解</h3><p>ASP</p><ul><li><p>微软：国内最早流行的就是ASP</p></li><li><p>在HTML中嵌入了VB的脚本，ASP + COM</p></li><li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其混乱</p></li><li><p>维护成本高</p></li><li><p>C#</p></li><li><p>iis服务器—Internet information Services可承载的Web核心</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>            &lt;%<br>             System.out.println(&quot;/hello&quot;)  <br>             %&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>PHP</p><ul><li>优势：PHP开发速度很快，功能很强大，跨平台，代码很简单（70%的网站为中轻量级的网站）</li><li>劣势：无法承载大访问量的情况（局限性）</li></ul><p>JSP/Servlet:</p><ul><li>SUN公司主推的<strong>B/S架构</strong></li><li>基于java语言的（所有的大公司，或者一些开源的组件，都是用java写的）</li><li>可以承载三高问题带来的影响：高并发、高可用、高性能</li><li>语法很像ASP，方便ASP开发人员转到JSP，加强市场竞争度</li></ul><p>……</p><h3 id="2-2-web服务器"><a href="#2-2-web服务器" class="headerlink" title="2.2 web服务器"></a>2.2 web服务器</h3><p>服务器是一种<strong>被动的操作</strong>，用来处理用户的一些请求和给用户一些响应信息。</p><p><strong>IIS</strong></p><ul><li>微软的：ASP……，Windows中自带的</li></ul><p><strong>Tomcat</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/tomcat_logo.png" alt="tomcat的logo"></p><ul><li><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目。最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p></li><li><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p></li><li><p>Tomcat 实际上运行JSP 页面和Servlet。目前Tomcat最新版本为9.0.41。</p></li></ul><p><strong>工作3-5年之后，可以尝试手写Tomcat服务器</strong>；</p><p><strong>下载tomcat</strong>：</p><ol><li>安装 or 解压</li><li>了解配置文件及目录结构</li><li>了解它的作用</li></ol><h2 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3. Tomcat"></a>3. Tomcat</h2><h3 id="3-1-安装Tomcat"><a href="#3-1-安装Tomcat" class="headerlink" title="3.1 安装Tomcat"></a>3.1 安装Tomcat</h3><p>Tomcat官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/tomcat_install.png" alt="Tomcat安装包"></p><p>下载完成后得到安压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/zip.png" alt="压缩包"></p><h3 id="3-2-Tomcat启动和配置"><a href="#3-2-Tomcat启动和配置" class="headerlink" title="3.2 Tomcat启动和配置"></a>3.2 Tomcat启动和配置</h3><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/tomcat_folder.png" alt="Tomcat目录结构"></p><p><strong>启动/关闭Tomcat</strong></p><p>在解压出的文件夹下的bin目录下</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/tomcat_start_shut.png" alt="tomcat的启动与关闭"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>可能遇到的问题：</p><ol><li>java环境变量没有配置（造成闪退情况）</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置（尽量不要改动startup.bat文件的内容）</li></ol><h3 id="3-3-配置"><a href="#3-3-配置" class="headerlink" title="3.3 配置"></a>3.3 配置</h3><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/tomcat_coreConfig.png" alt="tomcat核心配置文件"></p><p><strong>可以配置启动的端口号</strong></p><ul><li><p>tomcat的默认端口号为：8080</p></li><li><p>mysql：3306</p></li><li><p>http：80</p></li><li><p>https：443</p></li><li><pre><code class="c">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;               connectionTimeout=&quot;20000&quot;               redirectPort=&quot;8443&quot; /&gt;<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>**可以配置启动的名称**<br><br>+ 默认的主机名为：localhost-&gt;127.0.0.1<br><br>+ 默认网站应用存放的位置为：webapps<br><br>+ ```c<br>  &lt;Host <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attribute">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span><br>             <span class="hljs-attribute">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attribute">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul><p><strong>高难度面试题</strong>：请你谈一谈网站是如何进行访问的！</p><ol><li><p>输入一个域名：回车</p></li><li><p>检查本机的C:\Windows\System32\dirvers\etc\hosts配置文件下有没有这个域名的映射</p><ol><li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p></li><li><p>无：去DNS服务器找，找到的话就返回，找不到就返回找不到。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/websiteRequest.png" alt="网站的访问"></p></li></ol></li></ol><h3 id="3-4-发布一个web网站"><a href="#3-4-发布一个web网站" class="headerlink" title="3.4 发布一个web网站"></a>3.4 发布一个web网站</h3><ul><li>将自己写的网站，放到服务器（Tomcat）中指定的web应用的文件夹（webapps）下，就可以访问了</li></ul><p>网站应该有的结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">--webapps : Tomcat服务器的web目录<br>    -Root<br>    -atroxStudy : 网站的目录名<br>        -WEB-INF<br>        -classes : java程序<br>            -lib : web应用所依赖的jar包<br>        -web.xml<br>        -index.html 默认的首页<br>        -<span class="hljs-keyword">static</span><br>            -css<br>                -style.css<br>            -js<br>            -img<br>        -……<br></code></pre></td></tr></table></figure><h2 id="4-Http"><a href="#4-Http" class="headerlink" title="4. Http"></a>4. Http</h2><h3 id="4-1-什么是HTTP"><a href="#4-1-什么是HTTP" class="headerlink" title="4.1 什么是HTTP"></a>4.1 什么是HTTP</h3><p>http（超文本传输协议）是一个简单的请求-响应协议，它通常运行在<a href="https://baike.baidu.com/item/TCP/33012">TCP</a>之上。</p><ul><li>文本：html、字符串、……</li><li>超文本：图片、音乐、视频、定位、地图……</li><li>Http默认端口80</li></ul><p>Https：安全的</p><ul><li>Https默认端口443</li></ul><h3 id="4-2-两个时代"><a href="#4-2-两个时代" class="headerlink" title="4.2 两个时代"></a>4.2 两个时代</h3><ul><li>http1.0<ul><li>HTTP/1.0：客户端可以于web服务器连接，只能获得一个web资源，断开连接</li></ul></li><li>http2.0<ul><li>HTTP/1.1：客户端可以于web服务器连接，可以获得多个web资源。</li></ul></li></ul><h3 id="4-3-Http请求"><a href="#4-3-Http请求" class="headerlink" title="4.3 Http请求"></a>4.3 Http请求</h3><ul><li>客户端–发请求（Request）–服务器</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Request URL: https:<span class="hljs-comment">//www.baidu.com/  请求地址</span><br>Request Method: GET   get方法/post方法<br>Status Code: <span class="hljs-number">200</span> OK   状态码：<span class="hljs-number">200</span><br>Remote Address: <span class="hljs-number">39.156</span><span class="hljs-number">.66</span><span class="hljs-number">.18</span>:<span class="hljs-number">443</span>  <br>Referrer Policy: no-referrer-when-downgrade<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: text/html<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span><br>Cache-Control: max-age=<span class="hljs-number">0</span><br>Connection: keep-alive<br></code></pre></td></tr></table></figure><h4 id="4-3-1-请求行"><a href="#4-3-1-请求行" class="headerlink" title="4.3.1 请求行"></a>4.3.1 请求行</h4><ul><li>请求行中的请求方式：GET</li><li>请求方式：<strong>GET/POST</strong>/HEAD/DELETE/PUT/TRACT<ul><li>get：请求能够携带的参数比较少，大小有限制，<strong>会在浏览器的URL地址栏显示数据内容</strong>，不安全，但高效</li><li>post：请求能够携带的参数没有限制，大小没有限制，<strong>不会在浏览器的URL地址栏显示数据内容</strong>，安全，但不高效</li></ul></li></ul><h4 id="4-3-2-消息头"><a href="#4-3-2-消息头" class="headerlink" title="4.3.2 消息头"></a>4.3.2 消息头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: 告诉浏览器，它所支持的数据类型<br>Accept-Encoding: 支持哪种哪种编码格式 GBK UTF-<span class="hljs-number">8</span> GB2312 ISO8859-<span class="hljs-number">1</span><br>Accept-Language: 告诉浏览器，它的语言环境<br>Cache-Control: 缓存控制<br>Connection: 告诉浏览器，请求完是断开还是保持连接<br>HOST： 主机……/.<br></code></pre></td></tr></table></figure><h3 id="4-4-Http响应"><a href="#4-4-Http响应" class="headerlink" title="4.4 Http响应"></a>4.4 Http响应</h3><ul><li>服务器–响应–客户端</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Cache-Control: <span class="hljs-keyword">private</span>                  缓存控制<br>Connection: keep-alive                  连接<br>Content-Encoding: gzip                  编码<br>Content-Type: text/html;charset=utf-<span class="hljs-number">8</span>   类型<br></code></pre></td></tr></table></figure><h4 id="4-4-1-响应体"><a href="#4-4-1-响应体" class="headerlink" title="4.4.1 响应体"></a>4.4.1 响应体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: 告诉浏览器，它所支持的数据类型<br>Accept-Encoding: 支持哪种哪种编码格式 GBK UTF-<span class="hljs-number">8</span> GB2312 ISO8859-<span class="hljs-number">1</span><br>Accept-Language: 告诉浏览器，它的语言环境<br>Cache-Control: 缓存控制<br>Connection: 告诉浏览器，请求完是断开还是保持连接<br>HOST： 主机……/.<br>Reflesh: 告诉客户端，多久刷新一次<br>Location: 让网页重新定位<br></code></pre></td></tr></table></figure><h3 id="4-4-2-相应状态码"><a href="#4-4-2-相应状态码" class="headerlink" title="4.4.2 相应状态码"></a>4.4.2 相应状态码</h3><p><strong>200</strong>：请求响应成功 </p><p><strong>3xx</strong>：请求重定向</p><ul><li>重定向：你重新到我给你的新位置去</li></ul><p><strong>4xx</strong>：找不到资源 404</p><ul><li>资源不存在</li></ul><p><strong>5xx</strong>：服务器代码错误 500   502：网关错误</p><p><strong>常见面试题：</strong>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><h2 id="5-Maven"><a href="#5-Maven" class="headerlink" title="5.Maven"></a>5.Maven</h2><h3 id="5-1-为什么要学习Maven？"><a href="#5-1-为什么要学习Maven？" class="headerlink" title="5.1 为什么要学习Maven？"></a>5.1 为什么要学习Maven？</h3><ol><li>在JavaWeb开发中，需要使用大量的jar包，我们需要手动去导入；</li><li>如何能够让一个东西自动帮我导入和配置这个jar包；</li><li>由此，Maven诞生了！</li></ol><h3 id="5-2-Maven项目架构管理工具"><a href="#5-2-Maven项目架构管理工具" class="headerlink" title="5.2 Maven项目架构管理工具"></a>5.2 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反。</li></ul><p>Maven会规定好该如何去编写我们的Java代码，必须要按照这个规范来；</p><h3 id="5-3-下载安装Maven"><a href="#5-3-下载安装Maven" class="headerlink" title="5.3 下载安装Maven"></a>5.3 下载安装Maven</h3><p>官网地址：<a href="http://maven.apache.org/">http://maven.apache.org/</a></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/maven_download.png" alt="maven下载"></p><p>下载完成后，解压即可：</p><h3 id="5-4-配置环境变量"><a href="#5-4-配置环境变量" class="headerlink" title="5.4 配置环境变量"></a>5.4 配置环境变量</h3><p>在我们的系统环境变量中，配置如下配置：</p><ul><li>M2_HOME  maven目录下的bin目录</li><li>MAVEN_HOME maven的目录</li><li>在系统的path中配置 %MAVEN_HOME%\bin</li></ul><p>cmd maven -v测试Maven是否安装成功，保证必须配置完毕！</p><h3 id="5-5-阿里云镜像"><a href="#5-5-阿里云镜像" class="headerlink" title="5.5 阿里云镜像"></a>5.5 阿里云镜像</h3><ul><li><p>镜像：mirrors</p><ul><li>作用：加速我们的下载</li></ul></li><li><p>国内建议使用阿里云的镜像</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-6-本地仓库"><a href="#5-6-本地仓库" class="headerlink" title="5.6 本地仓库"></a>5.6 本地仓库</h3><p>在本地的仓库，远程仓库</p><p>建立一个仓库，在配置文件setting.xml中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\SOMETOOLS\maven\apache-maven-3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-7-在IDEA中使用Maven"><a href="#5-7-在IDEA中使用Maven" class="headerlink" title="5.7 在IDEA中使用Maven"></a>5.7 在IDEA中使用Maven</h3><p>1.启动IDEA</p><p>2.创建一个MavenWeb项目</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/new_maven_project.png" alt="创建一个MavenWeb项目"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/maven_gav.png" alt="maven的gav"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/maven_config.png" alt="maven地址设置"></p><p>其中Bundled的为idea自带的maven设置。</p><p>3.等待初始化maven项目完毕</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/maven_project_init.png" alt="maven自动导包"></p><p>4.观察Maven仓库中多了什么东西？</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/add_maven_repo.png" alt="maven仓库中新增的包"></p><p>5.IDEA中的Maven设置</p><p>​    注意：IDEA项目创建成功后，看一眼Maven的配置</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea_maven_settings.png" alt="IDEA中的Maven设置"></p><p>6.到这里，Maven在IDEA中的设置和使用就完毕了！</p><h3 id="5-8-创建一个普通的Maven项目"><a href="#5-8-创建一个普通的Maven项目" class="headerlink" title="5.8 创建一个普通的Maven项目"></a>5.8 创建一个普通的Maven项目</h3><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/primary_maven_project_step1.png" alt="第一步"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/clean_maven_project.png" alt="干净的maven项目"></p><h3 id="5-9-在IDEA中标记文件夹功能"><a href="#5-9-在IDEA中标记文件夹功能" class="headerlink" title="5.9 在IDEA中标记文件夹功能"></a>5.9 在IDEA中标记文件夹功能</h3><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mark_directory.png" alt="标记文件夹功能"></p><p>或者采用第二种方式</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mark_directory2.png" alt="标记文件夹功能的第二种方式"></p><h3 id="5-10-在IDEA中配置Tomcat"><a href="#5-10-在IDEA中配置Tomcat" class="headerlink" title="5.10 在IDEA中配置Tomcat"></a>5.10 在IDEA中配置Tomcat</h3><p>第一步：在run中找到edit configuration</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea_select_tomcat.png" alt="找到tomcat server"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/tomcat_idea_config.png" alt="新建一个template"></p><p>解决警告问题</p><p>必须要做的配置：<strong>为什么会有这个问题：我们访问一个网站，需要制定一个文件夹名字；</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/tomcat_idea_artifacts.png" alt="新建artifacts"></p><p>然后，需要做虚拟路径映射的设置</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/tomcat_virtual_path.png" alt="虚拟路径映射"></p><p>然后，启动Tomcat</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea_start_tomcat.png" alt="idea启动Tomcat"></p><p>启动完成后，浏览器会自动打开localhost:8080/atrox/</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea_tomcat_run.png" alt="tomcat启动情况"></p><p>maven侧边栏的讲解：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/maven_sidebar.png" alt="maven侧边栏的梳理"></p><h3 id="5-11-pom文件"><a href="#5-11-pom文件" class="headerlink" title="5.11 pom文件"></a>5.11 pom文件</h3><p>pom.xml 是maven的核心文件，解析如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-comment">&lt;!--Maven版本和头文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--这里就是刚才配置的GAV--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb-01-maven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--Package：项目的打包方式</span><br><span class="hljs-comment">  jar: java应用</span><br><span class="hljs-comment">  war：javaWeb应用--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javaweb-01-maven Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目的默认构建编码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--编译版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--项目依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--具体依赖的jar包配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--项目构建用的东西--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>javaweb-01-maven<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>maven由于它的约定大于配置，之后可能会我们写的配置文件，无法被导出或者生效的问题。</p><p><strong>解决方案</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-12-解决遇到的问题"><a href="#5-12-解决遇到的问题" class="headerlink" title="5.12 解决遇到的问题"></a>5.12 解决遇到的问题</h3><p>1.Maven 3.6.2 无法导包</p><p>​    <strong>解决方法</strong>：降级为3.6.1</p><p>2.Tomcat闪退</p><p>​    <strong>解决办法</strong>：重新配置java的环境变量</p><p>3.IDEA中每次都要重复配置Maven</p><p>​    <strong>解决办法</strong>：在IDEA中的全局默认配置中去配置</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea_global_maven.png" alt="全局配置maven"></p><p>4.Maven默认web项目中的web.xml版本问题</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea_default_webxml.png" alt="idea默认生成的web appliaction版本"></p><p><strong>解决方案</strong>：IDEA自带的这个版本太老，应参考Tomcat中的文件Tomcat\apache-tomcat-9.0.41\webapps\ROOT\WEB-INF\web.xml，查到最佳版本为4.0,，将IDEA中的web.xml替换为Tomcat中web.xml的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-tag"><span class="hljs-string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.Maven仓库的使用</p><p>Maven仓库官网：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h2 id="6-Servlet"><a href="#6-Servlet" class="headerlink" title="6. Servlet"></a>6. Servlet</h2><h3 id="6-1-Servlet简介"><a href="#6-1-Servlet简介" class="headerlink" title="6.1 Servlet简介"></a>6.1 Servlet简介</h3><ul><li><p>Servlet就是sun公司开发动态web的一门技术</p></li><li><p>Sun公司在这些API中提供一个接口，叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：</p><ul><li>编写一个类，实现Servlet接口</li><li>把开发好的java类部署到web服务器中</li></ul></li></ul><p><strong>把实现了Servlet接口的java程序叫做，Servlet</strong></p><h3 id="6-2-HelloServlet"><a href="#6-2-HelloServlet" class="headerlink" title="6.2 HelloServlet"></a>6.2 HelloServlet</h3><p>Servlet接口在Sun公司有两个默认的实现类：HttpServlet、GenericServlet</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/servlet_extends.png" alt="servlet实现接口"></p><ol><li><p>构建一个普通的Maven项目，删掉里面的src目录，以后就在这个项目里面建立module；这个空的工程就是Maven的主工程；</p></li><li><p>关于Maven父子工程的理解：</p><p>父项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>servlet-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父项目中的java子项目可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">son extends parent<br></code></pre></td></tr></table></figure></li><li><p>Maven环境优化</p><ul><li>修改web.xml为最新的</li><li>编写一个</li></ul></li><li><p>编写一个Servlet程序</p><ul><li><p>编写一个普通类</p></li><li><p>实现Servlet接口，这里我们直接继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-comment">// 由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 响应流</span><br>        PrintWriter writer = resp.getWriter();<br><br>        writer.print(<span class="hljs-string">&quot;hello,Servlet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><ol start="5"><li><p>编写Servlet的映射</p><p>为什么需要映射：这里写的是Java程序，但是要通过浏览器访问，而浏览器需要连接web服务器。所以，我们需要在web服务中注册我们写的Servlet，还需给它一个浏览器能够访问的路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--注册Servlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--Servlet的请求路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat</p><p>注意：如果添加artifacts消失，刷新一下项目</p></li><li><p>启动测试</p></li></ol><h3 id="6-3-Servlet运行原理"><a href="#6-3-Servlet运行原理" class="headerlink" title="6.3 Servlet运行原理"></a>6.3 Servlet运行原理</h3><p>Servlet是由Web服务器（Tomcat）调用的，web服务器在收到浏览器请求会后，会：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/servlet_yuanli.png" alt="Servlet运行原理"></p><h3 id="6-4-Mapping问题"><a href="#6-4-Mapping问题" class="headerlink" title="6.4 Mapping问题"></a>6.4 Mapping问题</h3><ol><li><p>一个Servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello3<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>默认请求路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>指定一些后缀或者前缀等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以自定义后缀实现请求映射--&gt;</span><br><span class="hljs-comment">&lt;!--注意点：*前面不能加映射的路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>优先级问题</p><p>制定了固有的映射路径优先级最高，如果找不到就会找默认的请求路径处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--404--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.ErrorServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-5-ServletContext"><a href="#6-5-ServletContext" class="headerlink" title="6.5 ServletContext"></a>6.5 ServletContext</h3><p>web容器<strong>在启动的时候</strong>，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用。</p><h4 id="6-5-1-共享数据"><a href="#6-5-1-共享数据" class="headerlink" title="6.5.1 共享数据"></a>6.5.1 共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个Servlet中拿到</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/servletContext_shareData.png" alt="共享数据"></p><p>放数据的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        <span class="hljs-comment">//        this.getInitParameter() 初始化参数</span><br><br>        <span class="hljs-comment">//        this.getServletConfig() Servlet配置</span><br><br>        <span class="hljs-comment">//        this.getServletContext() Servlet上下文</span><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><br>        String userName = <span class="hljs-string">&quot;乔威&quot;</span>; <span class="hljs-comment">// 数据</span><br>        context.setAttribute(<span class="hljs-string">&quot;userName&quot;</span>,userName); <span class="hljs-comment">//将一个数据保存在ServletContext中，key:userName,value:userName</span><br><br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读数据的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><br>        String userName = (String) context.getAttribute(<span class="hljs-string">&quot;userName&quot;</span>);<br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.getWriter().print(userName);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/getc<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要先访问/hello页面，让它放数据，再访问/getc页面拿数据，否则如果直接访问/getc页面，会显示null</p><h4 id="6-5-2-获取初始化参数"><a href="#6-5-2-获取初始化参数" class="headerlink" title="6.5.2 获取初始化参数"></a>6.5.2 获取初始化参数</h4><p>web.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置一些web应用初始化参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><p>servlet-demo中取出这些初始化参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HelloServlet</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>        String url = context.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>        resp.getWriter().print(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-5-3-请求转发"><a href="#6-5-3-请求转发" class="headerlink" title="6.5.3 请求转发"></a>6.5.3 请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo04</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><br>        <span class="hljs-comment">// 转发的请求路径</span><br>        <span class="hljs-comment">//        RequestDispatcher dispatcher = context.getRequestDispatcher(&quot;/demo3&quot;);</span><br>        <span class="hljs-comment">// 调用 forward 方法实现请求转发</span><br>        <span class="hljs-comment">//        dispatcher.forward(req,resp);</span><br>        context.getRequestDispatcher(<span class="hljs-string">&quot;/demo3&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/servletContext_request_dispather.png" alt="请求转发"></p><h4 id="6-5-4-读取资源文件"><a href="#6-5-4-读取资源文件" class="headerlink" title="6.5.4 读取资源文件"></a>6.5.4 读取资源文件</h4><p>Properties</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现：都被打包到了同一个路径下：classes，俗称这个路径为classPath</p><p>思路：需要一个文件流：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">zuiweizhiming666</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet05</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        InputStream is = <span class="hljs-keyword">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<br><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.load(is);<br><br>        String username = prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        resp.getWriter().print(username + <span class="hljs-string">&quot;:&quot;</span> + password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-6-HttpServletReponse"><a href="#6-6-HttpServletReponse" class="headerlink" title="6.6 HttpServletReponse"></a>6.6 HttpServletReponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServiceRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><h4 id="6-6-1-简单分类"><a href="#6-6-1-简单分类" class="headerlink" title="6.6.1 简单分类"></a>6.6.1 简单分类</h4><p><strong>负责向浏览器发送数据的方法</strong>：</p><ul><li><pre><code class="java">// 在HttpServletResponse继承的ServletResponse中的方法ServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>**负责向浏览器发送响应头的方法**<br><br>+ ```java<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setCharacterEncoding</span><span class="hljs-params">(<span class="hljs-keyword">String</span> var1)</span></span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> var1)</span></span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentLengthLong</span><span class="hljs-params">(<span class="hljs-keyword">long</span> var1)</span></span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentType</span><span class="hljs-params">(<span class="hljs-keyword">String</span> var1)</span></span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> var1)</span></span>;<br></code></pre></td></tr></table></figure></code></pre></li></ul><p><strong>状态码定义</strong></p><ul><li><pre><code class="java">int SC_CONTINUE = 100;int SC_SWITCHING_PROTOCOLS = 101;int SC_OK = 200;int SC_CREATED = 201;int SC_ACCEPTED = 202;int SC_NON_AUTHORITATIVE_INFORMATION = 203;int SC_NO_CONTENT = 204;int SC_RESET_CONTENT = 205;int SC_PARTIAL_CONTENT = 206;int SC_MULTIPLE_CHOICES = 300;int SC_MOVED_PERMANENTLY = 301;int SC_MOVED_TEMPORARILY = 302;int SC_FOUND = 302;int SC_SEE_OTHER = 303;int SC_NOT_MODIFIED = 304;int SC_USE_PROXY = 305;int SC_TEMPORARY_REDIRECT = 307;int SC_BAD_REQUEST = 400;int SC_UNAUTHORIZED = 401;int SC_PAYMENT_REQUIRED = 402;int SC_FORBIDDEN = 403;int SC_NOT_FOUND = 404;int SC_METHOD_NOT_ALLOWED = 405;int SC_NOT_ACCEPTABLE = 406;int SC_PROXY_AUTHENTICATION_REQUIRED = 407;int SC_REQUEST_TIMEOUT = 408;int SC_CONFLICT = 409;int SC_GONE = 410;int SC_LENGTH_REQUIRED = 411;int SC_PRECONDITION_FAILED = 412;int SC_REQUEST_ENTITY_TOO_LARGE = 413;int SC_REQUEST_URI_TOO_LONG = 414;int SC_UNSUPPORTED_MEDIA_TYPE = 415;int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;int SC_EXPECTATION_FAILED = 417;int SC_INTERNAL_SERVER_ERROR = 500;int SC_NOT_IMPLEMENTED = 501;int SC_BAD_GATEWAY = 502;int SC_SERVICE_UNAVAILABLE = 503;int SC_GATEWAY_TIMEOUT = 504;int SC_HTTP_VERSION_NOT_SUPPORTED = 505;<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br>#### <span class="hljs-number">6.6</span><span class="hljs-number">.2</span> 常见应用<br><br><span class="hljs-number">1.</span> 向浏览器输出消息（getWriter再print）<br><br>#### <span class="hljs-number">6.6</span><span class="hljs-number">.3</span> 下载文件<br><br><span class="hljs-number">1.</span> 要获取下载文件的路径<br><span class="hljs-number">2.</span> 下载的文件名是啥<br><span class="hljs-number">3.</span> 设置想办法让浏览器能够支持下载需要的东西<br><span class="hljs-number">4.</span> 获取下载文件的输入流<br><span class="hljs-number">5.</span> 创建缓冲区buffer<br><span class="hljs-number">6.</span> 获取<span class="hljs-type">OutputStream</span>对象<br><span class="hljs-number">7.</span> 将<span class="hljs-type">FileInputStream</span>流写入到buffer缓冲区<br><span class="hljs-number">8.</span> 使用<span class="hljs-type">OutputStream</span>将缓冲区中的数据输出到客户端<br><br><span class="hljs-type">Java</span>文件下载代码<br><br>```java<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-comment">//    1. 要获取下载文件的路径</span><br>        <span class="hljs-type">String</span> path = <span class="hljs-string">&quot;F:\\360MoveData\\Users\\M\\Desktop\\学习\\JavaWebStudy\\javaweb-02-servlet\\response\\target\\classes\\弹幕.png&quot;</span>;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;下载文件的路径为：&quot;</span> + path);<br>        <span class="hljs-comment">//    2. 下载的文件名是啥</span><br>        <span class="hljs-type">String</span> fileName = path.substring(path.lastIndexOf(<span class="hljs-string">&quot;//&quot;</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//    3. 设置想办法让浏览器能够支持(Content-Disposition)下载需要的东西，中文文件明URLEncoder.encode编码，否则可能有乱码</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span> + <span class="hljs-type">URLEncoder</span>.encode(fileName,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        <span class="hljs-comment">//    4. 获取下载文件的输入流</span><br>        <span class="hljs-type">FileInputStream</span> fis = <span class="hljs-keyword">new</span> <span class="hljs-type">FileInputStream</span>(path);<br>        <span class="hljs-comment">//    5. 创建缓冲区buffer</span><br>        int len = <span class="hljs-number">0</span>;<br>        byte[] buffer = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">1024</span>];<br>        <span class="hljs-comment">//    6. 获取OutputStream对象</span><br>        <span class="hljs-type">ServletOutputStream</span> os = resp.getOutputStream();<br>        <span class="hljs-comment">//    7. 将FileInputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端</span><br>        <span class="hljs-keyword">while</span> ((len = fis.read(buffer)) &gt;<span class="hljs-number">0</span>) &#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        fis.close();<br>        os.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul><h4 id="6-6-4-验证码功能"><a href="#6-6-4-验证码功能" class="headerlink" title="6.6.4 验证码功能"></a>6.6.4 验证码功能</h4><p>验证码从何而来？</p><ul><li><p>前端实现</p></li><li><p>后端实现，需要用到 Java 的图片类，生产一个图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atrox.servlet;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        <span class="hljs-comment">// 如何让浏览器3秒自动刷新一次</span><br>        resp.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);<br>        <span class="hljs-comment">// 在内存中创建一个图片</span><br>        BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(<span class="hljs-number">80</span>,<span class="hljs-number">20</span>,BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">// 得到图片</span><br>        Graphics2D graphics = (Graphics2D) image.getGraphics(); <span class="hljs-comment">//画笔</span><br>        <span class="hljs-comment">// 设置图片的背景颜色</span><br>        graphics.setColor(Color.white);<br>        graphics.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">80</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">// 给图片写数据</span><br>        graphics.setColor(Color.blue);<br>        graphics.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-keyword">null</span>,Font.BOLD, <span class="hljs-number">20</span>));<br>        graphics.drawString(makeNum(), <span class="hljs-number">0</span>, <span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">// 告诉浏览器，这个请求用图片的方式打开</span><br>        resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>        <span class="hljs-comment">// 网站存在缓存，不让浏览器缓存</span><br>        resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>, -<span class="hljs-number">1</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Cache-control&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br><br>        <span class="hljs-comment">//把图片写给浏览器</span><br>        ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());<br><br>    &#125;<br><br>    <span class="hljs-comment">// 生成随机数</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">makeNum</span><span class="hljs-params">()</span> </span>&#123;<br><br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        String num = random.nextInt(<span class="hljs-number">9999999</span>) + <span class="hljs-string">&quot;&quot;</span>;<br>        StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span> - num.length(); i++) &#123;<br>            sb.append(<span class="hljs-string">&quot;0&quot;</span>);<br>        &#125;<br>        String s = sb.toString() + num;<br>        <span class="hljs-keyword">return</span> num;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="6-6-5-实现重定向"><a href="#6-6-5-实现重定向" class="headerlink" title="6.6.5 实现重定向"></a>6.6.5 实现重定向</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redirect.png" alt="重定向问题"></p><p>一个web资源受到客户端请求后，会通知客户端去访问另外一个web资源，这个过程为重定向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendRedirect</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> IOException</span>;<br></code></pre></td></tr></table></figure><p>常见场景：</p><ul><li>用户登录`</li></ul><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>, <span class="hljs-string">&quot;/response_war/img&quot;</span>);<br>    resp.setStatus(<span class="hljs-number">302</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题</strong>：请你聊聊重定向和转发的区别</p><p>相同点：</p><ul><li>页面都会实现跳转</li></ul><p>不同点：</p><ul><li>请求转发的时候，url不会产生变化</li><li>重定向的时候，url地址栏会发生变化；</li></ul><h3 id="6-7-HttpServletRequest"><a href="#6-7-HttpServletRequest" class="headerlink" title="6.7 HttpServletRequest"></a>6.7 HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获取客户端的所有信息：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/httpServletRequest_get.png" alt="可以获取的客户端信息"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/client_info.png" alt="客户端的信息"></p><h4 id="6-7-1-获取前端传递的参数-请求转发"><a href="#6-7-1-获取前端传递的参数-请求转发" class="headerlink" title="6.7.1 获取前端传递的参数,请求转发"></a>6.7.1 获取前端传递的参数,请求转发</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/request_get_paras.png" alt="获取前端传递参数"></p><p>前端JSP页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;div style=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;<br>        &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>            用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userName&quot;</span>&gt; &lt;br&gt;<br>            密码：&lt;input type=<span class="hljs-string">&quot;pawwpord&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt; &lt;br&gt;<br>            爱好：<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;女孩&quot;</span>&gt;女孩<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;代码&quot;</span>&gt;代码<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;电影&quot;</span>&gt;电影<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;唱歌&quot;</span>&gt;唱歌<br>            &lt;br&gt;<br>            &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>        &lt;/form&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>登录成功JSP页面:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;登录成功&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;登录成功&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>获取前端参数，请求转发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    String userName = req.getParameter(<span class="hljs-string">&quot;userName&quot;</span>);<br>    String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    String[] hobbies = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br>    System.out.println(userName);<br>    System.out.println(password);<br>    System.out.println(Arrays.toString(hobbies));<br>    System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br><br>    <span class="hljs-comment">// 通过请求转发</span><br>    <span class="hljs-comment">// 这里的 / 代表当前的web应用</span><br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题：</strong>请你聊聊重定向和转发的区别？</p><p>相同点：</p><ul><li>页面都会实现跳转</li></ul><p>不同点：</p><ul><li>请求转发的时候，url不会产生变化；307</li><li>重定向的时候，url地址栏产生变化；302</li></ul><h3 id="6-8-Cookie和Session"><a href="#6-8-Cookie和Session" class="headerlink" title="6.8 Cookie和Session"></a>6.8 Cookie和Session</h3><h4 id="6-8-1-会话"><a href="#6-8-1-会话" class="headerlink" title="6.8.1 会话"></a>6.8.1 会话</h4><p><strong>会话</strong>：用户打开一个浏览器，点击了某些超链接，访问多个web资源，关闭浏览器。这个过程，可以称为会话。</p><p><strong>有状态会话</strong>：一个同学来过教师，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话。</p><p><strong>例子</strong>：如何证明你是某大学的学生？</p><ul><li><p>报名缴费的发票  学校给你发票</p></li><li><p>学校登记       学校标记你来过了</p></li></ul><p><strong>那对于一个网站，如何证明你来过呢？</strong></p><p>客户端   服务端</p><p>1.服务端给客户端一个信件，客户端下次访问服务端带上信件就可以了。</p><p>2.服务器登记你来过了，下次你来的时候我来匹配你。</p><h4 id="6-8-2-保存会话的两种技术"><a href="#6-8-2-保存会话的两种技术" class="headerlink" title="6.8.2 保存会话的两种技术"></a>6.8.2 保存会话的两种技术</h4><p><strong>cookie</strong></p><ul><li>客户端技术（响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息。我们可以把信息或者数据放在session中。</li></ul><p>常见例子：网站登录之后，下次不用再登录；第二次访问直接就登录上去了。</p><h4 id="6-8-3-Cookie"><a href="#6-8-3-Cookie" class="headerlink" title="6.8.3 Cookie"></a>6.8.3 Cookie</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cookie_picture.png" alt="cookie的处理方式"></p><ol><li><p>从请求中拿到cookie信息</p></li><li><p>服务器响应给客户端cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = req.getCookies(); <span class="hljs-comment">// 获得cookie</span><br>cookie.getName() <span class="hljs-comment">// 获得cookie中的key</span><br>cookie.getValue() <span class="hljs-comment">// 获得cookie中的value</span><br><span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 新建一个cookie</span><br>cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>); <span class="hljs-comment">// 设置cookie的有效期</span><br>resp.addCookie(cookie); <span class="hljs-comment">// 响应给客户端一个cookie</span><br></code></pre></td></tr></table></figure></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    <span class="hljs-comment">// 服务器，告诉你，你来的时间，把这个时间封装成为一个 信件，你下次带来，我就知道你来了</span><br><br>    <span class="hljs-comment">// 解决中文乱码</span><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    PrintWriter out = resp.getWriter();<br><br>    <span class="hljs-comment">// Cookie，服务器端从客户端获取 这里返回数组，说明Cookie可能存在多个</span><br>    Cookie[] cookies = req.getCookies();<br><br>    <span class="hljs-comment">// 判断Cookie是否存在</span><br>    <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 如果存在怎么办</span><br>        out.write(<span class="hljs-string">&quot;你上一次访问的时间为：&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cookies.length; i++) &#123;<br>            Cookie cookie = cookies[i];<br>            <span class="hljs-comment">// 获取cookie的名字</span><br>            <span class="hljs-keyword">if</span> (cookie.getName().equals(<span class="hljs-string">&quot;lastLoginTime&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 获取cookie中的值</span><br>                <span class="hljs-keyword">long</span> lastLoginTime = Long.parseLong(cookie.getValue());<br>                Date date = <span class="hljs-keyword">new</span> Date(lastLoginTime);<br>                out.write(date.toLocaleString());<br>            &#125;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        out.write(<span class="hljs-string">&quot;这是您第一次访问本站&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 服务器给客户端响应一个cookie</span><br>    Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">// cookie有效期为1天 浏览器关掉后cookie仍然存在</span><br>    cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<br>    resp.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure><p>   <strong>浏览器里的Application</strong></p><p>   <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/browser_application_cookie.png" alt="浏览器Application里的cookie"></p><p><strong>请求和响应中的cookie</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/browser_network_cookie.png" alt="浏览器抓包中的cookie"></p><p><strong>cookie</strong>:<strong>一般会保存在本地的用户目录下AppData</strong></p><p><strong>思考</strong>：一个网站cookie是否存在上限？<strong>细节问题</strong></p><ul><li>一个cookie只能保存一个信息</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li><li>cookie大小有限制4kb</li><li>300个cookie为浏览器上限</li></ul><p><strong>删除cookie</strong>：</p><ul><li>不设置<strong>有效期</strong> cookie.setMaxAge()</li><li>设置有效期时间为 0，</li></ul><p><strong>设置cookie和取cookie时的编码和解码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;name&quot;</span>, URLEncoder.encode(<span class="hljs-string">&quot;乔威&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>));<br>out.write(URLDecoder.decode(cookie.getValue(),<span class="hljs-string">&quot;utf-8&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="6-8-4-Session（重点）"><a href="#6-8-4-Session（重点）" class="headerlink" title="6.8.4 Session（重点）"></a>6.8.4 Session（重点）</h4><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/session_picture.png" alt="session的处理"></p><p>什么是Session：</p><ul><li><p>服务器会给<strong>每一个用户（浏览器）</strong>创建一个Session对象</p></li><li><p>一个Session独占一个浏览器，只要浏览器没有关闭，这个Seesion就存在；</p></li><li><p>用户登录之后，整个网站它都可以访问。—&gt;保存用户的信息；保存购物车的信息</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/httpSession_methods.png" alt="httpSession方法"></p><p><strong>Session和Cookie的区别</strong>：</p><ul><li><p>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个，理解为通行证）</p></li><li><p>Session把用户的数据写到用户独占的Session中，服务器端保存（保存重要的信息，减少服务器资源的浪费，理解为用户信息）</p></li><li><p>Session对象由服务器创建</p></li></ul><p><strong>Session使用场景</strong>：</p><ul><li><p>保存一个登陆用户的信息</p></li><li><p>购物车信息；</p></li><li><p>在整个网站中经常会使用的数据，我们将它保存在Session中</p></li></ul><p><strong>使用Session</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    <span class="hljs-comment">// 解决乱码问题</span><br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>    <span class="hljs-comment">// 得到Session</span><br>    HttpSession session = req.getSession();<br><br>    <span class="hljs-comment">// 给Session中存信息</span><br>    session.setAttribute(<span class="hljs-string">&quot;personInfo&quot;</span>, <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;乔威&quot;</span>, <span class="hljs-number">20</span>));<br><br>    <span class="hljs-comment">// 获取Session的ID</span><br>    String sessionId = session.getId();<br><br>    <span class="hljs-comment">// 判断Session是不是新创建的</span><br>    <span class="hljs-keyword">if</span> (session.isNew()) &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;session创建成功，ID：&quot;</span> + sessionId);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;session已经在服务器中存在了，ID：&quot;</span> + sessionId);<br>    &#125;<br><br>    <span class="hljs-comment">// Session创建的时候做了什么事情;</span><br>    <span class="hljs-comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, sessionId);</span><br>    <span class="hljs-comment">//        resp.addCookie(cookie);</span><br><br>    <span class="hljs-comment">// Session在浏览器打开的一瞬间就存在了，关闭时自动消失，不需要像Cookie一样手动addCookie</span><br>&#125;<br><br><span class="hljs-comment">// 得到Session</span><br>        HttpSession session = req.getSession();<br><br>        Person person = (Person) session.getAttribute(<span class="hljs-string">&quot;personInfo&quot;</span>);<br><br>        System.out.println(person.toString());<br><br><span class="hljs-comment">// 手动注销Session</span><br>        session.invalidate();<br></code></pre></td></tr></table></figure><p>会话自动过期：在web.xml中设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置Session默认的失效时间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--一天后Session自动失效，以分钟为单位--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>1440<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-JSP"><a href="#7-JSP" class="headerlink" title="7. JSP"></a>7. JSP</h2><h3 id="7-1-什么是JSP"><a href="#7-1-什么是JSP" class="headerlink" title="7.1 什么是JSP"></a>7.1 什么是JSP</h3><p>Java Server Pages：Java服务器端页面，也和Servlet一样，用于开发动态web</p><p>最大的特点：</p><ul><li>写JSP就像在写HTML</li><li>区别：<ul><li>HTML只给用户提供静态的数据</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据</li></ul></li></ul><h3 id="7-2-JSP原理"><a href="#7-2-JSP原理" class="headerlink" title="7.2 JSP原理"></a>7.2 JSP原理</h3><p><strong>思路</strong>：JSP到底是如何执行的？</p><ul><li><p>代码层面没有任何问题</p></li><li><p>服务器内部工作</p><p>tomcat中有一个work目录：</p><p>IDEA中使用Tomcat的话，会在IDEA的Tomcat中生成一个work目录</p><p>在我的电脑的目录：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">C:\Users\M\AppData\Local\JetBrains\IntelliJIdea2020<span class="hljs-number">.1</span>\tomcat\Tomcat_9_0_41_javaweb<span class="hljs-number">-02</span>-servlet\work\Catalina\localhost\requestTest_war\org\apache\jsp<br></code></pre></td></tr></table></figure><p>发现页面转变成了java程序</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jsp_work.png" alt="页面变为了java程序"></p><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet!</strong></p><p>服务器在执行jsp的时候，首先把jsp翻译成一个Servlet，所以我们访问jsp时，其实不是在访问jsp，而是在访问jsp翻译过后的那个Servlet，例如下面的代码：</p><p><strong>index.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.*&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%<br>String path = request.getContextPath();<br>String basePath = request.getScheme()+<span class="hljs-string">&quot;://&quot;</span>+request.getServerName()+<span class="hljs-string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br><br>&lt;!DOCTYPE HTML PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br><br>    &lt;title&gt;First Jsp&lt;/title&gt;<br><br>  &lt;/head&gt;<br><br>  &lt;body&gt;<br>    &lt;%<br>        out.print(<span class="hljs-string">&quot;Hello Jsp&quot;</span>);<br>    %&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>当我们通过浏览器访问index.jsp时，服务器首先将index.jsp翻译成一个index_jsp.class，在Tomcat服务器的<strong>work\Catalina\localhost\项目名\org\apache\jsp</strong>目录下可以看到index_jsp.class的源代码文件index_jsp.java，index_jsp.java的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.jsp;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index_jsp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">jasper</span>.<span class="hljs-title">runtime</span>.<span class="hljs-title">HttpJspBase</span></span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">jasper</span>.<span class="hljs-title">runtime</span>.<span class="hljs-title">JspSourceDependent</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JspFactory _jspxFactory = JspFactory.getDefaultFactory();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> java.util.List _jspx_dependants;<br><br>  <span class="hljs-keyword">private</span> javax.el.ExpressionFactory _el_expressionfactory;<br>  <span class="hljs-keyword">private</span> org.apache.AnnotationProcessor _jsp_annotationprocessor;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getDependants</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> _jspx_dependants;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();<br>    _jsp_annotationprocessor = (org.apache.AnnotationProcessor) getServletConfig().getServletContext().getAttribute(org.apache.AnnotationProcessor.class.getName());<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> java.io.IOException, ServletException </span>&#123;<br><br>    PageContext pageContext = <span class="hljs-keyword">null</span>;<br>    HttpSession session = <span class="hljs-keyword">null</span>;<br>    ServletContext application = <span class="hljs-keyword">null</span>;<br>    ServletConfig config = <span class="hljs-keyword">null</span>;<br>    JspWriter out = <span class="hljs-keyword">null</span>;<br>    Object page = <span class="hljs-keyword">this</span>;<br>    JspWriter _jspx_out = <span class="hljs-keyword">null</span>;<br>    PageContext _jspx_page_context = <span class="hljs-keyword">null</span>;<br><br><br>    <span class="hljs-keyword">try</span> &#123;<br>      response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>      pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,<br>                  <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-keyword">true</span>);<br>      _jspx_page_context = pageContext;<br>      application = pageContext.getServletContext();<br>      config = pageContext.getServletConfig();<br>      session = pageContext.getSession();<br>      out = pageContext.getOut();<br>      _jspx_out = out;<br><br>      out.write(<span class="hljs-string">&#x27;\r&#x27;</span>);<br>      out.write(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br>String path = request.getContextPath();<br>String basePath = request.getScheme()+<span class="hljs-string">&quot;://&quot;</span>+request.getServerName()+<span class="hljs-string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="hljs-string">&quot;/&quot;</span>;<br><br>      out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;!DOCTYPE HTML PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot;&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;html&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  &lt;head&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;    &lt;base href=\&quot;&quot;</span>);<br>      out.print(basePath);<br>      out.write(<span class="hljs-string">&quot;\&quot;&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;    \r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;    &lt;title&gt;First Jsp&lt;/title&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;\t\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  &lt;/head&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  \r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  &lt;body&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;    &quot;</span>);<br><br>        out.print(<span class="hljs-string">&quot;Hello Jsp&quot;</span>);<br><br>      out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  &lt;/body&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;/html&gt;\r\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">if</span> (!(t <span class="hljs-keyword">instanceof</span> SkipPageException))&#123;<br>        out = _jspx_out;<br>        <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span> &amp;&amp; out.getBufferSize() != <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">try</span> &#123; out.clearBuffer(); &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;&#125;<br>        <span class="hljs-keyword">if</span> (_jspx_page_context != <span class="hljs-keyword">null</span>) _jspx_page_context.handlePageException(t);<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      _jspxFactory.releasePageContext(_jspx_page_context);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到，index_jsp这个类是继承 org.apache.jasper.runtime.<strong>HttpJspBase</strong>这个类的</p><p>通过导入Jasper Runtime包拿到了这个类，发现它的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by Fernflower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> org.apache.jasper.runtime;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.HttpJspPage;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.JspFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.logging.LogFactory;<br><span class="hljs-keyword">import</span> org.apache.jasper.compiler.Localizer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpJspBase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpJspPage</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">HttpJspBase</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <span class="hljs-keyword">super</span>.init(config);<br>        <span class="hljs-keyword">this</span>.jspInit();<br>        <span class="hljs-keyword">this</span>._jspInit();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Localizer.getMessage(<span class="hljs-string">&quot;jsp.engine.info&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.jspDestroy();<br>        <span class="hljs-keyword">this</span>._jspDestroy();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>._jspService(request, response);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> ServletException, IOException</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">if</span> (JspFactory.getDefaultFactory() == <span class="hljs-keyword">null</span>) &#123;<br>            JspFactoryImpl factory = <span class="hljs-keyword">new</span> JspFactoryImpl();<br>            <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span>) &#123;<br>                String basePackage = <span class="hljs-string">&quot;org.apache.jasper.&quot;</span>;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.JspFactoryImpl$PrivilegedGetPageContext&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.JspFactoryImpl$PrivilegedReleasePageContext&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.JspRuntimeLibrary&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.JspRuntimeLibrary$PrivilegedIntrospectHelper&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.ServletResponseWrapperInclude&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;servlet.JspServletWrapper&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var3) &#123;<br>                    LogFactory.getLog(HttpJspBase.class).error(<span class="hljs-string">&quot;Jasper JspRuntimeContext preload of class failed: &quot;</span> + var3.getMessage(), var3);<br>                &#125;<br>            &#125;<br><br>            JspFactory.setDefaultFactory(factory);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现HttpJspBase类是继承于HttpServlet的，所以HttpJspBase类也是一个Servlet，而index_jsp又是继承HttpJspBase类的，所以index_jsp类也是一个Servlet；</p><p>对比index_jsp.java和index.jsp 发现其中的标签最终在index_jsp.java中都是用out.write()方法手动去实现的，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jsp_work_compare.png" alt="对比图"></p></li></ul><p>所以说：<strong>JSP本质上就是一个Servlet！</strong></p><p>我们从index_jsp.java中的一些方法可以更深刻的体会这一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始化</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>  &#125;<br><span class="hljs-comment">// 销毁</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>  &#125;<br><span class="hljs-comment">// JSPService</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(<span class="hljs-keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="hljs-keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span><br></code></pre></td></tr></table></figure><p><strong>JSP又做了什么事情呢</strong>？(即讲解JspService方法中的内容)</p><ol><li><p>判断请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;<br>    <span class="hljs-keyword">final</span> java.lang.String _jspx_method = request.getMethod();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;OPTIONS&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;GET&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;POST&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;HEAD&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="hljs-string">&quot;JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>内置了一些对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext; <span class="hljs-comment">// 页面上下文</span><br>javax.servlet.http.HttpSession session = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// session</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletContext application; <span class="hljs-comment">// applicaiton</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletConfig config; <span class="hljs-comment">// config配置</span><br>javax.servlet.jsp.JspWriter out = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// out输出对象</span><br><span class="hljs-keyword">final</span> java.lang.Object page = <span class="hljs-keyword">this</span>; <span class="hljs-comment">// page:</span><br>javax.servlet.jsp.JspWriter _jspx_out = <span class="hljs-keyword">null</span>;<br>javax.servlet.jsp.PageContext _jspx_page_context = <span class="hljs-keyword">null</span>;<br>HttpServletRequest request <span class="hljs-comment">// 请求</span><br>HttpServletResponse response <span class="hljs-comment">// 响应</span><br></code></pre></td></tr></table></figure></li><li><p>输出页面前增加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>); <span class="hljs-comment">// 设置响应的页面类型</span><br>pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,<br>                                          <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-keyword">true</span>);<br>_jspx_page_context = pageContext; <br>application = pageContext.getServletContext();<br>config = pageContext.getServletConfig();<br>session = pageContext.getSession();<br>out = pageContext.getOut();<br>_jspx_out = out;<br></code></pre></td></tr></table></figure></li><li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p></li><li><p>JSP原理流程图</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JSP_yuanli.png" alt="JSP原理流程图"></p></li></ol><h3 id="7-3-JSP基础语法和指令"><a href="#7-3-JSP基础语法和指令" class="headerlink" title="7.3 JSP基础语法和指令"></a>7.3 JSP基础语法和指令</h3><p>任何语言都有自己的语法，JAVA中有，JSP作为java技术的一种应用，它拥有一些自己扩充的语法，java所有语法它都支持。</p><h4 id="7-3-1-JSP表达式"><a href="#7-3-1-JSP表达式" class="headerlink" title="7.3.1 JSP表达式"></a><strong>7.3.1 JSP表达式</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>    JSP表达式作用：用来将程序的输出，输出到客户端<br>--%&gt;<br>&lt;%= <span class="hljs-keyword">new</span> java.util.Date()%&gt;<br></code></pre></td></tr></table></figure><h4 id="7-3-2-JSP脚本判断"><a href="#7-3-2-JSP脚本判断" class="headerlink" title="7.3.2 JSP脚本判断"></a><strong>7.3.2 JSP脚本判断</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>    JSP脚本片段<br>  --%&gt;<br>&lt;%<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>        sum += i;<br>    &#125;<br>    out.println(<span class="hljs-string">&quot;&lt;h1&gt;Sum=&quot;</span> + sum + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="7-3-3-脚本片段的再实现"><a href="#7-3-3-脚本片段的再实现" class="headerlink" title="7.3.3 脚本片段的再实现"></a><strong>7.3.3 脚本片段的再实现</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br>    out.println(x);<br>%&gt;<br>&lt;p&gt;这是一个jsp文档&lt;/p&gt;<br>&lt;%<br>    <span class="hljs-keyword">int</span> y = <span class="hljs-number">20</span>;<br>    out.println(y);<br>%&gt;<br><br>&lt;hr&gt;<br><br>&lt;%--在代码中嵌入HTML元素--%&gt;<br>&lt;%<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><br><br>    %&gt;<br>&lt;h1&gt;Hello，world &lt;%=i%&gt;&lt;/h1&gt;<br>&lt;%<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="7-3-4-JSP声明"><a href="#7-3-4-JSP声明" class="headerlink" title="7.3.4 JSP声明"></a><strong>7.3.4 JSP声明</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;Loading Servlet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 全局变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> globalVar = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 全局方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">atrox</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;进入了方法atrox！&quot;</span>);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>JSP声明：会被编译到JSP生成Java的类中！如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JSP%E5%A3%B0%E6%98%8E.png" alt="JSP声明"></p><p>其他的，就会被生成到_jspService方法中！如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JSP%E5%85%B6%E4%BB%96%E4%B8%9C%E8%A5%BF.png" alt="JSP其他东西"></p><p>在JSP中，嵌入java代码即可！</p><h4 id="7-3-5-EL表达式"><a href="#7-3-5-EL表达式" class="headerlink" title="7.3.5 EL表达式"></a><strong>7.3.5 EL表达式</strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;h1&gt;Hello，world $&#123;i&#125;&gt;&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h4 id="7-3-6-注释问题"><a href="#7-3-6-注释问题" class="headerlink" title="7.3.6 注释问题"></a>7.3.6 注释问题</h4><p>JSP的注释不会再客户端显示，而HTML就会！</p><p>在index.jsp中写上如下注释：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--我是jsp注释--%&gt;<br>&lt;!--我是html注释--&gt;<br></code></pre></td></tr></table></figure><p>在浏览器中右键点击查看源代码，发现html注释还在，所有的jsp注释全部都看不到，但是抓包仍然能看到jsp的注释。</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jsp_comment.png" alt="客户端jsp注释不会显示"></p><h3 id="7-4-JSP指令"><a href="#7-4-JSP指令" class="headerlink" title="7.4 JSP指令"></a>7.4 JSP指令</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page args... %&gt;<br>&lt;%@ include<br>    <br>&lt;%--<span class="hljs-meta">@include</span>会将两个从外面引入的页面合二为一--%&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/header.jsp&quot;</span>%&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/footer.jsp&quot;</span>%&gt;<br><br>&lt;%--jsp标签--%&gt;<br>&lt;%--jsp:include：拼接页面，本质还是三个--%&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;common/header.jsp&quot;</span>/&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;common/footer.jsp&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h3 id="7-5-九大内置对象"><a href="#7-5-九大内置对象" class="headerlink" title="7.5 九大内置对象"></a>7.5 九大内置对象</h3><p>写了一个JSP页面，服务器一跑会变成一个.java文件，最后变成一个.class文件，变成class文件的时候会自动创建九个内置对象。</p><ul><li>PageContext  存东西</li><li>Resquest  存东西</li><li>Response</li><li>Session  存东西</li><li>Application【ServletContext】存东西</li><li>config【ServletConfig】</li><li>out</li><li>page ，不用</li><li>exception</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%<br>       <span class="hljs-comment">// 从底层到高层（作用域）：page-&gt;request-&gt;session-application</span><br>       <span class="hljs-comment">// 类比于JVM：双亲委派机制：</span><br>       pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-string">&quot;乔威1号&quot;</span>); <span class="hljs-comment">// 保存的数据只在一个页面中有效</span><br>       request.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>, <span class="hljs-string">&quot;乔威2号&quot;</span>); <span class="hljs-comment">// 保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>       session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>, <span class="hljs-string">&quot;乔威3号&quot;</span>); <span class="hljs-comment">// 保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>       application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>, <span class="hljs-string">&quot;乔威4号&quot;</span>); <span class="hljs-comment">// 保存的数据在服务器中有效，从打开服务器到关闭服务器</span><br>   %&gt;<br></code></pre></td></tr></table></figure><p>request：客户端向服务器发送请求，产生的数据，用户看玩就没用了，比如：新闻。</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完其他用户还可能用，比如：聊天数据；</p><h3 id="7-6-JSP标签、JSTL标签、EL表达式"><a href="#7-6-JSP标签、JSTL标签、EL表达式" class="headerlink" title="7.6 JSP标签、JSTL标签、EL表达式"></a>7.6 JSP标签、JSTL标签、EL表达式</h3><p>需要导包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--JSTL表达式的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--standard标签库--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-6-1-EL表达式："><a href="#7-6-1-EL表达式：" class="headerlink" title="7.6.1 EL表达式："></a>7.6.1 EL表达式：</h4><ul><li><strong>获取数据</strong></li><li><strong>执行运算</strong></li><li><strong>获取web开发的常用对象</strong></li><li><del>调用java方法</del></li></ul><h4 id="7-6-2-JSP标签"><a href="#7-6-2-JSP标签" class="headerlink" title="7.6.2 JSP标签"></a><strong>7.6.2 JSP标签</strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--&lt;jsp:include page=&quot;&quot;&gt;&lt;/jsp:include&gt;--%&gt;<br><br>&lt;jsp:forward page=<span class="hljs-string">&quot;jsptag2.jsp&quot;</span>&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;qiaowei&quot;</span>/&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;20&quot;</span>/&gt;<br>&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure><h4 id="7-6-3-JSTL表达式"><a href="#7-6-3-JSTL表达式" class="headerlink" title="7.6.3 JSTL表达式"></a><strong>7.6.3 JSTL表达式</strong></h4><p><strong>JSTL标签库的使用就是为了弥补HTML标签的不足；</strong>它自定义了许多的标签，可以供我们使用，标签的功能和java代码一样。</p><p><strong>格式化标签</strong></p><p><strong>SQL标签</strong></p><p><strong>XML标签</strong></p><p><strong>核心标签</strong>（掌握部分）</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JSTL_core_tag.png" alt="JSTL核心标签"></p><p><strong>JSTL标签库使用步骤</strong>：</p><ul><li><p>引用对应的taglib</p></li><li><p>使用其中给的方法</p></li><li><p>在Tomcat中也需要手动引入jstl的包到lib目录下，否则会报错：JSTL解析错误</p><p><img src="/posts/2020/12/31/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jstl_tomcat_lib.png" alt="手动导包"></p><p><strong>测试Demo</strong>：</p></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;h4&gt;if测试&lt;/h4&gt;<br><br>&lt;form action=<span class="hljs-string">&quot;coreif.jsp&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;%--<br>        EL表达式获取表单中的数据<br>        $&#123;param.参数名&#125;<br>    --%&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userName&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.userName&#125;&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/form&gt;<br><br>&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;param.userName==&#x27;admin&#x27;&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;isAdmin&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;管理员欢迎你!&quot;</span>/&gt;<br>&lt;/c:if&gt;<br>&lt;c:out value=<span class="hljs-string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/core_tag_demo.png" alt="测试效果"></p><p><strong>测试c:foreach</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    ArrayList&lt;String&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    people.add(<span class="hljs-string">&quot;张三&quot;</span>);<br>    people.add(<span class="hljs-string">&quot;李四&quot;</span>);<br>    people.add(<span class="hljs-string">&quot;王五&quot;</span>);<br>    people.add(<span class="hljs-string">&quot;赵六&quot;</span>);<br>    people.add(<span class="hljs-string">&quot;田七&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,people);<br>%&gt;<br><br>&lt;%--<br><span class="hljs-keyword">var</span>，每一次遍历出来的变量名<br>items，要遍历的对象本身<br>--%&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br>&lt;hr&gt;<br><br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;3&quot;</span> step=<span class="hljs-string">&quot;2&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jstl_tag_foreach.png" alt="测试结果"></p><h2 id="8-JavaBean"><a href="#8-JavaBean" class="headerlink" title="8. JavaBean"></a>8. JavaBean</h2><p>通常把JavaBean称为实体类；</p><p>JavaBean有特定的写法：</p><ul><li>必须有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射 ORM；</p><p>ORM：对象关系映射</p><ul><li>表–&gt;类</li><li>字段–&gt;属性</li><li>行记录—&gt;对象</li></ul><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>乔威1号</td><td>10</td><td>1号路</td></tr><tr><td>2</td><td>乔威2号</td><td>20</td><td>2号路</td></tr><tr><td>3</td><td>乔威3号</td><td>30</td><td>3号路</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> People(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;乔威1号&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;1号路&quot;</span>);<br>    <span class="hljs-keyword">new</span> People(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;乔威2号&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;2号路&quot;</span>);<br>    <span class="hljs-keyword">new</span> People(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;乔威3号&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&quot;3号路&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-MVC三层架构"><a href="#9-MVC三层架构" class="headerlink" title="9.  MVC三层架构"></a>9.  MVC三层架构</h2><p>什么是MVC：Model View Controller 模型 视图 控制器</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mvc.png" alt="早年的MVC架构"></p><p>用户直接访问控制层，控制层就可以直接操作数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">servlet--CRUD--数据库<br>弊端：程序十分臃肿、不利于维护 servlet的代码中:处理请求、响应、试图跳转、处理JDBC、处理业务代码、处理逻辑代码<br>    <br>架构：没有什么是加一层处理不了的！<br>程序员调用<br>    <br>JDBC<br>    <br>Mysql Oracle SqlServer...<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mvc_structure.png" alt="mvc架构"></p><p>Model</p><ul><li>业务处理：业务逻辑（Service）</li><li>数据持久层：CRUD（DAO）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求（a，form，img）</li></ul><p>Controller</p><ul><li><p>接受用户的请求：（req：请求参数、Session信息…）</p></li><li><p>交给业务层处理对应的代码</p></li><li><p>控制视图的跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登陆的参数，username，password）---&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;DAO层查询用户名和密码是否匹配---&gt;操作数据库<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-Fileter过滤器（重点）"><a href="#10-Fileter过滤器（重点）" class="headerlink" title="10. Fileter过滤器（重点）"></a>10. Fileter过滤器（重点）</h2><p>Filter：过滤器，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/filter.png" alt="过滤器流程"></p><h3 id="10-1-filter开发步骤"><a href="#10-1-filter开发步骤" class="headerlink" title="10.1 filter开发步骤"></a>10.1 filter开发步骤</h3><ol><li><p>导包</p></li><li><p>编写过滤器（此处以过滤中文编码为例子），实现Filter接口，重写对应方法</p><ul><li><p>导包不要错（选java.servlet下的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br></code></pre></td></tr></table></figure></li><li><p>编写过滤器的初始状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 销毁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>过滤器最终代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-comment">// 初始化：web服务器启动，就已经初始化了，随时等待过滤对象出现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Chain：链</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1.过滤器中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="hljs-comment">    2.必须要让过滤器继续通行  filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行前...&quot;</span>);<br>        <span class="hljs-comment">// 让我们的请求继续走，如果不写，程序到这里就被拦截停止</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行后...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 销毁：web服务器关闭的时候，过滤器会销毁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>在web.xml中配置Filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.atrox.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--只要是/servlet下的任何请求，都会经过这个过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="11-监听器"><a href="#11-监听器" class="headerlink" title="11.监听器"></a>11.监听器</h2><p>实现一个监听器的接口;（有N中）</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atrox.listener;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class="hljs-comment">// 统计网站在线人数：统计session</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpSessionListener</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建session监听</span><br>    <span class="hljs-comment">// 一旦创建一个Session就会触发一次这个事件！</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionCreated</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext ctx = httpSessionEvent.getSession().getServletContext();<br>        Integer onlineCount = (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onlineCount == <span class="hljs-keyword">null</span>) &#123;<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(count + <span class="hljs-number">1</span>);<br>        &#125;<br><br>        ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br>    &#125;<br><br>    <span class="hljs-comment">// 销毁session监听</span><br>    <span class="hljs-comment">// 一旦销毁Session就会触发一次这个事件！</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext ctx = httpSessionEvent.getSession().getServletContext();<br>        Integer onlineCount = (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onlineCount == <span class="hljs-keyword">null</span>) &#123;<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(count - <span class="hljs-number">1</span>);<br>        &#125;<br><br>        ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>, onlineCount);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Session销毁：</span><br><span class="hljs-comment">    1.手动销毁 getSession().invalidate()</span><br><span class="hljs-comment">    2.自动销毁 web.xml中sessionConfig标签</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>web.xml中注册监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--注册监听器--&gt;<br>    &lt;listener&gt;<br>    &lt;listener-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">atrox</span>.<span class="hljs-title">listener</span>.<span class="hljs-title">OnlineCountListener</span>&lt;/<span class="hljs-title">listener</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">        &lt;/<span class="hljs-title">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>看情况是否使用</p></li></ol><h2 id="12-过滤器、监听器常见应用"><a href="#12-过滤器、监听器常见应用" class="headerlink" title="12. 过滤器、监听器常见应用"></a>12. 过滤器、监听器常见应用</h2><h3 id="12-1-监听器：GUI编程中经常使用"><a href="#12-1-监听器：GUI编程中经常使用" class="headerlink" title="12.1 监听器：GUI编程中经常使用"></a>12.1 监听器：GUI编程中经常使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPanel</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Frame frame = <span class="hljs-keyword">new</span> Frame(<span class="hljs-string">&quot;圣诞节快乐&quot;</span>); <span class="hljs-comment">// 新建一个窗体</span><br>        Panel panel = <span class="hljs-keyword">new</span> Panel(<span class="hljs-keyword">null</span>); <span class="hljs-comment">// 面板</span><br>        frame.setLayout(<span class="hljs-keyword">null</span>); <span class="hljs-comment">// 设置窗体的布局</span><br><br>        frame.setBounds(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>        frame.setBackground(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)); <span class="hljs-comment">// 设置背景颜色</span><br><br>        panel.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>        frame.setBackground(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)); <span class="hljs-comment">// 设置背景颜色</span><br><br>        frame.add(panel);<br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">// 监听事件，监听关闭时间</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowListener() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowOpened</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;打开&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;关闭ing&quot;</span>);<br>                System.out.println(<span class="hljs-number">0</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosed</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;关闭ed&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowIconified</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br><br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowDeiconified</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br><br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowActivated</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;激活&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowDeactivated</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;关闭ed&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-2-用户登录拦截"><a href="#12-2-用户登录拦截" class="headerlink" title="12.2 用户登录拦截"></a>12.2 用户登录拦截</h3><p>用户登录成功之后才能进入主页，用户注销后就不能进入主页了！</p><ol><li><p>用户登录之后，向Session中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>    HttpServletRequest request = (HttpServletRequest) servletRequest;<br>    HttpServletResponse response = (HttpServletResponse) servletResponse;<br><br>    Object user_session = request.getSession().getAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>);<br>    <span class="hljs-keyword">if</span> (user_session == <span class="hljs-keyword">null</span>) &#123;<br>        response.sendRedirect(request.getContextPath()+<span class="hljs-string">&quot;/error.jsp&quot;</span>);<br>    &#125;<br><br>    filterChain.doFilter(servletRequest,servletResponse);<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="13-JDBC"><a href="#13-JDBC" class="headerlink" title="13.JDBC"></a>13.JDBC</h2><p>什么是JDBC：Java连接数据库</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JDBC.png" alt="JDBC"></p><p>需要jar包的支持：</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql.connecter-java…连接驱动（必须要导入）</li></ul><h3 id="13-1-实验环境搭建"><a href="#13-1-实验环境搭建" class="headerlink" title="13.1 实验环境搭建"></a><strong>13.1 实验环境搭建</strong></h3><ul><li><p>导入数据库依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mysql的驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>IDEA中连接数据库</p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea_connect_db1.png" alt="连接数据库第一步"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea_connect_db2.png" alt="连接数据库第二步"></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/idea_connect_db3.png" alt="连接数据库第三步"></p><h3 id="13-2-JDBC固定步骤"><a href="#13-2-JDBC固定步骤" class="headerlink" title="13.2 JDBC固定步骤"></a>13.2 JDBC固定步骤</h3><ol><li><p>加载驱动</p></li><li><p>连接数据库，代表数据库</p></li><li><p>向数据库发送SQL的对象Statement：CRUD</p></li><li><p>编写SQL语句</p></li><li><p>执行查询SQL，返回一个ResultSet结果集</p></li><li><p>关闭连接，释放资源，先开后关</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestJdbc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">// 配置信息</span><br>        <span class="hljs-comment">// useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码问题</span><br>        String url= <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT&quot;</span>;<br>        String username = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;zuiweizhiming666&quot;</span>;<br><br>        <span class="hljs-comment">// 1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">// 2.连接数据库,代表数据库</span><br>        Connection connection = DriverManager.getConnection(url, username, password);<br>        <span class="hljs-comment">// 3.向数据库发送SQL的对象Statement：CRUD</span><br>        Statement statement = connection.createStatement();<br>        <span class="hljs-comment">// 4.编写SQL</span><br>        String sql = <span class="hljs-string">&quot;select * from users&quot;</span>;<br>        <span class="hljs-comment">// 5.执行查询SQL，返回一个ResultSet结果集</span><br>        ResultSet resultSet = statement.executeQuery(sql);<br><br>        <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;id=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;name&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;password=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;password&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;email=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-comment">// 6.关闭连接，释放资源，先开后关</span><br>        resultSet.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-3-预编译SQL"><a href="#13-3-预编译SQL" class="headerlink" title="13.3 预编译SQL"></a>13.3 预编译SQL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestJDBC2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">// 配置信息</span><br>        <span class="hljs-comment">// useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码问题</span><br>        String url= <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT&quot;</span>;<br>        String username = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;zuiweizhiming666&quot;</span>;<br><br>        <span class="hljs-comment">// 1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">// 2.连接数据库,代表数据库</span><br>        Connection connection = DriverManager.getConnection(url, username, password);<br>        <span class="hljs-comment">// 3.编写SQL</span><br>        String sql = <span class="hljs-string">&quot;insert into users(id,name,password,email,birthday) values (?,?,?,?,?)&quot;</span>;<br>        <span class="hljs-comment">// 4.预编译</span><br>        PreparedStatement preparedStatement = connection.prepareStatement(sql);<br>        preparedStatement.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">// 给第1个占位符？ 的值赋值为1</span><br>        preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;qiaowei&quot;</span>); <span class="hljs-comment">// 给第2个占位符？ 的值赋值为qiaowei</span><br>        preparedStatement.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;123456&quot;</span>); <span class="hljs-comment">// 给第3个占位符？ 的值赋值为123456</span><br>        preparedStatement.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;qiaowei@qq.com&quot;</span>); <span class="hljs-comment">// 给第4个占位符？ 的值赋值为qiaowei@qq.com</span><br>        preparedStatement.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> Date(System.currentTimeMillis())); <span class="hljs-comment">// 给第5个占位符？ 的值赋值为当前时间</span><br>        <span class="hljs-comment">// 5.执行SQL</span><br>        <span class="hljs-keyword">int</span> i = preparedStatement.executeUpdate();<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 6.关闭连接，释放资源，先开后关</span><br>      reparedStatement.close();<br>      connection.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="13-4-事务"><a href="#13-4-事务" class="headerlink" title="13.4 事务"></a>13.4 事务</h3><p>要么都成功，要么都失败！</p><p>ACID原则：保证数据的安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">开启事务<br>事务提交 commit()<br>事务回滚 rollback()<br>关闭事务<br>    <br>转账：<br>A：<span class="hljs-number">1000</span><br>B：<span class="hljs-number">1000</span><br>    <br>A(<span class="hljs-number">900</span>) ---<span class="hljs-number">100</span>---&gt; B(<span class="hljs-number">1100</span>)<br></code></pre></td></tr></table></figure><p><strong>junit单元测试</strong></p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简单使用</p><p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 乔威</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-12-25 21:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestJDBC3</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置信息</span><br>        <span class="hljs-comment">// useUnicode=true&amp;characterEncoding= utf-8 解决中文乱码问题</span><br>        String url= <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT&quot;</span>;<br>        String username = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;zuiweizhiming666&quot;</span>;<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 1.加载驱动</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">// 2.连接数据库,代表数据库</span><br>            connection = DriverManager.getConnection(url, username, password);<br><br>            <span class="hljs-comment">// 3.同志数据库开启事务,false是开启，true是关闭</span><br>            connection.setAutoCommit(<span class="hljs-keyword">false</span>);<br><br>            String sql1 = <span class="hljs-string">&quot;update account set money = money - 100 where name = &#x27;A&#x27;&quot;</span>;<br>            connection.prepareStatement(sql1).executeUpdate();<br><br>            <span class="hljs-comment">// 4.制造错误</span><br><span class="hljs-comment">//            int i = 1 / 0;</span><br><br>            String sql2 = <span class="hljs-string">&quot;update account set money = money + 100 where name = &#x27;B&#x27;&quot;</span>;<br>            connection.prepareStatement(sql2).executeUpdate();<br><br>            connection.commit(); <span class="hljs-comment">//以上两条SQL都提交成功了，就提交事务！</span><br>            System.out.println(<span class="hljs-string">&quot;success&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 如果出现异常，就通知数据库回滚害死我</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.rollback();<br>                System.out.println(<span class="hljs-string">&quot;error！&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis学习笔记</title>
    <link href="/posts/2020/12/31/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/posts/2020/12/31/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Introduction"><a href="#1、Introduction" class="headerlink" title="1、Introduction"></a>1、Introduction</h2><h3 id="1-1-What-is-MyBatis？"><a href="#1-1-What-is-MyBatis？" class="headerlink" title="1.1 What is MyBatis？"></a>1.1 What is MyBatis？</h3><p><strong>MyBatis_Logo</strong>:<img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_logo.png" alt="MyBatis_logo" style="zoom:67%;"></p><p><strong>concept</strong>：MyBatis是一款优秀的==持久层框架==，它支持定制化SQL、存储过程以及高级映射。MyBatis避免了几乎所有的<code>JDBC代码</code>和<code>手动设置参数</code>以及<code>获取结果集</code>。MyBatis可以使用简单的<code>XML</code>或<code>注解</code>来配置和映射原生类型、接口和Java的pojo（实体类）为数据库中的记录。</p><p><strong>history</strong>：MyBatis 本是apache的一个开源项目<strong>iBatis</strong>，2010年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由apache software foundation 迁移到了[google code](<a href="https://baike.baidu.com/item/google">https://baike.baidu.com/item/google</a> code/2346604)，并且改名为MyBatis 。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341">Github</a>。</p><h3 id="1-2-How-to-get-MyBatis"><a href="#1-2-How-to-get-MyBatis" class="headerlink" title="1.2 How to get MyBatis?"></a>1.2 How to get MyBatis?</h3><h4 id="1-2-1-download-from-github"><a href="#1-2-1-download-from-github" class="headerlink" title="1.2.1 download from github"></a><strong>1.2.1 download from github</strong></h4><ul><li><p><strong>首先，打开github官网搜索MyBatis，从返回结果中找到==mybatis/mybatis-3==，如下图所示。</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_github.png" alt="mybatis从github下载" style="zoom: 67%;"></li></ul><ul><li><p><strong>点击上图红色矩形圈住的部分，单击点进去看到MyBatis的代码结构，如下图所示。</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_github_code.png" alt="github中MyBatis的具体情况" style="zoom: 67%;"></li></ul><p>  <strong>从源码中的pom.xml文件，我们可以得到，这是一个Maven项目。</strong></p><ul><li><p><strong>那么，如何下载MyBatis项目呢，我们可以点击上图左侧的master，弹出下拉菜单选择下载的版本，或者点击右侧的绿色Code下载按钮，选择下载方式。</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_github_download.png" alt="github上MyBatis的下载方式" style="zoom:75%;"></li></ul><h4 id="1-2-2-maven-dependency"><a href="#1-2-2-maven-dependency" class="headerlink" title="1.2.2 maven dependency"></a>1.2.2 maven dependency</h4><ul><li><p><strong>首先在网页地址栏输入Maven仓库url：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></strong></p></li><li><p><strong>进入官网之后直接搜索MyBatis即可，得到结果如下图所示</strong>。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_maven.png" alt="maven仓库MyBatis搜索结果" style="zoom:75%;"></li></ul><ul><li><p><strong>点击第一个结果，进入选择版本页面，笔者处于学习阶段，选择和狂神一样的3.5.2版本</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_maven_versions.png" alt="mybatis选择3.5.2版本" style="zoom:75%;"></li></ul><ul><li><p>点击进入3.5.2版本，获取依赖的代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-persistance"><a href="#1-3-persistance" class="headerlink" title="1.3 persistance"></a>1.3 persistance</h3><p>persitance意思为<strong>持久化</strong>，这个词语在1.1的MyBaits简介中提到过，内涵为==数据持久化==。</p><ul><li>所谓持久化，就是<strong>将程序的数据在==持久状态==和==瞬时状态==转化的过程</strong>，之所以引入持久化，<strong>是因为数据存储在内存</strong>的弊端：**==断电即失==**.</li><li>除了接下来要铺开的MyBatis，实现数据持久化还有两个渠道：<strong>数据库（jdbc）</strong>和 <strong>IO文件持久化</strong>，而<strong>IO文件持久化</strong>特别的占用资源。</li><li>由此发散思想于生活，<strong>生活中持久化</strong>的例子也比比皆是，比如将食物冷藏在家用冰箱和罐头。。。</li></ul><p><strong>那我们为什么需要持久化呢？</strong></p><ul><li><p>这是因为有一些数据或者对象，我们是<strong>无法承受其丢失的代价</strong>的，最简单的<strong>支付宝里的金额</strong>。</p></li><li><p>还有另外一个很重要的外在原因，就是<strong>内存实在是太TM贵了</strong>。。。</p></li></ul><h3 id="1-4-persistance-layer"><a href="#1-4-persistance-layer" class="headerlink" title="1.4 persistance layer"></a>1.4 persistance layer</h3><p>persitance layer 意思是<strong>持久层</strong>，我们在之前的JavaWeb学习中有<strong>Dao层</strong>、Service层和<strong>Controller层</strong>的概念，每个层是有其具体的业务。拿还就那个举一反三，持久层的概念就是：<strong>完成持久化工作的代码块</strong>。</p><p>层和层之间的<strong>界限是十分明显的</strong>，学习MyBaits就是学习一个持久层框架，我连一个Web框架都用不到，就只用一个单纯的普通项目就可以把持久层框架学习完成。</p><h3 id="1-5-Why-use-MyBatis？"><a href="#1-5-Why-use-MyBatis？" class="headerlink" title="1.5 Why use MyBatis？"></a>1.5 Why use MyBatis？</h3><ol><li><p>最通俗的来说，最先想到的优点就是<strong>方便</strong></p></li><li><p>还有一个反方向的促进因素，就是传统的JDBC代码实在太复杂了，那开发人员就是为了简化，开发出了MyBaits框架。额好吧，其实就是懒，手动狗头，为了实现自动化而奋斗。</p></li><li><p>具体的来说，MyBatis可以帮助我们程序猿将数据存入数据库。</p></li><li><p>其实，用MyBatis也可容易上手，对小白十分友好。</p></li><li><p>下面，贴出百度百科对MyBatis的优点陈述：</p><ul><li><strong>简单易学</strong>：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li><strong>灵活</strong>：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li><strong>解除sql与程序代码的耦合</strong>：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li><strong>提供映射标签</strong>，支持对象与数据库的orm字段关系映射</li><li><strong>提供对象关系映射标签</strong>，支持对象关系组建维护</li><li><strong>提供xml标签</strong>，支持编写动态sql。</li></ul></li></ol><h2 id="2、First-MyBatis-project"><a href="#2、First-MyBatis-project" class="headerlink" title="2、First MyBatis project"></a>2、First MyBatis project</h2><h3 id="2-1-the-route"><a href="#2-1-the-route" class="headerlink" title="2.1 the route"></a>2.1 the route</h3><blockquote><p>搭建环境——&gt;导入MyBatis——&gt;编写代码——&gt;测试</p><p>在写第一个MyBatis项目之前呢，我们需要理一下思路。第一个步骤就是**==搭建环境==<strong>，有了环境之后，后面的工作就比较统一了；第二步，就是</strong>==导入MyBatisjar包==<strong>；第三步是</strong>==编写代码==<strong>；最后一步为</strong>==测试==**。</p></blockquote><h3 id="2-2-build-environment"><a href="#2-2-build-environment" class="headerlink" title="2.2 build environment"></a>2.2 build environment</h3><p>myBatis是跟数据库进行操作的，我们第一步就是**==搭建数据库==**。</p><h4 id="2-2-1-build-database-environment"><a href="#2-2-1-build-database-environment" class="headerlink" title="2.2.1 build database environment"></a>2.2.1 build database environment</h4><p>在这里，手动用SQL语句建库、建表、添加字段，熟悉一下大三上学的数据库知识，0√0。</p><p>笔者用的MySQL可视化工具是**==MySQL Workbench==**。</p><ul><li><p><strong>首先进入首页，输入账号密码连接MySQL数据库。</strong></p><p><strong><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mysql_workbench.png" alt="MySQL连接" style="zoom:75%;"></strong></p></li></ul><ul><li><p><strong>第二步，使用SQL语句编写SQL脚本，脚本代码如下代码块所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 建库<br>create database &#96;mybatis&#96;;<br>use &#96;mybatis&#96;;<br><br>-- 建表<br>create table &#96;user&#96; (<br>    &#96;id&#96; int(20) primary key auto_increment,<br>    &#96;name&#96; varchar(30) default null,<br>    &#96;pwd&#96; varchar(30) default null<br>)engine&#x3D;InnoDB default charset&#x3D;utf8;<br><br>-- 插入数据 <br>insert into &#96;user&#96;(&#96;id&#96;,&#96;name&#96;,&#96;pwd&#96;) values<br>(1,&#39;乔威&#39;,&#39;123456&#39;),<br>(2,&#39;张三&#39;,&#39;123456&#39;),<br>(3,&#39;李四&#39;,&#39;123456&#39;); <br></code></pre></td></tr></table></figure></li><li><p><strong>搭建数据库完成，下一步就是</strong>要**==导入jar包，开项目了==**。</p></li></ul><h4 id="2-2-2-create-new-project"><a href="#2-2-2-create-new-project" class="headerlink" title="2.2.2 create new project"></a>2.2.2 create new project</h4><ul><li><p><strong>第一步，创建一个普通的maven项目，步骤如下图所示。</strong></p><p><img src="/posts/2020/12/31/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mybatis_new_project.gif" alt="创建项目步骤1"></p></li></ul><ul><li><p><strong>第二步，删除生成项目的src目录，用以当做==父工程==。</strong></p><p><img src="/posts/2020/12/31/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/delete_src.png" alt="删除自动生成的src目录"></p></li></ul><ul><li><p><strong>第三步，在pom文件中导入maven依赖(mysql驱动，mybatis和junit)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-create-module"><a href="#2-3-create-module" class="headerlink" title="2.3 create module"></a>2.3 create module</h3><h4 id="2-3-1-new-empty-modue"><a href="#2-3-1-new-empty-modue" class="headerlink" title="2.3.1 new empty modue"></a>2.3.1 new empty modue</h4><ul><li><p><strong>右键单击主目录MyBatis-Study，new module，创建普通的子模块mybatis-01</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis-01-new.gif" alt="创建一个模块" style="zoom:67%;"></li></ul><ul><li><p><strong>这样做的好处就是，子项目不用每次再导包了，用的都是父项目的包。</strong></p></li><li><p><strong>与此同时，父项目的pom文件中多了一个<module></module>标签，表示刚才创建的子模块。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-3-2-write-core-configuration-file"><a href="#2-3-2-write-core-configuration-file" class="headerlink" title="2.3.2 write core configuration file"></a>2.3.2 write core configuration file</h4><blockquote><p><strong>编写核心配置文件</strong></p></blockquote><ul><li><p><strong>从XML中构建sqlSessionFactory</strong></p><p>背景：每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p><p><strong>XML 配置文件中包含了对 MyBatis 系统的核心设置</strong>，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。后面会再探讨 XML 配置文件的详细内容，这里先给出一个简单的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>在mybatis目录下的resources中建立一个XML文件，名为：mybatis-config.xml</strong>，<strong>将上面的配置文件内容复制到该xml文件中。</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_config.png" alt="mybatis配置文件" style="zoom: 67%;"></li></ul><ul><li><p><strong>配置文件解析和自己手动配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--可以配置多套环境 default为默认选择的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--事务管理方式选择JDBC的事务管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--连接数据库的配置，改为自己的--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--&amp;amp;为&amp;的转义符--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=GMT&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zuiweizhiming666&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>连接数据库（选择数据库为搭建环境时创建的mybatis）</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis-connect-database.gif" alt="idea数据库" style="zoom:67%;"></li></ul><h4 id="2-3-3-write-utility-class"><a href="#2-3-3-write-utility-class" class="headerlink" title="2.3.3 write utility class"></a>2.3.3 write utility class</h4><blockquote><p>对于加载resources下的配置文件的时候，由于它占据IO资源，我们把它抽成一个工具类。</p></blockquote><ul><li><p><strong>在java目录下创建com.atrox.utils包，再在utils包下创建MyBatisUtils类</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_utils.png" alt="mybatis工具类" style="zoom: 67%;"></li></ul><ul><li><p><strong>在该类根据MyBatis3中文文档来填充内容：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">//sqlSessionFactory 来构建 sqlSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        InputStream inputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用MyBatis第一步：获取sqlSessionFactory对象</span><br>            <span class="hljs-comment">// 资源路径</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-comment">// 以流的方式加载配置文件</span><br>            inputStream = Resources.getResourceAsStream(resource);<br>            <span class="hljs-comment">// 通过流的方式把inputStream加载进来</span><br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 既然有了SqlSessionFactory，顾名思义，我们就可以从中获得SqlSession的实例了</span><br>    <span class="hljs-comment">// SqlSession 完全包含了面向数据库执行SQL命令所需的所有方法了</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-4-coding"><a href="#2-4-coding" class="headerlink" title="2.4 coding"></a>2.4 coding</h3><blockquote><p>编写代码</p></blockquote><h4 id="2-4-1-Entity-class"><a href="#2-4-1-Entity-class" class="headerlink" title="2.4.1 Entity class"></a>2.4.1 Entity class</h4><p><strong><code>编写实体类</code></strong>————————————————————————————–</p><ul><li><p><strong>在com.atrox下建立pojo包</strong> <img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_pojo.png" alt="mybatis实体类" style="zoom:67%;"></p></li><li><p><strong>在pojo包下建立对应数据库MyBatis的表User实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// User实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>最终效果</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybaits_final_pojo.png" alt="mybatis编写实体类截图" style="zoom: 67%;"></li></ul><h4 id="2-4-2-Mapper"><a href="#2-4-2-Mapper" class="headerlink" title="2.4.2 Mapper"></a>2.4.2 Mapper</h4><p><strong><code>编写实体类的Mapper</code></strong>———————————————————————————</p><ul><li><p><strong>在com.atrox.dao下建立接口文件，名为：UserDao，在接口里定义一个查询User的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atrox.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>在com.atrox.dao下建立Mapper配置文件，名为UserMapper.xml，取代了之前的接口实现类</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atrox.dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--SQL查询语句--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>最终效果</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_dao.png" alt="最终效果" style="zoom:67%;"></li></ul><h3 id="2-5-junit-test"><a href="#2-5-junit-test" class="headerlink" title="2.5 junit test"></a>2.5 junit test</h3><blockquote><p>测试，在src目录下的test包下进行</p></blockquote><ul><li><p><strong>在src下的java包下建立com.atrox.dao包，在包下建立UserDaoTest类，与上面一一对应</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_test.png" alt="完善目录结构" style="zoom:67%;"></li></ul><ul><li><p><strong>在UserDaoTest中测试getUserList</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atrox.pojo.User;<br><span class="hljs-keyword">import</span> com.atrox.utils.MyBatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 第一步：获得SqlSession对象</span><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br><br>        <span class="hljs-comment">// 方式一：getMapper</span><br>        UserDao mapper = sqlSession.getMapper(UserDao.class);<br>        List&lt;User&gt; userList = mapper.getUserList();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        <span class="hljs-comment">// 关闭SqlSession</span><br>        sqlSession.close();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>执行后，报错org.apache.ibatis.binding.BindingException，原因是没有在mybatis-config.xml中注册mapper，应该在里面加上</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com.atrox.dao/UserMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>再次执行，报错java.lang.ExceptionInInitializerError:初始化问题，Could not find resource com.atrox.dao/UserMapper.xml</strong></p><p>原因：Maven由于它的约定大于配置，笔者的配置文件，无法被导出或者生效，解决方案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="bigProblem"><a href="#bigProblem" class="headerlink" title="bigProblem"></a>bigProblem</h4><p>在狂神的视频中，当在maven中加入上面的<build></build>后，测试的传结果就出来了。但是笔者这里报了一个错误：<strong>Could not find resource mybatis-config.xml</strong>，并且由于这个问题，还导致了在MyBatisUtils.class加载资源时的<strong>空指针问题</strong>。</p><p>在B站的弹幕中，我找到了这么几条<strong>解决方案</strong>，并进行了一些尝试：</p><p><strong>①连接数据库url中，useSSL=true改成false</strong></p><p>此方案，笔者没有应用，因为我的配置文件中url根本就没有加上useSSL这一参数</p><p><strong>②MyBatisUtils修改代码</strong></p><p>合理的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        InputStream inputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用MyBatis第一步：获取sqlSessionFactory对象</span><br>            <span class="hljs-comment">// 资源路径</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-comment">// 以流的方式加载配置文件</span><br>            inputStream = Resources.getResourceAsStream(resource);<br>            <span class="hljs-comment">// 通过流的方式把inputStream加载进来</span><br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 既然有了SqlSessionFactory，顾名思义，我们就可以从中获得SqlSession的实例了</span><br>    <span class="hljs-comment">// SqlSession 完全包含了面向数据库执行SQL命令所需的所有方法了</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一条，笔者与自己的对比，发现自己写的没有错误。</p><p><strong>③UserMapper.xml去掉中文注释</strong></p><p>尝试，无效果。</p><p><strong>④mybatis-config.xml去掉中文注释</strong></p><p>尝试，无效果。</p><p><strong>⑤maven 进行clean，重新build</strong></p><p>尝试，无效果。</p><p>至此，我感觉到了一丝阴冷和诡异，我能感觉得到这个<strong>错误的根源和我非常的接近</strong>，就潜伏在我的身边，静悄悄的蛰伏，看着我的一次次焦虑与气馁。</p><p>终于，我在B站下该视频的第6页的评论，发现了一个被埋没但仍然被勇敢提出来的解决方案：<strong>查看<build></build>下的<includes></includes>是否被写成了<excludes></excludes></strong></p><p>笔者的兴奋难掩，急忙查看，果不其然。狂神的是includes，而我的是excludes。我不禁感慨，人民内部有坏人啊！这误导人的CSDN博主，我要气死了（我从他那里复制的）。回想起之前做Maven项目时，有些资源打不了包的种种现象，我恍然大悟！</p><p>重跑一遍，结果出乎我的意料，错误回到了原来的地方，找不到UserMapper.xml。好吧，接着找，终于我在此视频下第10页的评论中发现了一条解决方案：<strong>mybatis-config.xml中注册配置文件的地方修改mapper标签的resource</strong></p><p><strong>错误的</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com.atrox.dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>==<strong>正确的：</strong>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/atrox/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终，问题得以解决啦！感谢B站，感谢互联网的恩赐！</p><h3 id="2-6-general-thoughts"><a href="#2-6-general-thoughts" class="headerlink" title="2.6 general thoughts"></a>2.6 general thoughts</h3><blockquote><p>总体的思路</p></blockquote><ol><li>第一件事情，连接了数据库，导入了基本的MySQL和MyBatis的jar包</li><li>第二件事情，为了拿到SqlSessionFactory对象，为此我们建立而来一个工具类MyBatisUtils.class</li><li>第三件事情，写了mybatis-config.xml核心配置文件，修改了其中的连接数据库的选项参数值。</li><li>第四件事情，我们写了实体类User和接口UserDao</li><li>第五件事情，用UserMapper文件代替之前的实现类。</li><li>第六件事情，将UserMapper在mybatis-config文件中注册。</li><li>测试。</li></ol><h3 id="2-7-tips"><a href="#2-7-tips" class="headerlink" title="2.7 tips"></a>2.7 tips</h3><p>在mybatis的官方文档中，建议涉及sqlSession关闭的地方，都把关闭这个资源的代码放在finally中。</p><p>于是，之前的UserDaoTest的代码改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atrox.pojo.User;<br><span class="hljs-keyword">import</span> com.atrox.utils.MyBatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 第一步：获得SqlSession对象</span><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 方式一：getMapper</span><br>            UserDao mapper = sqlSession.getMapper(UserDao.class);<br>            List&lt;User&gt; userList = mapper.getUserList();<br>            <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>                System.out.println(user);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭SqlSession</span><br>            sqlSession.close();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><p>首先，将上面的UserDao接口改名为UserMapper，在重命名的时候，IDEA弹出了一个选项。是否修改与之有关的文件。笔者点击了确定，发现连出现UserDao地方的文件名也改了，不推荐点击。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_rename.png" alt="重命名请求框" style="zoom:67%;"><p>当修改为UserMapper，<strong>应该在UserMapper.xml中作相应修改</strong>,<strong>namespace中的报名应和接口的包名一致。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atrox.dao.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>在UserMapperTest也要做相应的修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br></code></pre></td></tr></table></figure><p>在<strong>UserMapper.xml</strong>中，<strong>select标签的id</strong>为namespace中的方法名，<strong>resultType为SQL语句的返回值</strong>，如果涉及到参数，还有<strong>parameterType</strong>，为参数类型，比如增删改查的条件或根据某些id的类型。</p><h3 id="3-1-select"><a href="#3-1-select" class="headerlink" title="3.1 select"></a>3.1 select</h3><p><strong>第一步，在UserMapper接口中增加根据id查询用户的方法</strong>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure><p>值得一提的是，当笔者在接口中写下了此方法时，按下Alt + Enter 竟然弹出了<strong>MybatisGenerator new statement</strong>的选项，确认后，在UserMapper.xml中出现了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=&quot;getUserById&quot; resultType=&quot;com.atrox.pojo.User&quot;&gt;&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>虽然代码不全，但也十分<strong>人性化</strong>！</p><p><strong>第二步，在UserMapper.xml中完善根据id查询用户的sql语句，完善后如下代码：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>select * from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，需要取出来的是<strong>id，这里用#{}来取</strong>，也可以用${}来取，但是可能存在SQL注入问题。</p><p><strong>第三步</strong>，<strong>测试根据id查询用户</strong>，代码如下，比起之前十分简洁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserById</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    User user = mapper.getUserById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-insert"><a href="#3-2-insert" class="headerlink" title="3.2 insert"></a>3.2 insert</h3><p><strong>第一步，在UserMapper接口增加添加用户的方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// insert一个用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善插入用户的SQL语句，完善后如下代码：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--对象中的属性，可以直接取出来--&gt;<br>    &lt;insert id=<span class="hljs-string">&quot;addUser&quot;</span> parameterType=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;<br>    insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br>&lt;/insert&gt;<br></code></pre></td></tr></table></figure><p>其中，我们方法穿的是User对象，<strong>但是values后面的id，name，pwd可以直接取出来</strong>。</p><p><strong>第三步，测试添加用户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    mapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;大司马&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，当我们测试后，发现<strong>数据库里并没有我们新加的用户</strong>。为什么呢？因为<strong>增删改是需要提交事务的！！！</strong></p><p>于是测试代码改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 增删改需要提交事务</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-keyword">int</span> updateRows = mapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;大司马&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>    <span class="hljs-keyword">if</span> (updateRows &gt; <span class="hljs-number">0</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 提交事务</span><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-update"><a href="#3-3-update" class="headerlink" title="3.3 update"></a>3.3 update</h3><p><strong>第一步，在UserMapper接口增加修改用户的方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善修改用户的SQL语句，完善后如下代码:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;update id=<span class="hljs-string">&quot;update&quot;</span> parameterType=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;<br>    update mybatis.user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;<br>&lt;/update&gt;<br></code></pre></td></tr></table></figure><p><strong>第三步，测试更新用户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    mapper.update(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;炫神&quot;</span>,<span class="hljs-string">&quot;123123&quot;</span>));<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-delete"><a href="#3-4-delete" class="headerlink" title="3.4 delete"></a>3.4 delete</h3><p><strong>第一步，在UserMapper接口增加删除用户的方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善删除用户的SQL语句，完善后如下代码:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;delete id=<span class="hljs-string">&quot;delete&quot;</span>&gt;<br>    delete from mybatis.user where id = #&#123;id&#125;;<br>&lt;/delete&gt;<br></code></pre></td></tr></table></figure><p><strong>第三步，测试删除用户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    mapper.delete(<span class="hljs-number">4</span>);<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-tips"><a href="#3-5-tips" class="headerlink" title="3.5 tips"></a>3.5 tips</h3><ul><li><p>当我们进行增删改的测试时，需要==<strong>提交事务</strong>==。</p></li><li><p>mybatis-config中resource路径需要用”/“，不可以用”.” </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--错误的写法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com.atrox.dao.UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--正确的写法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/atrox/dao/UserMapper.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-6-Map"><a href="#3-6-Map" class="headerlink" title="3.6  Map"></a>3.6  Map</h3><p>在前面的UserMapper.xml中的<strong>insert和update</strong>中我们把其中的所有字段都写了出来，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    update mybatis.user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那我们需要思考，<strong>假设这个User有100个字段，难道我们需要全部都写出来吗</strong>？下面给出一种使用map的方法。以<strong>添加新用户</strong>为例：</p><p><strong>第一步，在UserMapper接口增加添加用户的新方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 万能的Map</span><br><span class="hljs-function">User <span class="hljs-title">addUser2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善添加用户的SQL语句，完善后如下代码:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象中的属性，传递map的key--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    insert into mybatis.user (id,name,pwd) values (#&#123;userid&#125;,#&#123;username&#125;,#&#123;password&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试添加用户</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser2</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>    map.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">4</span>);<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;大司马&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>    mapper.addUser2(map);<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>测试完用map的方式添加用户后，我们再试一下<strong>查询用户</strong>：</p><p><strong>第一步，在UserMapper接口增加查询用户的新方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">User <span class="hljs-title">getUserById2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善查询用户的SQL语句，完善后如下代码:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById2&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select * from mybatis.user where id = #&#123;id&#125; and name = #&#123;name&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试查询用户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser2</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>    map.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">4</span>);<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;大司马&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>    mapper.addUser2(map);<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;大司马&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-fuzzy-search"><a href="#3-7-fuzzy-search" class="headerlink" title="3.7 fuzzy search"></a>3.7 fuzzy search</h3><blockquote><p>模糊查询</p></blockquote><p><strong>第一步，在UserMapper接口增加模糊查询的新方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模糊查询</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserLike</span><span class="hljs-params">(String value)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善模糊查询的SQL语句，完善后如下代码:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    select * from mybatis.user where name like #&#123;value&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那在这里为什么在模糊查询的like后面的value两边加上两个“%”呢？，这里我们的第一种方案，会存在<strong>SQL注入问题</strong>。这里暂且先往下进行，事后回来分析第二步。</p><p>**测试模糊查询，我们在方法传的参数中传递通配符%**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserLike</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    List&lt;User&gt; userList = mapper.getUserLike(<span class="hljs-string">&quot;%李%&quot;</span>);<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br><br><span class="hljs-comment">// 运行结果</span><br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>回头看第二步</strong>，我们也可以在sql语句中添加%</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>并且，在测试的代码中把传参的通配符去掉，也能得到正确的结果！</p><h2 id="4、Configuration-analysis"><a href="#4、Configuration-analysis" class="headerlink" title="4、Configuration analysis"></a>4、Configuration analysis</h2><h3 id="4-1-mybatis-config-xml"><a href="#4-1-mybatis-config-xml" class="headerlink" title="4.1 mybatis-config.xml"></a>4.1 mybatis-config.xml</h3><p>MyBatis的核心配置文件包含了会深深影响MyBatis行为的设置和属性信息。</p><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties">properties（属性）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">settings（设置）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">typeAliases（类型别名）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a></li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider">databaseIdProvider（数据库厂商标识）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers">mappers（映射器）</a></li></ul><h3 id="4-2-environments"><a href="#4-2-environments" class="headerlink" title="4.2 environments"></a>4.2 environments</h3><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中.<strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>tips：</strong></p><ul><li>默认使用的环境 ID（比如：default=”development”）。</li><li>每个 environment 元素定义的环境 ID（比如：id=”development”）。</li><li>事务管理器的配置（比如：type=”JDBC”）。</li><li>数据源的配置（比如：type=”POOLED”）。</li></ul><p><strong>事务管理器</strong>：</p><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p><ul><li>JDBC – 这个配置直接使用了 <strong>JDBC 的提交和回滚设施</strong>，它依赖从数据源获得的连接来管理事务作用域。</li><li>MANAGED – <strong>这个配置几乎没做什么</strong>。。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期。</li></ul><p><strong>数据源</strong>：</p><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）</p><ul><li><p><strong>UNPOOLED</strong>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。</p></li><li><p><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p></li><li><p><strong>JNDI</strong> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p></li></ul><h3 id="4-3-properties"><a href="#4-3-properties" class="headerlink" title="4.3 properties"></a>4.3 properties</h3><p>我们可以通过properties属性来引用配置文件。这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置【db.properties】</p><ul><li><p><strong>下面我们用后者来做一做，我们可以在resources下编写一个配置文件db.properties，然后再引入</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8&amp;serverTimezone=GMT</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">zuiweizhiming666</span><br></code></pre></td></tr></table></figure></li><li><p><strong>db.propertirs写完后，我们在核心配置文件中将其映入</strong></p><p>在这一步，需要注意一个问题，当我们把<properties></properties>标签随便写在一个位置的时候，报错了，错误为：</p><p><em>The content of element type “configuration” must match “(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)”.</em></p><p>这个错误提示我们properties标签所放的位置是有要求的，<strong>必须放在核心配置文件的最前面</strong>。</p><p>当我们以从外部引入配置的方式，下面环境里的各个属性也要与之对应上以${}的方式写。</p><p>最终代码为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注意的一个问题：<strong>核心配置文件优先使用外部配置文件的属性值</strong>。</p></li></ul><h3 id="4-4-typeAliases"><a href="#4-4-typeAliases" class="headerlink" title="4.4 typeAliases"></a>4.4 typeAliases</h3><p>接下来，我们做类型别名的优化工作。我们在之前的UserMapper.xml中要写这样的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>       insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的paramterType写的让人不够满意，按照人<strong>性化应该写的是User</strong>，下面就要做这样的事。</p><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写</p><p><strong>第一种方式：<typeAlias></typeAlias></strong></p><p>在核心配置文件中，我们写如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>写完之后，我们就可以把之前UserMapper.xml中的代码修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第二种方式：指定一个包名</strong></p><p>在核心配置文件中，我们写如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atrox.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyBatis 会在包名下面搜索需要的 Java Bean，每一个在包下的javaBean，在没有注解的情况下，会使用 <strong>Bean 的首字母小写的非限定类名</strong>来作为它的别名。例：包下有User实体类，经过起别名后，用的时候要用user，首字母变成了小写。【大写其实也可以，但是建议用小写】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!--首字母写成大写也能跑起来，但不建议--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>那面对这两种起别名的方式，如何抉择？</strong></p><ul><li>在实体类比较少的时候，使用第一种方式</li><li>如果实体类非常多，建议使用第二种</li></ul><p>第一种方式，可以DIY别名，第二种则不行。</p><p>如果<strong>使用第二种方式，想要DIY别名</strong>，不想使用默认的首字母小写，可以<strong>使用注解</strong></p><p>在实体类定义的时候，就写上@Alias(“别名”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// User实体类</span><br><span class="hljs-meta">@Alias(&quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br>    <span class="hljs-comment">// 一堆方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在后面的UserMapper.xml中，我们这样写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-settings"><a href="#4-5-settings" class="headerlink" title="4.5 settings"></a>4.5 settings</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PARTIAL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WARNING&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultExecutorType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SIMPLE&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultFetchSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OTHER&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们目前只需要知道其中几个重要的即可.</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr></tbody></table><h3 id="4-6-mappers"><a href="#4-6-mappers" class="headerlink" title="4.6 mappers"></a>4.6 mappers</h3><p>映射器：注册绑定我们的Mapper文件，我们需要告诉 MyBatis 到哪里去找到这些文件，我们可以使用相对于类路径的资源引用，完全限定资源定位符或类名和包名等几种方式。</p><p><strong>方式1：相对于类路径的资源引用（推荐使用）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/atrox/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式二：使用映射器接口实现类的完全限定类名</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式三：将包内的映射器接口实现全部注册为映射器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atrox.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用方式二和方式三，有几个注意点：</p><ul><li>接口和它的Mapper配置文件<strong>必须同名</strong></li><li>接口和它的配置文件<strong>必须在同一个包下</strong></li></ul><h3 id="4-7-other-configuration"><a href="#4-7-other-configuration" class="headerlink" title="4.7 other configuration"></a>4.7 other configuration</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a><ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h3 id="4-8-Lifecycle-and-scope"><a href="#4-8-Lifecycle-and-scope" class="headerlink" title="4.8 Lifecycle and scope"></a>4.8 Lifecycle and scope</h3><p>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p>下面，用图来看一下整个流程：</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_lifecycle.png" alt="流程图" style="zoom:75%;"><h4 id="4-8-1-SqlSessionFactoryBuilder"><a href="#4-8-1-SqlSessionFactoryBuilder" class="headerlink" title="4.8.1 SqlSessionFactoryBuilder"></a>4.8.1 SqlSessionFactoryBuilder</h4><p>这个类可以被实例化、使用和丢弃。<strong>一旦创建了SqlSessionFactory，就不再需要它了</strong>。因此 SqlSessionFactoryBuilder 实例的最佳作用域是<strong>方法作用域</strong>（也就是<strong>局部方法变量</strong>）</p><h4 id="4-8-2-SqlSessionFactory"><a href="#4-8-2-SqlSessionFactory" class="headerlink" title="4.8.2 SqlSessionFactory"></a>4.8.2 SqlSessionFactory</h4><p>这个东西，可以想象为数据库连接池。SqlSessionFactory 一旦被创建就<strong>应该在应用的运行期间一直存在</strong>，没有任何理由丢弃它或重新创建另一个实例。多次重建 SqlSessionFactory 被视为一种代码“坏习惯”</p><p>因此 SqlSessionFactory 的最佳作用域是<strong>应用作用域</strong>，最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</p><h4 id="4-8-3-SqlSession"><a href="#4-8-3-SqlSession" class="headerlink" title="4.8.3 SqlSession"></a>4.8.3 SqlSession</h4><p>这个东西，可以想象为连接到连接池的一个请求。SqlSession 的实例<strong>不是线程安全</strong>的，因此是不能被共享的，所以它的最佳的作用域是请求或<strong>方法作用域。</strong>在方法内用完之后需要赶紧关闭，否则资源被占用。</p><h4 id="4-8-4-relationship"><a href="#4-8-4-relationship" class="headerlink" title="4.8.4 relationship"></a>4.8.4 relationship</h4><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybaits_SqlSession.png" alt="关系" style="zoom:85%;"><p>这里面的每一个Mapper，就代表着每一个具体的业务。</p><h2 id="5、ResultMap"><a href="#5、ResultMap" class="headerlink" title="5、ResultMap"></a>5、ResultMap</h2><h3 id="5-1-problem"><a href="#5-1-problem" class="headerlink" title="5.1 problem"></a>5.1 problem</h3><p>结果集映射，用来解决的是<strong>JavaBean中的属性名和数据库中的字段名不一致</strong>的问题。</p><p>在之前的项目中，数据库中的字段和JavaBean的属性名字是相同的。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/column_properties.png" alt="属性与字段相同" style="zoom:80%;"><p>现在我们新建一个项目，拷贝之前的，测试实体类属性和字段不一致的情况。</p><ul><li><p><strong>第一步，修改User的属性和方法，使其属性名与数据库字段不一致，如图所示</strong></p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/update_column_properties.png" alt="不一致的属性名与字段名" style="zoom:80%;"><p>先不修改别的，直接测试一下，发现查出的结果集<strong>密码字段全为null</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>原因</strong>：类型处理器将UserMapper.xml的内容修改了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mybatis.user;<br><span class="hljs-comment">-- 经过类型处理器修改，变为下面的样子</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>,pwd <span class="hljs-keyword">from</span> mybatis.user;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>对第一步遇到的问题，我们是有几套解决方案的</strong></p></li><li><p><strong>方案一：修改SQL语句起别名，最简单暴力</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select id,name,pwd as password from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>方案二：下面要引出的ResultMap</strong></p></li></ul><h3 id="5-2-resultMap"><a href="#5-2-resultMap" class="headerlink" title="5.2 resultMap"></a>5.2 resultMap</h3><p>将UserMapper.xml中添加这些内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结果集映射--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果，是可以查出来的，这就是最简单的结果集映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p><p>在学习了上面的知识后，你会发现上面的例子没有一个需要显式配置 <code>ResultMap</code>，这就是 <code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们。</p><p><strong>可是，如果世界总是这么简单就好了。</strong></p><h2 id="6、Log"><a href="#6、Log" class="headerlink" title="6、Log"></a>6、Log</h2><h3 id="6-1-log-factory"><a href="#6-1-log-factory" class="headerlink" title="6.1 log factory"></a>6.1 log factory</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！曾经我们使用sout和debug来排错，现在我们使用mybatis内置的日志工厂，如下。</p><table><thead><tr><th>logImpl</th><th>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</th><th>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</th><th>未设置</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>SLF4J</li><li>LOG4J【掌握】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING【掌握】</li><li>NO_LOGGING</li></ul><p>在MyBatis中具体使用哪一日志实现，在<strong>设置中（settings）设定</strong>。我们手动在核心配置文件配置一下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>跑一下项目，日志打印为，下面进行解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Opening JDBC Connection                                       <span class="hljs-comment">//打开JDBC连接</span><br>Created connection <span class="hljs-number">90045638.</span>                                <span class="hljs-comment">//创建一个connection连接对象</span><br>Setting autocommit to <span class="hljs-keyword">false</span> on JDBC Connection  [com.mysql.cj.jdbc.ConnectionImpl@55dfcc6]         <span class="hljs-comment">//设置事务自动提交为false</span><br>==&gt;  Preparing: select * from mybatis.user             <span class="hljs-comment">//预编译</span><br>==&gt; Parameters:                                                       <span class="hljs-comment">//查询的参数</span><br>&lt;==    Columns: id, name, pwd                         <br>&lt;==        Row: <span class="hljs-number">1</span>, 乔威, <span class="hljs-number">123456</span><br>&lt;==        Row: <span class="hljs-number">2</span>, 张三, <span class="hljs-number">123456</span><br>&lt;==        Row: <span class="hljs-number">3</span>, 李四, <span class="hljs-number">123456</span><br>&lt;==        Row: <span class="hljs-number">4</span>, 李五, <span class="hljs-number">123456</span><br>&lt;==      Total: <span class="hljs-number">4</span>                                                          <span class="hljs-comment">//查询结果总条数</span><br>User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>Resetting autocommit to <span class="hljs-keyword">true</span> on JDBC Connection    [com.mysql.cj.jdbc.ConnectionImpl@55dfcc6]           <span class="hljs-comment">//设置事务自动提交为true</span><br>Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@55dfcc6] <span class="hljs-comment">// 关闭连接</span><br>Returned connection <span class="hljs-number">90045638</span> to pool.                    <span class="hljs-comment">//将connection还给池子</span><br></code></pre></td></tr></table></figure><h3 id="6-2-LOG4J"><a href="#6-2-LOG4J" class="headerlink" title="6.2 LOG4J"></a>6.2 LOG4J</h3><ul><li><p>第一步，了解一下LOG4J。</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li><li>我们也可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li><li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul></li><li><p><strong>第二步，使用一个外部类，需要先导log4j包，从Maven仓库去找</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>第三步，在resources目录下创建log4j.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">INFO,consoleAppender,logfile,MAIL</span><br><span class="hljs-meta">log4j.addivity.org.apache</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#ConsoleAppender，控制台输出</span><br><span class="hljs-comment">#FileAppender，文件日志输出</span><br><span class="hljs-comment">#SMTPAppender，发邮件输出日志</span><br><span class="hljs-comment">#SocketAppender，Socket 日志</span><br><span class="hljs-comment">#NTEventLogAppender，Window NT 日志</span><br><span class="hljs-comment">#SyslogAppender，</span><br><span class="hljs-comment">#JMSAppender，</span><br><span class="hljs-comment">#AsyncAppender，</span><br><span class="hljs-comment">#NullAppender</span><br><span class="hljs-comment">#文件输出：RollingFileAppender</span><br><span class="hljs-comment">#log4j.rootLogger = INFO,logfile</span><br><span class="hljs-meta">log4j.appender.logfile</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.logfile.Threshold</span> = <span class="hljs-string">INFO</span><br><span class="hljs-comment"># 输出以上的 INFO 信息</span><br><span class="hljs-meta">log4j.appender.logfile.File</span> = <span class="hljs-string">INFO_log.html</span><br><span class="hljs-comment">#保存 log 文件路径</span><br><span class="hljs-attr">Log4j</span> <span class="hljs-string">从入门到详解</span><br><span class="hljs-attr">10</span><br><span class="hljs-meta">log4j.appender.logfile.Append</span> = <span class="hljs-string">true</span><br><span class="hljs-comment"># 默认为 true，添加到末尾，false 在每次启动时进行覆盖</span><br><span class="hljs-meta">log4j.appender.logfile.MaxFileSize</span> = <span class="hljs-string">1MB</span><br><span class="hljs-comment"># 一个 log 文件的大小，超过这个大小就又会生成 1 个日志 # KB ，MB，GB</span><br><span class="hljs-meta">log4j.appender.logfile.MaxBackupIndex</span> = <span class="hljs-string">3</span><br><span class="hljs-comment"># 最多保存 3 个文件备份</span><br><span class="hljs-meta">log4j.appender.logfile.layout</span> = <span class="hljs-string">org.apache.log4j.HTMLLayout</span><br><span class="hljs-comment"># 输出文件的格式</span><br><span class="hljs-meta">log4j.appender.logfile.layout.LocationInfo</span> = <span class="hljs-string">true</span><br><span class="hljs-comment">#是否显示类名和行数</span><br><span class="hljs-attr">log4j.appender.logfile.layout.Title</span><br>=title:\u63d0\u9192\u60a8\uff1a\u7cfb\u7edf\u53d1\u751f\u4e86\u4e25\u91cd\u9519\u8b<br><span class="hljs-attr">ef</span><br><span class="hljs-comment">#html 页面的 &lt; title &gt;</span><br><span class="hljs-comment">############################## SampleLayout ####################################</span><br><span class="hljs-comment"># log4j.appender.logfile.layout = org.apache.log4j.SampleLayout</span><br><span class="hljs-comment">############################## PatternLayout ###################################</span><br><span class="hljs-comment"># log4j.appender.logfile.layout = org.apache.log4j.PatternLayout</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.ConversionPattern =% d % p [ % c] - % m % n % d</span><br><span class="hljs-comment">############################## XMLLayout #######################################</span><br><span class="hljs-comment"># log4j.appender.logfile.layout = org.apache.log4j.XMLLayout</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.LocationInfo = true #是否显示类名和行数</span><br><span class="hljs-comment">############################## TTCCLayout ######################################</span><br><span class="hljs-comment"># log4j.appender.logfile.layout = org.apache.log4j.TTCCLayout</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.DateFormat = ISO8601</span><br><span class="hljs-comment">#NULL, RELATIVE, ABSOLUTE, DATE or ISO8601.</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.TimeZoneID = GMT - 8 : 00</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.CategoryPrefixing = false ##默认为 true 打印类别名</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.ContextPrinting = false ##默认为 true 打印上下文信息</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.ThreadPrinting = false ##默认为 true 打印线程名</span><br><span class="hljs-comment"># 打印信息如下：</span><br><span class="hljs-comment">#2007 - 09 - 13 14 : 45 : 39 , 765 [http - 8080 - 1 ] ERROR com.poxool.test.test -</span><br><span class="hljs-attr">error</span> <span class="hljs-string">成功关闭链接</span><br><span class="hljs-comment">###############################################################################</span><br><span class="hljs-comment">#每天文件的输出：DailyRollingFileAppender</span><br><span class="hljs-comment">#log4j.rootLogger = INFO,errorlogfile</span><br><span class="hljs-meta">log4j.appender.errorlogfile</span> = <span class="hljs-string">org.apache.log4j.DailyRollingFileAppender</span><br><span class="hljs-meta">log4j.appender.errorlogfile.Threshold</span> = <span class="hljs-string">ERROR</span><br><span class="hljs-meta">log4j.appender.errorlogfile.File</span> = <span class="hljs-string">../logs/ERROR_log</span><br><span class="hljs-meta">log4j.appender.errorlogfile.Append</span> = <span class="hljs-string">true</span><br><span class="hljs-comment">#默认为 true，添加到末尾，false 在每次启动时进行覆盖</span><br><span class="hljs-meta">log4j.appender.errorlogfile.ImmediateFlush</span> = <span class="hljs-string">true</span><br><span class="hljs-comment">#直接输出，不进行缓存</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM: 每个月更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - ww: 每个星期更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM - dd: 每天更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM - dd - a: 每天的午夜和正午更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM - dd - HH: 每小时更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM - dd - HH - mm: 每分钟更新一个 log 日志</span><br><span class="hljs-attr">Log4j</span> <span class="hljs-string">从入门到详解</span><br><span class="hljs-attr">11</span><br><span class="hljs-meta">log4j.appender.errorlogfile.DatePattern</span> = <span class="hljs-string">&#x27; . &#x27; yyyy - MM - dd &#x27; .log &#x27;</span><br><span class="hljs-comment">#文件名称的格式</span><br><span class="hljs-meta">log4j.appender.errorlogfile.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.errorlogfile.layout.ConversionPattern</span> =<span class="hljs-string">%d %p [ %c] - %m %n %d</span><br><span class="hljs-comment">#控制台输出：</span><br><span class="hljs-comment">#log4j.rootLogger = INFO,consoleAppender</span><br><span class="hljs-meta">log4j.appender.consoleAppender</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.consoleAppender.Threshold</span> = <span class="hljs-string">ERROR</span><br><span class="hljs-meta">log4j.appender.consoleAppender.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.consoleAppender.layout.ConversionPattern</span> =<span class="hljs-string">%d %-5p %m %n</span><br><span class="hljs-meta">log4j.appender.consoleAppender.ImmediateFlush</span> = <span class="hljs-string">true</span><br><span class="hljs-comment"># 直接输出，不进行缓存</span><br><span class="hljs-meta">log4j.appender.consoleAppender.Target</span> = <span class="hljs-string">System.err</span><br><span class="hljs-comment"># 默认是 System.out 方式输出</span><br><span class="hljs-comment">#发送邮件：SMTPAppender</span><br><span class="hljs-comment">#log4j.rootLogger = INFO,MAIL</span><br><span class="hljs-meta">log4j.appender.MAIL</span> = <span class="hljs-string">org.apache.log4j.net.SMTPAppender</span><br><span class="hljs-meta">log4j.appender.MAIL.Threshold</span> = <span class="hljs-string">INFO</span><br><span class="hljs-meta">log4j.appender.MAIL.BufferSize</span> = <span class="hljs-string">10</span><br><span class="hljs-meta">log4j.appender.MAIL.From</span> = <span class="hljs-string">yourmail@gmail.com</span><br><span class="hljs-meta">log4j.appender.MAIL.SMTPHost</span> = <span class="hljs-string">smtp.gmail.com</span><br><span class="hljs-meta">log4j.appender.MAIL.Subject</span> = <span class="hljs-string">Log4J Message</span><br><span class="hljs-meta">log4j.appender.MAIL.To</span> = <span class="hljs-string">yourmail@gmail.com</span><br><span class="hljs-meta">log4j.appender.MAIL.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.MAIL.layout.ConversionPattern</span> =<span class="hljs-string">%d - %c -%-4r [%t] %-5p %c %x - %m %n</span><br><span class="hljs-comment">#数据库：JDBCAppender</span><br><span class="hljs-meta">log4j.appender.DATABASE</span> = <span class="hljs-string">org.apache.log4j.jdbc.JDBCAppender</span><br><span class="hljs-meta">log4j.appender.DATABASE.URL</span> = <span class="hljs-string">jdbc:oracle:thin:@ 210.51 . 173.94 : 1521 :YDB</span><br><span class="hljs-meta">log4j.appender.DATABASE.driver</span> = <span class="hljs-string">oracle.jdbc.driver.OracleDriver</span><br><span class="hljs-meta">log4j.appender.DATABASE.user</span> = <span class="hljs-string">ydbuser</span><br><span class="hljs-meta">log4j.appender.DATABASE.password</span> = <span class="hljs-string">ydbuser</span><br><span class="hljs-meta">log4j.appender.DATABASE.sql</span> = <span class="hljs-string">INSERT INTO A1 (TITLE3) VALUES ( &#x27; %d - %c %-5p %c %x - %m%n</span><br><span class="hljs-meta">&#x27;</span> <span class="hljs-string">)</span><br><span class="hljs-meta">log4j.appender.DATABASE.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.DATABASE.layout.ConversionPattern</span> =<span class="hljs-string">% d - % c -%- 4r [ % t] %- 5p % c %</span><br><span class="hljs-attr">x</span> <span class="hljs-string">- % m % n</span><br><span class="hljs-comment">#数据库的链接会有问题，可以重写 org.apache.log4j.jdbc.JDBCAppender 的 getConnection() 使用数</span><br><span class="hljs-meta">据库链接池去得链接，可以避免</span> <span class="hljs-string">insert 一条就链接一次数据库</span><br></code></pre></td></tr></table></figure></li><li><p><strong>第四步，log4j配置文件解析，如下</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 日志信息输出到控制台、文件</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"># 默认为 true，添加到末尾，false 在每次启动时进行覆盖</span><br><span class="hljs-meta">log4j.appender.file.Append</span> = <span class="hljs-string">true</span><br><span class="hljs-comment"># 一个 log 文件的大小，超过这个大小就又会生成 1 个日志 # KB ，MB，GB</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span> = <span class="hljs-string">1MB</span><br></code></pre></td></tr></table></figure></li><li><p><strong>第五步，上面的配置文件太乱了，我们去找一个比较干净的配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-meta">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/atrox.txt</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>第六步，在核心配置文件配置log4j为日志的实现</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>测试运行刚才的查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Opening JDBC Connection<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Created connection <span class="hljs-number">680988889.</span><br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Setting autocommit to <span class="hljs-keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@289710d9]<br>[com.atrox.dao.UserMapper.getUserList]-==&gt;  Preparing: select * from mybatis.user <br>[com.atrox.dao.UserMapper.getUserList]-==&gt; Parameters: <br>[com.atrox.dao.UserMapper.getUserList]-&lt;==      Total: <span class="hljs-number">4</span><br>User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Resetting autocommit to <span class="hljs-keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@289710d9]<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@289710d9]<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Returned connection <span class="hljs-number">680988889</span> to pool.<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-3-Use-LOG4J"><a href="#6-3-Use-LOG4J" class="headerlink" title="6.3  Use LOG4J"></a>6.3  Use LOG4J</h3><ol><li><p><strong>在要使用Log4j的类中导入包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br></code></pre></td></tr></table></figure></li><li><p><strong>获取日志对象，参数为当前类的class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);<br></code></pre></td></tr></table></figure></li><li><p>写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLog4j</span><span class="hljs-params">()</span> </span>&#123;<br>    logger.info(<span class="hljs-string">&quot;info:进入了testLog4j&quot;</span>);<br>    logger.debug(<span class="hljs-string">&quot;debug:进入了testLog4j&quot;</span>);<br>    logger.error(<span class="hljs-string">&quot;error:进入了testLog4j&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当运行后，在<strong>左侧目录创建了log目录下面有atrox.txt</strong>,原因是log4j配置文件里写的</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/atrox.txt</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mybatis_log.png" alt="日志输出目录"></p></li><li><p>atrox.txt的日志信息和控制台输出的相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[com.atrox.dao.UserMapperTest]-info:进入了testLog4j<br>[com.atrox.dao.UserMapperTest]-debug:进入了testLog4j<br>[com.atrox.dao.UserMapperTest]-error:进入了testLog4j<br></code></pre></td></tr></table></figure></li></ol><h2 id="7、Pagination"><a href="#7、Pagination" class="headerlink" title="7、Pagination"></a>7、Pagination</h2><p>在了解分页之前，我们需要思考：</p><p><strong>为什么要分页？</strong></p><ul><li>减少数据的处理量</li><li>节约资源</li></ul><h3 id="7-1-Limit"><a href="#7-1-Limit" class="headerlink" title="7.1 Limit"></a>7.1 Limit</h3><p>使用Limit进行分页的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> startIndex,pageSize; <br></code></pre></td></tr></table></figure><p>下面，我们使用MyBatis实现分页，核心其实就是SQL语句，老三步。</p><p><strong>第一步：在UserMapper接口中写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分页查询</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLimit</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步：在UserMapper.xml中写SQL语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第三步：测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByLimit</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>    HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>    map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">0</span>);<br>    map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);<br><br>    List&lt;User&gt; users = mapper.getUserByLimit(map);<br>    <span class="hljs-keyword">for</span> (User user : users) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-RowBounds"><a href="#7-2-RowBounds" class="headerlink" title="7.2 RowBounds"></a>7.2 RowBounds</h3><p>不再使用SQL实现分页</p><p><strong>第一步，接口写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分页2</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getuserByRowBounds</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，写SQL语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getuserByRowBounds&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第三步，测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br><br>    <span class="hljs-comment">// RowBounds实现</span><br>    RowBounds rowBounds = <span class="hljs-keyword">new</span> RowBounds(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">// 通过Java代码层面实现分页</span><br>    List&lt;Object&gt; users = sqlSession.selectList(<span class="hljs-string">&quot;com.atrox.dao.UserMapper.getuserByRowBounds&quot;</span>, <span class="hljs-keyword">null</span>, rowBounds);<br>    <span class="hljs-keyword">for</span> (Object user : users) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-Pagnation-Plugins"><a href="#7-3-Pagnation-Plugins" class="headerlink" title="7.3 Pagnation Plugins"></a>7.3 Pagnation Plugins</h3><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/mybatis_pageHelper.png" alt="分页插件" style="zoom:75%;"><h2 id="8、Annotation"><a href="#8、Annotation" class="headerlink" title="8、Annotation"></a>8、Annotation</h2><h3 id="8-1-Interface-oriented-programming"><a href="#8-1-Interface-oriented-programming" class="headerlink" title="8.1 Interface-oriented programming"></a>8.1 Interface-oriented programming</h3><p>-大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程。</p><p><strong>-根本原因：==解耦==，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</strong>。</p><p>-在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了;</p><p>-而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><p><strong>关于接口的理解</strong></p><p>-接口从更深层次的理解，应是定义(规范，约束）与实现(名实分离的原则)的分离。-接口的本身反映了系统设计人员对系统的抽象理解。</p><p>-接口应有两类:</p><p>-第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class);-第二类是对一个个体某一方面的抽象，即形成一个抽象面(interface) ;-—个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p><p><strong>三个面向区别</strong></p><p>-面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法.</p><p>-面向过程是指，我们考虑问题时，以一个具体的流程（事务过程)为单位，考虑它的实现．</p><p>-接口设计与非接口设计是针对复用技术而言的，与面向对象（过程)不是一个问题.更多的体现就是对系统整体的架构</p><h3 id="8-2-annotation-coding"><a href="#8-2-annotation-coding" class="headerlink" title="8.2 annotation coding"></a>8.2 annotation coding</h3><ol><li><p><strong>注解在接口上实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    <span class="hljs-comment">// 底层主要应用反射</span><br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    List&lt;User&gt; users = mapper.getUsers();<br>    <span class="hljs-keyword">for</span> (User user : users) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>在这一步，由于我们的数据库字段与实体类属性名不同，查询结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>所以，使用注解来<strong>映射简单语句会使代码显得更加简洁</strong>，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。 因此，如果你需要做一些很复杂的操作，<strong>最好用 XML 来映射语句</strong>。</p><p><strong>本质</strong>：反射机制的实现</p><p><strong>底层</strong>：动态代理</p></li></ol><h3 id="8-3-MyBatis-Source-code-analysis"><a href="#8-3-MyBatis-Source-code-analysis" class="headerlink" title="8.3 MyBatis Source code analysis"></a>8.3 MyBatis Source code analysis</h3><p><strong>MyBatis详细的执行流程！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MyBatis_core_code.png" alt="MyBatis源码分析"></p><h3 id="8-4-Use-annotation-CRUD"><a href="#8-4-Use-annotation-CRUD" class="headerlink" title="8.4 Use annotation CRUD"></a>8.4 Use annotation CRUD</h3><p>我们可以在工具类创建的时候实现<strong>自动提交事务</strong>，在MyBatisUtils中修改获取sqlSession的方法!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>); &#125; <br></code></pre></td></tr></table></figure><p>第二步，是<strong>编写接口，增加注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解</span><br>    <span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Update(&quot;update user set name = #&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;uid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三步，是测试，与前面相同，只是<strong>不需要每次都手动提交</strong>了。</p><h3 id="8-5-About-Param"><a href="#8-5-About-Param" class="headerlink" title="8.5 About @Param()"></a>8.5 About @Param()</h3><p>关于@Param注解，是有几个原则的</p><ul><li>基本类型的参数或者String类型，需要加上该注解</li><li>如果是引用类型，则不需要加上该注解</li><li>如果只有一个基本类型，可以忽略，但是建议加上</li><li>我们在SQL中引用的引用的就是这里@Param()中设定的属性名</li></ul><h3 id="8-6-V-S"><a href="#8-6-V-S" class="headerlink" title="8.6 ${} V.S. #{}"></a>8.6 ${} V.S. #{}</h3><p>用前者存在SQL注入问题，后者是安全的。</p><h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">has</span> <span class="hljs-title">a</span> <span class="hljs-title">fully</span> <span class="hljs-title">featured</span> <span class="hljs-title">builder</span>, <span class="hljs-title">Automate</span> <span class="hljs-title">your</span> <span class="hljs-title">logging</span> <span class="hljs-title">variables</span>, <span class="hljs-title">and</span> <span class="hljs-title">much</span> <span class="hljs-title">more</span>.</span><br></code></pre></td></tr></table></figure><ul><li><p>java library</p></li><li><p>plugs</p></li><li><p>build tools</p></li><li><p>with one annotation your class</p></li></ul><p><strong>Lombok的使用</strong>：</p><ul><li><p><strong>在IDEA中安装Lombok插件</strong></p><img src="/posts/2020/12/31/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/lombok_plug.png" alt="在IDEA中搜索lombok插件" style="zoom:75%;"></li></ul><ul><li><p><strong>在项目中导入Lombok的jar包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>认识一下lombok可以加的注解，这些可以直接加在类的上面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and <span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>, <span class="hljs-meta">@RequiredArgsConstructor</span> and <span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Log</span>, <span class="hljs-meta">@Log4j</span>, <span class="hljs-meta">@Log4j2</span>, <span class="hljs-meta">@Slf4j</span>, <span class="hljs-meta">@XSlf4j</span>, <span class="hljs-meta">@CommonsLog</span>, <span class="hljs-meta">@JBossLog</span>, <span class="hljs-meta">@Flogger</span>, <span class="hljs-meta">@CustomLog</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@SuperBuilder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@With</span><br><span class="hljs-meta">@SneakyThrows</span><br></code></pre></td></tr></table></figure><p>当我们在一个类上面加上<code>@Data</code>，就会帮我们生成无参构造器，get/set方法，toString方法，equals方法和hasCode方法。</p><img src="https://cdn.jsdelivr.net/gh/AtroxQW/jsDeliverCDN@1.0/source/_posts/MyBatis学习笔记/@Data.png" alt="加上@Data注解" style="zoom:75%;"><p>由于加了上面@Data，是没有有参构造器的，我们可以再加两个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// User实体类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="10、Many-to-one"><a href="#10、Many-to-one" class="headerlink" title="10、Many to one"></a>10、Many to one</h2><p>多对一的形象解释图：</p><img src="/posts/2020/12/31/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/many_to_one.png" alt="多对一图片" style="zoom:75%;"><ul><li><p>对于学生这边而言，多个学生关联一个老师（多对一）。【关联】</p></li><li><p>而对于老师而言，有很多学生（一对多）。【集合】</p></li></ul><p>为了进一步阐述，先搭建测试环境。</p><h3 id="10-1-build-test-environment"><a href="#10-1-build-test-environment" class="headerlink" title="10.1 build test environment"></a>10.1 build test environment</h3><ol><li><p>在数据库中运行此SQL脚本。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`teacher`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher(<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;秦老师&#x27;</span>); <br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`student`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`tid`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>),<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`fktid`</span> (<span class="hljs-string">`tid`</span>),<br>  <span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-string">`fktid`</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`tid`</span>) <span class="hljs-keyword">REFERENCES</span> <span class="hljs-string">`teacher`</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;小张&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;小李&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>在pom文件中导入lombok</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>新建实体类Teacher，Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// 学生需要关联一个老师！</span><br>    <span class="hljs-keyword">private</span> Teacher teacher;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>建立Mapper接口</p><p><strong>StudentMapper</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudnetMapper</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>TeacherMapper:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TeacherMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from teacher where id = #&#123;tid&#125;&quot;)</span><br>    <span class="hljs-function">Teacher <span class="hljs-title">getTeacher</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>建立Mapper.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atrox.dao.TeacherMapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>在核心配置文件中绑定注册Mapper接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.dao.TeacherMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.dao.StudentMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试查询是否能够成功</p><p><strong>MyTest.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class);<br>        Teacher teacher = mapper.getTeacher(<span class="hljs-number">1</span>);<br>        System.out.println(teacher);<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="10-2-按照查询嵌套处理-子查询"><a href="#10-2-按照查询嵌套处理-子查询" class="headerlink" title="10.2 按照查询嵌套处理(子查询)"></a>10.2 按照查询嵌套处理(子查询)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atrox.dao.StudentMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    思路：</span><br><span class="hljs-comment">        1.查询所有的学生信息</span><br><span class="hljs-comment">        2.根据查询出来的学生的tid，寻找对应的老师</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>        select * from student;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        复杂的属性，我们需要单独处理</span><br><span class="hljs-comment">            对象：association</span><br><span class="hljs-comment">            集合：collection</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        select * from teacher where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-3-按照结果查询处理"><a href="#10-3-按照结果查询处理" class="headerlink" title="10.3 按照结果查询处理"></a>10.3 按照结果查询处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按照结果嵌套处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span>&gt;</span><br>    select s.id sid,s.name sname,t.name tname from student s,teacher t where s.tid = t.id;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="11、One-to-Many"><a href="#11、One-to-Many" class="headerlink" title="11、One to Many"></a>11、One to Many</h2><p>比如：一个老师拥有多个学生。对于老师而言，是一对多的关系</p><h3 id="11-1-环境搭建"><a href="#11-1-环境搭建" class="headerlink" title="11.1 环境搭建"></a>11.1 环境搭建</h3><p>与10.1相同</p><p><strong>实体类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pid;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// 一个老师拥有多个学生</span><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="11-2-按照结果嵌套处理"><a href="#11-2-按照结果嵌套处理" class="headerlink" title="11.2 按照结果嵌套处理"></a>11.2 按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按结果嵌套查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>    select s.id sid,s.name sname,t.name tname,t.id tid<br>    from student s,teacher t<br>    where s.tid = t.id and t.id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--集合使用collection,集合中的信息我们用ofType获取--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="11-3-按照查询嵌套处理"><a href="#11-3-按照查询嵌套处理" class="headerlink" title="11.3 按照查询嵌套处理"></a>11.3 按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span><br>    select * from teacher where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    select * from student where tid = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="11-4-conclusion"><a href="#11-4-conclusion" class="headerlink" title="11.4 conclusion"></a>11.4 conclusion</h3><ol><li>关联-association【多对一】</li><li>集合-collection【一对多】</li><li>javaType  &amp;  ofType<ul><li>javaType用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中的约束类型</li></ul></li></ol><p><strong>注意点</strong>：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>保证一对多和多对一中，属性名和字段的问题</li><li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li></ul><h2 id="12、动态SQL"><a href="#12、动态SQL" class="headerlink" title="12、动态SQL"></a>12、动态SQL</h2><p><strong>动态SQ是什么？</strong></p><p>动态SQL就是根据不同的条件生成不同的SQL语句。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">if<br>choose (when, otherwise)<br>trim (where, set)<br>foreach<br></code></pre></td></tr></table></figure><h3 id="12-1-搭建环境"><a href="#12-1-搭建环境" class="headerlink" title="12.1 搭建环境"></a>12.1 搭建环境</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`blog`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;博客id&#x27;</span>,<br>  <span class="hljs-string">`title`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;博客标题&#x27;</span>,<br>  <span class="hljs-string">`author`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;博客作者&#x27;</span>,<br>  <span class="hljs-string">`create_time`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  <span class="hljs-string">`views`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;浏览量&#x27;</span><br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8<br></code></pre></td></tr></table></figure><p>创建一个基础工程</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> views;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="4"><li>编写实体类对应Mapper接口和Mapper.xml</li></ol><h3 id="12-1-if"><a href="#12-1-if" class="headerlink" title="12.1 if"></a>12.1 if</h3><ul><li><p><strong>在BlogMapper接口中写方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询博客</span><br><span class="hljs-function">List&lt;Blog&gt; <span class="hljs-title">queryBlogIF</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>BlogMapper.xml中实现动态SQL</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        and title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>测试查询结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryBlogIF</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);<br>    HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>    map.put(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;Java如此简单&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;Atrox&quot;</span>);<br>    List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);<br>    <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;<br>        System.out.println(blog);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果为：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Blog(id=fa44dc9c851e432a8c3912e1250c9575, title=Java如此简单, author=Atrox, createTime=Thu Dec <span class="hljs-number">31</span> <span class="hljs-number">20</span>:<span class="hljs-number">46</span>:<span class="hljs-number">43</span> CST <span class="hljs-number">2020</span>, views=<span class="hljs-number">9999</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="12-2-choose-when-otherwise"><a href="#12-2-choose-when-otherwise" class="headerlink" title="12.2 choose(when,otherwise)"></a>12.2 choose(when,otherwise)</h3><p>有时候，<strong>我们不想使用所有的条件</strong>，而只是想从多个条件中<strong>选择一个来使用</strong>。这时候，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。例如下面我们想要实现这样的SQL效果，还是以我们的博客表为例。当提供了title，就以title为条件查询；如果提供了author，就以author为条件查询；如果两者都没有提供，就以views为条件查询。</p><ol><li><p><strong>第一步，在BlogMapper接口中写相关的方法queryBlogChoose()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询博客</span><br><span class="hljs-function">List&lt;Blog&gt; <span class="hljs-title">queryBlogChoose</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>第二步，在BlogMapper中写SQL语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>                title = #&#123;title&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>                and author = #&#123;author&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                and views = #&#123;views&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这里，我们需要解析一下上面各个标签的含义。</p><ul><li><where>标签，取代了我们之前在SQL语句中手写的where关键字。这里的<where>标签，只会在<strong>子元素有返回内容的情况下</strong>才在SQL语句中插入”WHERE”字句。而且，<strong>如果字句的开头为”AND”或”OR”,<where>标签也会将它们去除掉</where></strong>。比如在上面的代码中，如果只传了author，就会把 <code>and author = #&#123;author&#125;</code>最前面的<code>and</code>删除掉。</where></where></li><li><choose>标签就类似于java中的switch</choose></li><li><when>标签就类似于java中switch语句里的case</when></li><li><otherwise>标签就类似于java中switch语句里的default</otherwise></li></ul></li></ol><ol start="3"><li><p><strong>测试查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryBlogChoose</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);<br>    HashMap map = <span class="hljs-keyword">new</span> HashMap();<br>    map.put(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;Java如此简单&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;views&quot;</span>, <span class="hljs-number">9999</span>);<br>    List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);<br>    <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;<br>        System.out.println(blog);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="12-3-set"><a href="#12-3-set" class="headerlink" title="12.3 set"></a>12.3 set</h3><p>用于<strong>动态更新语句</strong>的类似解决方案叫做 <em>set</em>。<em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。</p><ol><li><p><strong>第一步，在BlogMapper接口中写相关的方法updateBlog()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBlog</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>第二步，在BlogMapper中写SQL语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    update blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            title = #&#123;title&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            author = #&#123;author&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>测试更新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateBlog</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);<br>    HashMap map = <span class="hljs-keyword">new</span> HashMap();<br>    map.put(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;Java如此简单2&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;芜湖大司马&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;a187ea08727d4b6d8ffb23dd4ed0df9e&quot;</span>);<br>    mapper.updateBlog(map);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="12-4-SQL片段"><a href="#12-4-SQL片段" class="headerlink" title="12.4 SQL片段"></a>12.4 SQL片段</h3><p>有些时候，在某个查询中会有<strong>大量重复的SQL语句</strong>，我们会感觉到很厌烦，比如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>    title = #&#123;title&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>    and author = #&#123;author&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这时候，我们就可以把它们抽成一个SQL片段，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在需要用到这个SQL片段的地方，直接id为if-title-author的sql片段即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="12-5-Foreach"><a href="#12-5-Foreach" class="headerlink" title="12.5 Foreach"></a>12.5 Foreach</h3><p>动态SQL的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。</p><p>我们可能会想实现这样的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> blog <span class="hljs-keyword">where</span> (<span class="hljs-keyword">id</span> =<span class="hljs-string">&quot;a187ea08727d4b6d8ffb23dd4ed0df9e&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">id</span>= <span class="hljs-string">&quot;fa44dc9c851e432a8c3912e1250c9575&quot;</span> );<br></code></pre></td></tr></table></figure><p>这时候我们就可以使用foreach元素来制定一个集合并遍历。</p><ol><li><p><strong>第一步，在BlogMapper接口中写相关的方法updateBlog()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询前两条记录的博客</span><br>    <span class="hljs-function">List&lt;Blog&gt; <span class="hljs-title">queryBlogForeach</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>第二步，在BlogMapper中写SQL语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--我们现在传递一个万能的map，这个map中可以存在一个集合--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>            id = #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这里我我们对foreach元素，进行一些必要的解释。</p><ul><li>collection代表从map中传来要遍历的可迭代对象（List或者Set）</li><li>item代表要便利的元素体内的集合项</li><li>open为<code>id=</code>后面的代表开始的字符串</li><li>close代表最后要结束时的字符串</li><li>separator代表每一个集合项之间的分隔符</li></ul></li></ol><ol start="3"><li><p><strong>第三步，测试查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryBlogForeach</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);<br>    HashMap map = <span class="hljs-keyword">new</span> HashMap();<br>    ArrayList&lt;String&gt; ids = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>    ids.add(<span class="hljs-string">&quot;a187ea08727d4b6d8ffb23dd4ed0df9e&quot;</span>);<br>    ids.add(<span class="hljs-string">&quot;fa44dc9c851e432a8c3912e1250c9575&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;ids&quot;</span>,ids);<br>    mapper.queryBlogForeach(map);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="13、缓存"><a href="#13、缓存" class="headerlink" title="13、缓存"></a>13、缓存</h2><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><p>众所周知，我们所有的查询都是需要<strong>连接数据库</strong>的，连接数据库就会<strong>消耗资源</strong>，那我们就想要实现最大利用。这时，我们想能不能把一次查询的结果，给它暂存在一个可以直接取到的地方（内存），下次要取出相同数据的时候就不用连接数据库了。而这些放在内存中的数据，就叫<strong>缓存</strong>。</p><ol><li><p><strong>什么是缓存</strong>？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了<strong>高并发系统的性能问题。</strong></li></ul></li><li><p><strong>为什么使用缓存</strong>？</p><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul></li><li><p><strong>什么样的数据能使用缓存</strong>？</p><ul><li>经常<strong>查询</strong>并且不经常改变的数据。【可以使用缓存】</li></ul></li></ol><h3 id="13-2-Mybatis缓存"><a href="#13-2-Mybatis缓存" class="headerlink" title="13.2 Mybatis缓存"></a>13.2 Mybatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p><ul><li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p></li><li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p></li><li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p></li></ul></li></ul><h3 id="13-3-一级缓存"><a href="#13-3-一级缓存" class="headerlink" title="13.3 一级缓存"></a>13.3 一级缓存</h3><p>一级缓存也叫本地缓存：  SqlSession</p><ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li></ul><p><strong>测试一级缓存</strong>：</p><ol><li><p>开启日志</p></li><li><p>测试一个Session中查询两次相同记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>    User user = mapper.queryUserById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>    System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>    User user1 = mapper.queryUserById(<span class="hljs-number">1</span>);<br>    System.out.println(user1);<br><br>    System.out.println(user == user1);<br><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查看日志输出</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Opening JDBC Connection<br>Created connection 581318631.<br>==&gt;  Preparing: select <span class="hljs-emphasis">* from mybatis.user where id = ? </span><br><span class="hljs-emphasis">==&gt; Parameters: 1(Integer)</span><br><span class="hljs-emphasis">&lt;==    Columns: id, name, pwd</span><br><span class="hljs-emphasis">&lt;==        Row: 1, 乔威, 123456</span><br><span class="hljs-emphasis">&lt;==      Total: 1</span><br><span class="hljs-emphasis">User(id=1, name=乔威, pwd=123456)</span><br><span class="hljs-emphasis">========================</span><br><span class="hljs-emphasis">User(id=1, name=乔威, pwd=123456)</span><br><span class="hljs-emphasis">true</span><br><span class="hljs-emphasis">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@22a637e7]</span><br><span class="hljs-emphasis">Returned connection 581318631 to pool.</span><br></code></pre></td></tr></table></figure></li><li><p>缓存失效的情况</p><ul><li><p>查询不同的记录</p></li><li><p><strong>所有的增删改操作（即使对其他记录进行操作），可能会改变原来的数据，所以必定会刷新缓存</strong></p></li><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sqlSession.clearCache();<br></code></pre></td></tr></table></figure></li></ul></li><li><p>小结</p><p>一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p></li></ol><p>一级缓存就是一个Map。</p><h3 id="13-4-二级缓存"><a href="#13-4-二级缓存" class="headerlink" title="13.4 二级缓存"></a>13.4 二级缓存</h3><ul><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li></ul><p><strong>步骤</strong>：</p><ol><li><p>开启全局缓存（mybatis-config.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在要使用二级缓存的Mapper中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>也可以自定义参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>  <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span> #缓存策略</span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span>  #刷新周期</span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span>               #缓存中最多可以放的引用数量</span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>  #只读<br></code></pre></td></tr></table></figure></li></ol><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li></ul><h3 id="13-5-缓存原理"><a href="#13-5-缓存原理" class="headerlink" title="13.5 缓存原理"></a>13.5 缓存原理</h3><p><img src="/posts/2020/12/31/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cache.png" alt="缓存原理图解"></p><h3 id="13-6-自定义缓存-ehcache"><a href="#13-6-自定义缓存-ehcache" class="headerlink" title="13.6 自定义缓存-ehcache"></a>13.6 自定义缓存-ehcache</h3><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存</p><p>要在程序中使用ehcache，先要导包！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在mapper中指定使用我们的ehcache缓存实现！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span><br><span class="hljs-comment">       user.home – 用户主目录</span><br><span class="hljs-comment">       user.dir  – 用户当前工作目录</span><br><span class="hljs-comment">       java.io.tmpdir – 默认临时文件路径</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br><br>    &lt;defaultCache<br>            eternal=&quot;false&quot;<br>            maxElementsInMemory=&quot;10000&quot;<br>            overflowToDisk=&quot;false&quot;<br>            diskPersistent=&quot;false&quot;<br>            timeToIdleSeconds=&quot;1800&quot;<br>            timeToLiveSeconds=&quot;259200&quot;<br>            memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;<br><br>    &lt;cache<br>            name=&quot;cloud_user&quot;<br>            eternal=&quot;false&quot;<br>            maxElementsInMemory=&quot;5000&quot;<br>            overflowToDisk=&quot;false&quot;<br>            diskPersistent=&quot;false&quot;<br>            timeToIdleSeconds=&quot;1800&quot;<br>            timeToLiveSeconds=&quot;1800&quot;<br>            memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;<br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      name:缓存名称。</span><br><span class="hljs-comment">      maxElementsInMemory:缓存最大数目</span><br><span class="hljs-comment">      maxElementsOnDisk：硬盘最大缓存个数。</span><br><span class="hljs-comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span><br><span class="hljs-comment">      overflowToDisk:是否保存到磁盘，当系统宕机时</span><br><span class="hljs-comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span><br><span class="hljs-comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span><br><span class="hljs-comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span><br><span class="hljs-comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="hljs-comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span><br><span class="hljs-comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="hljs-comment">      clearOnFlush：内存数量最大时是否清除。</span><br><span class="hljs-comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span><br><span class="hljs-comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span><br><span class="hljs-comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span><br><span class="hljs-comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span><br><span class="hljs-comment">   --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>framework</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020寒假踩坑大全</title>
    <link href="/posts/2020/12/20/2020%E5%AF%92%E5%81%87%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%85%A8/"/>
    <url>/posts/2020/12/20/2020%E5%AF%92%E5%81%87%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h4 id="1-Tomcat启动8080端口被占用"><a href="#1-Tomcat启动8080端口被占用" class="headerlink" title="1.Tomcat启动8080端口被占用"></a>1.Tomcat启动8080端口被占用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">java.net.BindException: Address already in <span class="hljs-keyword">use</span>: bind<br></code></pre></td></tr></table></figure><p><strong>解决方案</strong>:</p><p>快捷键 win + R，输入cmd，输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">netstat -aon|findstr <span class="hljs-string">&quot;8080&quot;</span><br></code></pre></td></tr></table></figure><p>出现占用8080端口的进程，然后启用任务管理器找到该进程并结束。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
