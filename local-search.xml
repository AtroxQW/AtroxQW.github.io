<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MyBatis—学习之路</title>
    <link href="/posts/MyBatis%E2%80%94%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <url>/posts/MyBatis%E2%80%94%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="1-1-What-is-MyBatis？"><a href="#1-1-What-is-MyBatis？" class="headerlink" title="1.1 What is MyBatis？"></a>1.1 What is MyBatis？</h3><p><strong>MyBatis_Logo</strong>:<img src="/posts/MyBatis%E2%80%94%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/blog\source\_posts\MyBatis学习\mybatis_logo.png" alt="MyBatis_logo" style="zoom:67%;"></p><p><strong>concept</strong>：MyBatis是一款优秀的==持久层框架==，它支持定制化SQL、存储过程以及高级映射。MyBatis避免了几乎所有的<code>JDBC代码</code>和<code>手动设置参数</code>以及<code>获取结果集</code>。MyBatis可以使用简单的<code>XML</code>或<code>注解</code>来配置和映射原生类型、接口和Java的pojo（实体类）为数据库中的记录。</p><p><strong>history</strong>：MyBatis 本是apache的一个开源项目<strong>iBatis</strong>，2010年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由apache software foundation 迁移到了[google code](<a href="https://baike.baidu.com/item/google">https://baike.baidu.com/item/google</a> code/2346604)，并且改名为MyBatis 。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341">Github</a>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexoxo_Fluid主题配置</title>
    <link href="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <url>/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Fluid博客美化"><a href="#Fluid博客美化" class="headerlink" title="Fluid博客美化"></a>Fluid博客美化</h1><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>Hexo 5.0.0版本以上，通过npm直接安装，进入博客目录执行命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后再博客目录下创建<code>_config.fluid.yml</code>文件，将hexo-theme-fluid主题的<code>_config.yml</code>内容复制进去。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br></pre></td><td class="code"><pre><code class="hljs xml">#---------------------------<br># Hexo Theme Fluid<br># Author: Fluid-dev<br># Github: https://github.com/fluid-dev/hexo-theme-fluid<br>#<br># 配置指南: https://hexo.fluid-dev.com/docs/guide/<br># 你可以从指南中获得更详细的说明<br>#<br># Guide: https://hexo.fluid-dev.com/docs/en/guide/<br># You can get more detailed help from the guide<br>#---------------------------<br><br><br>#---------------------------<br># 全局<br># Global<br>#---------------------------<br><br># 用于浏览器标签的图标<br># Icon for browser tab<br>favicon: /img/favicon.png<br><br># 用于苹果设备的图标<br># Icon for Apple touch<br>apple_touch_icon: /img/favicon.png<br><br># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名<br># Title separator in browser tab, eg: article - site<br>title_join_string: &quot; - &quot;<br><br># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）<br># Force all links to be HTTPS (applicable to HTTP mixed error)<br>force_https: false<br><br># 代码块的增强配置<br># Enhancements to code blocks<br>code:<br>  # 是否开启复制代码的按钮<br>  # Enable copy code button<br>  copy_btn: true<br><br>  # 代码高亮<br>  # Code highlight<br>  highlight:<br>    enable: true<br><br>    # 代码块是否显示行号<br>    # If true, the code block display line numbers<br>    line_number: true<br><br>    # 实现高亮的库，对应下面的设置<br>    # Highlight library<br>    # Options: highlightjs | prismjs<br>    lib: &quot;highlightjs&quot;<br><br>    highlightjs:<br>      # 在链接中挑选 style 填入<br>      # Select a style in the link<br>      # See: https://highlightjs.org/static/demo/<br>      style: &quot;Github Gist&quot;<br><br>      # 是否根据 style 改变代码背景色（如果 style 是深色背景别忘了开启此项）<br>      # If true, the code background will change color based on the style (If style has a dark background, don&#x27;t forget to true)<br>      bg_color: false<br><br>    prismjs:<br>      # 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接<br>      # Select the style button on the right side of the link page, you can also set the CSS link<br>      # See: https://prismjs.com/<br>      style: &quot;default&quot;<br><br>      # 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成<br>      # If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser<br>      preprocess: true<br><br># 一些好玩的功能<br># Some fun features<br>fun_features:<br>  # 为 subtitle 添加打字机效果<br>  # Typing animation for subtitle<br>  typing:<br>    enable: true<br><br>    # 打印速度，数字越大越慢<br>    # Typing speed, the larger the number, the slower<br>    typeSpeed: 70<br><br>    # 游标字符<br>    # Cursor character<br>    cursorChar: &quot;_&quot;<br><br>    # 是否循环播放效果<br>    # If true, loop animation<br>    loop: false<br><br>  # 为文章内容中的标题添加锚图标<br>  # Add an anchor icon to the title on the post page<br>  anchorjs:<br>    enable: true<br>    element: h1,h2,h3,h4,h5,h6<br>    placement: right<br>    # Options: hover | always | touch<br>    visible: hover<br>    # Option：§ | # | ❡<br>    icon: &quot;&quot;<br><br>  # 加载进度条<br>  # Progress bar when loading<br>  progressbar:<br>    enable: true<br>    height_px: 3<br>    color: &quot;#29d&quot;<br>    # See: https://github.com/rstacruz/nprogress<br>    options: &#123; showSpinner: false, trickleSpeed: 100 &#125;<br><br># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换<br># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option<br>dark_mode:<br>  enable: true<br>  # 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式<br>  # Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time<br>  # Options: auto | light | dark<br>  default: auto<br><br># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发<br># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below<br># See: https://www.webdesignrankings.com/resources/lolcolors/<br>color:<br>  # body 背景色<br>  # Color of body background<br>  body_bg_color: &quot;#eee&quot;<br>  # 暗色模式下的 body 背景色，下同<br>  # Color in dark mode, the same below<br>  body_bg_color_dark: &quot;#181c27&quot;<br><br>  # 顶部菜单背景色<br>  # Color of navigation bar background<br>  navbar_bg_color: &quot;#2f4154&quot;<br>  navbar_bg_color_dark: &quot;#1f3144&quot;<br><br>  # 顶部菜单字体色<br>  # Color of navigation bar text<br>  navbar_text_color: &quot;#fff&quot;<br>  navbar_text_color_dark: &quot;#d0d0d0&quot;<br><br>  # 全局字体色<br>  # Color of global text<br>  text_color: &quot;#3c4858&quot;<br>  text_color_dark: &quot;#c4c6c9&quot;<br><br>  # 全局次级字体色（摘要、简介等位置）<br>  # Color of global secondary text (excerpt, introduction, etc.)<br>  sec_text_color: &quot;#718096&quot;<br>  sec_text_color_dark: &quot;#a7a9ad&quot;<br><br>  # 文章正文字体色<br>  # Color of post text<br>  post_text_color: &quot;#2c3e50&quot;<br>  post_text_color_dark: &quot;#c4c6c9&quot;<br><br>  # 文章正文字体色（h1 h2 h3...）<br>  # Color of Article heading (h1 h2 h3...)<br>  post_heading_color: &quot;#1a202c&quot;<br>  post_heading_color_dark: &quot;#c4c6c9&quot;<br><br>  # 文章超链接字体色<br>  # Color of post link<br>  post_link_color: &quot;#0366d6&quot;<br>  post_link_color_dark: &quot;#1589e9&quot;<br><br>  # 超链接悬浮时字体色<br>  # Color of link when hovering<br>  link_hover_color: &quot;#30a9de&quot;<br>  link_hover_color_dark: &quot;#30a9de&quot;<br><br>  # 超链接悬浮背景色<br>  # Color of link background when hovering<br>  link_hover_bg_color: &quot;#f8f9fa&quot;<br>  link_hover_bg_color_dark: &quot;#364151&quot;<br><br>  # 主面板背景色<br>  # Color of main board<br>  board_color: &quot;#fff&quot;<br>  board_color_dark: &quot;#252d38&quot;<br><br># 主题字体配置<br># Font<br>font:<br>  font_size: 16px<br>  font_family:<br>  code_font_size: 85%<br><br># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js<br># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`<br>custom_js:<br><br># 指定自定义 .css 文件路径，用法和 custom_js 相同<br># The usage is the same as custom_js<br>custom_css:<br><br># 自定义底部 HTML 内容（位于 footer 上方），注意不要和 `post: custom` 配置冲突<br># Customize the HTML content at the bottom (located above the footer), be careful not to conflict with `post: custom`<br>custom_html: &#x27;&#x27;<br><br># 网页访问统计<br># Analysis of website visitors<br>web_analytics:  # 网页访问统计<br>  enable: false<br><br>  # 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串<br>  # Baidu analytics, get the string behind `hm.js?`<br>  # See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376<br>  baidu:<br><br>  # Google 统计的 Tracking ID<br>  # Google analytics, set Tracking ID<br>  # See: https://developers.google.com/analytics/devguides/collection/analyticsjs<br>  google:<br><br>  # Google gtag.js 的媒体资源 ID<br>  # Google gtag.js GA_MEASUREMENT_ID<br>  # See: https://developers.google.com/analytics/devguides/collection/gtagjs/<br>  gtag:<br><br>  # 腾讯统计的 H5 App ID，开启高级功能才有cid<br>  # Tencent analytics, set APP ID<br>  # See: https://mta.qq.com/h5/manage/ctr_app_manage<br>  tencent:<br>    sid:<br>    cid:<br><br>  # 51.la 站点统计 ID<br>  # 51.la analytics<br>  # See: https://www.51.la/user/site/index<br>  woyaola:  # 51.la 站点统计 ID，参见<br><br>  # 友盟/cnzz 站点统计 web_id<br>  # cnzz analytics<br>  # See: https://web.umeng.com/main.php?c=site&amp;a=show<br>  cnzz:<br><br>  # LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加<br>  # LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase<br>  leancloud:<br>    app_id:<br>    app_key:<br>    # REST API 服务器地址，国际版不填<br>    # Only the Chinese mainland users need to set<br>    server_url:<br><br># 对页面中的图片进行懒加载处理，可见范围外的图片不会加载<br># Lazy loading of images on the page<br>lazyload:<br>  enable: true<br>  # 懒加载仅对文章页生效，开启后如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`<br>  # If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter<br>  onlypost: false<br><br># 主题版本相关<br># Theme version<br>version:<br>  # 每次生成页面后，检测主题是否为最新版本<br>  # If true, check whether Fluid is the latest version after hexo generate<br>  check: false<br><br><br>#---------------------------<br># 页头<br># Header<br>#---------------------------<br><br># 导航栏的相关配置<br># Navigation bar<br>navbar:<br>  # 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示<br>  # The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config<br>  blog_title: &quot;Fluid&quot;<br><br>  # 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效<br>  # Navigation bar frosted glass special animation. It is an experimental feature<br>  ground_glass:<br>    enable: false<br><br>    # 模糊像素，只能为数字，数字越大模糊度越高<br>    # Number of blurred pixel. the larger the number, the higher the blur<br>    px: 3<br><br>    # 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体<br>    # Ratio of opacity, 1.0 is completely opaque<br>    # available: 0 - 1.0<br>    alpha: 0.7<br><br>  # 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称<br>  # Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name<br>  menu:<br>    - &#123; key: &quot;home&quot;, link: &quot;/&quot;, icon: &quot;iconfont icon-home-fill&quot; &#125;<br>    - &#123; key: &quot;archive&quot;, link: &quot;/archives/&quot;, icon: &quot;iconfont icon-archive-fill&quot; &#125;<br>    - &#123; key: &quot;category&quot;, link: &quot;/categories/&quot;, icon: &quot;iconfont icon-category-fill&quot; &#125;<br>    - &#123; key: &quot;tag&quot;, link: &quot;/tags/&quot;, icon: &quot;iconfont icon-tags-fill&quot; &#125;<br>    - &#123; key: &quot;about&quot;, link: &quot;/about/&quot;, icon: &quot;iconfont icon-user-fill&quot; &#125;<br>    #- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;<br><br># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件<br># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files<br>search:<br>  enable: true<br>  # 搜索索引文件的路径，可以是相对路径或外站的绝对路径<br>  # Path for search index file, it can be a relative path or an absolute path<br>  path: /local-search.xml<br><br>  # 文件生成在本地的位置，必须是相对路径<br>  # The location where the index file is generated locally, it must be a relative location<br>  generate_path: /local-search.xml<br><br>  # 搜索的范围<br>  # Search field<br>  # Options: post | page | all<br>  field: post<br><br>  # 搜索是否扫描正文<br>  # If true, search will scan the post content<br>  content: true<br><br># 首屏图片的相关配置<br># Config of the big image on the first screen<br>banner:<br>  # 视差滚动，图片与板块会随着屏幕滚动产生视差效果<br>  # Scrolling parallax<br>  parallax: true<br><br>  # 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0<br>  # Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0<br>  width_height_ratio: 1.0<br><br># 向下滚动的箭头<br># Scroll down arrow<br>scroll_down_arrow:<br>  enable: true<br><br>  # 头图高度不小于指定比例，才显示箭头<br>  # Only the height of the banner image is greater than the ratio, the arrow is displayed<br>  # Available: 0 - 100<br>  banner_height_limit: 80<br><br>  # 翻页后自动滚动<br>  # Auto scroll after page turning<br>  scroll_after_turning_page: true<br><br># 向顶部滚动的箭头<br># Scroll top arrow<br>scroll_top_arrow:<br>  enable: true<br><br><br>#---------------------------<br># 页脚<br># Footer<br>#---------------------------<br>footer:<br>  # 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题<br>  # HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people<br>  content: &#x27;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://hexo.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-love&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fluid<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  &#x27;<br><br>  # 展示网站的 PV、UV 统计数<br>  # Display website PV and UV statistics<br>  statistics:<br>    enable: false<br><br>    # 统计数据来源，如果使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；如果使用 busuanzi 可能会有请求失败的情况<br>    # Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`<br>    # Options: busuanzi | leancloud<br>    source: &quot;busuanzi&quot;<br><br>    # 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同<br>    # Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below<br>    pv_format: &quot;总访问量 &#123;&#125; 次&quot;<br>    uv_format: &quot;总访客数 &#123;&#125; 人&quot;<br><br>  # 国内大陆服务器的备案信息<br>  # For Chinese mainland website policy, other areas keep disable<br>  beian:<br>    enable: false<br>    # ICP证号<br>    icp_text: 京ICP证123456号<br>    # 公安备案号，不填则只显示ICP<br>    police_text: 京公网安备12345678号<br>    # 公安备案的编号，用于URL跳转查询<br>    police_code: 12345678<br>    # 公安备案的图片. 为空时不显示备案图片<br>    police_icon: /img/police_beian.png<br><br><br>#---------------------------<br># 首页<br># Home Page<br>#---------------------------<br>index:<br>  # 首页 Banner 头图，可以是相对路径或绝对路径，以下相同<br>  # Path of Banner image, can be a relative path or an absolute path, the same on other pages<br>  banner_img: /img/default.png<br><br>  # 头图高度，屏幕百分比<br>  # Height ratio of banner image<br>  # Available: 0 - 100<br>  banner_img_height: 100<br><br>  # 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明<br>  # Opacity of the banner mask, 1.0 is completely opaque<br>  # Available: 0 - 1.0<br>  banner_mask_alpha: 0.3<br><br>  # 首页副标题的独立设置<br>  # Independent config of home page subtitle<br>  slogan:<br>    enable: true<br><br>    # 为空则按 hexo config.subtitle 显示<br>    # If empty, text based on `subtitle` in hexo config<br>    text: &quot;An elegant Material-Design theme for Hexo&quot;<br><br>    # 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能<br>    # Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation<br>    api:<br>      enable: false<br><br>      # 请求地址<br>      # Request url<br>      url: &quot;&quot;<br><br>      # 请求方法<br>      # Request method<br>      # Available: GET | POST | PUT<br>      method: &quot;GET&quot;<br><br>      # 请求头<br>      # Request headers<br>      headers: &#123;&#125;<br><br>      # 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项<br>      # The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected<br>      keys: []<br><br>  # 自动截取文章摘要<br>  # Auto extract post<br>  auto_excerpt:<br>    enable: true<br><br>  # 打开文章的标签方式<br>  # The browser tag to open the post<br>  # Available: _blank | _self<br>  post_url_target: _self<br><br>  # 是否显示文章信息（时间、分类、标签）<br>  # Meta information of post<br>  post_meta:<br>    date: true<br>    category: true<br>    tag: true<br><br>  # 文章通过 sticky 排序后，在首页文章标题前显示图标<br>  # If the posts are sorted by `sticky`, an icon is displayed in front of the post title<br>  post_sticky:<br>    enable: true<br>    icon: &quot;iconfont icon-top&quot;<br><br><br>#---------------------------<br># 文章页<br># Post Page<br>#---------------------------<br>post:<br>  banner_img: /img/default.png<br>  banner_img_height: 70<br>  banner_mask_alpha: 0.3<br><br>  # 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片<br>  # Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed<br>  default_index_img:<br><br>  # 文章标题下方的元信息<br>  # Meta information below title<br>  meta:<br>    # 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值<br>    # Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config<br>    author:<br>      enable: false<br><br>    # 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期<br>    # Post date, based on `date` field in front-matter, if not set, based on create date of .md file<br>    date:<br>      enable: true<br>      # 格式参照 ISO-8601 日期格式化<br>      # ISO-8601 date format<br>      # See: http://momentjs.cn/docs/#/parsing/string-format/<br>      format: &quot;LL a&quot;<br><br>    # 字数统计<br>    # Word count<br>    wordcount:<br>      enable: true<br>      # 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同<br>      # Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below<br>      format: &quot;&#123;&#125; 字&quot;<br><br>    # 估计阅读全文需要的时长<br>    # Estimate the time required to read the full text<br>    min2read:<br>      enable: true<br>      format: &quot;&#123;&#125; 分钟&quot;<br>      # 每分钟阅读多少字，如果是技术文章，建议降低<br>      # Words read per minute<br>      words: 100<br><br>    # 浏览量计数<br>    # Number of visits<br>    views:<br>      enable: false<br>      # 统计数据来源<br>      # Data Source<br>      # Options: busuanzi | leancloud<br>      source: &quot;busuanzi&quot;<br>      format: &quot;&#123;&#125; 次&quot;<br><br>  # 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）<br>  # Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)<br>  updated:<br>    enable: false<br><br>    # 描述文字<br>    # Descriptive text before date<br>    content: 本文最后更新于：<br><br>    # 是否使用相对时间表示，比如：&quot;3 天前&quot;<br>    # If true, it will be a relative time, such as: &quot;3 days ago&quot;<br>    relative: false<br><br>  # 文章右侧目录<br>  # Table of contents (TOC)<br>  toc:<br>    enable: true<br>    # 目录会选择这些节点作为标题<br>    # TOC will select these nodes as headings<br>    headingSelector: &quot;h1,h2,h3,h4,h5,h6&quot;<br>    # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开<br>    # Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings<br>    collapseDepth: 0<br><br>  # 版权声明，会显示在每篇文章的结尾<br>  # Copyright, will be displayed at the end of each post<br>  copyright:<br>    enable: true<br>    content: &#x27;本博客所有文章除特别声明外，均采用 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.zh&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span>CC BY-SA 4.0 协议<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> ，转载请注明出处！&#x27;<br><br>  # 文章底部上一篇下一篇功能<br>  # Link to previous/next post<br>  prev_next:<br>    enable: true<br><br>  # 文章底部自定义区域（位于 footer 上方），支持 HTML，可插入赞赏码、公众号这类内容内容<br>  # Custom content at the bottom of the post page (located above the footer)<br>  custom:<br>    enable: false<br>    content: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://octodex.github.com/images/jetpacktocat.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rounded mx-auto d-block mt-5&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:150px; height:150px;&quot;</span>&gt;</span>&#x27;<br><br>  # 文章图片可点击放大<br>  # Zoom feature of images<br>  image_zoom:<br>    enable: true<br><br>  # 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突<br>  # Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict<br>  footnote:<br>    enable: true<br>    # 脚注的节标题，也可以在 front-matter 中通过 `footnote: <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Reference<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>` 这种形式修改单独页面的 header<br>    # The section title of the footnote, you can also modify the header of a single page in the form of `footnote: <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Reference<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>` in front-matter<br>    header: &#x27;&#x27;<br><br>  # 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式<br>  # Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math<br>  math:<br>    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`<br>    # If you want to use math on the custom page, you need to set `math: true` in Front-matter<br>    enable: false<br><br>    # 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度<br>    # If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math<br>    specific: false<br><br>    # Options: mathjax | katex<br>    engine: mathjax<br><br>  # 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图<br>  # Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid<br>  mermaid:<br>    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`<br>    # If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter<br>    enable: false<br><br>    # 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度<br>    # If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid<br>    specific: false<br><br>    # See: http://mermaid-js.github.io/mermaid/<br>    options: &#123; theme: &#x27;default&#x27; &#125;<br><br>  # 评论插件<br>  # Comment plugin<br>  comments:<br>    enable: false<br>    # 指定的插件，需要同时设置对应插件的必要参数<br>    # The specified plugin needs to set the necessary parameters at the same time<br>    # Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo<br>    type: disqus<br><br><br>#---------------------------<br># 评论插件<br># Comment plugins<br>#<br># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数<br># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`<br>#---------------------------<br><br># Utterances<br># 基于 GitHub Issues<br># Based on GitHub Issues<br># See: https://utteranc.es<br>utterances:<br>  repo:<br>  issue_term: pathname<br>  label: utterances<br>  theme: github-light<br>  theme_dark: github-dark<br>  crossorigin: anonymous<br><br># Disqus<br># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs<br># Based on third-party service<br># See: https://disqus.com<br>disqus:<br>  shortname:<br>  # 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用<br>  # The following are Disqusjs configurations, please ignore if DisqusJS is not required<br>  # See: https://github.com/SukkaW/DisqusJS<br>  disqusjs: false<br>  apikey:<br><br># Gitalk<br># 基于 GitHub Issues<br># Based on GitHub Issues<br># See: https://github.com/gitalk/gitalk#options<br>gitalk:<br>  clientID:<br>  clientSecret:<br>  repo:<br>  owner:<br>  admin: [&#x27;name&#x27;]<br>  language: zh-CN<br>  labels: [&#x27;Gitalk&#x27;]<br>  perPage: 10<br>  pagerDirection: last<br>  distractionFreeMode: false<br>  createIssueManually: true<br><br># Valine<br># 基于 LeanCloud<br># Based on LeanCloud<br># See: https://valine.js.org/configuration.html<br>valine:<br>  appid:<br>  appkey:<br>  placeholder: 说点什么<br>  path: window.location.pathname<br>  avatar: retro<br>  meta: [&#x27;nick&#x27;, &#x27;mail&#x27;, &#x27;link&#x27;]<br>  pageSize: 10<br>  lang: zh-CN<br>  highlight: false<br>  recordIP: false<br>  serverURLs:<br><br># Waline<br># 一款从 Valine 衍生的带后端的评论插件<br># A comment plugin with backend derived from Valine<br># See: https://waline.js.org/<br>waline:<br>  serverURL: &#x27;&#x27;<br>  placeholder: 说点什么<br>  path: window.location.pathname<br>  avatar: retro<br>  meta: [&#x27;nick&#x27;, &#x27;mail&#x27;, &#x27;link&#x27;]<br>  pageSize: 10<br>  lang: zh-CN<br>  highlight: true<br>  avatarForce: false<br>  requiredFields: []<br>  emojiCDN: &#x27;&#x27;<br>  emojiMaps: &#123;&#125;<br><br># 畅言 Changyan<br># 基于第三方的服务<br># Based on third-party service, insufficient support for regions outside China<br># http://changyan.kuaizhan.com<br>changyan:<br>  appid: &#x27;&#x27;<br>  appkey: &#x27;&#x27;<br><br># 来必力 Livere<br># 基于第三方的服务<br># Based on third-party service<br># See: https://www.livere.com<br>livere:<br>  uid: &#x27;&#x27;<br><br># Remark42<br># 需要自己运行后端服务<br># Need to run the backend service yourself<br># See: https://remark42.com<br>remark42:<br>  host:<br>  site_id:<br>  max_shown_comments: 10<br>  locale: zh<br><br># Twikoo<br># 基于腾讯云开发<br># Based on Tencent CloudBase<br># See: https://twikoo.js.org<br>twikoo:<br>  env_id:<br><br><br>#---------------------------<br># 归档页<br># Archive Page<br>#---------------------------<br>archive:<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:<br><br><br>#---------------------------<br># 分类页<br># Category Page<br>#---------------------------<br>category:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:<br><br>  # 单个分类中折叠展示文章数的最大值，超过限制会显示 More<br>  # The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More<br>  post_limit: 10<br><br>  # 排序字段，前面带减号是倒序，不带减号是正序，可选项：name | length<br>  # Sort field, with a minus sign is reverse order<br>  # Options: name | length<br>  order_by: &quot;-length&quot;<br><br>  # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开<br>  # Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories<br>  collapse_depth: 0<br><br><br>#---------------------------<br># 标签页<br># Tag Page<br>#---------------------------<br>tag:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 80<br>  banner_mask_alpha: 0.3<br>  subtitle:<br>  tagcloud:<br>    min_font: 15<br>    max_font: 30<br>    unit: px<br>    start_color: &quot;#BBBBEE&quot;<br>    end_color: &quot;#337ab7&quot;<br><br><br>#---------------------------<br># 关于页<br># About Page<br>#---------------------------<br>about:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:  # 打字机内容<br>  avatar: /img/avatar.png<br>  name: &quot;Fluid&quot;<br>  introduce: &quot;An elegant theme for Hexo&quot;<br>  # 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码<br>  # More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code<br>  icons:<br>    - &#123; class: &quot;iconfont icon-github-fill&quot;, link: &quot;https://github.com&quot;, tip: &quot;GitHub&quot; &#125;<br>    - &#123; class: &quot;iconfont icon-douban-fill&quot;, link: &quot;https://douban.com&quot;, tip: &quot;豆瓣&quot; &#125;<br>    - &#123; class: &quot;iconfont icon-wechat-fill&quot;, qrcode: &quot;/img/favicon.png&quot; &#125;<br><br><br>#---------------------------<br># 自定义页<br># Custom Page<br>#<br># 通过 hexo new page 命令创建的页面<br># Custom Page through `hexo new page`<br>#---------------------------<br>page:<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br><br><br>#---------------------------<br># 404页<br># 404 Page<br>#---------------------------<br>page404:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 85<br>  banner_mask_alpha: 0.3<br>  subtitle: &quot;Page not found&quot;<br><br><br>#---------------------------<br># 友链页<br># Links Page<br>#---------------------------<br>links:<br>  enable: true<br>  banner_img: /img/default.png<br>  banner_img_height: 60<br>  banner_mask_alpha: 0.3<br>  subtitle:<br>  # 友链的成员项<br>  # Member item of page<br>  items:<br>    - &#123;<br>      title: &quot;Fluid Blog&quot;,<br>      intro: &quot;主题博客&quot;,<br>      link: &quot;https://hexo.fluid-dev.com/&quot;,<br>      image: &quot;/img/favicon.png&quot;<br>    &#125;<br>    - &#123;<br>      title: &quot;Fluid Docs&quot;,<br>      intro: &quot;主题使用指南&quot;,<br>      link: &quot;https://hexo.fluid-dev.com/docs/&quot;,<br>      image: &quot;/img/favicon.png&quot;<br>    &#125;<br>    - &#123;<br>      title: &quot;Fluid Repo&quot;,<br>      intro: &quot;主题 GitHub 仓库&quot;,<br>      link: &quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;,<br>      image: &quot;/img/favicon.png&quot;<br>    &#125;<br><br><br>#---------------------------<br># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，<br># 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，<br># ** 如果你不知道如何设置，请不要做任何改动 **<br>#<br># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.<br># Be aware that you would better use the same version as default ones to avoid potential problems.<br># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING<br>#---------------------------<br><br>static_prefix:<br>  # 内部静态<br>  # Internal static<br>  internal_js: /js<br>  internal_css: /css<br>  internal_img: /img<br><br>  # 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/<br>  # Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/<br>  iconfont: //at.alicdn.com/t/font_1736178_kmeydafke9r.css<br><br>  anchor: https://cdn.jsdelivr.net/npm/anchor-js@4.3.0/<br><br>  github_markdown: https://cdn.jsdelivr.net/npm/github-markdown-css@4.0.0/<br><br>  jquery: https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/<br><br>  bootstrap: https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/<br><br>  highlightjs: https://cdn.jsdelivr.net/npm/highlight.js@10.4.0/<br><br>  prismjs: https://cdn.jsdelivr.net/npm/prismjs@1.22.0/<br><br>  tocbot: https://cdn.jsdelivr.net/npm/tocbot@4.12.0/dist/<br><br>  typed: https://cdn.jsdelivr.net/npm/typed.js@2.0.11/lib/<br><br>  fancybox: https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/<br><br>  nprogress: https://cdn.jsdelivr.net/npm/nprogress@0.2.0/<br><br>  mathjax: https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/<br><br>  katex: https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/<br><br>  busuanzi: https://busuanzi.ibruce.info/busuanzi/2.3/<br><br>  clipboard: https://cdn.jsdelivr.net/npm/clipboard@2.0.6/dist/<br><br>  mermaid: https://cdn.jsdelivr.net/npm/mermaid@8.8.3/dist/<br><br>  valine: https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/<br><br>  waline: https://cdn.jsdelivr.net/npm/@waline/client@0.4.2/dist/<br><br>  gitalk: https://cdn.jsdelivr.net/npm/gitalk@1.7.0/dist/<br><br>  disqusjs: https://cdn.jsdelivr.net/npm/disqusjs@1.0/dist/<br><br>  twikoo: https://cdn.jsdelivr.net/npm/twikoo@0.1.15/dist/<br><br>  hint: /lib/hint/<br></code></pre></td></tr></table></figure><h3 id="2-配置页面顶部大图"><a href="#2-配置页面顶部大图" class="headerlink" title="2. 配置页面顶部大图"></a>2. 配置页面顶部大图</h3><p><strong>快速开始后的空白效果</strong>：</p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/empty_demo.png" alt="初始页面" style="zoom: 67%;"><p>在<strong>博客目录</strong>下的<strong>source文件夹</strong>下建立img文件夹，img文件夹下建立bg文件夹表示背景图片，在里面存入自定义的图片。</p><p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/atrox_bg.png" alt="Hexo-Fluid主题配置背景图"></p><p>修改<code>_config.fluid.yml</code>文件中的<code>banner_img</code>属性，使用本地图片的相对路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/example/atrox1.jpg</span>  <span class="hljs-comment">#对应放在/source/img/bg/atrox1.jpg</span><br></code></pre></td></tr></table></figure><p>在每个页面都有<code>banner_img</code>属性，各个修改即可。</p><p><strong>修改完成后的效果</strong>：</p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/bg_img.png" alt="完成效果" style="zoom:50%;"><h3 id="3-设置博客标题"><a href="#3-设置博客标题" class="headerlink" title="3. 设置博客标题"></a>3. 设置博客标题</h3><p>页面左上角的博客标题，默认使用<strong>博客配置</strong>中的 <code>title</code>，这个配置同时控制着网页在浏览器标签中的标题。</p><p>我们在<code>_config.fluid.yml</code>主题配置中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;AtroxQW&quot;</span><br></code></pre></td></tr></table></figure><p>效果图：</p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/blog_title.png" alt="博客标题设置" style="zoom: 50%;"><h3 id="4-自定义导航菜单"><a href="#4-自定义导航菜单" class="headerlink" title="4. 自定义导航菜单"></a>4. 自定义导航菜单</h3><p>笔者的导航菜单设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;首页&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;归档&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;分类&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;标签&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;关于我&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><ul><li><code>key</code>: 用于关联有<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%A4%9A%E8%AF%AD%E8%A8%80">多语言</a>，如不存在关联则显示 key 本身的值</li><li><code>link</code>: 跳转链接</li><li><code>icon</code>: 图标的 css class，可以省略（即没有图标）</li><li><code>name</code>: 强制使用此名称显示（不再按多语言显示），可省略</li></ul><p><strong>完成效果</strong>：</p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/nav_bar.png" alt="自定义导航菜单" style="zoom: 80%;"><h3 id="5-开启图片懒加载"><a href="#5-开启图片懒加载" class="headerlink" title="5. 开启图片懒加载"></a>5. 开启图片懒加载</h3><p>在<code>_config.fluid.yml</code>中设置<code>lazyload</code>属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>开启后，当图片滚动到可见范围内才会加载，可以大幅提高网页整体加载速度。<code>onlypost</code> 为 true 时，仅在文章页才使用懒加载.</p><h3 id="6-设置博客封面"><a href="#6-设置博客封面" class="headerlink" title="6. 设置博客封面"></a>6. 设置博客封面</h3><p>如果想统一给文章设置一个默认图片，可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/blog/Hexo-Fluid博客配置.jpg</span><br></code></pre></td></tr></table></figure><p>也可以对单篇博客设置封面，在文章开头 <code>Front-matter</code>中配置 <code>index_img</code> 属性。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">title: Hexoxo<span class="hljs-emphasis">_Fluid主题配置</span><br><span class="hljs-emphasis">date: 2020-12-30 09:18:36</span><br><span class="hljs-emphasis">tags: [Fluid,Hexo]</span><br><span class="hljs-emphasis">index_</span>img:/img/blog/Hexo-Fluid博客配置.jpg<br></code></pre></td></tr></table></figure><p><strong>效果</strong>：</p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/index_img.png" alt="博客封面" style="zoom:75%;"><h3 id="7-集成评论功能-gitalk"><a href="#7-集成评论功能-gitalk" class="headerlink" title="7. 集成评论功能(gitalk)"></a>7. 集成评论功能(gitalk)</h3><h4 id="7-1-注册OAuth-Application"><a href="#7-1-注册OAuth-Application" class="headerlink" title="7.1 注册OAuth Application"></a>7.1 注册OAuth Application</h4><p><a href="https://github.com/settings/applications/new">官方入口</a>，点击进入来<strong>注册一个新的OAuth Application</strong></p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/new_application.png" alt="注册OAuth Application" style="zoom:100%;"><h4 id="7-2-注册后获取秘钥"><a href="#7-2-注册后获取秘钥" class="headerlink" title="7.2 注册后获取秘钥"></a>7.2 注册后获取秘钥</h4><p>点击注册后，会进入新页面。显示我们的OAuth <strong>Application</strong>的 <strong>Client ID</strong> 和 尚未生成的 <strong>Client secrets</strong></p><p>，点击 <strong>Generate a new client secret</strong> 按钮生成秘钥即可。</p><p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/Client_id_secrets.png" alt="获取秘钥"></p><h4 id="7-3-博客集成gitalk"><a href="#7-3-博客集成gitalk" class="headerlink" title="7.3 博客集成gitalk"></a>7.3 博客集成gitalk</h4><p>在<code>_config.fluid.yml</code>中<strong>开启并指定评论模块</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">gitalk</span><br></code></pre></td></tr></table></figure><p>然后在下方还要设<strong>置对应评论模块的参数</strong>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span> <span class="hljs-string">af550312a411b96c64b9</span>     <span class="hljs-comment">#刚才的ClientID</span><br>  <span class="hljs-attr">clientSecret:</span> <span class="hljs-string">f11934265fd18324cb2d9fd605d7d445207a3e52</span>   <span class="hljs-comment">#刚才的clientSecret</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&#x27;gitalk&#x27;</span>                                     <span class="hljs-comment">#刚才取的名</span><br>  <span class="hljs-attr">owner:</span> <span class="hljs-string">&#x27;AtroxQW&#x27;</span>                            <span class="hljs-comment">#github的用户名</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;AtroxQW&#x27;</span>]<br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="7-4-初始化issue"><a href="#7-4-初始化issue" class="headerlink" title="7.4 初始化issue"></a>7.4 初始化issue</h4><p>每次发表一篇博客，都需要我们作者<strong>初始化issue</strong>，初始化后评论就会在github上看到。</p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/init_issue.png" alt="初始化issue" style="zoom:65%;"><h3 id="8-关于页配置"><a href="#8-关于页配置" class="headerlink" title="8. 关于页配置"></a>8. 关于页配置</h3><p>在关于页，Fluid主题自动帮我初始化了空白的，我们只需要在<code>about</code>文件夹下其中的<code>index.md</code>追加内容即可。下面是笔者的关于页部分配置。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## 简介</span><br>欢迎大家来到 AtroxQW 的主页，我是一名河北工业大学在读大学生，专注于开发技术与机器学习。接下来，我会在这个独立的个人博客上，发布一些关于框架学习、机器学习和生活杂谈的文章。<br><br><span class="hljs-section">## 转载</span><br>如果您认为我的博客文章对您有些许帮助，想要引用文章中的部分段落或者图片，您可以在该文章下的评论区留言让我看到或者留下自己的原文链接。<br><br><span class="hljs-section">## 沟通</span><br>如果您想要和笔者沟通的话，评论区留言是个不错的选择，我每天都会翻阅评论区留言。如过您强烈想要和我深层次沟通（狗头），请加我下面的QQ或者Wechat，并备注：<span class="hljs-strong">**博客沟通**</span>，我会尽快通过各位的请求。<br></code></pre></td></tr></table></figure><h3 id="9-分类页配置"><a href="#9-分类页配置" class="headerlink" title="9. 分类页配置"></a>9. 分类页配置</h3><p>分类页配置，可以在博客文章的 <strong>Front-matter</strong> 中设置。分类和之前的标签虽然听起来很接近，但是在 Hexo中两者有明显的区别：<strong>分类</strong> 具有顺序性和层次性，也就是说[foo,bar] 不等于 [bar,foo];</p><p>写法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories: [Diary,Life]<br>tags: [PS3,Games]<br></code></pre></td></tr></table></figure><h3 id="10-使用LaTex数学公式"><a href="#10-使用LaTex数学公式" class="headerlink" title="10. 使用LaTex数学公式"></a>10. 使用LaTex数学公式</h3><p>在<code>_config.fluid.yml</code>中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当为 true 时，只有在文章 Front-matter (opens new window)里指定 math: true 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure><h3 id="11-友链设置"><a href="#11-友链设置" class="headerlink" title="11. 友链设置"></a>11. 友链设置</h3><p>友情链接页用于展示好友的博客入口，默认关闭，开启需要先在 <code>navbar</code> 项中将 <code>links</code> 的注释(#号)删掉。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;links&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/links/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-link-fill&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>然后找到 <code>links</code> 的配置项，对页面内容进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Fluid Docs&#x27;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&#x27;主题使用指南&#x27;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/&#x27;</span>,<br>      <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span><br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><code>title</code>: 友链站的标题</li><li><code>intro</code>: 站点或博主的简介，可省略</li><li><code>link</code>: 跳转链接</li><li><code>image</code>: 头像图片，可省略</li></ul><h3 id="12-压缩生成文件"><a href="#12-压缩生成文件" class="headerlink" title="12. 压缩生成文件"></a>12. 压缩生成文件</h3><p>我们使用 <a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier</a>。之所以使用这个插件，是因为博客中较大的css，js文件上加载速度不尽人意。而这款插件不仅高效易用，而且效果显著。</p><p>首先，使用cnpm安装该插件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">cnpm <span class="hljs-keyword">install</span> hexo-<span class="hljs-keyword">all</span>-minifier <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后，在博客目录下<code>config.yml</code>中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">all_minifier:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="13-生成唯一永久文章链接"><a href="#13-生成唯一永久文章链接" class="headerlink" title="13. 生成唯一永久文章链接"></a>13. 生成唯一永久文章链接</h3><p>在做此优化之前，hexo文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。</p><p>比如：<code>/2020/12/30/Hexo-Fluid主题配置/</code>.这样，如果文章标题是中文的话，URL链接是也会是中文，复制后的链接会是一长串，可读性极差，也不够简洁。</p><p>这里，我推荐使用Fluid官网提供的 <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件。</p><p>首先，使用cnpm安装该插件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-abbrlink <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后，修改 <code>config.yml</code> 中的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink/</span><br></code></pre></td></tr></table></figure><p>在其中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span>  <span class="hljs-comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="hljs-attr">abbrlink:</span><br>    <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>   <span class="hljs-comment">#算法： crc16(default) and crc32</span><br>    <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>     <span class="hljs-comment">#进制： dec(default) and hex</span><br></code></pre></td></tr></table></figure><h3 id="14-播放器插件-hexo-tag-dplayer"><a href="#14-播放器插件-hexo-tag-dplayer" class="headerlink" title="14. 播放器插件 hexo-tag-dplayer"></a>14. 播放器插件 hexo-tag-dplayer</h3><p>此插件可以在博客中插入音乐或视频，分分钟提高博客格调</p><p>首先，安装此插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-tag-dplayer <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>bad asset path... <p>使用代码如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span> dplayer <span class="hljs-string">&quot;url=http://www.nenu.edu.cn/_upload/article/videos/03/5f/7c999eed42e3aadc413d7f851f0e/0f50b3eb-9285-41d2-ac4d-6cc363651aad_B.mp4&quot;</span>  <span class="hljs-string">&quot;autoplay=true&quot;</span> <span class="hljs-string">&quot;preload=metadata&quot;</span> <span class="hljs-string">&quot;hotkey=true&quot;</span> <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="15-Hexo后台"><a href="#15-Hexo后台" class="headerlink" title="15. Hexo后台"></a>15. Hexo后台</h3><p><strong>hexo使用编辑文章时，若用其原生方式，则不便利，还好官网提供了一款插件hexo-admin界面化了markdown编辑器，只需要访问：<a href="http://127.0.0.1:4000/admin">http://127.0.0.1:4000/admin</a> 即可方便快捷的进行博文编辑了，效果如下：</strong></p><p>第一步，安装hexo-admin插件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save hexo-admin</span><br></code></pre></td></tr></table></figure><p>第二步，启动服务器。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span> -d<br></code></pre></td></tr></table></figure><p>第三步，在url栏输入地址，编辑博文</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">localhost:<span class="hljs-number">4000</span><span class="hljs-regexp">/admin/</span><br></code></pre></td></tr></table></figure><p><strong>最终效果</strong>：</p><img src="/posts/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/hexo_admin.png" alt="Hexo后台" style="zoom:75%;">]]></content>
    
    
    <categories>
      
      <category>博客配置美化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis学习</title>
    <link href="/posts/MyBatis%E5%AD%A6%E4%B9%A0/"/>
    <url>/posts/MyBatis%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Introduction"><a href="#1、Introduction" class="headerlink" title="1、Introduction"></a>1、Introduction</h2><h3 id="1-1-What-is-MyBatis？"><a href="#1-1-What-is-MyBatis？" class="headerlink" title="1.1 What is MyBatis？"></a>1.1 What is MyBatis？</h3><p><strong>MyBatis_Logo</strong>:<img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_logo.png" alt="MyBatis_logo" style="zoom:67%;"></p><p><strong>concept</strong>：MyBatis是一款优秀的==持久层框架==，它支持定制化SQL、存储过程以及高级映射。MyBatis避免了几乎所有的<code>JDBC代码</code>和<code>手动设置参数</code>以及<code>获取结果集</code>。MyBatis可以使用简单的<code>XML</code>或<code>注解</code>来配置和映射原生类型、接口和Java的pojo（实体类）为数据库中的记录。</p><p><strong>history</strong>：MyBatis 本是apache的一个开源项目<strong>iBatis</strong>，2010年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由apache software foundation 迁移到了[google code](<a href="https://baike.baidu.com/item/google">https://baike.baidu.com/item/google</a> code/2346604)，并且改名为MyBatis 。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341">Github</a>。</p><h3 id="1-2-How-to-get-MyBatis"><a href="#1-2-How-to-get-MyBatis" class="headerlink" title="1.2 How to get MyBatis?"></a>1.2 How to get MyBatis?</h3><h4 id="1-2-1-download-from-github"><a href="#1-2-1-download-from-github" class="headerlink" title="1.2.1 download from github"></a><strong>1.2.1 download from github</strong></h4><ul><li><p><strong>首先，打开github官网搜索MyBatis，从返回结果中找到==mybatis/mybatis-3==，如下图所示。</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_github.png" alt="mybatis从github下载" style="zoom: 67%;"></li></ul><ul><li><p><strong>点击上图红色矩形圈住的部分，单击点进去看到MyBatis的代码结构，如下图所示。</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_github_code.png" alt="github中MyBatis的具体情况" style="zoom: 67%;"></li></ul><p>  <strong>从源码中的pom.xml文件，我们可以得到，这是一个Maven项目。</strong></p><ul><li><p><strong>那么，如何下载MyBatis项目呢，我们可以点击上图左侧的master，弹出下拉菜单选择下载的版本，或者点击右侧的绿色Code下载按钮，选择下载方式。</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_github_download.png" alt="github上MyBatis的下载方式" style="zoom:75%;"></li></ul><h4 id="1-2-2-maven-dependency"><a href="#1-2-2-maven-dependency" class="headerlink" title="1.2.2 maven dependency"></a>1.2.2 maven dependency</h4><ul><li><p><strong>首先在网页地址栏输入Maven仓库url：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></strong></p></li><li><p><strong>进入官网之后直接搜索MyBatis即可，得到结果如下图所示</strong>。</p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_maven.png" alt="maven仓库MyBatis搜索结果" style="zoom:75%;"></li></ul><ul><li><p><strong>点击第一个结果，进入选择版本页面，笔者处于学习阶段，选择和狂神一样的3.5.2版本</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_maven_versions.png" alt="mybatis选择3.5.2版本" style="zoom:75%;"></li></ul><ul><li><p>点击进入3.5.2版本，获取依赖的代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-persistance"><a href="#1-3-persistance" class="headerlink" title="1.3 persistance"></a>1.3 persistance</h3><p>persitance意思为<strong>持久化</strong>，这个词语在1.1的MyBaits简介中提到过，内涵为==数据持久化==。</p><ul><li>所谓持久化，就是<strong>将程序的数据在==持久状态==和==瞬时状态==转化的过程</strong>，之所以引入持久化，<strong>是因为数据存储在内存</strong>的弊端：**==断电即失==**.</li><li>除了接下来要铺开的MyBatis，实现数据持久化还有两个渠道：<strong>数据库（jdbc）</strong>和 <strong>IO文件持久化</strong>，而<strong>IO文件持久化</strong>特别的占用资源。</li><li>由此发散思想于生活，<strong>生活中持久化</strong>的例子也比比皆是，比如将食物冷藏在家用冰箱和罐头。。。</li></ul><p><strong>那我们为什么需要持久化呢？</strong></p><ul><li><p>这是因为有一些数据或者对象，我们是<strong>无法承受其丢失的代价</strong>的，最简单的<strong>支付宝里的金额</strong>。</p></li><li><p>还有另外一个很重要的外在原因，就是<strong>内存实在是太TM贵了</strong>。。。</p></li></ul><h3 id="1-4-persistance-layer"><a href="#1-4-persistance-layer" class="headerlink" title="1.4 persistance layer"></a>1.4 persistance layer</h3><p>persitance layer 意思是<strong>持久层</strong>，我们在之前的JavaWeb学习中有<strong>Dao层</strong>、Service层和<strong>Controller层</strong>的概念，每个层是有其具体的业务。拿还就那个举一反三，持久层的概念就是：<strong>完成持久化工作的代码块</strong>。</p><p>层和层之间的<strong>界限是十分明显的</strong>，学习MyBaits就是学习一个持久层框架，我连一个Web框架都用不到，就只用一个单纯的普通项目就可以把持久层框架学习完成。</p><h3 id="1-5-Why-use-MyBatis？"><a href="#1-5-Why-use-MyBatis？" class="headerlink" title="1.5 Why use MyBatis？"></a>1.5 Why use MyBatis？</h3><ol><li><p>最通俗的来说，最先想到的优点就是<strong>方便</strong></p></li><li><p>还有一个反方向的促进因素，就是传统的JDBC代码实在太复杂了，那开发人员就是为了简化，开发出了MyBaits框架。额好吧，其实就是懒，手动狗头，为了实现自动化而奋斗。</p></li><li><p>具体的来说，MyBatis可以帮助我们程序猿将数据存入数据库。</p></li><li><p>其实，用MyBatis也可容易上手，对小白十分友好。</p></li><li><p>下面，贴出百度百科对MyBatis的优点陈述：</p><ul><li><strong>简单易学</strong>：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li><strong>灵活</strong>：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li><strong>解除sql与程序代码的耦合</strong>：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li><strong>提供映射标签</strong>，支持对象与数据库的orm字段关系映射</li><li><strong>提供对象关系映射标签</strong>，支持对象关系组建维护</li><li><strong>提供xml标签</strong>，支持编写动态sql。</li></ul></li></ol><h2 id="2、First-MyBatis-project"><a href="#2、First-MyBatis-project" class="headerlink" title="2、First MyBatis project"></a>2、First MyBatis project</h2><h3 id="2-1-the-route"><a href="#2-1-the-route" class="headerlink" title="2.1 the route"></a>2.1 the route</h3><blockquote><p>搭建环境——&gt;导入MyBatis——&gt;编写代码——&gt;测试</p><p>在写第一个MyBatis项目之前呢，我们需要理一下思路。第一个步骤就是**==搭建环境==<strong>，有了环境之后，后面的工作就比较统一了；第二步，就是</strong>==导入MyBatisjar包==<strong>；第三步是</strong>==编写代码==<strong>；最后一步为</strong>==测试==**。</p></blockquote><h3 id="2-2-build-environment"><a href="#2-2-build-environment" class="headerlink" title="2.2 build environment"></a>2.2 build environment</h3><p>myBatis是跟数据库进行操作的，我们第一步就是**==搭建数据库==**。</p><h4 id="2-2-1-build-database-environment"><a href="#2-2-1-build-database-environment" class="headerlink" title="2.2.1 build database environment"></a>2.2.1 build database environment</h4><p>在这里，手动用SQL语句建库、建表、添加字段，熟悉一下大三上学的数据库知识，0√0。</p><p>笔者用的MySQL可视化工具是**==MySQL Workbench==**。</p><ul><li><p><strong>首先进入首页，输入账号密码连接MySQL数据库。</strong></p><p><strong><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mysql_workbench.png" alt="MySQL连接" style="zoom:75%;"></strong></p></li></ul><ul><li><p><strong>第二步，使用SQL语句编写SQL脚本，脚本代码如下代码块所示。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 建库<br>create database &#96;mybatis&#96;;<br>use &#96;mybatis&#96;;<br><br>-- 建表<br>create table &#96;user&#96; (<br>    &#96;id&#96; int(20) primary key auto_increment,<br>    &#96;name&#96; varchar(30) default null,<br>    &#96;pwd&#96; varchar(30) default null<br>)engine&#x3D;InnoDB default charset&#x3D;utf8;<br><br>-- 插入数据 <br>insert into &#96;user&#96;(&#96;id&#96;,&#96;name&#96;,&#96;pwd&#96;) values<br>(1,&#39;乔威&#39;,&#39;123456&#39;),<br>(2,&#39;张三&#39;,&#39;123456&#39;),<br>(3,&#39;李四&#39;,&#39;123456&#39;); <br></code></pre></td></tr></table></figure></li><li><p><strong>搭建数据库完成，下一步就是</strong>要**==导入jar包，开项目了==**。</p></li></ul><h4 id="2-2-2-create-new-project"><a href="#2-2-2-create-new-project" class="headerlink" title="2.2.2 create new project"></a>2.2.2 create new project</h4><ul><li><p><strong>第一步，创建一个普通的maven项目，步骤如下图所示。</strong></p><p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_new_project.gif" alt="创建项目步骤1"></p></li></ul><ul><li><p><strong>第二步，删除生成项目的src目录，用以当做==父工程==。</strong></p><p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/delete_src.png" alt="删除自动生成的src目录"></p></li></ul><ul><li><p><strong>第三步，在pom文件中导入maven依赖(mysql驱动，mybatis和junit)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-create-module"><a href="#2-3-create-module" class="headerlink" title="2.3 create module"></a>2.3 create module</h3><h4 id="2-3-1-new-empty-modue"><a href="#2-3-1-new-empty-modue" class="headerlink" title="2.3.1 new empty modue"></a>2.3.1 new empty modue</h4><ul><li><p><strong>右键单击主目录MyBatis-Study，new module，创建普通的子模块mybatis-01</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis-01-new.gif" alt="创建一个模块" style="zoom:67%;"></li></ul><ul><li><p><strong>这样做的好处就是，子项目不用每次再导包了，用的都是父项目的包。</strong></p></li><li><p><strong>与此同时，父项目的pom文件中多了一个<module></module>标签，表示刚才创建的子模块。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-3-2-write-core-configuration-file"><a href="#2-3-2-write-core-configuration-file" class="headerlink" title="2.3.2 write core configuration file"></a>2.3.2 write core configuration file</h4><blockquote><p><strong>编写核心配置文件</strong></p></blockquote><ul><li><p><strong>从XML中构建sqlSessionFactory</strong></p><p>背景：每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p><p><strong>XML 配置文件中包含了对 MyBatis 系统的核心设置</strong>，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。后面会再探讨 XML 配置文件的详细内容，这里先给出一个简单的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>在mybatis目录下的resources中建立一个XML文件，名为：mybatis-config.xml</strong>，<strong>将上面的配置文件内容复制到该xml文件中。</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_config.png" alt="mybatis配置文件" style="zoom: 67%;"></li></ul><ul><li><p><strong>配置文件解析和自己手动配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--可以配置多套环境 default为默认选择的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--事务管理方式选择JDBC的事务管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--连接数据库的配置，改为自己的--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--&amp;amp;为&amp;的转义符--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=GMT&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zuiweizhiming666&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>连接数据库（选择数据库为搭建环境时创建的mybatis）</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis-connect-database.gif" alt="idea数据库" style="zoom:67%;"></li></ul><h4 id="2-3-3-write-utility-class"><a href="#2-3-3-write-utility-class" class="headerlink" title="2.3.3 write utility class"></a>2.3.3 write utility class</h4><blockquote><p>对于加载resources下的配置文件的时候，由于它占据IO资源，我们把它抽成一个工具类。</p></blockquote><ul><li><p><strong>在java目录下创建com.atrox.utils包，再在utils包下创建MyBatisUtils类</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_utils.png" alt="mybatis工具类" style="zoom: 67%;"></li></ul><ul><li><p><strong>在该类根据MyBatis3中文文档来填充内容：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">//sqlSessionFactory 来构建 sqlSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        InputStream inputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用MyBatis第一步：获取sqlSessionFactory对象</span><br>            <span class="hljs-comment">// 资源路径</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-comment">// 以流的方式加载配置文件</span><br>            inputStream = Resources.getResourceAsStream(resource);<br>            <span class="hljs-comment">// 通过流的方式把inputStream加载进来</span><br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 既然有了SqlSessionFactory，顾名思义，我们就可以从中获得SqlSession的实例了</span><br>    <span class="hljs-comment">// SqlSession 完全包含了面向数据库执行SQL命令所需的所有方法了</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-4-coding"><a href="#2-4-coding" class="headerlink" title="2.4 coding"></a>2.4 coding</h3><blockquote><p>编写代码</p></blockquote><h4 id="2-4-1-Entity-class"><a href="#2-4-1-Entity-class" class="headerlink" title="2.4.1 Entity class"></a>2.4.1 Entity class</h4><p><strong><code>编写实体类</code></strong>————————————————————————————–</p><ul><li><p><strong>在com.atrox下建立pojo包</strong> <img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_pojo.png" alt="mybatis实体类" style="zoom:67%;"></p></li><li><p><strong>在pojo包下建立对应数据库MyBatis的表User实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// User实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>最终效果</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybaits_final_pojo.png" alt="mybatis编写实体类截图" style="zoom: 67%;"></li></ul><h4 id="2-4-2-Mapper"><a href="#2-4-2-Mapper" class="headerlink" title="2.4.2 Mapper"></a>2.4.2 Mapper</h4><p><strong><code>编写实体类的Mapper</code></strong>———————————————————————————</p><ul><li><p><strong>在com.atrox.dao下建立接口文件，名为：UserDao，在接口里定义一个查询User的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atrox.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>在com.atrox.dao下建立Mapper配置文件，名为UserMapper.xml，取代了之前的接口实现类</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atrox.dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--SQL查询语句--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>最终效果</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_dao.png" alt="最终效果" style="zoom:67%;"></li></ul><h3 id="2-5-junit-test"><a href="#2-5-junit-test" class="headerlink" title="2.5 junit test"></a>2.5 junit test</h3><blockquote><p>测试，在src目录下的test包下进行</p></blockquote><ul><li><p><strong>在src下的java包下建立com.atrox.dao包，在包下建立UserDaoTest类，与上面一一对应</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_test.png" alt="完善目录结构" style="zoom:67%;"></li></ul><ul><li><p><strong>在UserDaoTest中测试getUserList</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atrox.pojo.User;<br><span class="hljs-keyword">import</span> com.atrox.utils.MyBatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 第一步：获得SqlSession对象</span><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br><br>        <span class="hljs-comment">// 方式一：getMapper</span><br>        UserDao mapper = sqlSession.getMapper(UserDao.class);<br>        List&lt;User&gt; userList = mapper.getUserList();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        <span class="hljs-comment">// 关闭SqlSession</span><br>        sqlSession.close();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>执行后，报错org.apache.ibatis.binding.BindingException，原因是没有在mybatis-config.xml中注册mapper，应该在里面加上</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com.atrox.dao/UserMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>再次执行，报错java.lang.ExceptionInInitializerError:初始化问题，Could not find resource com.atrox.dao/UserMapper.xml</strong></p><p>原因：Maven由于它的约定大于配置，笔者的配置文件，无法被导出或者生效，解决方案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="bigProblem"><a href="#bigProblem" class="headerlink" title="bigProblem"></a>bigProblem</h4><p>在狂神的视频中，当在maven中加入上面的<build></build>后，测试的传结果就出来了。但是笔者这里报了一个错误：<strong>Could not find resource mybatis-config.xml</strong>，并且由于这个问题，还导致了在MyBatisUtils.class加载资源时的<strong>空指针问题</strong>。</p><p>在B站的弹幕中，我找到了这么几条<strong>解决方案</strong>，并进行了一些尝试：</p><p><strong>①连接数据库url中，useSSL=true改成false</strong></p><p>此方案，笔者没有应用，因为我的配置文件中url根本就没有加上useSSL这一参数</p><p><strong>②MyBatisUtils修改代码</strong></p><p>合理的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        InputStream inputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用MyBatis第一步：获取sqlSessionFactory对象</span><br>            <span class="hljs-comment">// 资源路径</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-comment">// 以流的方式加载配置文件</span><br>            inputStream = Resources.getResourceAsStream(resource);<br>            <span class="hljs-comment">// 通过流的方式把inputStream加载进来</span><br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 既然有了SqlSessionFactory，顾名思义，我们就可以从中获得SqlSession的实例了</span><br>    <span class="hljs-comment">// SqlSession 完全包含了面向数据库执行SQL命令所需的所有方法了</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一条，笔者与自己的对比，发现自己写的没有错误。</p><p><strong>③UserMapper.xml去掉中文注释</strong></p><p>尝试，无效果。</p><p><strong>④mybatis-config.xml去掉中文注释</strong></p><p>尝试，无效果。</p><p><strong>⑤maven 进行clean，重新build</strong></p><p>尝试，无效果。</p><p>至此，我感觉到了一丝阴冷和诡异，我能感觉得到这个<strong>错误的根源和我非常的接近</strong>，就潜伏在我的身边，静悄悄的蛰伏，看着我的一次次焦虑与气馁。</p><p>终于，我在B站下该视频的第6页的评论，发现了一个被埋没但仍然被勇敢提出来的解决方案：<strong>查看<build></build>下的<includes></includes>是否被写成了<excludes></excludes></strong></p><p>笔者的兴奋难掩，急忙查看，果不其然。狂神的是includes，而我的是excludes。我不禁感慨，人民内部有坏人啊！这误导人的CSDN博主，我要气死了（我从他那里复制的）。回想起之前做Maven项目时，有些资源打不了包的种种现象，我恍然大悟！</p><p>重跑一遍，结果出乎我的意料，错误回到了原来的地方，找不到UserMapper.xml。好吧，接着找，终于我在此视频下第10页的评论中发现了一条解决方案：<strong>mybatis-config.xml中注册配置文件的地方修改mapper标签的resource</strong></p><p><strong>错误的</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com.atrox.dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>==<strong>正确的：</strong>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/atrox/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终，问题得以解决啦！感谢B站，感谢互联网的恩赐！</p><h3 id="2-6-general-thoughts"><a href="#2-6-general-thoughts" class="headerlink" title="2.6 general thoughts"></a>2.6 general thoughts</h3><blockquote><p>总体的思路</p></blockquote><ol><li>第一件事情，连接了数据库，导入了基本的MySQL和MyBatis的jar包</li><li>第二件事情，为了拿到SqlSessionFactory对象，为此我们建立而来一个工具类MyBatisUtils.class</li><li>第三件事情，写了mybatis-config.xml核心配置文件，修改了其中的连接数据库的选项参数值。</li><li>第四件事情，我们写了实体类User和接口UserDao</li><li>第五件事情，用UserMapper文件代替之前的实现类。</li><li>第六件事情，将UserMapper在mybatis-config文件中注册。</li><li>测试。</li></ol><h3 id="2-7-tips"><a href="#2-7-tips" class="headerlink" title="2.7 tips"></a>2.7 tips</h3><p>在mybatis的官方文档中，建议涉及sqlSession关闭的地方，都把关闭这个资源的代码放在finally中。</p><p>于是，之前的UserDaoTest的代码改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atrox.pojo.User;<br><span class="hljs-keyword">import</span> com.atrox.utils.MyBatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 第一步：获得SqlSession对象</span><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 方式一：getMapper</span><br>            UserDao mapper = sqlSession.getMapper(UserDao.class);<br>            List&lt;User&gt; userList = mapper.getUserList();<br>            <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>                System.out.println(user);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭SqlSession</span><br>            sqlSession.close();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><p>首先，将上面的UserDao接口改名为UserMapper，在重命名的时候，IDEA弹出了一个选项。是否修改与之有关的文件。笔者点击了确定，发现连出现UserDao地方的文件名也改了，不推荐点击。</p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_rename.png" alt="重命名请求框" style="zoom:67%;"><p>当修改为UserMapper，<strong>应该在UserMapper.xml中作相应修改</strong>,<strong>namespace中的报名应和接口的包名一致。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atrox.dao.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>在UserMapperTest也要做相应的修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br></code></pre></td></tr></table></figure><p>在<strong>UserMapper.xml</strong>中，<strong>select标签的id</strong>为namespace中的方法名，<strong>resultType为SQL语句的返回值</strong>，如果涉及到参数，还有<strong>parameterType</strong>，为参数类型，比如增删改查的条件或根据某些id的类型。</p><h3 id="3-1-select"><a href="#3-1-select" class="headerlink" title="3.1 select"></a>3.1 select</h3><p><strong>第一步，在UserMapper接口中增加根据id查询用户的方法</strong>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure><p>值得一提的是，当笔者在接口中写下了此方法时，按下Alt + Enter 竟然弹出了<strong>MybatisGenerator new statement</strong>的选项，确认后，在UserMapper.xml中出现了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=&quot;getUserById&quot; resultType=&quot;com.atrox.pojo.User&quot;&gt;&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>虽然代码不全，但也十分<strong>人性化</strong>！</p><p><strong>第二步，在UserMapper.xml中完善根据id查询用户的sql语句，完善后如下代码：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>select * from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，需要取出来的是<strong>id，这里用#{}来取</strong>，也可以用${}来取，但是可能存在SQL注入问题。</p><p><strong>第三步</strong>，<strong>测试根据id查询用户</strong>，代码如下，比起之前十分简洁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserById</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    User user = mapper.getUserById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-insert"><a href="#3-2-insert" class="headerlink" title="3.2 insert"></a>3.2 insert</h3><p><strong>第一步，在UserMapper接口增加添加用户的方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// insert一个用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善插入用户的SQL语句，完善后如下代码：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--对象中的属性，可以直接取出来--&gt;<br>    &lt;insert id=<span class="hljs-string">&quot;addUser&quot;</span> parameterType=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;<br>    insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br>&lt;/insert&gt;<br></code></pre></td></tr></table></figure><p>其中，我们方法穿的是User对象，<strong>但是values后面的id，name，pwd可以直接取出来</strong>。</p><p><strong>第三步，测试添加用户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    mapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;大司马&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，当我们测试后，发现<strong>数据库里并没有我们新加的用户</strong>。为什么呢？因为<strong>增删改是需要提交事务的！！！</strong></p><p>于是测试代码改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 增删改需要提交事务</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-keyword">int</span> updateRows = mapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;大司马&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>    <span class="hljs-keyword">if</span> (updateRows &gt; <span class="hljs-number">0</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 提交事务</span><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-update"><a href="#3-3-update" class="headerlink" title="3.3 update"></a>3.3 update</h3><p><strong>第一步，在UserMapper接口增加修改用户的方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善修改用户的SQL语句，完善后如下代码:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;update id=<span class="hljs-string">&quot;update&quot;</span> parameterType=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;<br>    update mybatis.user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;<br>&lt;/update&gt;<br></code></pre></td></tr></table></figure><p><strong>第三步，测试更新用户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    mapper.update(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;炫神&quot;</span>,<span class="hljs-string">&quot;123123&quot;</span>));<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-delete"><a href="#3-4-delete" class="headerlink" title="3.4 delete"></a>3.4 delete</h3><p><strong>第一步，在UserMapper接口增加删除用户的方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善删除用户的SQL语句，完善后如下代码:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;delete id=<span class="hljs-string">&quot;delete&quot;</span>&gt;<br>    delete from mybatis.user where id = #&#123;id&#125;;<br>&lt;/delete&gt;<br></code></pre></td></tr></table></figure><p><strong>第三步，测试删除用户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    mapper.delete(<span class="hljs-number">4</span>);<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-tips"><a href="#3-5-tips" class="headerlink" title="3.5 tips"></a>3.5 tips</h3><ul><li><p>当我们进行增删改的测试时，需要==<strong>提交事务</strong>==。</p></li><li><p>mybatis-config中resource路径需要用”/“，不可以用”.” </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--错误的写法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com.atrox.dao.UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--正确的写法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/atrox/dao/UserMapper.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-6-Map"><a href="#3-6-Map" class="headerlink" title="3.6  Map"></a>3.6  Map</h3><p>在前面的UserMapper.xml中的<strong>insert和update</strong>中我们把其中的所有字段都写了出来，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    update mybatis.user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那我们需要思考，<strong>假设这个User有100个字段，难道我们需要全部都写出来吗</strong>？下面给出一种使用map的方法。以<strong>添加新用户</strong>为例：</p><p><strong>第一步，在UserMapper接口增加添加用户的新方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 万能的Map</span><br><span class="hljs-function">User <span class="hljs-title">addUser2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善添加用户的SQL语句，完善后如下代码:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象中的属性，传递map的key--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    insert into mybatis.user (id,name,pwd) values (#&#123;userid&#125;,#&#123;username&#125;,#&#123;password&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试添加用户</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser2</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>    map.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">4</span>);<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;大司马&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>    mapper.addUser2(map);<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>测试完用map的方式添加用户后，我们再试一下<strong>查询用户</strong>：</p><p><strong>第一步，在UserMapper接口增加查询用户的新方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">User <span class="hljs-title">getUserById2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善查询用户的SQL语句，完善后如下代码:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById2&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select * from mybatis.user where id = #&#123;id&#125; and name = #&#123;name&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试查询用户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser2</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>    map.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">4</span>);<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;大司马&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>    mapper.addUser2(map);<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;大司马&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-fuzzy-search"><a href="#3-7-fuzzy-search" class="headerlink" title="3.7 fuzzy search"></a>3.7 fuzzy search</h3><blockquote><p>模糊查询</p></blockquote><p><strong>第一步，在UserMapper接口增加模糊查询的新方法，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模糊查询</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserLike</span><span class="hljs-params">(String value)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，在UserMapper.xml中完善模糊查询的SQL语句，完善后如下代码:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    select * from mybatis.user where name like #&#123;value&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那在这里为什么在模糊查询的like后面的value两边加上两个“%”呢？，这里我们的第一种方案，会存在<strong>SQL注入问题</strong>。这里暂且先往下进行，事后回来分析第二步。</p><p>**测试模糊查询，我们在方法传的参数中传递通配符%**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserLike</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    List&lt;User&gt; userList = mapper.getUserLike(<span class="hljs-string">&quot;%李%&quot;</span>);<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br><br><span class="hljs-comment">// 运行结果</span><br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>回头看第二步</strong>，我们也可以在sql语句中添加%</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>    select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>并且，在测试的代码中把传参的通配符去掉，也能得到正确的结果！</p><h2 id="4、Configuration-analysis"><a href="#4、Configuration-analysis" class="headerlink" title="4、Configuration analysis"></a>4、Configuration analysis</h2><h3 id="4-1-mybatis-config-xml"><a href="#4-1-mybatis-config-xml" class="headerlink" title="4.1 mybatis-config.xml"></a>4.1 mybatis-config.xml</h3><p>MyBatis的核心配置文件包含了会深深影响MyBatis行为的设置和属性信息。</p><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties">properties（属性）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">settings（设置）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">typeAliases（类型别名）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a></li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider">databaseIdProvider（数据库厂商标识）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers">mappers（映射器）</a></li></ul><h3 id="4-2-environments"><a href="#4-2-environments" class="headerlink" title="4.2 environments"></a>4.2 environments</h3><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中.<strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>tips：</strong></p><ul><li>默认使用的环境 ID（比如：default=”development”）。</li><li>每个 environment 元素定义的环境 ID（比如：id=”development”）。</li><li>事务管理器的配置（比如：type=”JDBC”）。</li><li>数据源的配置（比如：type=”POOLED”）。</li></ul><p><strong>事务管理器</strong>：</p><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p><ul><li>JDBC – 这个配置直接使用了 <strong>JDBC 的提交和回滚设施</strong>，它依赖从数据源获得的连接来管理事务作用域。</li><li>MANAGED – <strong>这个配置几乎没做什么</strong>。。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期。</li></ul><p><strong>数据源</strong>：</p><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）</p><ul><li><p><strong>UNPOOLED</strong>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。</p></li><li><p><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p></li><li><p><strong>JNDI</strong> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p></li></ul><h3 id="4-3-properties"><a href="#4-3-properties" class="headerlink" title="4.3 properties"></a>4.3 properties</h3><p>我们可以通过properties属性来引用配置文件。这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置【db.properties】</p><ul><li><p><strong>下面我们用后者来做一做，我们可以在resources下编写一个配置文件db.properties，然后再引入</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8&amp;serverTimezone=GMT</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">zuiweizhiming666</span><br></code></pre></td></tr></table></figure></li><li><p><strong>db.propertirs写完后，我们在核心配置文件中将其映入</strong></p><p>在这一步，需要注意一个问题，当我们把<properties></properties>标签随便写在一个位置的时候，报错了，错误为：</p><p><em>The content of element type “configuration” must match “(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)”.</em></p><p>这个错误提示我们properties标签所放的位置是有要求的，<strong>必须放在核心配置文件的最前面</strong>。</p><p>当我们以从外部引入配置的方式，下面环境里的各个属性也要与之对应上以${}的方式写。</p><p>最终代码为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注意的一个问题：<strong>核心配置文件优先使用外部配置文件的属性值</strong>。</p></li></ul><h3 id="4-4-typeAliases"><a href="#4-4-typeAliases" class="headerlink" title="4.4 typeAliases"></a>4.4 typeAliases</h3><p>接下来，我们做类型别名的优化工作。我们在之前的UserMapper.xml中要写这样的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><br>       insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的paramterType写的让人不够满意，按照人<strong>性化应该写的是User</strong>，下面就要做这样的事。</p><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写</p><p><strong>第一种方式：<typeAlias></typeAlias></strong></p><p>在核心配置文件中，我们写如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>写完之后，我们就可以把之前UserMapper.xml中的代码修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第二种方式：指定一个包名</strong></p><p>在核心配置文件中，我们写如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atrox.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyBatis 会在包名下面搜索需要的 Java Bean，每一个在包下的javaBean，在没有注解的情况下，会使用 <strong>Bean 的首字母小写的非限定类名</strong>来作为它的别名。例：包下有User实体类，经过起别名后，用的时候要用user，首字母变成了小写。【大写其实也可以，但是建议用小写】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!--首字母写成大写也能跑起来，但不建议--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>那面对这两种起别名的方式，如何抉择？</strong></p><ul><li>在实体类比较少的时候，使用第一种方式</li><li>如果实体类非常多，建议使用第二种</li></ul><p>第一种方式，可以DIY别名，第二种则不行。</p><p>如果<strong>使用第二种方式，想要DIY别名</strong>，不想使用默认的首字母小写，可以<strong>使用注解</strong></p><p>在实体类定义的时候，就写上@Alias(“别名”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// User实体类</span><br><span class="hljs-meta">@Alias(&quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br>    <span class="hljs-comment">// 一堆方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在后面的UserMapper.xml中，我们这样写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-settings"><a href="#4-5-settings" class="headerlink" title="4.5 settings"></a>4.5 settings</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PARTIAL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WARNING&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultExecutorType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SIMPLE&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultFetchSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OTHER&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们目前只需要知道其中几个重要的即可.</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr></tbody></table><h3 id="4-6-mappers"><a href="#4-6-mappers" class="headerlink" title="4.6 mappers"></a>4.6 mappers</h3><p>映射器：注册绑定我们的Mapper文件，我们需要告诉 MyBatis 到哪里去找到这些文件，我们可以使用相对于类路径的资源引用，完全限定资源定位符或类名和包名等几种方式。</p><p><strong>方式1：相对于类路径的资源引用（推荐使用）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/atrox/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式二：使用映射器接口实现类的完全限定类名</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.pojo.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式三：将包内的映射器接口实现全部注册为映射器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atrox.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用方式二和方式三，有几个注意点：</p><ul><li>接口和它的Mapper配置文件<strong>必须同名</strong></li><li>接口和它的配置文件<strong>必须在同一个包下</strong></li></ul><h3 id="4-7-other-configuration"><a href="#4-7-other-configuration" class="headerlink" title="4.7 other configuration"></a>4.7 other configuration</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a><ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h3 id="4-8-Lifecycle-and-scope"><a href="#4-8-Lifecycle-and-scope" class="headerlink" title="4.8 Lifecycle and scope"></a>4.8 Lifecycle and scope</h3><p>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p>下面，用图来看一下整个流程：</p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_lifecycle.png" alt="流程图" style="zoom:75%;"><h4 id="4-8-1-SqlSessionFactoryBuilder"><a href="#4-8-1-SqlSessionFactoryBuilder" class="headerlink" title="4.8.1 SqlSessionFactoryBuilder"></a>4.8.1 SqlSessionFactoryBuilder</h4><p>这个类可以被实例化、使用和丢弃。<strong>一旦创建了SqlSessionFactory，就不再需要它了</strong>。因此 SqlSessionFactoryBuilder 实例的最佳作用域是<strong>方法作用域</strong>（也就是<strong>局部方法变量</strong>）</p><h4 id="4-8-2-SqlSessionFactory"><a href="#4-8-2-SqlSessionFactory" class="headerlink" title="4.8.2 SqlSessionFactory"></a>4.8.2 SqlSessionFactory</h4><p>这个东西，可以想象为数据库连接池。SqlSessionFactory 一旦被创建就<strong>应该在应用的运行期间一直存在</strong>，没有任何理由丢弃它或重新创建另一个实例。多次重建 SqlSessionFactory 被视为一种代码“坏习惯”</p><p>因此 SqlSessionFactory 的最佳作用域是<strong>应用作用域</strong>，最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</p><h4 id="4-8-3-SqlSession"><a href="#4-8-3-SqlSession" class="headerlink" title="4.8.3 SqlSession"></a>4.8.3 SqlSession</h4><p>这个东西，可以想象为连接到连接池的一个请求。SqlSession 的实例<strong>不是线程安全</strong>的，因此是不能被共享的，所以它的最佳的作用域是请求或<strong>方法作用域。</strong>在方法内用完之后需要赶紧关闭，否则资源被占用。</p><h4 id="4-8-4-relationship"><a href="#4-8-4-relationship" class="headerlink" title="4.8.4 relationship"></a>4.8.4 relationship</h4><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybaits_SqlSession.png" alt="关系" style="zoom:85%;"><p>这里面的每一个Mapper，就代表着每一个具体的业务。</p><h2 id="5、ResultMap"><a href="#5、ResultMap" class="headerlink" title="5、ResultMap"></a>5、ResultMap</h2><h3 id="5-1-problem"><a href="#5-1-problem" class="headerlink" title="5.1 problem"></a>5.1 problem</h3><p>结果集映射，用来解决的是<strong>JavaBean中的属性名和数据库中的字段名不一致</strong>的问题。</p><p>在之前的项目中，数据库中的字段和JavaBean的属性名字是相同的。</p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/column_properties.png" alt="属性与字段相同" style="zoom:80%;"><p>现在我们新建一个项目，拷贝之前的，测试实体类属性和字段不一致的情况。</p><ul><li><p><strong>第一步，修改User的属性和方法，使其属性名与数据库字段不一致，如图所示</strong></p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/update_column_properties.png" alt="不一致的属性名与字段名" style="zoom:80%;"><p>先不修改别的，直接测试一下，发现查出的结果集<strong>密码字段全为null</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>原因</strong>：类型处理器将UserMapper.xml的内容修改了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mybatis.user;<br><span class="hljs-comment">-- 经过类型处理器修改，变为下面的样子</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>,pwd <span class="hljs-keyword">from</span> mybatis.user;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>对第一步遇到的问题，我们是有几套解决方案的</strong></p></li><li><p><strong>方案一：修改SQL语句起别名，最简单暴力</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select id,name,pwd as password from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>方案二：下面要引出的ResultMap</strong></p></li></ul><h3 id="5-2-resultMap"><a href="#5-2-resultMap" class="headerlink" title="5.2 resultMap"></a>5.2 resultMap</h3><p>将UserMapper.xml中添加这些内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结果集映射--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果，是可以查出来的，这就是最简单的结果集映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p><p>在学习了上面的知识后，你会发现上面的例子没有一个需要显式配置 <code>ResultMap</code>，这就是 <code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们。</p><p><strong>可是，如果世界总是这么简单就好了。</strong></p><h2 id="6、Log"><a href="#6、Log" class="headerlink" title="6、Log"></a>6、Log</h2><h3 id="6-1-log-factory"><a href="#6-1-log-factory" class="headerlink" title="6.1 log factory"></a>6.1 log factory</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！曾经我们使用sout和debug来排错，现在我们使用mybatis内置的日志工厂，如下。</p><table><thead><tr><th>logImpl</th><th>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</th><th>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</th><th>未设置</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>SLF4J</li><li>LOG4J【掌握】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING【掌握】</li><li>NO_LOGGING</li></ul><p>在MyBatis中具体使用哪一日志实现，在<strong>设置中（settings）设定</strong>。我们手动在核心配置文件配置一下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>跑一下项目，日志打印为，下面进行解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Opening JDBC Connection                                       <span class="hljs-comment">//打开JDBC连接</span><br>Created connection <span class="hljs-number">90045638.</span>                                <span class="hljs-comment">//创建一个connection连接对象</span><br>Setting autocommit to <span class="hljs-keyword">false</span> on JDBC Connection  [com.mysql.cj.jdbc.ConnectionImpl@55dfcc6]         <span class="hljs-comment">//设置事务自动提交为false</span><br>==&gt;  Preparing: select * from mybatis.user             <span class="hljs-comment">//预编译</span><br>==&gt; Parameters:                                                       <span class="hljs-comment">//查询的参数</span><br>&lt;==    Columns: id, name, pwd                         <br>&lt;==        Row: <span class="hljs-number">1</span>, 乔威, <span class="hljs-number">123456</span><br>&lt;==        Row: <span class="hljs-number">2</span>, 张三, <span class="hljs-number">123456</span><br>&lt;==        Row: <span class="hljs-number">3</span>, 李四, <span class="hljs-number">123456</span><br>&lt;==        Row: <span class="hljs-number">4</span>, 李五, <span class="hljs-number">123456</span><br>&lt;==      Total: <span class="hljs-number">4</span>                                                          <span class="hljs-comment">//查询结果总条数</span><br>User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>Resetting autocommit to <span class="hljs-keyword">true</span> on JDBC Connection    [com.mysql.cj.jdbc.ConnectionImpl@55dfcc6]           <span class="hljs-comment">//设置事务自动提交为true</span><br>Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@55dfcc6] <span class="hljs-comment">// 关闭连接</span><br>Returned connection <span class="hljs-number">90045638</span> to pool.                    <span class="hljs-comment">//将connection还给池子</span><br></code></pre></td></tr></table></figure><h3 id="6-2-LOG4J"><a href="#6-2-LOG4J" class="headerlink" title="6.2 LOG4J"></a>6.2 LOG4J</h3><ul><li><p>第一步，了解一下LOG4J。</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li><li>我们也可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li><li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul></li><li><p><strong>第二步，使用一个外部类，需要先导log4j包，从Maven仓库去找</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>第三步，在resources目录下创建log4j.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">INFO,consoleAppender,logfile,MAIL</span><br><span class="hljs-meta">log4j.addivity.org.apache</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#ConsoleAppender，控制台输出</span><br><span class="hljs-comment">#FileAppender，文件日志输出</span><br><span class="hljs-comment">#SMTPAppender，发邮件输出日志</span><br><span class="hljs-comment">#SocketAppender，Socket 日志</span><br><span class="hljs-comment">#NTEventLogAppender，Window NT 日志</span><br><span class="hljs-comment">#SyslogAppender，</span><br><span class="hljs-comment">#JMSAppender，</span><br><span class="hljs-comment">#AsyncAppender，</span><br><span class="hljs-comment">#NullAppender</span><br><span class="hljs-comment">#文件输出：RollingFileAppender</span><br><span class="hljs-comment">#log4j.rootLogger = INFO,logfile</span><br><span class="hljs-meta">log4j.appender.logfile</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.logfile.Threshold</span> = <span class="hljs-string">INFO</span><br><span class="hljs-comment"># 输出以上的 INFO 信息</span><br><span class="hljs-meta">log4j.appender.logfile.File</span> = <span class="hljs-string">INFO_log.html</span><br><span class="hljs-comment">#保存 log 文件路径</span><br><span class="hljs-attr">Log4j</span> <span class="hljs-string">从入门到详解</span><br><span class="hljs-attr">10</span><br><span class="hljs-meta">log4j.appender.logfile.Append</span> = <span class="hljs-string">true</span><br><span class="hljs-comment"># 默认为 true，添加到末尾，false 在每次启动时进行覆盖</span><br><span class="hljs-meta">log4j.appender.logfile.MaxFileSize</span> = <span class="hljs-string">1MB</span><br><span class="hljs-comment"># 一个 log 文件的大小，超过这个大小就又会生成 1 个日志 # KB ，MB，GB</span><br><span class="hljs-meta">log4j.appender.logfile.MaxBackupIndex</span> = <span class="hljs-string">3</span><br><span class="hljs-comment"># 最多保存 3 个文件备份</span><br><span class="hljs-meta">log4j.appender.logfile.layout</span> = <span class="hljs-string">org.apache.log4j.HTMLLayout</span><br><span class="hljs-comment"># 输出文件的格式</span><br><span class="hljs-meta">log4j.appender.logfile.layout.LocationInfo</span> = <span class="hljs-string">true</span><br><span class="hljs-comment">#是否显示类名和行数</span><br><span class="hljs-attr">log4j.appender.logfile.layout.Title</span><br>=title:\u63d0\u9192\u60a8\uff1a\u7cfb\u7edf\u53d1\u751f\u4e86\u4e25\u91cd\u9519\u8b<br><span class="hljs-attr">ef</span><br><span class="hljs-comment">#html 页面的 &lt; title &gt;</span><br><span class="hljs-comment">############################## SampleLayout ####################################</span><br><span class="hljs-comment"># log4j.appender.logfile.layout = org.apache.log4j.SampleLayout</span><br><span class="hljs-comment">############################## PatternLayout ###################################</span><br><span class="hljs-comment"># log4j.appender.logfile.layout = org.apache.log4j.PatternLayout</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.ConversionPattern =% d % p [ % c] - % m % n % d</span><br><span class="hljs-comment">############################## XMLLayout #######################################</span><br><span class="hljs-comment"># log4j.appender.logfile.layout = org.apache.log4j.XMLLayout</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.LocationInfo = true #是否显示类名和行数</span><br><span class="hljs-comment">############################## TTCCLayout ######################################</span><br><span class="hljs-comment"># log4j.appender.logfile.layout = org.apache.log4j.TTCCLayout</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.DateFormat = ISO8601</span><br><span class="hljs-comment">#NULL, RELATIVE, ABSOLUTE, DATE or ISO8601.</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.TimeZoneID = GMT - 8 : 00</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.CategoryPrefixing = false ##默认为 true 打印类别名</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.ContextPrinting = false ##默认为 true 打印上下文信息</span><br><span class="hljs-comment"># log4j.appender.logfile.layout.ThreadPrinting = false ##默认为 true 打印线程名</span><br><span class="hljs-comment"># 打印信息如下：</span><br><span class="hljs-comment">#2007 - 09 - 13 14 : 45 : 39 , 765 [http - 8080 - 1 ] ERROR com.poxool.test.test -</span><br><span class="hljs-attr">error</span> <span class="hljs-string">成功关闭链接</span><br><span class="hljs-comment">###############################################################################</span><br><span class="hljs-comment">#每天文件的输出：DailyRollingFileAppender</span><br><span class="hljs-comment">#log4j.rootLogger = INFO,errorlogfile</span><br><span class="hljs-meta">log4j.appender.errorlogfile</span> = <span class="hljs-string">org.apache.log4j.DailyRollingFileAppender</span><br><span class="hljs-meta">log4j.appender.errorlogfile.Threshold</span> = <span class="hljs-string">ERROR</span><br><span class="hljs-meta">log4j.appender.errorlogfile.File</span> = <span class="hljs-string">../logs/ERROR_log</span><br><span class="hljs-meta">log4j.appender.errorlogfile.Append</span> = <span class="hljs-string">true</span><br><span class="hljs-comment">#默认为 true，添加到末尾，false 在每次启动时进行覆盖</span><br><span class="hljs-meta">log4j.appender.errorlogfile.ImmediateFlush</span> = <span class="hljs-string">true</span><br><span class="hljs-comment">#直接输出，不进行缓存</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM: 每个月更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - ww: 每个星期更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM - dd: 每天更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM - dd - a: 每天的午夜和正午更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM - dd - HH: 每小时更新一个 log 日志</span><br><span class="hljs-comment"># &#x27; . &#x27; yyyy - MM - dd - HH - mm: 每分钟更新一个 log 日志</span><br><span class="hljs-attr">Log4j</span> <span class="hljs-string">从入门到详解</span><br><span class="hljs-attr">11</span><br><span class="hljs-meta">log4j.appender.errorlogfile.DatePattern</span> = <span class="hljs-string">&#x27; . &#x27; yyyy - MM - dd &#x27; .log &#x27;</span><br><span class="hljs-comment">#文件名称的格式</span><br><span class="hljs-meta">log4j.appender.errorlogfile.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.errorlogfile.layout.ConversionPattern</span> =<span class="hljs-string">%d %p [ %c] - %m %n %d</span><br><span class="hljs-comment">#控制台输出：</span><br><span class="hljs-comment">#log4j.rootLogger = INFO,consoleAppender</span><br><span class="hljs-meta">log4j.appender.consoleAppender</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.consoleAppender.Threshold</span> = <span class="hljs-string">ERROR</span><br><span class="hljs-meta">log4j.appender.consoleAppender.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.consoleAppender.layout.ConversionPattern</span> =<span class="hljs-string">%d %-5p %m %n</span><br><span class="hljs-meta">log4j.appender.consoleAppender.ImmediateFlush</span> = <span class="hljs-string">true</span><br><span class="hljs-comment"># 直接输出，不进行缓存</span><br><span class="hljs-meta">log4j.appender.consoleAppender.Target</span> = <span class="hljs-string">System.err</span><br><span class="hljs-comment"># 默认是 System.out 方式输出</span><br><span class="hljs-comment">#发送邮件：SMTPAppender</span><br><span class="hljs-comment">#log4j.rootLogger = INFO,MAIL</span><br><span class="hljs-meta">log4j.appender.MAIL</span> = <span class="hljs-string">org.apache.log4j.net.SMTPAppender</span><br><span class="hljs-meta">log4j.appender.MAIL.Threshold</span> = <span class="hljs-string">INFO</span><br><span class="hljs-meta">log4j.appender.MAIL.BufferSize</span> = <span class="hljs-string">10</span><br><span class="hljs-meta">log4j.appender.MAIL.From</span> = <span class="hljs-string">yourmail@gmail.com</span><br><span class="hljs-meta">log4j.appender.MAIL.SMTPHost</span> = <span class="hljs-string">smtp.gmail.com</span><br><span class="hljs-meta">log4j.appender.MAIL.Subject</span> = <span class="hljs-string">Log4J Message</span><br><span class="hljs-meta">log4j.appender.MAIL.To</span> = <span class="hljs-string">yourmail@gmail.com</span><br><span class="hljs-meta">log4j.appender.MAIL.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.MAIL.layout.ConversionPattern</span> =<span class="hljs-string">%d - %c -%-4r [%t] %-5p %c %x - %m %n</span><br><span class="hljs-comment">#数据库：JDBCAppender</span><br><span class="hljs-meta">log4j.appender.DATABASE</span> = <span class="hljs-string">org.apache.log4j.jdbc.JDBCAppender</span><br><span class="hljs-meta">log4j.appender.DATABASE.URL</span> = <span class="hljs-string">jdbc:oracle:thin:@ 210.51 . 173.94 : 1521 :YDB</span><br><span class="hljs-meta">log4j.appender.DATABASE.driver</span> = <span class="hljs-string">oracle.jdbc.driver.OracleDriver</span><br><span class="hljs-meta">log4j.appender.DATABASE.user</span> = <span class="hljs-string">ydbuser</span><br><span class="hljs-meta">log4j.appender.DATABASE.password</span> = <span class="hljs-string">ydbuser</span><br><span class="hljs-meta">log4j.appender.DATABASE.sql</span> = <span class="hljs-string">INSERT INTO A1 (TITLE3) VALUES ( &#x27; %d - %c %-5p %c %x - %m%n</span><br><span class="hljs-meta">&#x27;</span> <span class="hljs-string">)</span><br><span class="hljs-meta">log4j.appender.DATABASE.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.DATABASE.layout.ConversionPattern</span> =<span class="hljs-string">% d - % c -%- 4r [ % t] %- 5p % c %</span><br><span class="hljs-attr">x</span> <span class="hljs-string">- % m % n</span><br><span class="hljs-comment">#数据库的链接会有问题，可以重写 org.apache.log4j.jdbc.JDBCAppender 的 getConnection() 使用数</span><br><span class="hljs-meta">据库链接池去得链接，可以避免</span> <span class="hljs-string">insert 一条就链接一次数据库</span><br></code></pre></td></tr></table></figure></li><li><p><strong>第四步，log4j配置文件解析，如下</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 日志信息输出到控制台、文件</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"># 默认为 true，添加到末尾，false 在每次启动时进行覆盖</span><br><span class="hljs-meta">log4j.appender.file.Append</span> = <span class="hljs-string">true</span><br><span class="hljs-comment"># 一个 log 文件的大小，超过这个大小就又会生成 1 个日志 # KB ，MB，GB</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span> = <span class="hljs-string">1MB</span><br></code></pre></td></tr></table></figure></li><li><p><strong>第五步，上面的配置文件太乱了，我们去找一个比较干净的配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-meta">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/atrox.txt</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>第六步，在核心配置文件配置log4j为日志的实现</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>测试运行刚才的查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Opening JDBC Connection<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Created connection <span class="hljs-number">680988889.</span><br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Setting autocommit to <span class="hljs-keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@289710d9]<br>[com.atrox.dao.UserMapper.getUserList]-==&gt;  Preparing: select * from mybatis.user <br>[com.atrox.dao.UserMapper.getUserList]-==&gt; Parameters: <br>[com.atrox.dao.UserMapper.getUserList]-&lt;==      Total: <span class="hljs-number">4</span><br>User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Resetting autocommit to <span class="hljs-keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@289710d9]<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@289710d9]<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Returned connection <span class="hljs-number">680988889</span> to pool.<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-3-Use-LOG4J"><a href="#6-3-Use-LOG4J" class="headerlink" title="6.3  Use LOG4J"></a>6.3  Use LOG4J</h3><ol><li><p><strong>在要使用Log4j的类中导入包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br></code></pre></td></tr></table></figure></li><li><p><strong>获取日志对象，参数为当前类的class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);<br></code></pre></td></tr></table></figure></li><li><p>写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLog4j</span><span class="hljs-params">()</span> </span>&#123;<br>    logger.info(<span class="hljs-string">&quot;info:进入了testLog4j&quot;</span>);<br>    logger.debug(<span class="hljs-string">&quot;debug:进入了testLog4j&quot;</span>);<br>    logger.error(<span class="hljs-string">&quot;error:进入了testLog4j&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当运行后，在<strong>左侧目录创建了log目录下面有atrox.txt</strong>,原因是log4j配置文件里写的</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/atrox.txt</span><br></code></pre></td></tr></table></figure><p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_log.png" alt="日志输出目录"></p></li><li><p>atrox.txt的日志信息和控制台输出的相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[com.atrox.dao.UserMapperTest]-info:进入了testLog4j<br>[com.atrox.dao.UserMapperTest]-debug:进入了testLog4j<br>[com.atrox.dao.UserMapperTest]-error:进入了testLog4j<br></code></pre></td></tr></table></figure></li></ol><h2 id="7、Pagination"><a href="#7、Pagination" class="headerlink" title="7、Pagination"></a>7、Pagination</h2><p>在了解分页之前，我们需要思考：</p><p><strong>为什么要分页？</strong></p><ul><li>减少数据的处理量</li><li>节约资源</li></ul><h3 id="7-1-Limit"><a href="#7-1-Limit" class="headerlink" title="7.1 Limit"></a>7.1 Limit</h3><p>使用Limit进行分页的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> startIndex,pageSize; <br></code></pre></td></tr></table></figure><p>下面，我们使用MyBatis实现分页，核心其实就是SQL语句，老三步。</p><p><strong>第一步：在UserMapper接口中写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分页查询</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLimit</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步：在UserMapper.xml中写SQL语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第三步：测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByLimit</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>    HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>    map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">0</span>);<br>    map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);<br><br>    List&lt;User&gt; users = mapper.getUserByLimit(map);<br>    <span class="hljs-keyword">for</span> (User user : users) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-RowBounds"><a href="#7-2-RowBounds" class="headerlink" title="7.2 RowBounds"></a>7.2 RowBounds</h3><p>不再使用SQL实现分页</p><p><strong>第一步，接口写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分页2</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getuserByRowBounds</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>第二步，写SQL语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getuserByRowBounds&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第三步，测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br><br>    <span class="hljs-comment">// RowBounds实现</span><br>    RowBounds rowBounds = <span class="hljs-keyword">new</span> RowBounds(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">// 通过Java代码层面实现分页</span><br>    List&lt;Object&gt; users = sqlSession.selectList(<span class="hljs-string">&quot;com.atrox.dao.UserMapper.getuserByRowBounds&quot;</span>, <span class="hljs-keyword">null</span>, rowBounds);<br>    <span class="hljs-keyword">for</span> (Object user : users) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-Pagnation-Plugins"><a href="#7-3-Pagnation-Plugins" class="headerlink" title="7.3 Pagnation Plugins"></a>7.3 Pagnation Plugins</h3><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/mybatis_pageHelper.png" alt="分页插件" style="zoom:75%;"><h2 id="8-Annotation"><a href="#8-Annotation" class="headerlink" title="8. Annotation"></a>8. Annotation</h2><h3 id="8-1-Interface-oriented-programming"><a href="#8-1-Interface-oriented-programming" class="headerlink" title="8.1 Interface-oriented programming"></a>8.1 Interface-oriented programming</h3><p>-大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程。</p><p><strong>-根本原因：==解耦==，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</strong>。</p><p>-在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了;</p><p>-而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><p><strong>关于接口的理解</strong></p><p>-接口从更深层次的理解，应是定义(规范，约束）与实现(名实分离的原则)的分离。-接口的本身反映了系统设计人员对系统的抽象理解。</p><p>-接口应有两类:</p><p>-第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class);-第二类是对一个个体某一方面的抽象，即形成一个抽象面(interface) ;-—个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p><p><strong>三个面向区别</strong></p><p>-面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法.</p><p>-面向过程是指，我们考虑问题时，以一个具体的流程（事务过程)为单位，考虑它的实现．</p><p>-接口设计与非接口设计是针对复用技术而言的，与面向对象（过程)不是一个问题.更多的体现就是对系统整体的架构</p><h3 id="8-2-annotation-coding"><a href="#8-2-annotation-coding" class="headerlink" title="8.2 annotation coding"></a>8.2 annotation coding</h3><ol><li><p><strong>注解在接口上实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atrox.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    <span class="hljs-comment">// 底层主要应用反射</span><br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    List&lt;User&gt; users = mapper.getUsers();<br>    <span class="hljs-keyword">for</span> (User user : users) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>在这一步，由于我们的数据库字段与实体类属性名不同，查询结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;乔威&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">2</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">3</span>, name=<span class="hljs-string">&#x27;李四&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;李五&#x27;</span>, password=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>所以，使用注解来<strong>映射简单语句会使代码显得更加简洁</strong>，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。 因此，如果你需要做一些很复杂的操作，<strong>最好用 XML 来映射语句</strong>。</p><p><strong>本质</strong>：反射机制的实现</p><p><strong>底层</strong>：动态代理</p></li></ol><h3 id="8-3-MyBatis-Source-code-analysis"><a href="#8-3-MyBatis-Source-code-analysis" class="headerlink" title="8.3 MyBatis Source code analysis"></a>8.3 MyBatis Source code analysis</h3><p><strong>MyBatis详细的执行流程！</strong></p><p><img src="/2020/12/28/MyBatis%E5%AD%A6%E4%B9%A0/MyBatis_core_code.png" alt="MyBatis源码分析"></p><h3 id="8-4-Use-annotation-CRUD"><a href="#8-4-Use-annotation-CRUD" class="headerlink" title="8.4 Use annotation CRUD"></a>8.4 Use annotation CRUD</h3><p>我们可以在工具类创建的时候实现<strong>自动提交事务</strong>，在MyBatisUtils中修改获取sqlSession的方法!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>); &#125; <br></code></pre></td></tr></table></figure><p>第二步，是<strong>编写接口，增加注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解</span><br>    <span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Update(&quot;update user set name = #&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;uid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三步，是测试，与前面相同，只是<strong>不需要每次都手动提交</strong>了。</p><h3 id="8-5-About-Param"><a href="#8-5-About-Param" class="headerlink" title="8.5 About @Param()"></a>8.5 About @Param()</h3><p>关于@Param注解，是有几个原则的</p><ul><li>基本类型的参数或者String类型，需要加上该注解</li><li>如果是引用类型，则不需要加上该注解</li><li>如果只有一个基本类型，可以忽略，但是建议加上</li><li>我们在SQL中引用的引用的就是这里@Param()中设定的属性名</li></ul><h3 id="8-6-V-S"><a href="#8-6-V-S" class="headerlink" title="8.6 ${} V.S. #{}"></a>8.6 ${} V.S. #{}</h3><p>用前者存在SQL注入问题，后者是安全的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SMBMS</title>
    <link href="/posts/SMBMS/"/>
    <url>/posts/SMBMS/</url>
    
    <content type="html"><![CDATA[<h1 id="SMBMS"><a href="#SMBMS" class="headerlink" title="SMBMS"></a>SMBMS</h1><p><img src="/2020/12/26/SMBMS/SMBMS.png" alt="SMBMS整体架构"></p><p><strong>项目如何搭建</strong>？</p><p>考虑适用不适用Maven？依赖，jar</p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><ol><li><p>搭建一个mavenweb项目</p></li><li><p>配置Tomcat</p></li><li><p>测试项目是否能够跑起来</p></li><li><p>导入项目中会遇到的jar包</p><p>jsp，Servlet，mysql驱动，jstl，standard</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建项目包结构</p><p><img src="/2020/12/26/SMBMS/project_directory_structure.png" alt="项目包结构"></p></li><li><p>实体类</p><p><strong>ORM映射</strong>：表—类映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// User 类</span><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> String userCode; <span class="hljs-comment">//用户编码</span><br>    <span class="hljs-keyword">private</span> String userName; <span class="hljs-comment">//用户名称</span><br>    <span class="hljs-keyword">private</span> String userPassword; <span class="hljs-comment">//用户密码</span><br>    <span class="hljs-keyword">private</span> Integer gender;  <span class="hljs-comment">//性别</span><br>    <span class="hljs-keyword">private</span> Date birthday;  <span class="hljs-comment">//出生日期</span><br>    <span class="hljs-keyword">private</span> String phone;   <span class="hljs-comment">//电话</span><br>    <span class="hljs-keyword">private</span> String address; <span class="hljs-comment">//地址</span><br>    <span class="hljs-keyword">private</span> Integer userRole;    <span class="hljs-comment">//用户角色</span><br>    <span class="hljs-keyword">private</span> Integer createdBy;   <span class="hljs-comment">//创建者</span><br>    <span class="hljs-keyword">private</span> Date creationDate; <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> Integer modifyBy;     <span class="hljs-comment">//更新者</span><br>    <span class="hljs-keyword">private</span> Date modifyDate;   <span class="hljs-comment">//更新时间</span><br><br>    <span class="hljs-keyword">private</span> Integer age;<span class="hljs-comment">//年龄</span><br><br>    <span class="hljs-keyword">private</span> String userRoleName;    <span class="hljs-comment">//用户角色名称</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserRoleName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userRoleName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserRoleName</span><span class="hljs-params">(String userRoleName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userRoleName = userRoleName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">/*long time = System.currentTimeMillis()-birthday.getTime();</span><br><span class="hljs-comment">Integer age = Long.valueOf(time/365/24/60/60/1000).IntegerValue();*/</span><br>        Date date = <span class="hljs-keyword">new</span> Date();<br>        Integer age = date.getYear()-birthday.getYear();<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userCode;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserCode</span><span class="hljs-params">(String userCode)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userCode = userCode;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserName</span><span class="hljs-params">(String userName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userName = userName;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userPassword;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserPassword</span><span class="hljs-params">(String userPassword)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userPassword = userPassword;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(Integer gender)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(Date birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPhone</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPhone</span><span class="hljs-params">(String phone)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.phone = phone;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getUserRole</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userRole;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserRole</span><span class="hljs-params">(Integer userRole)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userRole = userRole;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCreatedBy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> createdBy;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreatedBy</span><span class="hljs-params">(Integer createdBy)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.createdBy = createdBy;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreationDate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> creationDate;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreationDate</span><span class="hljs-params">(Date creationDate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.creationDate = creationDate;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getModifyBy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> modifyBy;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyBy</span><span class="hljs-params">(Integer modifyBy)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.modifyBy = modifyBy;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getModifyDate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> modifyDate;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyDate</span><span class="hljs-params">(Date modifyDate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.modifyDate = modifyDate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Bill类</span><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bill</span> </span>&#123;<br><span class="hljs-keyword">private</span> Integer id;   <span class="hljs-comment">//id </span><br><span class="hljs-keyword">private</span> String billCode; <span class="hljs-comment">//账单编码 </span><br><span class="hljs-keyword">private</span> String productName; <span class="hljs-comment">//商品名称 </span><br><span class="hljs-keyword">private</span> String productDesc; <span class="hljs-comment">//商品描述 </span><br><span class="hljs-keyword">private</span> String productUnit; <span class="hljs-comment">//商品单位</span><br><span class="hljs-keyword">private</span> BigDecimal productCount; <span class="hljs-comment">//商品数量 </span><br><span class="hljs-keyword">private</span> BigDecimal totalPrice; <span class="hljs-comment">//总金额</span><br><span class="hljs-keyword">private</span> Integer isPayment; <span class="hljs-comment">//是否支付 </span><br><span class="hljs-keyword">private</span> Integer providerId; <span class="hljs-comment">//供应商ID </span><br><span class="hljs-keyword">private</span> Integer createdBy; <span class="hljs-comment">//创建者</span><br><span class="hljs-keyword">private</span> Date creationDate; <span class="hljs-comment">//创建时间</span><br><span class="hljs-keyword">private</span> Integer modifyBy; <span class="hljs-comment">//更新者</span><br><span class="hljs-keyword">private</span> Date modifyDate;<span class="hljs-comment">//更新时间</span><br><br><span class="hljs-keyword">private</span> String providerName;<span class="hljs-comment">//供应商名称</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProviderName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> providerName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProviderName</span><span class="hljs-params">(String providerName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.providerName = providerName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBillCode</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> billCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBillCode</span><span class="hljs-params">(String billCode)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.billCode = billCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProductName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> productName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProductName</span><span class="hljs-params">(String productName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.productName = productName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProductDesc</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> productDesc;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProductDesc</span><span class="hljs-params">(String productDesc)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.productDesc = productDesc;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProductUnit</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> productUnit;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProductUnit</span><span class="hljs-params">(String productUnit)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.productUnit = productUnit;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getProductCount</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> productCount;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProductCount</span><span class="hljs-params">(BigDecimal productCount)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.productCount = productCount;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getTotalPrice</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> totalPrice;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalPrice</span><span class="hljs-params">(BigDecimal totalPrice)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.totalPrice = totalPrice;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getIsPayment</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> isPayment;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIsPayment</span><span class="hljs-params">(Integer isPayment)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.isPayment = isPayment;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getProviderId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> providerId;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProviderId</span><span class="hljs-params">(Integer providerId)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.providerId = providerId;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCreatedBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreatedBy</span><span class="hljs-params">(Integer createdBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.createdBy = createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreationDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreationDate</span><span class="hljs-params">(Date creationDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.creationDate = creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getModifyBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyBy</span><span class="hljs-params">(Integer modifyBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyBy = modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getModifyDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyDate</span><span class="hljs-params">(Date modifyDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyDate = modifyDate;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Role类</span><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Integer id;   <span class="hljs-comment">//id</span><br><span class="hljs-keyword">private</span> String roleCode; <span class="hljs-comment">//角色编码</span><br><span class="hljs-keyword">private</span> String roleName; <span class="hljs-comment">//角色名称</span><br><span class="hljs-keyword">private</span> Integer createdBy; <span class="hljs-comment">//创建者</span><br><span class="hljs-keyword">private</span> Date creationDate; <span class="hljs-comment">//创建时间</span><br><span class="hljs-keyword">private</span> Integer modifyBy; <span class="hljs-comment">//更新者</span><br><span class="hljs-keyword">private</span> Date modifyDate;<span class="hljs-comment">//更新时间</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoleCode</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> roleCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleCode</span><span class="hljs-params">(String roleCode)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.roleCode = roleCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoleName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> roleName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleName</span><span class="hljs-params">(String roleName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.roleName = roleName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCreatedBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreatedBy</span><span class="hljs-params">(Integer createdBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.createdBy = createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreationDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreationDate</span><span class="hljs-params">(Date creationDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.creationDate = creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getModifyBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyBy</span><span class="hljs-params">(Integer modifyBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyBy = modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getModifyDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyDate</span><span class="hljs-params">(Date modifyDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyDate = modifyDate;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Provider类</span><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Integer id;   <span class="hljs-comment">//id</span><br><span class="hljs-keyword">private</span> String proCode; <span class="hljs-comment">//供应商编码</span><br><span class="hljs-keyword">private</span> String proName; <span class="hljs-comment">//供应商名称</span><br><span class="hljs-keyword">private</span> String proDesc; <span class="hljs-comment">//供应商描述</span><br><span class="hljs-keyword">private</span> String proContact; <span class="hljs-comment">//供应商联系人</span><br><span class="hljs-keyword">private</span> String proPhone; <span class="hljs-comment">//供应商电话</span><br><span class="hljs-keyword">private</span> String proAddress; <span class="hljs-comment">//供应商地址</span><br><span class="hljs-keyword">private</span> String proFax; <span class="hljs-comment">//供应商传真</span><br><span class="hljs-keyword">private</span> Integer createdBy; <span class="hljs-comment">//创建者</span><br><span class="hljs-keyword">private</span> Date creationDate; <span class="hljs-comment">//创建时间</span><br><span class="hljs-keyword">private</span> Integer modifyBy; <span class="hljs-comment">//更新者</span><br><span class="hljs-keyword">private</span> Date modifyDate;<span class="hljs-comment">//更新时间</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProCode</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProCode</span><span class="hljs-params">(String proCode)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proCode = proCode;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProName</span><span class="hljs-params">(String proName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proName = proName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProDesc</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proDesc;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProDesc</span><span class="hljs-params">(String proDesc)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proDesc = proDesc;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProContact</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proContact;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProContact</span><span class="hljs-params">(String proContact)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proContact = proContact;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProPhone</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proPhone;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProPhone</span><span class="hljs-params">(String proPhone)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proPhone = proPhone;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProAddress</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proAddress;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProAddress</span><span class="hljs-params">(String proAddress)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proAddress = proAddress;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getProFax</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> proFax;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProFax</span><span class="hljs-params">(String proFax)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.proFax = proFax;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCreatedBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreatedBy</span><span class="hljs-params">(Integer createdBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.createdBy = createdBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreationDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreationDate</span><span class="hljs-params">(Date creationDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.creationDate = creationDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getModifyBy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyBy</span><span class="hljs-params">(Integer modifyBy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyBy = modifyBy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getModifyDate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> modifyDate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setModifyDate</span><span class="hljs-params">(Date modifyDate)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.modifyDate = modifyDate;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li><p>编写基础公共类</p><ol><li><p>数据库配置文件 db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">zuiweizhiming666</span><br></code></pre></td></tr></table></figure></li><li><p>编写操作数据库的公共类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">// 操作数据库的公共类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;<br><br>    <span class="hljs-comment">// 静态代码块，类加载的时候就初始化了</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">// 通过类加载器读取对应的资源</span><br>        InputStream is = BaseDao.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(is);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        url= properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取数据库的连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(driver);<br>            connection = DriverManager.getConnection(url, username, password);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> connection;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 编写查询公共方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultSet <span class="hljs-title">executeSelect</span><span class="hljs-params">(Connection connection,String sql,Object[] params,PreparedStatement preparedStatement)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        <span class="hljs-comment">// 预编译的sql，灾后main直接执行就可以了</span><br>        preparedStatement = connection.prepareStatement(sql);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>            <span class="hljs-comment">//setObject，占位符从1开始，但是我们的数组是从0开始！</span><br>            preparedStatement.setObject(i+<span class="hljs-number">1</span>,params[i]);<br>        &#125;<br><br>        ResultSet resultSet = preparedStatement.executeQuery();<br>        <span class="hljs-keyword">return</span> resultSet;<br>    &#125;<br><br>    <span class="hljs-comment">// 编写增删改公共方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">executeUpdate</span><span class="hljs-params">(Connection connection,String sql,Object[] params,PreparedStatement preparedStatement)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        preparedStatement = connection.prepareStatement(sql);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>            <span class="hljs-comment">//setObject，占位符从1开始，但是我们的数组是从0开始！</span><br>            preparedStatement.setObject(i+<span class="hljs-number">1</span>,params[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> updateRows = preparedStatement.executeUpdate();<br>        <span class="hljs-keyword">return</span> updateRows;<br>    &#125;<br><br>    <span class="hljs-comment">// 释放资源</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">closeResources</span><span class="hljs-params">(Connection connection, PreparedStatement preparedStatement, ResultSet resultSet)</span> </span>&#123;<br><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                resultSet.close();<br>                <span class="hljs-comment">// GC回收</span><br>                resultSet = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>                flag = <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (preparedStatement != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                preparedStatement.close();<br>                <span class="hljs-comment">// GC回收</span><br>                preparedStatement = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>                flag = <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>                <span class="hljs-comment">// GC回收</span><br>                connection = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>                flag = <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> flag;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写字符编码过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>导入静态资源</p></li></ol><h3 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h3><p><img src="/2020/12/26/SMBMS/login_process.png" alt="登录功能流程图"></p><ol><li><p>编写前端页面</p></li><li><p>设置首页</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置欢迎页面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>login.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写dao层登录用户登录的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getLoginUser</span><span class="hljs-params">(Connection connection,String userCode)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写dao接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getLoginUser</span><span class="hljs-params">(Connection connection, String userCode)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        PreparedStatement pstm = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        User user = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (connection == <span class="hljs-keyword">null</span>) &#123;<br>        String sql = <span class="hljs-string">&quot;select * from smbms_user where userCode = ?&quot;</span>;<br>        Object[] params = &#123;userCode&#125;;<br><br><br>            BaseDao.executeSelect(connection,pstm, rs,sql,params);<br><br>            <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>                user = <span class="hljs-keyword">new</span> User();<br>                user.setId(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>                user.setUserCode(rs.getString(<span class="hljs-string">&quot;userCode&quot;</span>));<br>                user.setUserName(rs.getString(<span class="hljs-string">&quot;userName&quot;</span>));<br>                user.setUserPassword(rs.getString(<span class="hljs-string">&quot;userPassword&quot;</span>));<br>                user.setGender(rs.getInt(<span class="hljs-string">&quot;gender&quot;</span>));<br>                user.setBirthday(rs.getDate(<span class="hljs-string">&quot;birthday&quot;</span>));<br>                user.setPhone(rs.getString(<span class="hljs-string">&quot;phone&quot;</span>));<br>                user.setAddress(rs.getString(<span class="hljs-string">&quot;address&quot;</span>));<br>                user.setUserRole(rs.getInt(<span class="hljs-string">&quot;userRole&quot;</span>));<br>                user.setCreatedBy(rs.getInt(<span class="hljs-string">&quot;createdBy&quot;</span>));<br>                user.setCreationDate(rs.getTimestamp(<span class="hljs-string">&quot;creationDate&quot;</span>));<br>                user.setModifyBy(rs.getInt(<span class="hljs-string">&quot;modifyBy&quot;</span>));<br>                user.setModifyDate(rs.getTimestamp(<span class="hljs-string">&quot;modifyDate&quot;</span>));<br>            &#125;<br>            BaseDao.closeResources(<span class="hljs-keyword">null</span>,pstm,rs);<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>业务层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用户登录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">login</span><span class="hljs-params">(String userCode,String password)</span></span><br></code></pre></td></tr></table></figure></li><li><p>业务层实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br><br>    <span class="hljs-comment">// 业务层都会调用dao层，所以我们要引入dao层</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceImpl</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">login</span><span class="hljs-params">(String userCode, String password)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        User user = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = BaseDao.getConnection();<br>            <span class="hljs-comment">// 通过业务层调用对应的具体的数据库操作</span><br>            user = userDao.getLoginUser(connection, userCode);<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            BaseDao.closeResources(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> user;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>编写Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-comment">//Servlet：控制层，调用业务层代码</span><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;LoginServlet--start...&quot;</span>);<br><br>        <span class="hljs-comment">// 获取用户名和密码</span><br>        String userCode = req.getParameter(<span class="hljs-string">&quot;userCode&quot;</span>);<br>        String userPassword = req.getParameter(<span class="hljs-string">&quot;userPassword&quot;</span>);<br><br>        <span class="hljs-comment">// 和数据库中的密码进行对比，调用业务层</span><br>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>        User user = userService.login(userCode, userPassword);<span class="hljs-comment">// 这里已经把登录的人查了出来</span><br><br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 查有此人，可以登录</span><br>            <span class="hljs-comment">// 将用户的信息放到Session中</span><br>            req.getSession().setAttribute(Constant.USER_SESSION,user);<br>            <span class="hljs-comment">// 跳转到主页</span><br>            resp.sendRedirect(req.getContextPath() + <span class="hljs-string">&quot;/jsp/frame.jsp&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 查无此人，无法登录</span><br>            <span class="hljs-comment">//转发回登录页面,顺带提示它，用户名或者密码不正确</span><br>            req.setAttribute(<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;用户名或密码不正确&quot;</span>);<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;login.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="8"><li><p>注册Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>.login.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><ol start="9"><li>测试访问，确保以上共嗯那个成功</li></ol><h3 id="登录功能优化"><a href="#登录功能优化" class="headerlink" title="登录功能优化"></a>登录功能优化</h3><p>注销功能：</p><p>思路：移除Session，返回登录页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 移除用户的Session</span><br>        req.getSession().removeAttribute(Constant.USER_SESSION);<br>        resp.sendRedirect(<span class="hljs-string">&quot;login.jsp&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注册xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LogoutServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.LogoutServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LogoutServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/jsp/logout.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>登录拦截优化</strong></p><p>编写一个过滤器，并注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>        HttpServletRequest request = (HttpServletRequest) servletRequest;<br>        HttpServletResponse response = (HttpServletResponse) servletResponse;<br><br>        <span class="hljs-comment">// 过滤器，从Session中获取用户</span><br>        User user = (User) request.getSession().getAttribute(Constant.USER_SESSION);<br><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 已经被移除或者注销了，或者未登录</span><br>            response.sendRedirect(<span class="hljs-string">&quot;error.jsp&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h3><ol><li><p>导入前端素材</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;li&gt;&lt;a href=&quot;$&#123;pageContext.request.contextPath &#125;/jsp/pwdmodify.jsp&quot;&gt;密码修改&lt;/a&gt;&lt;/li&gt;<br></code></pre></td></tr></table></figure></li><li><p>userDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改当前用户密码</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(Connection connection,<span class="hljs-keyword">int</span> id,<span class="hljs-keyword">int</span> password)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br></code></pre></td></tr></table></figure></li><li><p>userDao接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改当前用户密码</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(Connection connection, <span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> password)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>    PreparedStatement pstm = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">int</span> updateRows = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>        String sql = <span class="hljs-string">&quot;update smbms_user set userPassword = ? where id = ?&quot;</span>;<br>        Object params[] = &#123;password,id&#125;;<br>        updateRows = BaseDao.executeUpdate(connection, pstm, sql, params);<br><br>        BaseDao.closeResources(connection,pstm,<span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> updateRows;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>UserService层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据用户ID修改密码</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id,<span class="hljs-keyword">int</span> pwd)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>UserService实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> pwd)</span> </span>&#123;<br>   <br>      Connection connection = <span class="hljs-keyword">null</span>;<br>      connection = BaseDao.getConnection();<br>   <br>      <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>   <br>      <span class="hljs-comment">// 修改密码</span><br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">if</span> (userDao.updatePwd(connection,id,pwd) &gt; <span class="hljs-number">0</span>) &#123;<br>              flag = <span class="hljs-keyword">true</span>;<br>          &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>          throwables.printStackTrace();<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>          BaseDao.closeResources(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>      &#125;<br>      <span class="hljs-keyword">return</span> flag;<br>   <br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>记得实现复用，需要提取出方法！</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    String method = req.getParameter(<span class="hljs-string">&quot;method&quot;</span>);<br>    <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;savepwd&quot;</span>) &amp;&amp; method != <span class="hljs-keyword">null</span>)) &#123;<br>        <span class="hljs-keyword">this</span>.updatePwd(req,resp);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updatePwd</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <span class="hljs-comment">// 从Session里面拿ID;</span><br>    Object o = req.getSession().getAttribute(Constant.USER_SESSION);<br>    <span class="hljs-comment">// 拿表单提交的参数</span><br>    String newpassword = req.getParameter(<span class="hljs-string">&quot;newpassword&quot;</span>);<br><br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-keyword">if</span> (o != <span class="hljs-keyword">null</span> &amp;&amp; !StringUtils.isNullOrEmpty(newpassword)) &#123;<br>        UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>        flag = userService.updatePwd(((User) o).getId(), newpassword);<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            req.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;修改密码成功，请退出，使用新密码登录&quot;</span>);<br>            <span class="hljs-comment">// 密码修改成功，移除当前Session</span><br>            req.getSession().removeAttribute(Constant.USER_SESSION);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;密码修改失败&quot;</span>);<br><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        req.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;新密码有问题&quot;</span>);<br>    &#125;<br><br>    req.getRequestDispatcher(req.getContextPath() + <span class="hljs-string">&quot;/jsp/pwdmodify.jsp&quot;</span>).forward(req,resp);<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>注册Servlet</li></ol><p><strong>优化密码使用Ajax</strong></p><ol><li><p>阿里巴巴的fastjson</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.75<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>后台代码修改(旧密码验证)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 验证旧密码,session中有用户的密码</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pwdModify</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;<br><br>        Object o = req.getSession().getAttribute(Constant.USER_SESSION);<br>        String oldpassword = req.getParameter(<span class="hljs-string">&quot;oldpassword&quot;</span>);<br><br>        <span class="hljs-comment">// 万能的Map:结果集</span><br>        HashMap&lt;String, String&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// Session失效了，session过期了</span><br>            resultMap.put(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-string">&quot;sessionError&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isNullOrEmpty(oldpassword)) &#123; <span class="hljs-comment">// 输入的密码为空</span><br>            resultMap.put(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            String userPassword = ((User) o).getUserPassword(); <span class="hljs-comment">//Session中用户的密码</span><br>            <span class="hljs-keyword">if</span> (oldpassword.equals(userPassword)) &#123;<br>                resultMap.put(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(oldpassword);<br>                System.out.println(userPassword);<br>                resultMap.put(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-string">&quot;false&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        PrintWriter writer = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            resp.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>            writer = resp.getWriter();<br>            <span class="hljs-comment">// JSONArray 阿里巴巴的JSON工具类，转换格式</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            resultMap = [&quot;result&quot;:&quot;sessionError&quot;,&quot;result&quot;:&quot;true&quot;]</span><br><span class="hljs-comment">            Json格式 = &#123;key：value&#125;</span><br><span class="hljs-comment">             */</span><br>            writer.write(JSONArray.toJSONString(resultMap));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            writer.flush();<br>            writer.close();<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="用户管理实现"><a href="#用户管理实现" class="headerlink" title="用户管理实现"></a>用户管理实现</h3><p>思路：</p><p><img src="/2020/12/26/SMBMS/user_manage.png" alt="用户管理流程"></p><ol><li><p>导入分页的工具类</p></li><li><p>用户列表页面导入</p><ul><li><blockquote><p>userlist.jsp</p></blockquote></li></ul></li></ol><h4 id="1-获取用户数量"><a href="#1-获取用户数量" class="headerlink" title="1. 获取用户数量"></a>1. 获取用户数量</h4><ol><li><p>UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据用户名或角色查询用户数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getUserCount</span><span class="hljs-params">(Connection connection,String username, <span class="hljs-keyword">int</span> userRole)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br></code></pre></td></tr></table></figure></li><li><p>UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据用户名或角色查询用户数量 </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getUserCount</span><span class="hljs-params">(Connection connection,String username, <span class="hljs-keyword">int</span> userRole)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>            StringBuffer sql = <span class="hljs-keyword">new</span> StringBuffer();<br>            sql.append(<span class="hljs-string">&quot;select count(1) as count from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);<br><br>            ArrayList&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<span class="hljs-comment">// 存放我们的参数</span><br><br>            <span class="hljs-keyword">if</span> (!StringUtils.isNullOrEmpty(username)) &#123;<br>                sql.append(<span class="hljs-string">&quot; and u.userName like ?&quot;</span>);<br>                list.add(<span class="hljs-string">&quot;%&quot;</span>+username+<span class="hljs-string">&quot;%&quot;</span>); <span class="hljs-comment">// index:0</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (userRole &gt; <span class="hljs-number">0</span>) &#123;<br>                sql.append(<span class="hljs-string">&quot; and u.userRole = ?&quot;</span>);<br>                list.add(userRole); <span class="hljs-comment">// index:1</span><br>            &#125;<br><br>            <span class="hljs-comment">// 怎么把list转换为数组</span><br>            Object[] params = list.toArray();<br>            System.out.println(<span class="hljs-string">&quot;UserDaoImpl-&gt;getUserCount &quot;</span>+sql.toString()); <span class="hljs-comment">// 输出最后完整的SQL语句</span><br>            rs = BaseDao.executeSelect(connection, preparedStatement, rs, sql.toString(), params);<br><br>            <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>                count = rs.getInt(<span class="hljs-string">&quot;count&quot;</span>);<span class="hljs-comment">// 从结果集中获取最终数量</span><br><br>            &#125;<br><br>            BaseDao.closeResources(connection,preparedStatement,rs);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询记录数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getUserCount</span><span class="hljs-params">(String username,<span class="hljs-keyword">int</span> userRole)</span></span>;<br></code></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getUserCount</span><span class="hljs-params">(String username, <span class="hljs-keyword">int</span> userRole)</span> </span>&#123;<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = BaseDao.getConnection();<br>            count = userDao.getUserCount(connection, username, userRole);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            BaseDao.closeResources(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-获取用户列表"><a href="#2-获取用户列表" class="headerlink" title="2.获取用户列表"></a>2.获取用户列表</h4><ol><li><p>UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据条件查询获取用户列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">(Connection connection, String userName, <span class="hljs-keyword">int</span> userRole, <span class="hljs-keyword">int</span> currentPageNo, <span class="hljs-keyword">int</span> pageSize)</span><span class="hljs-keyword">throws</span> Exception</span>;<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">(Connection connection, String userName, <span class="hljs-keyword">int</span> userRole, <span class="hljs-keyword">int</span> currentPageNo, <span class="hljs-keyword">int</span> pageSize)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        PreparedStatement pstm = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>        <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>            StringBuffer sql = <span class="hljs-keyword">new</span> StringBuffer();<br>            sql.append(<span class="hljs-string">&quot;select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);<br>            List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br>            <span class="hljs-keyword">if</span>(!StringUtils.isNullOrEmpty(userName))&#123;<br>                sql.append(<span class="hljs-string">&quot; and u.userName like ?&quot;</span>);<br>                list.add(<span class="hljs-string">&quot;%&quot;</span>+userName+<span class="hljs-string">&quot;%&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(userRole &gt; <span class="hljs-number">0</span>)&#123;<br>                sql.append(<span class="hljs-string">&quot; and u.userRole = ?&quot;</span>);<br>                list.add(userRole);<br>            &#125;<br>            sql.append(<span class="hljs-string">&quot; order by creationDate DESC limit ?,?&quot;</span>);<br>            currentPageNo = (currentPageNo-<span class="hljs-number">1</span>)*pageSize;<br>            list.add(currentPageNo);<br>            list.add(pageSize);<br><br>            Object[] params = list.toArray();<br>            System.out.println(<span class="hljs-string">&quot;sql ----&gt; &quot;</span> + sql.toString());<br>            rs = BaseDao.executeSelect(connection, pstm, rs, sql.toString(), params);<br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                User _user = <span class="hljs-keyword">new</span> User();<br>                _user.setId(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>                _user.setUserCode(rs.getString(<span class="hljs-string">&quot;userCode&quot;</span>));<br>                _user.setUserName(rs.getString(<span class="hljs-string">&quot;userName&quot;</span>));<br>                _user.setGender(rs.getInt(<span class="hljs-string">&quot;gender&quot;</span>));<br>                _user.setBirthday(rs.getDate(<span class="hljs-string">&quot;birthday&quot;</span>));<br>                _user.setPhone(rs.getString(<span class="hljs-string">&quot;phone&quot;</span>));<br>                _user.setUserRole(rs.getInt(<span class="hljs-string">&quot;userRole&quot;</span>));<br>                _user.setUserRoleName(rs.getString(<span class="hljs-string">&quot;userRoleName&quot;</span>));<br>                userList.add(_user);<br>            &#125;<br>            BaseDao.closeResources(<span class="hljs-keyword">null</span>, pstm, rs);<br>        &#125;<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据条件查询用户列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">(String queryUserName, <span class="hljs-keyword">int</span> queryUserRole, <span class="hljs-keyword">int</span> currentPageNo, <span class="hljs-keyword">int</span> pageSize)</span></span>;<br></code></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">(String queryUserName, <span class="hljs-keyword">int</span> queryUserRole, <span class="hljs-keyword">int</span> currentPageNo, <span class="hljs-keyword">int</span> pageSize)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;queryUserName ---- &gt; &quot;</span> + queryUserName);<br>        System.out.println(<span class="hljs-string">&quot;queryUserRole ---- &gt; &quot;</span> + queryUserRole);<br>        System.out.println(<span class="hljs-string">&quot;currentPageNo ---- &gt; &quot;</span> + currentPageNo);<br>        System.out.println(<span class="hljs-string">&quot;pageSize ---- &gt; &quot;</span> + pageSize);<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = BaseDao.getConnection();<br>            userList = userDao.getUserList(connection, queryUserName,queryUserRole,currentPageNo,pageSize);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            BaseDao.closeResources(connection, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-获取角色操作"><a href="#3-获取角色操作" class="headerlink" title="3.获取角色操作"></a>3.获取角色操作</h4><p>为了我们职责统一，可以把角色的操作单独放在一个包中，和pojo类对应</p><p>RoleDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取角色列表</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRoleList</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br></code></pre></td></tr></table></figure><p>RoleDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取角色列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRoleList</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        PreparedStatement pstm = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        ArrayList&lt;Role&gt; roleList = <span class="hljs-keyword">new</span> ArrayList&lt;Role&gt;();<br><br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>            String sql = <span class="hljs-string">&quot;select * from smbms_role&quot;</span>;<br>            Object[] params = &#123;&#125;;<br>            rs = BaseDao.executeSelect(connection,pstm,rs,sql,params);<br><br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                Role _role = <span class="hljs-keyword">new</span> Role();<br>                _role.setId( rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>                _role.setRoleCode(rs.getString(<span class="hljs-string">&quot;roleCode&quot;</span>));<br>                _role.setRoleName(rs.getString(<span class="hljs-string">&quot;roleName&quot;</span>));<br>                roleList.add(_role);<br>            &#125;<br>            BaseDao.closeResources(connection,pstm,rs);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> roleList;<br>    &#125;<br></code></pre></td></tr></table></figure><p>RoleService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取用户角色列表</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRoleList</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>RoleServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRoleList</span><span class="hljs-params">()</span> </span>&#123;<br><br>    Connection connection = <span class="hljs-keyword">null</span>;<br>    List&lt;Role&gt; roleList = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        connection = BaseDao.getConnection();<br>        roleList = roleDao.getRoleList(connection);<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>        throwables.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        BaseDao.closeResources(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> roleList;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-用户显示的Servlet"><a href="#4-用户显示的Servlet" class="headerlink" title="4.用户显示的Servlet"></a>4.用户显示的Servlet</h4><ol><li>获取用户前端的数据（查询）</li><li>判断请求是否需要执行，看参数的值判断</li><li>为了实现分页，需要计算出当前页面和总页面，页面大小等</li><li>用户列表展示</li><li>返回前端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 查询用户列表</span><br>        <span class="hljs-comment">// 从前端获取数据</span><br>        String queryUserName = req.getParameter(<span class="hljs-string">&quot;queryname&quot;</span>);<br>        String temp = req.getParameter(<span class="hljs-string">&quot;queryUserRole&quot;</span>);<br>        String pageIndex = req.getParameter(<span class="hljs-string">&quot;pageIndex&quot;</span>);<br>        <span class="hljs-keyword">int</span> queryUserRole = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 获取用户列表</span><br>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>        List&lt;User&gt; userList = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">// 第一次走这个请求，一定是第一页，页面大小固定</span><br>        <span class="hljs-keyword">int</span> pageSize = <span class="hljs-number">5</span>; <span class="hljs-comment">// 可以把这个写到配置文件中，方便后期修改</span><br>        <span class="hljs-keyword">int</span> currentPageNo = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> (queryUserName == <span class="hljs-keyword">null</span>) &#123;<br>            queryUserName = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp != <span class="hljs-keyword">null</span> &amp;&amp; !temp.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            queryUserRole = Integer.parseInt(temp); <span class="hljs-comment">//给查询赋值</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (pageIndex != <span class="hljs-keyword">null</span>) &#123;<br>            currentPageNo = Integer.parseInt(pageIndex);<br>        &#125;<br>        <span class="hljs-comment">// 获取用户的总数(分页：上一页、下一页的情况)</span><br>        <span class="hljs-keyword">int</span> totalCount = userService.getUserCount(queryUserName, queryUserRole);<br>        <span class="hljs-comment">// 总页数支持</span><br>        PageSupport pageSupport = <span class="hljs-keyword">new</span> PageSupport();<br>        pageSupport.setCurrentPageNo(currentPageNo);<br>        pageSupport.setPageSize(pageSize);<br>        pageSupport.setTotalCount(totalCount);<br><br>        <span class="hljs-comment">// 控制首页和尾页</span><br>        <span class="hljs-keyword">int</span> totalPageCount = pageSupport.getTotalPageCount();<br>        <span class="hljs-keyword">if</span> (totalPageCount &lt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 如果页面要小于1了，就取第一页的列表</span><br>            currentPageNo = <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentPageNo &gt; totalPageCount) &#123; <span class="hljs-comment">// 当前页面大于了最后一页</span><br>            currentPageNo = totalPageCount;<br>        &#125;<br><br>        <span class="hljs-comment">// 获取用户列表展示</span><br>        userList = userService.getUserList(queryUserName, queryUserRole, currentPageNo, pageSize);<br>        req.setAttribute(<span class="hljs-string">&quot;userList&quot;</span>,userList);<br><br>        <span class="hljs-comment">// 获取角色列表</span><br>        RoleServiceImpl roleService = <span class="hljs-keyword">new</span> RoleServiceImpl();<br>        List&lt;Role&gt; roleList = roleService.getRoleList();<br>        req.setAttribute(<span class="hljs-string">&quot;roleList&quot;</span>,roleList);<br>        req.setAttribute(<span class="hljs-string">&quot;totalCount&quot;</span>,totalCount);<br>        req.setAttribute(<span class="hljs-string">&quot;currentPageNo&quot;</span>,currentPageNo);<br>        req.setAttribute(<span class="hljs-string">&quot;totalPageCount&quot;</span>,totalPageCount);<br>        req.setAttribute(<span class="hljs-string">&quot;queryUserName&quot;</span>,queryUserName);<br>        req.setAttribute(<span class="hljs-string">&quot;queryUserRole&quot;</span>,queryUserRole);<br><br>        <span class="hljs-comment">// 返回前端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;userlist.jsp&quot;</span>).forward(req,resp);<br>        &#125; <span class="hljs-keyword">catch</span> (ServletException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>idea相关操作</title>
    <link href="/posts/idea%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/posts/idea%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2020寒假踩坑大全</title>
    <link href="/posts/2020%E5%AF%92%E5%81%87%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%85%A8/"/>
    <url>/posts/2020%E5%AF%92%E5%81%87%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h4 id="1-Tomcat启动8080端口被占用"><a href="#1-Tomcat启动8080端口被占用" class="headerlink" title="1.Tomcat启动8080端口被占用"></a>1.Tomcat启动8080端口被占用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.net.BindException: Address already in <span class="keyword">use</span>: bind</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong>:</p><p>快捷键 win + R，输入cmd，输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure><p>出现占用8080端口的进程，然后启用任务管理器找到该进程并结束。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb学习———</title>
    <link href="/posts/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/"/>
    <url>/posts/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><h3 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h3><p>web开发：</p><ul><li>web，网页的意思，<a href="http://www.baidu.com/">www.baidu.com</a></li><li>静态web<ul><li>html、css</li><li>提供给所有人看的数据始终不会发生变化</li></ul></li><li>动态web<ul><li>淘宝，几乎是所有的网站</li><li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同</li><li>技术栈：Servlet/JSP，ASP，PHP</li></ul></li></ul><p>在java中，动态web资源开发的技术统称为JavaWeb。</p><h3 id="1-2-web应用程序"><a href="#1-2-web应用程序" class="headerlink" title="1.2 web应用程序"></a>1.2 web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序</p><ul><li>a.html、b.html ……多个web资源，这些web资源可以被外界访问，对外界提供服务</li><li>你们能访问到的任何一个页面和资源，都存在于某个角落的计算机上</li><li>URL：统一资源定位符</li><li>这些统一的web资源会被放在同一个文件夹下，web应用程序—&gt;Tomcat：服务器</li><li>一个web应用由多部分组成（静态web，动态web）<ul><li>html，css，js</li><li>jsp，servlet</li><li>java程序</li><li>jar包</li><li>配置文件（Properties）</li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理</p><h3 id="1-3-静态web"><a href="#1-3-静态web" class="headerlink" title="1.3 静态web"></a>1.3 静态web</h3><ul><li>.htm，.html，这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络：</li></ul><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/%E9%9D%99%E6%80%81web.png" alt="静态web流程"></p><ul><li>静态web存在的缺点<ul><li>web页面无法动态更新，所有用户看到的都是同一个页面<ul><li>轮播图，点击特效：伪动态</li><li>JavaScript[实际开发中，它用的最多]</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="1-4-动态web"><a href="#1-4-动态web" class="headerlink" title="1.4 动态web"></a>1.4 动态web</h3><p>页面会动态展示：“web的页面展示的效果因人而异”</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/%E5%8A%A8%E6%80%81web.png" alt="动态web流程"></p><p>缺点：</p><ul><li>假如服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>，重新发布<ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li>web页面可以动态更新，所有用户看到的都不是同一个页面</li><li>它可以和数据库交互（数据持久化：注册，[商品信息，用户信息]）</li></ul><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/%E5%8A%A8%E6%80%81web%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%A4%E4%BA%92.png" alt="动态web与数据库交互"></p><h2 id="2-web服务器"><a href="#2-web服务器" class="headerlink" title="2. web服务器"></a>2. web服务器</h2><h3 id="2-1-技术讲解"><a href="#2-1-技术讲解" class="headerlink" title="2.1 技术讲解"></a>2.1 技术讲解</h3><p>ASP</p><ul><li><p>微软：国内最早流行的就是ASP</p></li><li><p>在HTML中嵌入了VB的脚本，ASP + COM</p></li><li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其混乱</p></li><li><p>维护成本高</p></li><li><p>C#</p></li><li><p>iis服务器—Internet information Services可承载的Web核心</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>            &lt;%<br>             System.out.println(&quot;/hello&quot;)  <br>             %&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>PHP</p><ul><li>优势：PHP开发速度很快，功能很强大，跨平台，代码很简单（70%的网站为中轻量级的网站）</li><li>劣势：无法承载大访问量的情况（局限性）</li></ul><p>JSP/Servlet:</p><ul><li>SUN公司主推的<strong>B/S架构</strong></li><li>基于java语言的（所有的大公司，或者一些开源的组件，都是用java写的）</li><li>可以承载三高问题带来的影响：高并发、高可用、高性能</li><li>语法很像ASP，方便ASP开发人员转到JSP，加强市场竞争度</li></ul><p>……</p><h3 id="2-2-web服务器"><a href="#2-2-web服务器" class="headerlink" title="2.2 web服务器"></a>2.2 web服务器</h3><p>服务器是一种<strong>被动的操作</strong>，用来处理用户的一些请求和给用户一些响应信息。</p><p><strong>IIS</strong></p><ul><li>微软的：ASP……，Windows中自带的</li></ul><p><strong>Tomcat</strong></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/tomcat_logo.png" alt="tomcat的logo"></p><ul><li><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目。最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p></li><li><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p></li><li><p>Tomcat 实际上运行JSP 页面和Servlet。目前Tomcat最新版本为9.0.41。</p></li></ul><p><strong>工作3-5年之后，可以尝试手写Tomcat服务器</strong>；</p><p><strong>下载tomcat</strong>：</p><ol><li>安装 or 解压</li><li>了解配置文件及目录结构</li><li>了解它的作用</li></ol><h2 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3. Tomcat"></a>3. Tomcat</h2><h3 id="3-1-安装Tomcat"><a href="#3-1-安装Tomcat" class="headerlink" title="3.1 安装Tomcat"></a>3.1 安装Tomcat</h3><p>Tomcat官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/tomcat_install.png" alt="Tomcat安装包"></p><p>下载完成后得到安压缩包</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/Users\M\AppData\Roaming\Typora\typora-user-images\image-20201220121802787.png" alt="image-20201220121802787"></p><h3 id="3-2-Tomcat启动和配置"><a href="#3-2-Tomcat启动和配置" class="headerlink" title="3.2 Tomcat启动和配置"></a>3.2 Tomcat启动和配置</h3><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/tomcat_folder.png" alt="Tomcat目录结构"></p><p><strong>启动/关闭Tomcat</strong></p><p>在解压出的文件夹下的bin目录下</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/tomcat_start_shut.png" alt="tomcat的启动与关闭"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>可能遇到的问题：</p><ol><li>java环境变量没有配置（造成闪退情况）</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置（尽量不要改动startup.bat文件的内容）</li></ol><h3 id="3-3-配置"><a href="#3-3-配置" class="headerlink" title="3.3 配置"></a>3.3 配置</h3><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/tomcat_coreConfig.png" alt="tomcat核心配置文件"></p><p><strong>可以配置启动的端口号</strong></p><ul><li><p>tomcat的默认端口号为：8080</p></li><li><p>mysql：3306</p></li><li><p>http：80</p></li><li><p>https：443</p></li><li><pre><code class="c">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;               connectionTimeout=&quot;20000&quot;               redirectPort=&quot;8443&quot; /&gt;<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>**可以配置启动的名称**<br><br>+ 默认的主机名为：localhost-&gt;127.0.0.1<br>+ 默认网站应用存放的位置为：webapps<br><br>+ ```c<br>   &lt;Host <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attribute">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span><br>              <span class="hljs-attribute">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attribute">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul><p><strong>高难度面试题</strong>：请你谈一谈网站是如何进行访问的！</p><ol><li><p>输入一个域名：回车</p></li><li><p>检查本机的C:\Windows\System32\dirvers\etc\hosts配置文件下有没有这个域名的映射</p><ol><li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p></li><li><p>无：去DNS服务器找，找到的话就返回，找不到就返回找不到。</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/websiteRequest.png" alt="网站的访问"></p></li></ol></li></ol><h3 id="3-4-发布一个web网站"><a href="#3-4-发布一个web网站" class="headerlink" title="3.4 发布一个web网站"></a>3.4 发布一个web网站</h3><ul><li>将自己写的网站，放到服务器（Tomcat）中指定的web应用的文件夹（webapps）下，就可以访问了</li></ul><p>网站应该有的结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">--webapps : Tomcat服务器的web目录<br>    -Root<br>    -atroxStudy : 网站的目录名<br>        -WEB-INF<br>        -classes : java程序<br>            -lib : web应用所依赖的jar包<br>        -web.xml<br>        -index.html 默认的首页<br>        -<span class="hljs-keyword">static</span><br>            -css<br>                -style.css<br>            -js<br>            -img<br>        -……<br></code></pre></td></tr></table></figure><h2 id="4-Http"><a href="#4-Http" class="headerlink" title="4. Http"></a>4. Http</h2><h3 id="4-1-什么是HTTP"><a href="#4-1-什么是HTTP" class="headerlink" title="4.1 什么是HTTP"></a>4.1 什么是HTTP</h3><p>http（超文本传输协议）是一个简单的请求-响应协议，它通常运行在<a href="https://baike.baidu.com/item/TCP/33012">TCP</a>之上。</p><ul><li>文本：html、字符串、……</li><li>超文本：图片、音乐、视频、定位、地图……</li><li>Http默认端口80</li></ul><p>Https：安全的</p><ul><li>Https默认端口443</li></ul><h3 id="4-2-两个时代"><a href="#4-2-两个时代" class="headerlink" title="4.2 两个时代"></a>4.2 两个时代</h3><ul><li>http1.0<ul><li>HTTP/1.0：客户端可以于web服务器连接，只能获得一个web资源，断开连接</li></ul></li><li>http2.0<ul><li>HTTP/1.1：客户端可以于web服务器连接，可以获得多个web资源。</li></ul></li></ul><h3 id="4-3-Http请求"><a href="#4-3-Http请求" class="headerlink" title="4.3 Http请求"></a>4.3 Http请求</h3><ul><li>客户端–发请求（Request）–服务器</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Request URL: https:<span class="hljs-comment">//www.baidu.com/  请求地址</span><br>Request Method: GET   get方法/post方法<br>Status Code: <span class="hljs-number">200</span> OK   状态码：<span class="hljs-number">200</span><br>Remote Address: <span class="hljs-number">39.156</span><span class="hljs-number">.66</span><span class="hljs-number">.18</span>:<span class="hljs-number">443</span>  <br>Referrer Policy: no-referrer-when-downgrade<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: text/html<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span><br>Cache-Control: max-age=<span class="hljs-number">0</span><br>Connection: keep-alive<br></code></pre></td></tr></table></figure><h4 id="4-3-1-请求行"><a href="#4-3-1-请求行" class="headerlink" title="4.3.1 请求行"></a>4.3.1 请求行</h4><ul><li>请求行中的请求方式：GET</li><li>请求方式：<strong>GET/POST</strong>/HEAD/DELETE/PUT/TRACT<ul><li>get：请求能够携带的参数比较少，大小有限制，<strong>会在浏览器的URL地址栏显示数据内容</strong>，不安全，但高效</li><li>post：请求能够携带的参数没有限制，大小没有限制，<strong>不会在浏览器的URL地址栏显示数据内容</strong>，安全，但不高效</li></ul></li></ul><h4 id="4-3-2-消息头"><a href="#4-3-2-消息头" class="headerlink" title="4.3.2 消息头"></a>4.3.2 消息头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: 告诉浏览器，它所支持的数据类型<br>Accept-Encoding: 支持哪种哪种编码格式 GBK UTF-<span class="hljs-number">8</span> GB2312 ISO8859-<span class="hljs-number">1</span><br>Accept-Language: 告诉浏览器，它的语言环境<br>Cache-Control: 缓存控制<br>Connection: 告诉浏览器，请求完是断开还是保持连接<br>HOST： 主机……/.<br></code></pre></td></tr></table></figure><h3 id="4-4-Http响应"><a href="#4-4-Http响应" class="headerlink" title="4.4 Http响应"></a>4.4 Http响应</h3><ul><li>服务器–响应–客户端</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Cache-Control: <span class="hljs-keyword">private</span>                  缓存控制<br>Connection: keep-alive                  连接<br>Content-Encoding: gzip                  编码<br>Content-Type: text/html;charset=utf-<span class="hljs-number">8</span>   类型<br></code></pre></td></tr></table></figure><h4 id="4-4-1-响应体"><a href="#4-4-1-响应体" class="headerlink" title="4.4.1 响应体"></a>4.4.1 响应体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: 告诉浏览器，它所支持的数据类型<br>Accept-Encoding: 支持哪种哪种编码格式 GBK UTF-<span class="hljs-number">8</span> GB2312 ISO8859-<span class="hljs-number">1</span><br>Accept-Language: 告诉浏览器，它的语言环境<br>Cache-Control: 缓存控制<br>Connection: 告诉浏览器，请求完是断开还是保持连接<br>HOST： 主机……/.<br>Reflesh: 告诉客户端，多久刷新一次<br>Location: 让网页重新定位<br></code></pre></td></tr></table></figure><h3 id="4-4-2-相应状态码"><a href="#4-4-2-相应状态码" class="headerlink" title="4.4.2 相应状态码"></a>4.4.2 相应状态码</h3><p><strong>200</strong>：请求响应成功 </p><p><strong>3xx</strong>：请求重定向</p><ul><li>重定向：你重新到我给你的新位置去</li></ul><p><strong>4xx</strong>：找不到资源 404</p><ul><li>资源不存在</li></ul><p><strong>5xx</strong>：服务器代码错误 500   502：网关错误</p><p><strong>常见面试题：</strong>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><h2 id="5-Maven"><a href="#5-Maven" class="headerlink" title="5.Maven"></a>5.Maven</h2><h3 id="5-1-为什么要学习Maven？"><a href="#5-1-为什么要学习Maven？" class="headerlink" title="5.1 为什么要学习Maven？"></a>5.1 为什么要学习Maven？</h3><ol><li>在JavaWeb开发中，需要使用大量的jar包，我们需要手动去导入；</li><li>如何能够让一个东西自动帮我导入和配置这个jar包；</li><li>由此，Maven诞生了！</li></ol><h3 id="5-2-Maven项目架构管理工具"><a href="#5-2-Maven项目架构管理工具" class="headerlink" title="5.2 Maven项目架构管理工具"></a>5.2 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反。</li></ul><p>Maven会规定好该如何去编写我们的Java代码，必须要按照这个规范来；</p><h3 id="5-3-下载安装Maven"><a href="#5-3-下载安装Maven" class="headerlink" title="5.3 下载安装Maven"></a>5.3 下载安装Maven</h3><p>官网地址：<a href="http://maven.apache.org/">http://maven.apache.org/</a></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/maven_download.png" alt="maven下载"></p><p>下载完成后，解压即可：</p><h3 id="5-4-配置环境变量"><a href="#5-4-配置环境变量" class="headerlink" title="5.4 配置环境变量"></a>5.4 配置环境变量</h3><p>在我们的系统环境变量中，配置如下配置：</p><ul><li>M2_HOME  maven目录下的bin目录</li><li>MAVEN_HOME maven的目录</li><li>在系统的path中配置 %MAVEN_HOME%\bin</li></ul><p>cmd maven -v测试Maven是否安装成功，保证必须配置完毕！</p><h3 id="5-5-阿里云镜像"><a href="#5-5-阿里云镜像" class="headerlink" title="5.5 阿里云镜像"></a>5.5 阿里云镜像</h3><ul><li><p>镜像：mirrors</p><ul><li>作用：加速我们的下载</li></ul></li><li><p>国内建议使用阿里云的镜像</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　<span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-6-本地仓库"><a href="#5-6-本地仓库" class="headerlink" title="5.6 本地仓库"></a>5.6 本地仓库</h3><p>在本地的仓库，远程仓库</p><p>建立一个仓库，在配置文件setting.xml中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\SOMETOOLS\maven\apache-maven-3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-7-在IDEA中使用Maven"><a href="#5-7-在IDEA中使用Maven" class="headerlink" title="5.7 在IDEA中使用Maven"></a>5.7 在IDEA中使用Maven</h3><p>1.启动IDEA</p><p>2.创建一个MavenWeb项目</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/new_maven_project.png" alt="创建一个MavenWeb项目"></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/maven_gav.png" alt="maven的gav"></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/maven_config.png" alt="maven地址设置"></p><p>其中Bundled的为idea自带的maven设置。</p><p>3.等待初始化maven项目完毕</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/maven_project_init.png" alt="maven自动导包"></p><p>4.观察Maven仓库中多了什么东西？</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/add_maven_repo.png" alt="maven仓库中新增的包"></p><p>5.IDEA中的Maven设置</p><p>​    注意：IDEA项目创建成功后，看一眼Maven的配置</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/idea_maven_settings.png" alt="IDEA中的Maven设置"></p><p>6.到这里，Maven在IDEA中的设置和使用就完毕了！</p><h3 id="5-8-创建一个普通的Maven项目"><a href="#5-8-创建一个普通的Maven项目" class="headerlink" title="5.8 创建一个普通的Maven项目"></a>5.8 创建一个普通的Maven项目</h3><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/primary_maven_project_step1.png" alt="第一步"></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/clean_maven_project.png" alt="干净的maven项目"></p><h3 id="5-9-在IDEA中标记文件夹功能"><a href="#5-9-在IDEA中标记文件夹功能" class="headerlink" title="5.9 在IDEA中标记文件夹功能"></a>5.9 在IDEA中标记文件夹功能</h3><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/mark_directory.png" alt="标记文件夹功能"></p><p>或者采用第二种方式</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/mark_directory2.png" alt="标记文件夹功能的第二种方式"></p><h3 id="5-10-在IDEA中配置Tomcat"><a href="#5-10-在IDEA中配置Tomcat" class="headerlink" title="5.10 在IDEA中配置Tomcat"></a>5.10 在IDEA中配置Tomcat</h3><p>第一步：在run中找到edit configuration</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/idea_select_tomcat.png" alt="找到tomcat server"></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/tomcat_idea_config.png" alt="新建一个template"></p><p>解决警告问题</p><p>必须要做的配置：<strong>为什么会有这个问题：我们访问一个网站，需要制定一个文件夹名字；</strong></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/tomcat_idea_artifacts.png" alt="新建artifacts"></p><p>然后，需要做虚拟路径映射的设置</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/tomcat_virtual_path.png" alt="虚拟路径映射"></p><p>然后，启动Tomcat</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/idea_start_tomcat.png" alt="idea启动Tomcat"></p><p>启动完成后，浏览器会自动打开localhost:8080/atrox/</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/idea_tomcat_run.png" alt="tomcat启动情况"></p><p>maven侧边栏的讲解：</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/maven_sidebar.png" alt="maven侧边栏的梳理"></p><h3 id="5-11-pom文件"><a href="#5-11-pom文件" class="headerlink" title="5.11 pom文件"></a>5.11 pom文件</h3><p>pom.xml 是maven的核心文件，解析如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-comment">&lt;!--Maven版本和头文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--这里就是刚才配置的GAV--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb-01-maven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--Package：项目的打包方式</span><br><span class="hljs-comment">  jar: java应用</span><br><span class="hljs-comment">  war：javaWeb应用--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javaweb-01-maven Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目的默认构建编码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--编译版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--项目依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--具体依赖的jar包配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--项目构建用的东西--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>javaweb-01-maven<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>maven由于它的约定大于配置，之后可能会我们写的配置文件，无法被导出或者生效的问题。</p><p><strong>解决方案</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-12-解决遇到的问题"><a href="#5-12-解决遇到的问题" class="headerlink" title="5.12 解决遇到的问题"></a>5.12 解决遇到的问题</h3><p>1.Maven 3.6.2 无法导包</p><p>​    <strong>解决方法</strong>：降级为3.6.1</p><p>2.Tomcat闪退</p><p>​    <strong>解决办法</strong>：重新配置java的环境变量</p><p>3.IDEA中每次都要重复配置Maven</p><p>​    <strong>解决办法</strong>：在IDEA中的全局默认配置中去配置</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/idea_global_maven.png" alt="全局配置maven"></p><p>4.Maven默认web项目中的web.xml版本问题</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/idea_default_webxml.png" alt="idea默认生成的web appliaction版本"></p><p><strong>解决方案</strong>：IDEA自带的这个版本太老，应参考Tomcat中的文件Tomcat\apache-tomcat-9.0.41\webapps\ROOT\WEB-INF\web.xml，查到最佳版本为4.0,，将IDEA中的web.xml替换为Tomcat中web.xml的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-tag"><span class="hljs-string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.Maven仓库的使用</p><p>Maven仓库官网：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h2 id="6-Servlet"><a href="#6-Servlet" class="headerlink" title="6. Servlet"></a>6. Servlet</h2><h3 id="6-1-Servlet简介"><a href="#6-1-Servlet简介" class="headerlink" title="6.1 Servlet简介"></a>6.1 Servlet简介</h3><ul><li><p>Servlet就是sun公司开发动态web的一门技术</p></li><li><p>Sun公司在这些API中提供一个接口，叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：</p><ul><li>编写一个类，实现Servlet接口</li><li>把开发好的java类部署到web服务器中</li></ul></li></ul><p><strong>把实现了Servlet接口的java程序叫做，Servlet</strong></p><h3 id="6-2-HelloServlet"><a href="#6-2-HelloServlet" class="headerlink" title="6.2 HelloServlet"></a>6.2 HelloServlet</h3><p>Servlet接口在Sun公司有两个默认的实现类：HttpServlet、GenericServlet</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/servlet_extends.png" alt="servlet实现接口"></p><ol><li><p>构建一个普通的Maven项目，删掉里面的src目录，以后就在这个项目里面建立module；这个空的工程就是Maven的主工程；</p></li><li><p>关于Maven父子工程的理解：</p><p>父项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>servlet-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父项目中的java子项目可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">son extends parent<br></code></pre></td></tr></table></figure></li><li><p>Maven环境优化</p><ul><li>修改web.xml为最新的</li><li>编写一个</li></ul></li><li><p>编写一个Servlet程序</p><ul><li><p>编写一个普通类</p></li><li><p>实现Servlet接口，这里我们直接继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-comment">// 由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 响应流</span><br>        PrintWriter writer = resp.getWriter();<br><br>        writer.print(<span class="hljs-string">&quot;hello,Servlet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><ol start="5"><li><p>编写Servlet的映射</p><p>为什么需要映射：这里写的是Java程序，但是要通过浏览器访问，而浏览器需要连接web服务器。所以，我们需要在web服务中注册我们写的Servlet，还需给它一个浏览器能够访问的路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--注册Servlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--Servlet的请求路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat</p><p>注意：如果添加artifacts消失，刷新一下项目</p></li><li><p>启动测试</p></li></ol><h3 id="6-3-Servlet运行原理"><a href="#6-3-Servlet运行原理" class="headerlink" title="6.3 Servlet运行原理"></a>6.3 Servlet运行原理</h3><p>Servlet是由Web服务器（Tomcat）调用的，web服务器在收到浏览器请求会后，会：</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/servlet_yuanli.png" alt="Servlet运行原理"></p><h3 id="6-4-Mapping问题"><a href="#6-4-Mapping问题" class="headerlink" title="6.4 Mapping问题"></a>6.4 Mapping问题</h3><ol><li><p>一个Servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello3<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>默认请求路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>指定一些后缀或者前缀等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以自定义后缀实现请求映射--&gt;</span><br><span class="hljs-comment">&lt;!--注意点：*前面不能加映射的路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.atrox<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>优先级问题</p><p>制定了固有的映射路径优先级最高，如果找不到就会找默认的请求路径处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--404--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.ErrorServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-5-ServletContext"><a href="#6-5-ServletContext" class="headerlink" title="6.5 ServletContext"></a>6.5 ServletContext</h3><p>web容器<strong>在启动的时候</strong>，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用。</p><h4 id="6-5-1-共享数据"><a href="#6-5-1-共享数据" class="headerlink" title="6.5.1 共享数据"></a>6.5.1 共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个Servlet中拿到</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/servletContext_shareData.png" alt="共享数据"></p><p>放数据的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        <span class="hljs-comment">//        this.getInitParameter() 初始化参数</span><br><br>        <span class="hljs-comment">//        this.getServletConfig() Servlet配置</span><br><br>        <span class="hljs-comment">//        this.getServletContext() Servlet上下文</span><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><br>        String userName = <span class="hljs-string">&quot;乔威&quot;</span>; <span class="hljs-comment">// 数据</span><br>        context.setAttribute(<span class="hljs-string">&quot;userName&quot;</span>,userName); <span class="hljs-comment">//将一个数据保存在ServletContext中，key:userName,value:userName</span><br><br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读数据的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><br>        String userName = (String) context.getAttribute(<span class="hljs-string">&quot;userName&quot;</span>);<br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.getWriter().print(userName);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atrox.servlet.GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/getc<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要先访问/hello页面，让它放数据，再访问/getc页面拿数据，否则如果直接访问/getc页面，会显示null</p><h4 id="6-5-2-获取初始化参数"><a href="#6-5-2-获取初始化参数" class="headerlink" title="6.5.2 获取初始化参数"></a>6.5.2 获取初始化参数</h4><p>web.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置一些web应用初始化参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><p>servlet-demo中取出这些初始化参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HelloServlet</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>        String url = context.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>        resp.getWriter().print(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-5-3-请求转发"><a href="#6-5-3-请求转发" class="headerlink" title="6.5.3 请求转发"></a>6.5.3 请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo04</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><br>        <span class="hljs-comment">// 转发的请求路径</span><br>        <span class="hljs-comment">//        RequestDispatcher dispatcher = context.getRequestDispatcher(&quot;/demo3&quot;);</span><br>        <span class="hljs-comment">// 调用 forward 方法实现请求转发</span><br>        <span class="hljs-comment">//        dispatcher.forward(req,resp);</span><br>        context.getRequestDispatcher(<span class="hljs-string">&quot;/demo3&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/servletContext_request_dispather.png" alt="请求转发"></p><h4 id="6-5-4-读取资源文件"><a href="#6-5-4-读取资源文件" class="headerlink" title="6.5.4 读取资源文件"></a>6.5.4 读取资源文件</h4><p>Properties</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现：都被打包到了同一个路径下：classes，俗称这个路径为classPath</p><p>思路：需要一个文件流：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">zuiweizhiming666</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet05</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        InputStream is = <span class="hljs-keyword">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<br><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.load(is);<br><br>        String username = prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        resp.getWriter().print(username + <span class="hljs-string">&quot;:&quot;</span> + password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-6-HttpServletReponse"><a href="#6-6-HttpServletReponse" class="headerlink" title="6.6 HttpServletReponse"></a>6.6 HttpServletReponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServiceRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><h4 id="6-6-1-简单分类"><a href="#6-6-1-简单分类" class="headerlink" title="6.6.1 简单分类"></a>6.6.1 简单分类</h4><p><strong>负责向浏览器发送数据的方法</strong>：</p><ul><li><pre><code class="java">// 在HttpServletResponse继承的ServletResponse中的方法ServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>**负责向浏览器发送响应头的方法**<br><br>+ ```java<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setCharacterEncoding</span><span class="hljs-params">(<span class="hljs-keyword">String</span> var1)</span></span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> var1)</span></span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentLengthLong</span><span class="hljs-params">(<span class="hljs-keyword">long</span> var1)</span></span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentType</span><span class="hljs-params">(<span class="hljs-keyword">String</span> var1)</span></span>;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> var1)</span></span>;<br></code></pre></td></tr></table></figure></code></pre></li></ul><p><strong>状态码定义</strong></p><ul><li><pre><code class="java"> int SC_CONTINUE = 100;int SC_SWITCHING_PROTOCOLS = 101;int SC_OK = 200;int SC_CREATED = 201;int SC_ACCEPTED = 202;int SC_NON_AUTHORITATIVE_INFORMATION = 203;int SC_NO_CONTENT = 204;int SC_RESET_CONTENT = 205;int SC_PARTIAL_CONTENT = 206;int SC_MULTIPLE_CHOICES = 300;int SC_MOVED_PERMANENTLY = 301;int SC_MOVED_TEMPORARILY = 302;int SC_FOUND = 302;int SC_SEE_OTHER = 303;int SC_NOT_MODIFIED = 304;int SC_USE_PROXY = 305;int SC_TEMPORARY_REDIRECT = 307;int SC_BAD_REQUEST = 400;int SC_UNAUTHORIZED = 401;int SC_PAYMENT_REQUIRED = 402;int SC_FORBIDDEN = 403;int SC_NOT_FOUND = 404;int SC_METHOD_NOT_ALLOWED = 405;int SC_NOT_ACCEPTABLE = 406;int SC_PROXY_AUTHENTICATION_REQUIRED = 407;int SC_REQUEST_TIMEOUT = 408;int SC_CONFLICT = 409;int SC_GONE = 410;int SC_LENGTH_REQUIRED = 411;int SC_PRECONDITION_FAILED = 412;int SC_REQUEST_ENTITY_TOO_LARGE = 413;int SC_REQUEST_URI_TOO_LONG = 414;int SC_UNSUPPORTED_MEDIA_TYPE = 415;int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;int SC_EXPECTATION_FAILED = 417;int SC_INTERNAL_SERVER_ERROR = 500;int SC_NOT_IMPLEMENTED = 501;int SC_BAD_GATEWAY = 502;int SC_SERVICE_UNAVAILABLE = 503;int SC_GATEWAY_TIMEOUT = 504;int SC_HTTP_VERSION_NOT_SUPPORTED = 505;<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br>#### <span class="hljs-number">6.6</span><span class="hljs-number">.2</span> 常见应用<br><br><span class="hljs-number">1.</span> 向浏览器输出消息（getWriter再print）<br><br>#### <span class="hljs-number">6.6</span><span class="hljs-number">.3</span> 下载文件<br><br><span class="hljs-number">1.</span> 要获取下载文件的路径<br><span class="hljs-number">2.</span> 下载的文件名是啥<br><span class="hljs-number">3.</span> 设置想办法让浏览器能够支持下载需要的东西<br><span class="hljs-number">4.</span> 获取下载文件的输入流<br><span class="hljs-number">5.</span> 创建缓冲区buffer<br><span class="hljs-number">6.</span> 获取<span class="hljs-type">OutputStream</span>对象<br><span class="hljs-number">7.</span> 将<span class="hljs-type">FileInputStream</span>流写入到buffer缓冲区<br><span class="hljs-number">8.</span> 使用<span class="hljs-type">OutputStream</span>将缓冲区中的数据输出到客户端<br><br><span class="hljs-type">Java</span>文件下载代码<br><br>```java<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-comment">//    1. 要获取下载文件的路径</span><br>        <span class="hljs-type">String</span> path = <span class="hljs-string">&quot;F:\\360MoveData\\Users\\M\\Desktop\\学习\\JavaWebStudy\\javaweb-02-servlet\\response\\target\\classes\\弹幕.png&quot;</span>;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;下载文件的路径为：&quot;</span> + path);<br>        <span class="hljs-comment">//    2. 下载的文件名是啥</span><br>        <span class="hljs-type">String</span> fileName = path.substring(path.lastIndexOf(<span class="hljs-string">&quot;//&quot;</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//    3. 设置想办法让浏览器能够支持(Content-Disposition)下载需要的东西，中文文件明URLEncoder.encode编码，否则可能有乱码</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span> + <span class="hljs-type">URLEncoder</span>.encode(fileName,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        <span class="hljs-comment">//    4. 获取下载文件的输入流</span><br>        <span class="hljs-type">FileInputStream</span> fis = <span class="hljs-keyword">new</span> <span class="hljs-type">FileInputStream</span>(path);<br>        <span class="hljs-comment">//    5. 创建缓冲区buffer</span><br>        int len = <span class="hljs-number">0</span>;<br>        byte[] buffer = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">1024</span>];<br>        <span class="hljs-comment">//    6. 获取OutputStream对象</span><br>        <span class="hljs-type">ServletOutputStream</span> os = resp.getOutputStream();<br>        <span class="hljs-comment">//    7. 将FileInputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端</span><br>        <span class="hljs-keyword">while</span> ((len = fis.read(buffer)) &gt;<span class="hljs-number">0</span>) &#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        fis.close();<br>        os.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul><h4 id="6-6-4-验证码功能"><a href="#6-6-4-验证码功能" class="headerlink" title="6.6.4 验证码功能"></a>6.6.4 验证码功能</h4><p>验证码从何而来？</p><ul><li><p>前端实现</p></li><li><p>后端实现，需要用到 Java 的图片类，生产一个图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atrox.servlet;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        <span class="hljs-comment">// 如何让浏览器3秒自动刷新一次</span><br>        resp.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);<br>        <span class="hljs-comment">// 在内存中创建一个图片</span><br>        BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(<span class="hljs-number">80</span>,<span class="hljs-number">20</span>,BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">// 得到图片</span><br>        Graphics2D graphics = (Graphics2D) image.getGraphics(); <span class="hljs-comment">//画笔</span><br>        <span class="hljs-comment">// 设置图片的背景颜色</span><br>        graphics.setColor(Color.white);<br>        graphics.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">80</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">// 给图片写数据</span><br>        graphics.setColor(Color.blue);<br>        graphics.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-keyword">null</span>,Font.BOLD, <span class="hljs-number">20</span>));<br>        graphics.drawString(makeNum(), <span class="hljs-number">0</span>, <span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">// 告诉浏览器，这个请求用图片的方式打开</span><br>        resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>        <span class="hljs-comment">// 网站存在缓存，不让浏览器缓存</span><br>        resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>, -<span class="hljs-number">1</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Cache-control&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br><br>        <span class="hljs-comment">//把图片写给浏览器</span><br>        ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());<br><br>    &#125;<br><br>    <span class="hljs-comment">// 生成随机数</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">makeNum</span><span class="hljs-params">()</span> </span>&#123;<br><br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        String num = random.nextInt(<span class="hljs-number">9999999</span>) + <span class="hljs-string">&quot;&quot;</span>;<br>        StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span> - num.length(); i++) &#123;<br>            sb.append(<span class="hljs-string">&quot;0&quot;</span>);<br>        &#125;<br>        String s = sb.toString() + num;<br>        <span class="hljs-keyword">return</span> num;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="6-6-5-实现重定向"><a href="#6-6-5-实现重定向" class="headerlink" title="6.6.5 实现重定向"></a>6.6.5 实现重定向</h4><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/redirect.png" alt="重定向问题"></p><p>一个web资源受到客户端请求后，会通知客户端去访问另外一个web资源，这个过程为重定向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendRedirect</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> IOException</span>;<br></code></pre></td></tr></table></figure><p>常见场景：</p><ul><li>用户登录`</li></ul><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>, <span class="hljs-string">&quot;/response_war/img&quot;</span>);<br>    resp.setStatus(<span class="hljs-number">302</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题</strong>：请你聊聊重定向和转发的区别</p><p>相同点：</p><ul><li>页面都会实现跳转</li></ul><p>不同点：</p><ul><li>请求转发的时候，url不会产生变化</li><li>重定向的时候，url地址栏会发生变化；</li></ul><h3 id="6-7-HttpServletRequest"><a href="#6-7-HttpServletRequest" class="headerlink" title="6.7 HttpServletRequest"></a>6.7 HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获取客户端的所有信息：</p><p><img src="JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/httpServletRequest_get.png" alt="可以获取的客户端信息"></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/client_info.png" alt="客户端的信息"></p><h4 id="6-7-1-获取前端传递的参数-请求转发"><a href="#6-7-1-获取前端传递的参数-请求转发" class="headerlink" title="6.7.1 获取前端传递的参数,请求转发"></a>6.7.1 获取前端传递的参数,请求转发</h4><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/request_get_paras.png" alt="获取前端传递参数"></p><p>前端JSP页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;div style=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;<br>        &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>            用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userName&quot;</span>&gt; &lt;br&gt;<br>            密码：&lt;input type=<span class="hljs-string">&quot;pawwpord&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt; &lt;br&gt;<br>            爱好：<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;女孩&quot;</span>&gt;女孩<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;代码&quot;</span>&gt;代码<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;电影&quot;</span>&gt;电影<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;唱歌&quot;</span>&gt;唱歌<br>            &lt;br&gt;<br>            &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>        &lt;/form&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>登录成功JSP页面:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;登录成功&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;登录成功&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>获取前端参数，请求转发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    String userName = req.getParameter(<span class="hljs-string">&quot;userName&quot;</span>);<br>    String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    String[] hobbies = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br>    System.out.println(userName);<br>    System.out.println(password);<br>    System.out.println(Arrays.toString(hobbies));<br>    System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br><br>    <span class="hljs-comment">// 通过请求转发</span><br>    <span class="hljs-comment">// 这里的 / 代表当前的web应用</span><br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题：</strong>请你聊聊重定向和转发的区别？</p><p>相同点：</p><ul><li>页面都会实现跳转</li></ul><p>不同点：</p><ul><li>请求转发的时候，url不会产生变化；307</li><li>重定向的时候，url地址栏产生变化；302</li></ul><h3 id="6-8-Cookie和Session"><a href="#6-8-Cookie和Session" class="headerlink" title="6.8 Cookie和Session"></a>6.8 Cookie和Session</h3><h4 id="6-8-1-会话"><a href="#6-8-1-会话" class="headerlink" title="6.8.1 会话"></a>6.8.1 会话</h4><p><strong>会话</strong>：用户打开一个浏览器，点击了某些超链接，访问多个web资源，关闭浏览器。这个过程，可以称为会话。</p><p><strong>有状态会话</strong>：一个同学来过教师，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话。</p><p><strong>例子</strong>：如何证明你是某大学的学生？</p><ul><li><p>报名缴费的发票  学校给你发票</p></li><li><p>学校登记       学校标记你来过了</p></li></ul><p><strong>那对于一个网站，如何证明你来过呢？</strong></p><p>客户端   服务端</p><p>1.服务端给客户端一个信件，客户端下次访问服务端带上信件就可以了。</p><p>2.服务器登记你来过了，下次你来的时候我来匹配你。</p><h4 id="6-8-2-保存会话的两种技术"><a href="#6-8-2-保存会话的两种技术" class="headerlink" title="6.8.2 保存会话的两种技术"></a>6.8.2 保存会话的两种技术</h4><p><strong>cookie</strong></p><ul><li>客户端技术（响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息。我们可以把信息或者数据放在session中。</li></ul><p>常见例子：网站登录之后，下次不用再登录；第二次访问直接就登录上去了。</p><h4 id="6-8-3-Cookie"><a href="#6-8-3-Cookie" class="headerlink" title="6.8.3 Cookie"></a>6.8.3 Cookie</h4><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/cookie_picture.png" alt="cookie的处理方式"></p><ol><li><p>从请求中拿到cookie信息</p></li><li><p>服务器响应给客户端cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = req.getCookies(); <span class="hljs-comment">// 获得cookie</span><br>cookie.getName() <span class="hljs-comment">// 获得cookie中的key</span><br>cookie.getValue() <span class="hljs-comment">// 获得cookie中的value</span><br><span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 新建一个cookie</span><br>cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>); <span class="hljs-comment">// 设置cookie的有效期</span><br>resp.addCookie(cookie); <span class="hljs-comment">// 响应给客户端一个cookie</span><br></code></pre></td></tr></table></figure></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    <span class="hljs-comment">// 服务器，告诉你，你来的时间，把这个时间封装成为一个 信件，你下次带来，我就知道你来了</span><br><br>    <span class="hljs-comment">// 解决中文乱码</span><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    PrintWriter out = resp.getWriter();<br><br>    <span class="hljs-comment">// Cookie，服务器端从客户端获取 这里返回数组，说明Cookie可能存在多个</span><br>    Cookie[] cookies = req.getCookies();<br><br>    <span class="hljs-comment">// 判断Cookie是否存在</span><br>    <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 如果存在怎么办</span><br>        out.write(<span class="hljs-string">&quot;你上一次访问的时间为：&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cookies.length; i++) &#123;<br>            Cookie cookie = cookies[i];<br>            <span class="hljs-comment">// 获取cookie的名字</span><br>            <span class="hljs-keyword">if</span> (cookie.getName().equals(<span class="hljs-string">&quot;lastLoginTime&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 获取cookie中的值</span><br>                <span class="hljs-keyword">long</span> lastLoginTime = Long.parseLong(cookie.getValue());<br>                Date date = <span class="hljs-keyword">new</span> Date(lastLoginTime);<br>                out.write(date.toLocaleString());<br>            &#125;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        out.write(<span class="hljs-string">&quot;这是您第一次访问本站&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 服务器给客户端响应一个cookie</span><br>    Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">// cookie有效期为1天 浏览器关掉后cookie仍然存在</span><br>    cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<br>    resp.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure><p>   <strong>浏览器里的Application</strong></p><p>   <img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/browser_application_cookie.png" alt="浏览器Application里的cookie"></p><p><strong>请求和响应中的cookie</strong></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/browser_network_cookie.png" alt="浏览器抓包中的cookie"></p><p><strong>cookie</strong>:<strong>一般会保存在本地的用户目录下AppData</strong></p><p><strong>思考</strong>：一个网站cookie是否存在上限？<strong>细节问题</strong></p><ul><li>一个cookie只能保存一个信息</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li><li>cookie大小有限制4kb</li><li>300个cookie为浏览器上限</li></ul><p><strong>删除cookie</strong>：</p><ul><li>不设置<strong>有效期</strong> cookie.setMaxAge()</li><li>设置有效期时间为 0，</li></ul><p><strong>设置cookie和取cookie时的编码和解码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;name&quot;</span>, URLEncoder.encode(<span class="hljs-string">&quot;乔威&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>));<br>out.write(URLDecoder.decode(cookie.getValue(),<span class="hljs-string">&quot;utf-8&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="6-8-4-Session（重点）"><a href="#6-8-4-Session（重点）" class="headerlink" title="6.8.4 Session（重点）"></a>6.8.4 Session（重点）</h4><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/session_picture.png" alt="session的处理"></p><p>什么是Session：</p><ul><li><p>服务器会给<strong>每一个用户（浏览器）</strong>创建一个Session对象</p></li><li><p>一个Session独占一个浏览器，只要浏览器没有关闭，这个Seesion就存在；</p></li><li><p>用户登录之后，整个网站它都可以访问。—&gt;保存用户的信息；保存购物车的信息</p></li></ul><p><img src="JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/httpSession_methods.png" alt="httpSession方法"></p><p><strong>Session和Cookie的区别</strong>：</p><ul><li><p>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个，理解为通行证）</p></li><li><p>Session把用户的数据写到用户独占的Session中，服务器端保存（保存重要的信息，减少服务器资源的浪费，理解为用户信息）</p></li><li><p>Session对象由服务器创建</p></li></ul><p><strong>Session使用场景</strong>：</p><ul><li><p>保存一个登陆用户的信息</p></li><li><p>购物车信息；</p></li><li><p>在整个网站中经常会使用的数据，我们将它保存在Session中</p></li></ul><p><strong>使用Session</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    <span class="hljs-comment">// 解决乱码问题</span><br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>    <span class="hljs-comment">// 得到Session</span><br>    HttpSession session = req.getSession();<br><br>    <span class="hljs-comment">// 给Session中存信息</span><br>    session.setAttribute(<span class="hljs-string">&quot;personInfo&quot;</span>, <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;乔威&quot;</span>, <span class="hljs-number">20</span>));<br><br>    <span class="hljs-comment">// 获取Session的ID</span><br>    String sessionId = session.getId();<br><br>    <span class="hljs-comment">// 判断Session是不是新创建的</span><br>    <span class="hljs-keyword">if</span> (session.isNew()) &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;session创建成功，ID：&quot;</span> + sessionId);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;session已经在服务器中存在了，ID：&quot;</span> + sessionId);<br>    &#125;<br><br>    <span class="hljs-comment">// Session创建的时候做了什么事情;</span><br>    <span class="hljs-comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, sessionId);</span><br>    <span class="hljs-comment">//        resp.addCookie(cookie);</span><br><br>    <span class="hljs-comment">// Session在浏览器打开的一瞬间就存在了，关闭时自动消失，不需要像Cookie一样手动addCookie</span><br>&#125;<br><br><span class="hljs-comment">// 得到Session</span><br>        HttpSession session = req.getSession();<br><br>        Person person = (Person) session.getAttribute(<span class="hljs-string">&quot;personInfo&quot;</span>);<br><br>        System.out.println(person.toString());<br><br><span class="hljs-comment">// 手动注销Session</span><br>        session.invalidate();<br></code></pre></td></tr></table></figure><p>会话自动过期：在web.xml中设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置Session默认的失效时间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--一天后Session自动失效，以分钟为单位--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>1440<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-JSP"><a href="#7-JSP" class="headerlink" title="7. JSP"></a>7. JSP</h2><h3 id="7-1-什么是JSP"><a href="#7-1-什么是JSP" class="headerlink" title="7.1 什么是JSP"></a>7.1 什么是JSP</h3><p>Java Server Pages：Java服务器端页面，也和Servlet一样，用于开发动态web</p><p>最大的特点：</p><ul><li>写JSP就像在写HTML</li><li>区别：<ul><li>HTML只给用户提供静态的数据</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据</li></ul></li></ul><h3 id="7-2-JSP原理"><a href="#7-2-JSP原理" class="headerlink" title="7.2 JSP原理"></a>7.2 JSP原理</h3><p><strong>思路</strong>：JSP到底是如何执行的？</p><ul><li><p>代码层面没有任何问题</p></li><li><p>服务器内部工作</p><p>tomcat中有一个work目录：</p><p>IDEA中使用Tomcat的话，会在IDEA的Tomcat中生成一个work目录</p><p>在我的电脑的目录：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">C:\Users\M\AppData\Local\JetBrains\IntelliJIdea2020<span class="hljs-number">.1</span>\tomcat\Tomcat_9_0_41_javaweb<span class="hljs-number">-02</span>-servlet\work\Catalina\localhost\requestTest_war\org\apache\jsp<br></code></pre></td></tr></table></figure><p>发现页面转变成了java程序</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/jsp_work.png" alt="页面变为了java程序"></p><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet!</strong></p><p>服务器在执行jsp的时候，首先把jsp翻译成一个Servlet，所以我们访问jsp时，其实不是在访问jsp，而是在访问jsp翻译过后的那个Servlet，例如下面的代码：</p><p><strong>index.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.*&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%<br>String path = request.getContextPath();<br>String basePath = request.getScheme()+<span class="hljs-string">&quot;://&quot;</span>+request.getServerName()+<span class="hljs-string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br><br>&lt;!DOCTYPE HTML PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br><br>    &lt;title&gt;First Jsp&lt;/title&gt;<br><br>  &lt;/head&gt;<br><br>  &lt;body&gt;<br>    &lt;%<br>        out.print(<span class="hljs-string">&quot;Hello Jsp&quot;</span>);<br>    %&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>当我们通过浏览器访问index.jsp时，服务器首先将index.jsp翻译成一个index_jsp.class，在Tomcat服务器的<strong>work\Catalina\localhost\项目名\org\apache\jsp</strong>目录下可以看到index_jsp.class的源代码文件index_jsp.java，index_jsp.java的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.jsp;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index_jsp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">jasper</span>.<span class="hljs-title">runtime</span>.<span class="hljs-title">HttpJspBase</span></span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">org</span>.<span class="hljs-title">apache</span>.<span class="hljs-title">jasper</span>.<span class="hljs-title">runtime</span>.<span class="hljs-title">JspSourceDependent</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JspFactory _jspxFactory = JspFactory.getDefaultFactory();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> java.util.List _jspx_dependants;<br><br>  <span class="hljs-keyword">private</span> javax.el.ExpressionFactory _el_expressionfactory;<br>  <span class="hljs-keyword">private</span> org.apache.AnnotationProcessor _jsp_annotationprocessor;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getDependants</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> _jspx_dependants;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();<br>    _jsp_annotationprocessor = (org.apache.AnnotationProcessor) getServletConfig().getServletContext().getAttribute(org.apache.AnnotationProcessor.class.getName());<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> java.io.IOException, ServletException </span>&#123;<br><br>    PageContext pageContext = <span class="hljs-keyword">null</span>;<br>    HttpSession session = <span class="hljs-keyword">null</span>;<br>    ServletContext application = <span class="hljs-keyword">null</span>;<br>    ServletConfig config = <span class="hljs-keyword">null</span>;<br>    JspWriter out = <span class="hljs-keyword">null</span>;<br>    Object page = <span class="hljs-keyword">this</span>;<br>    JspWriter _jspx_out = <span class="hljs-keyword">null</span>;<br>    PageContext _jspx_page_context = <span class="hljs-keyword">null</span>;<br><br><br>    <span class="hljs-keyword">try</span> &#123;<br>      response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>      pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,<br>                  <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-keyword">true</span>);<br>      _jspx_page_context = pageContext;<br>      application = pageContext.getServletContext();<br>      config = pageContext.getServletConfig();<br>      session = pageContext.getSession();<br>      out = pageContext.getOut();<br>      _jspx_out = out;<br><br>      out.write(<span class="hljs-string">&#x27;\r&#x27;</span>);<br>      out.write(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br>String path = request.getContextPath();<br>String basePath = request.getScheme()+<span class="hljs-string">&quot;://&quot;</span>+request.getServerName()+<span class="hljs-string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="hljs-string">&quot;/&quot;</span>;<br><br>      out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;!DOCTYPE HTML PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot;&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;html&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  &lt;head&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;    &lt;base href=\&quot;&quot;</span>);<br>      out.print(basePath);<br>      out.write(<span class="hljs-string">&quot;\&quot;&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;    \r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;    &lt;title&gt;First Jsp&lt;/title&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;\t\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  &lt;/head&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  \r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  &lt;body&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;    &quot;</span>);<br><br>        out.print(<span class="hljs-string">&quot;Hello Jsp&quot;</span>);<br><br>      out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;  &lt;/body&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;/html&gt;\r\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">if</span> (!(t <span class="hljs-keyword">instanceof</span> SkipPageException))&#123;<br>        out = _jspx_out;<br>        <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span> &amp;&amp; out.getBufferSize() != <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">try</span> &#123; out.clearBuffer(); &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;&#125;<br>        <span class="hljs-keyword">if</span> (_jspx_page_context != <span class="hljs-keyword">null</span>) _jspx_page_context.handlePageException(t);<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      _jspxFactory.releasePageContext(_jspx_page_context);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到，index_jsp这个类是继承 org.apache.jasper.runtime.<strong>HttpJspBase</strong>这个类的</p><p>通过导入Jasper Runtime包拿到了这个类，发现它的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by Fernflower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> org.apache.jasper.runtime;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.HttpJspPage;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.JspFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.logging.LogFactory;<br><span class="hljs-keyword">import</span> org.apache.jasper.compiler.Localizer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpJspBase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpJspPage</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">HttpJspBase</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <span class="hljs-keyword">super</span>.init(config);<br>        <span class="hljs-keyword">this</span>.jspInit();<br>        <span class="hljs-keyword">this</span>._jspInit();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Localizer.getMessage(<span class="hljs-string">&quot;jsp.engine.info&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.jspDestroy();<br>        <span class="hljs-keyword">this</span>._jspDestroy();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>._jspService(request, response);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> ServletException, IOException</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">if</span> (JspFactory.getDefaultFactory() == <span class="hljs-keyword">null</span>) &#123;<br>            JspFactoryImpl factory = <span class="hljs-keyword">new</span> JspFactoryImpl();<br>            <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span>) &#123;<br>                String basePackage = <span class="hljs-string">&quot;org.apache.jasper.&quot;</span>;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.JspFactoryImpl$PrivilegedGetPageContext&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.JspFactoryImpl$PrivilegedReleasePageContext&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.JspRuntimeLibrary&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.JspRuntimeLibrary$PrivilegedIntrospectHelper&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;runtime.ServletResponseWrapperInclude&quot;</span>);<br>                    factory.getClass().getClassLoader().loadClass(basePackage + <span class="hljs-string">&quot;servlet.JspServletWrapper&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var3) &#123;<br>                    LogFactory.getLog(HttpJspBase.class).error(<span class="hljs-string">&quot;Jasper JspRuntimeContext preload of class failed: &quot;</span> + var3.getMessage(), var3);<br>                &#125;<br>            &#125;<br><br>            JspFactory.setDefaultFactory(factory);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现HttpJspBase类是继承于HttpServlet的，所以HttpJspBase类也是一个Servlet，而index_jsp又是继承HttpJspBase类的，所以index_jsp类也是一个Servlet；</p><p>对比index_jsp.java和index.jsp 发现其中的标签最终在index_jsp.java中都是用out.write()方法手动去实现的，如下图所示：</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/jsp_work_compare.png" alt="对比图"></p></li></ul><p>所以说：<strong>JSP本质上就是一个Servlet！</strong></p><p>我们从index_jsp.java中的一些方法可以更深刻的体会这一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始化</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>  &#125;<br><span class="hljs-comment">// 销毁</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>  &#125;<br><span class="hljs-comment">// JSPService</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(<span class="hljs-keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="hljs-keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span><br></code></pre></td></tr></table></figure><p><strong>JSP又做了什么事情呢</strong>？(即讲解JspService方法中的内容)</p><ol><li><p>判断请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;<br>    <span class="hljs-keyword">final</span> java.lang.String _jspx_method = request.getMethod();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;OPTIONS&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;GET&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;POST&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;HEAD&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="hljs-string">&quot;JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>内置了一些对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext; <span class="hljs-comment">// 页面上下文</span><br>javax.servlet.http.HttpSession session = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// session</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletContext application; <span class="hljs-comment">// applicaiton</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletConfig config; <span class="hljs-comment">// config配置</span><br>javax.servlet.jsp.JspWriter out = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// out输出对象</span><br><span class="hljs-keyword">final</span> java.lang.Object page = <span class="hljs-keyword">this</span>; <span class="hljs-comment">// page:</span><br>javax.servlet.jsp.JspWriter _jspx_out = <span class="hljs-keyword">null</span>;<br>javax.servlet.jsp.PageContext _jspx_page_context = <span class="hljs-keyword">null</span>;<br>HttpServletRequest request <span class="hljs-comment">// 请求</span><br>HttpServletResponse response <span class="hljs-comment">// 响应</span><br></code></pre></td></tr></table></figure></li><li><p>输出页面前增加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>); <span class="hljs-comment">// 设置响应的页面类型</span><br>pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,<br>                                          <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-keyword">true</span>);<br>_jspx_page_context = pageContext; <br>application = pageContext.getServletContext();<br>config = pageContext.getServletConfig();<br>session = pageContext.getSession();<br>out = pageContext.getOut();<br>_jspx_out = out;<br></code></pre></td></tr></table></figure></li><li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p></li><li><p>JSP原理流程图</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/JSP_yuanli.png" alt="JSP原理流程图"></p></li></ol><h3 id="7-3-JSP基础语法和指令"><a href="#7-3-JSP基础语法和指令" class="headerlink" title="7.3 JSP基础语法和指令"></a>7.3 JSP基础语法和指令</h3><p>任何语言都有自己的语法，JAVA中有，JSP作为java技术的一种应用，它拥有一些自己扩充的语法，java所有语法它都支持。</p><h4 id="7-3-1-JSP表达式"><a href="#7-3-1-JSP表达式" class="headerlink" title="7.3.1 JSP表达式"></a><strong>7.3.1 JSP表达式</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>    JSP表达式作用：用来将程序的输出，输出到客户端<br>--%&gt;<br>&lt;%= <span class="hljs-keyword">new</span> java.util.Date()%&gt;<br></code></pre></td></tr></table></figure><h4 id="7-3-2-JSP脚本判断"><a href="#7-3-2-JSP脚本判断" class="headerlink" title="7.3.2 JSP脚本判断"></a><strong>7.3.2 JSP脚本判断</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>    JSP脚本片段<br>  --%&gt;<br>&lt;%<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>        sum += i;<br>    &#125;<br>    out.println(<span class="hljs-string">&quot;&lt;h1&gt;Sum=&quot;</span> + sum + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="7-3-3-脚本片段的再实现"><a href="#7-3-3-脚本片段的再实现" class="headerlink" title="7.3.3 脚本片段的再实现"></a><strong>7.3.3 脚本片段的再实现</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br>    out.println(x);<br>%&gt;<br>&lt;p&gt;这是一个jsp文档&lt;/p&gt;<br>&lt;%<br>    <span class="hljs-keyword">int</span> y = <span class="hljs-number">20</span>;<br>    out.println(y);<br>%&gt;<br><br>&lt;hr&gt;<br><br>&lt;%--在代码中嵌入HTML元素--%&gt;<br>&lt;%<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><br><br>    %&gt;<br>&lt;h1&gt;Hello，world &lt;%=i%&gt;&lt;/h1&gt;<br>&lt;%<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="7-3-4-JSP声明"><a href="#7-3-4-JSP声明" class="headerlink" title="7.3.4 JSP声明"></a><strong>7.3.4 JSP声明</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;Loading Servlet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 全局变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> globalVar = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 全局方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">atrox</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;进入了方法atrox！&quot;</span>);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>JSP声明：会被编译到JSP生成Java的类中！如下图所示：</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/JSP%E5%A3%B0%E6%98%8E.png" alt="JSP声明"></p><p>其他的，就会被生成到_jspService方法中！如下图所示：</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/JSP%E5%85%B6%E4%BB%96%E4%B8%9C%E8%A5%BF.png" alt="JSP其他东西"></p><p>在JSP中，嵌入java代码即可！</p><h4 id="7-3-5-EL表达式"><a href="#7-3-5-EL表达式" class="headerlink" title="7.3.5 EL表达式"></a><strong>7.3.5 EL表达式</strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;h1&gt;Hello，world $&#123;i&#125;&gt;&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h4 id="7-3-6-注释问题"><a href="#7-3-6-注释问题" class="headerlink" title="7.3.6 注释问题"></a>7.3.6 注释问题</h4><p>JSP的注释不会再客户端显示，而HTML就会！</p><p>在index.jsp中写上如下注释：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--我是jsp注释--%&gt;<br>&lt;!--我是html注释--&gt;<br></code></pre></td></tr></table></figure><p>在浏览器中右键点击查看源代码，发现html注释还在，所有的jsp注释全部都看不到，但是抓包仍然能看到jsp的注释。</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/jsp_comment.png" alt="客户端jsp注释不会显示"></p><h3 id="7-4-JSP指令"><a href="#7-4-JSP指令" class="headerlink" title="7.4 JSP指令"></a>7.4 JSP指令</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page args... %&gt;<br>&lt;%@ include<br>    <br>&lt;%--<span class="hljs-meta">@include</span>会将两个从外面引入的页面合二为一--%&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/header.jsp&quot;</span>%&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/footer.jsp&quot;</span>%&gt;<br><br>&lt;%--jsp标签--%&gt;<br>&lt;%--jsp:include：拼接页面，本质还是三个--%&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;common/header.jsp&quot;</span>/&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;common/footer.jsp&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h3 id="7-5-九大内置对象"><a href="#7-5-九大内置对象" class="headerlink" title="7.5 九大内置对象"></a>7.5 九大内置对象</h3><p>写了一个JSP页面，服务器一跑会变成一个.java文件，最后变成一个.class文件，变成class文件的时候会自动创建九个内置对象。</p><ul><li>PageContext  存东西</li><li>Resquest  存东西</li><li>Response</li><li>Session  存东西</li><li>Application【ServletContext】存东西</li><li>config【ServletConfig】</li><li>out</li><li>page ，不用</li><li>exception</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%<br>       <span class="hljs-comment">// 从底层到高层（作用域）：page-&gt;request-&gt;session-application</span><br>       <span class="hljs-comment">// 类比于JVM：双亲委派机制：</span><br>       pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-string">&quot;乔威1号&quot;</span>); <span class="hljs-comment">// 保存的数据只在一个页面中有效</span><br>       request.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>, <span class="hljs-string">&quot;乔威2号&quot;</span>); <span class="hljs-comment">// 保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>       session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>, <span class="hljs-string">&quot;乔威3号&quot;</span>); <span class="hljs-comment">// 保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>       application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>, <span class="hljs-string">&quot;乔威4号&quot;</span>); <span class="hljs-comment">// 保存的数据在服务器中有效，从打开服务器到关闭服务器</span><br>   %&gt;<br></code></pre></td></tr></table></figure><p>request：客户端向服务器发送请求，产生的数据，用户看玩就没用了，比如：新闻。</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完其他用户还可能用，比如：聊天数据；</p><h3 id="7-6-JSP标签、JSTL标签、EL表达式"><a href="#7-6-JSP标签、JSTL标签、EL表达式" class="headerlink" title="7.6 JSP标签、JSTL标签、EL表达式"></a>7.6 JSP标签、JSTL标签、EL表达式</h3><p>需要导包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--JSTL表达式的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--standard标签库--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-6-1-EL表达式："><a href="#7-6-1-EL表达式：" class="headerlink" title="7.6.1 EL表达式："></a>7.6.1 EL表达式：</h4><ul><li><strong>获取数据</strong></li><li><strong>执行运算</strong></li><li><strong>获取web开发的常用对象</strong></li><li><del>调用java方法</del></li></ul><h4 id="7-6-2-JSP标签"><a href="#7-6-2-JSP标签" class="headerlink" title="7.6.2 JSP标签"></a><strong>7.6.2 JSP标签</strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--&lt;jsp:include page=&quot;&quot;&gt;&lt;/jsp:include&gt;--%&gt;<br><br>&lt;jsp:forward page=<span class="hljs-string">&quot;jsptag2.jsp&quot;</span>&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;qiaowei&quot;</span>/&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;20&quot;</span>/&gt;<br>&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure><h4 id="7-6-3-JSTL表达式"><a href="#7-6-3-JSTL表达式" class="headerlink" title="7.6.3 JSTL表达式"></a><strong>7.6.3 JSTL表达式</strong></h4><p><strong>JSTL标签库的使用就是为了弥补HTML标签的不足；</strong>它自定义了许多的标签，可以供我们使用，标签的功能和java代码一样。</p><p><strong>格式化标签</strong></p><p><strong>SQL标签</strong></p><p><strong>XML标签</strong></p><p><strong>核心标签</strong>（掌握部分）</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/JSTL_core_tag.png" alt="JSTL核心标签"></p><p><strong>JSTL标签库使用步骤</strong>：</p><ul><li><p>引用对应的taglib</p></li><li><p>使用其中给的方法</p></li><li><p>在Tomcat中也需要手动引入jstl的包到lib目录下，否则会报错：JSTL解析错误</p><p><img src="/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/jstl_tomcat_lib.png" alt="手动导包"></p><p><strong>测试Demo</strong>：</p></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;h4&gt;if测试&lt;/h4&gt;<br><br>&lt;form action=<span class="hljs-string">&quot;coreif.jsp&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;%--<br>        EL表达式获取表单中的数据<br>        $&#123;param.参数名&#125;<br>    --%&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userName&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.userName&#125;&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/form&gt;<br><br>&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;param.userName==&#x27;admin&#x27;&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;isAdmin&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;管理员欢迎你!&quot;</span>/&gt;<br>&lt;/c:if&gt;<br>&lt;c:out value=<span class="hljs-string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/core_tag_demo.png" alt="测试效果"></p><p><strong>测试c:foreach</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    ArrayList&lt;String&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    people.add(<span class="hljs-string">&quot;张三&quot;</span>);<br>    people.add(<span class="hljs-string">&quot;李四&quot;</span>);<br>    people.add(<span class="hljs-string">&quot;王五&quot;</span>);<br>    people.add(<span class="hljs-string">&quot;赵六&quot;</span>);<br>    people.add(<span class="hljs-string">&quot;田七&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,people);<br>%&gt;<br><br>&lt;%--<br><span class="hljs-keyword">var</span>，每一次遍历出来的变量名<br>items，要遍历的对象本身<br>--%&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br>&lt;hr&gt;<br><br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;3&quot;</span> step=<span class="hljs-string">&quot;2&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/jstl_tag_foreach.png" alt="测试结果"></p><h2 id="8-JavaBean"><a href="#8-JavaBean" class="headerlink" title="8. JavaBean"></a>8. JavaBean</h2><p>通常把JavaBean称为实体类；</p><p>JavaBean有特定的写法：</p><ul><li>必须有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射 ORM；</p><p>ORM：对象关系映射</p><ul><li>表–&gt;类</li><li>字段–&gt;属性</li><li>行记录—&gt;对象</li></ul><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>乔威1号</td><td>10</td><td>1号路</td></tr><tr><td>2</td><td>乔威2号</td><td>20</td><td>2号路</td></tr><tr><td>3</td><td>乔威3号</td><td>30</td><td>3号路</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> People(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;乔威1号&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;1号路&quot;</span>);<br>    <span class="hljs-keyword">new</span> People(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;乔威2号&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;2号路&quot;</span>);<br>    <span class="hljs-keyword">new</span> People(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;乔威3号&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&quot;3号路&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-MVC三层架构"><a href="#9-MVC三层架构" class="headerlink" title="9.  MVC三层架构"></a>9.  MVC三层架构</h2><p>什么是MVC：Model View Controller 模型 视图 控制器</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/mvc.png" alt="早年的MVC架构"></p><p>用户直接访问控制层，控制层就可以直接操作数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">servlet--CRUD--数据库<br>弊端：程序十分臃肿、不利于维护 servlet的代码中:处理请求、响应、试图跳转、处理JDBC、处理业务代码、处理逻辑代码<br>    <br>架构：没有什么是加一层处理不了的！<br>程序员调用<br>    <br>JDBC<br>    <br>Mysql Oracle SqlServer...<br></code></pre></td></tr></table></figure><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/mvc_structure.png" alt="mvc架构"></p><p>Model</p><ul><li>业务处理：业务逻辑（Service）</li><li>数据持久层：CRUD（DAO）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求（a，form，img）</li></ul><p>Controller</p><ul><li><p>接受用户的请求：（req：请求参数、Session信息…）</p></li><li><p>交给业务层处理对应的代码</p></li><li><p>控制视图的跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登陆的参数，username，password）---&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;DAO层查询用户名和密码是否匹配---&gt;操作数据库<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-Fileter过滤器（重点）"><a href="#10-Fileter过滤器（重点）" class="headerlink" title="10. Fileter过滤器（重点）"></a>10. Fileter过滤器（重点）</h2><p>Filter：过滤器，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证</li></ul><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/filter.png" alt="过滤器流程"></p><h3 id="10-1-filter开发步骤"><a href="#10-1-filter开发步骤" class="headerlink" title="10.1 filter开发步骤"></a>10.1 filter开发步骤</h3><ol><li><p>导包</p></li><li><p>编写过滤器（此处以过滤中文编码为例子），实现Filter接口，重写对应方法</p><ul><li><p>导包不要错（选java.servlet下的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br></code></pre></td></tr></table></figure></li><li><p>编写过滤器的初始状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 销毁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>过滤器最终代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-comment">// 初始化：web服务器启动，就已经初始化了，随时等待过滤对象出现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Chain：链</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1.过滤器中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="hljs-comment">    2.必须要让过滤器继续通行  filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行前...&quot;</span>);<br>        <span class="hljs-comment">// 让我们的请求继续走，如果不写，程序到这里就被拦截停止</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行后...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 销毁：web服务器关闭的时候，过滤器会销毁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>在web.xml中配置Filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.atrox.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--只要是/servlet下的任何请求，都会经过这个过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="11-监听器"><a href="#11-监听器" class="headerlink" title="11.监听器"></a>11.监听器</h2><p>实现一个监听器的接口;（有N中）</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atrox.listener;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class="hljs-comment">// 统计网站在线人数：统计session</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpSessionListener</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建session监听</span><br>    <span class="hljs-comment">// 一旦创建一个Session就会触发一次这个事件！</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionCreated</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext ctx = httpSessionEvent.getSession().getServletContext();<br>        Integer onlineCount = (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onlineCount == <span class="hljs-keyword">null</span>) &#123;<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(count + <span class="hljs-number">1</span>);<br>        &#125;<br><br>        ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br>    &#125;<br><br>    <span class="hljs-comment">// 销毁session监听</span><br>    <span class="hljs-comment">// 一旦销毁Session就会触发一次这个事件！</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext ctx = httpSessionEvent.getSession().getServletContext();<br>        Integer onlineCount = (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onlineCount == <span class="hljs-keyword">null</span>) &#123;<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(count - <span class="hljs-number">1</span>);<br>        &#125;<br><br>        ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>, onlineCount);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Session销毁：</span><br><span class="hljs-comment">    1.手动销毁 getSession().invalidate()</span><br><span class="hljs-comment">    2.自动销毁 web.xml中sessionConfig标签</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>web.xml中注册监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--注册监听器--&gt;<br>    &lt;listener&gt;<br>    &lt;listener-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">atrox</span>.<span class="hljs-title">listener</span>.<span class="hljs-title">OnlineCountListener</span>&lt;/<span class="hljs-title">listener</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">        &lt;/<span class="hljs-title">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>看情况是否使用</p></li></ol><h2 id="12-过滤器、监听器常见应用"><a href="#12-过滤器、监听器常见应用" class="headerlink" title="12. 过滤器、监听器常见应用"></a>12. 过滤器、监听器常见应用</h2><h3 id="12-1-监听器：GUI编程中经常使用"><a href="#12-1-监听器：GUI编程中经常使用" class="headerlink" title="12.1 监听器：GUI编程中经常使用"></a>12.1 监听器：GUI编程中经常使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPanel</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Frame frame = <span class="hljs-keyword">new</span> Frame(<span class="hljs-string">&quot;圣诞节快乐&quot;</span>); <span class="hljs-comment">// 新建一个窗体</span><br>        Panel panel = <span class="hljs-keyword">new</span> Panel(<span class="hljs-keyword">null</span>); <span class="hljs-comment">// 面板</span><br>        frame.setLayout(<span class="hljs-keyword">null</span>); <span class="hljs-comment">// 设置窗体的布局</span><br><br>        frame.setBounds(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>        frame.setBackground(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)); <span class="hljs-comment">// 设置背景颜色</span><br><br>        panel.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>        frame.setBackground(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)); <span class="hljs-comment">// 设置背景颜色</span><br><br>        frame.add(panel);<br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">// 监听事件，监听关闭时间</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowListener() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowOpened</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;打开&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;关闭ing&quot;</span>);<br>                System.out.println(<span class="hljs-number">0</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosed</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;关闭ed&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowIconified</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br><br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowDeiconified</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br><br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowActivated</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;激活&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowDeactivated</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;关闭ed&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-2-用户登录拦截"><a href="#12-2-用户登录拦截" class="headerlink" title="12.2 用户登录拦截"></a>12.2 用户登录拦截</h3><p>用户登录成功之后才能进入主页，用户注销后就不能进入主页了！</p><ol><li><p>用户登录之后，向Session中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>    HttpServletRequest request = (HttpServletRequest) servletRequest;<br>    HttpServletResponse response = (HttpServletResponse) servletResponse;<br><br>    Object user_session = request.getSession().getAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>);<br>    <span class="hljs-keyword">if</span> (user_session == <span class="hljs-keyword">null</span>) &#123;<br>        response.sendRedirect(request.getContextPath()+<span class="hljs-string">&quot;/error.jsp&quot;</span>);<br>    &#125;<br><br>    filterChain.doFilter(servletRequest,servletResponse);<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="13-JDBC"><a href="#13-JDBC" class="headerlink" title="13.JDBC"></a>13.JDBC</h2><p>什么是JDBC：Java连接数据库</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/JDBC.png" alt="JDBC"></p><p>需要jar包的支持：</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql.connecter-java…连接驱动（必须要导入）</li></ul><h3 id="13-1-实验环境搭建"><a href="#13-1-实验环境搭建" class="headerlink" title="13.1 实验环境搭建"></a><strong>13.1 实验环境搭建</strong></h3><ul><li><p>导入数据库依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mysql的驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>IDEA中连接数据库</p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/idea_connect_db1.png" alt="连接数据库第一步"></p></li></ul><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/idea_connect_db2.png" alt="连接数据库第二步"></p><p><img src="/2020/12/20/JavaWeb%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94/idea_connect_db3.png" alt="连接数据库第三步"></p><h3 id="13-2-JDBC固定步骤"><a href="#13-2-JDBC固定步骤" class="headerlink" title="13.2 JDBC固定步骤"></a>13.2 JDBC固定步骤</h3><ol><li><p>加载驱动</p></li><li><p>连接数据库，代表数据库</p></li><li><p>向数据库发送SQL的对象Statement：CRUD</p></li><li><p>编写SQL语句</p></li><li><p>执行查询SQL，返回一个ResultSet结果集</p></li><li><p>关闭连接，释放资源，先开后关</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestJdbc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">// 配置信息</span><br>        <span class="hljs-comment">// useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码问题</span><br>        String url= <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT&quot;</span>;<br>        String username = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;zuiweizhiming666&quot;</span>;<br><br>        <span class="hljs-comment">// 1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">// 2.连接数据库,代表数据库</span><br>        Connection connection = DriverManager.getConnection(url, username, password);<br>        <span class="hljs-comment">// 3.向数据库发送SQL的对象Statement：CRUD</span><br>        Statement statement = connection.createStatement();<br>        <span class="hljs-comment">// 4.编写SQL</span><br>        String sql = <span class="hljs-string">&quot;select * from users&quot;</span>;<br>        <span class="hljs-comment">// 5.执行查询SQL，返回一个ResultSet结果集</span><br>        ResultSet resultSet = statement.executeQuery(sql);<br><br>        <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;id=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;name&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;password=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;password&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;email=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-comment">// 6.关闭连接，释放资源，先开后关</span><br>        resultSet.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-3-预编译SQL"><a href="#13-3-预编译SQL" class="headerlink" title="13.3 预编译SQL"></a>13.3 预编译SQL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestJDBC2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">// 配置信息</span><br>        <span class="hljs-comment">// useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码问题</span><br>        String url= <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT&quot;</span>;<br>        String username = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;zuiweizhiming666&quot;</span>;<br><br>        <span class="hljs-comment">// 1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">// 2.连接数据库,代表数据库</span><br>        Connection connection = DriverManager.getConnection(url, username, password);<br>        <span class="hljs-comment">// 3.编写SQL</span><br>        String sql = <span class="hljs-string">&quot;insert into users(id,name,password,email,birthday) values (?,?,?,?,?)&quot;</span>;<br>        <span class="hljs-comment">// 4.预编译</span><br>        PreparedStatement preparedStatement = connection.prepareStatement(sql);<br>        preparedStatement.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">// 给第1个占位符？ 的值赋值为1</span><br>        preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;qiaowei&quot;</span>); <span class="hljs-comment">// 给第2个占位符？ 的值赋值为qiaowei</span><br>        preparedStatement.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;123456&quot;</span>); <span class="hljs-comment">// 给第3个占位符？ 的值赋值为123456</span><br>        preparedStatement.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;qiaowei@qq.com&quot;</span>); <span class="hljs-comment">// 给第4个占位符？ 的值赋值为qiaowei@qq.com</span><br>        preparedStatement.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> Date(System.currentTimeMillis())); <span class="hljs-comment">// 给第5个占位符？ 的值赋值为当前时间</span><br>        <span class="hljs-comment">// 5.执行SQL</span><br>        <span class="hljs-keyword">int</span> i = preparedStatement.executeUpdate();<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 6.关闭连接，释放资源，先开后关</span><br>      reparedStatement.close();<br>      connection.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="13-4-事务"><a href="#13-4-事务" class="headerlink" title="13.4 事务"></a>13.4 事务</h3><p>要么都成功，要么都失败！</p><p>ACID原则：保证数据的安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">开启事务<br>事务提交 commit()<br>事务回滚 rollback()<br>关闭事务<br>    <br>转账：<br>A：<span class="hljs-number">1000</span><br>B：<span class="hljs-number">1000</span><br>    <br>A(<span class="hljs-number">900</span>) ---<span class="hljs-number">100</span>---&gt; B(<span class="hljs-number">1100</span>)<br></code></pre></td></tr></table></figure><p><strong>junit单元测试</strong></p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简单使用</p><p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 乔威</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-12-25 21:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestJDBC3</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置信息</span><br>        <span class="hljs-comment">// useUnicode=true&amp;characterEncoding= utf-8 解决中文乱码问题</span><br>        String url= <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT&quot;</span>;<br>        String username = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;zuiweizhiming666&quot;</span>;<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 1.加载驱动</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">// 2.连接数据库,代表数据库</span><br>            connection = DriverManager.getConnection(url, username, password);<br><br>            <span class="hljs-comment">// 3.同志数据库开启事务,false是开启，true是关闭</span><br>            connection.setAutoCommit(<span class="hljs-keyword">false</span>);<br><br>            String sql1 = <span class="hljs-string">&quot;update account set money = money - 100 where name = &#x27;A&#x27;&quot;</span>;<br>            connection.prepareStatement(sql1).executeUpdate();<br><br>            <span class="hljs-comment">// 4.制造错误</span><br><span class="hljs-comment">//            int i = 1 / 0;</span><br><br>            String sql2 = <span class="hljs-string">&quot;update account set money = money + 100 where name = &#x27;B&#x27;&quot;</span>;<br>            connection.prepareStatement(sql2).executeUpdate();<br><br>            connection.commit(); <span class="hljs-comment">//以上两条SQL都提交成功了，就提交事务！</span><br>            System.out.println(<span class="hljs-string">&quot;success&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 如果出现异常，就通知数据库回滚害死我</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.rollback();<br>                System.out.println(<span class="hljs-string">&quot;error！&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue——-渐进式框架学习</title>
    <link href="/posts/vue%E2%80%94%E2%80%94-%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <url>/posts/vue%E2%80%94%E2%80%94-%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
